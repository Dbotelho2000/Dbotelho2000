
dtADCSimple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004934  08004934  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004934  08004934  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004934  08004934  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004938  08004938  00014938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800493c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08004948  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004948  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1f2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002691  00000000  00000000  0002f226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f65  00000000  00000000  00032e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f178  00000000  00000000  00048d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891d5  00000000  00000000  00057eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e10c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002618  00000000  00000000  000e1114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004894 	.word	0x08004894

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004894 	.word	0x08004894

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	230c      	movs	r3, #12
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f004 fa42 	bl	8004884 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000400:	4b30      	ldr	r3, [pc, #192]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000402:	4a31      	ldr	r2, [pc, #196]	; (80004c8 <MX_ADC1_Init+0xdc>)
 8000404:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000406:	4b2f      	ldr	r3, [pc, #188]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	05d2      	lsls	r2, r2, #23
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800040e:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800041a:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <MX_ADC1_Init+0xd8>)
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0612      	lsls	r2, r2, #24
 8000420:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000422:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000424:	2208      	movs	r2, #8
 8000426:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <MX_ADC1_Init+0xd8>)
 800042a:	2200      	movs	r2, #0
 800042c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800042e:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000430:	2200      	movs	r2, #0
 8000432:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000434:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000436:	2201      	movs	r2, #1
 8000438:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800043a:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <MX_ADC1_Init+0xd8>)
 800043c:	2201      	movs	r2, #1
 800043e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000440:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000446:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000448:	2200      	movs	r2, #0
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_ADC1_Init+0xd8>)
 800044e:	222c      	movs	r2, #44	; 0x2c
 8000450:	2101      	movs	r1, #1
 8000452:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0152      	lsls	r2, r2, #5
 800045a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_ADC1_Init+0xd8>)
 800045e:	2203      	movs	r2, #3
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000464:	223c      	movs	r2, #60	; 0x3c
 8000466:	2100      	movs	r1, #0
 8000468:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_ADC1_Init+0xd8>)
 800046c:	2200      	movs	r2, #0
 800046e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000470:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fd56 	bl	8000f24 <HAL_ADC_Init>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800047c:	f000 f9e6 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2201      	movs	r2, #1
 800048a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048c:	1d3a      	adds	r2, r7, #4
 800048e:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <MX_ADC1_Init+0xd8>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f001 f8e2 	bl	800165c <HAL_ADC_ConfigChannel>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800049c:	f000 f9d6 	bl	800084c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <MX_ADC1_Init+0xe0>)
 80004a4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a6:	1d3a      	adds	r2, r7, #4
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_ADC1_Init+0xd8>)
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 f8d5 	bl	800165c <HAL_ADC_ConfigChannel>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80004b6:	f000 f9c9 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	20000028 	.word	0x20000028
 80004c8:	40012400 	.word	0x40012400
 80004cc:	04000002 	.word	0x04000002

080004d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b091      	sub	sp, #68	; 0x44
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	232c      	movs	r3, #44	; 0x2c
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	0018      	movs	r0, r3
 80004de:	2314      	movs	r3, #20
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f004 f9ce 	bl	8004884 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e8:	2410      	movs	r4, #16
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	0018      	movs	r0, r3
 80004ee:	231c      	movs	r3, #28
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f004 f9c6 	bl	8004884 <memset>
  if(adcHandle->Instance==ADC1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a39      	ldr	r2, [pc, #228]	; (80005e4 <HAL_ADC_MspInit+0x114>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d16c      	bne.n	80005dc <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2280      	movs	r2, #128	; 0x80
 8000506:	01d2      	lsls	r2, r2, #7
 8000508:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	f002 ff8a 	bl	800342c <HAL_RCCEx_PeriphCLKConfig>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800051c:	f000 f996 	bl	800084c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000520:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <HAL_ADC_MspInit+0x118>)
 8000522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000524:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <HAL_ADC_MspInit+0x118>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0349      	lsls	r1, r1, #13
 800052a:	430a      	orrs	r2, r1
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
 800052e:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <HAL_ADC_MspInit+0x118>)
 8000530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	035b      	lsls	r3, r3, #13
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <HAL_ADC_MspInit+0x118>)
 800053e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <HAL_ADC_MspInit+0x118>)
 8000542:	2101      	movs	r1, #1
 8000544:	430a      	orrs	r2, r1
 8000546:	635a      	str	r2, [r3, #52]	; 0x34
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <HAL_ADC_MspInit+0x118>)
 800054a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054c:	2201      	movs	r2, #1
 800054e:	4013      	ands	r3, r2
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000554:	212c      	movs	r1, #44	; 0x2c
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2203      	movs	r2, #3
 800055a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2203      	movs	r2, #3
 8000560:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	187a      	adds	r2, r7, r1
 800056a:	23a0      	movs	r3, #160	; 0xa0
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f002 f87f 	bl	8002674 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <HAL_ADC_MspInit+0x120>)
 800057a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 800057e:	2205      	movs	r2, #5
 8000580:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	00d2      	lsls	r2, r2, #3
 80005a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 80005a6:	2220      	movs	r2, #32
 80005a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fd40 	bl	8002038 <HAL_DMA_Init>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80005bc:	f000 f946 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 80005c4:	651a      	str	r2, [r3, #80]	; 0x50
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_ADC_MspInit+0x11c>)
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	200c      	movs	r0, #12
 80005d2:	f001 fcff 	bl	8001fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80005d6:	200c      	movs	r0, #12
 80005d8:	f001 fd11 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b011      	add	sp, #68	; 0x44
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40012400 	.word	0x40012400
 80005e8:	40021000 	.word	0x40021000
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	40020008 	.word	0x40020008

080005f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_DMA_Init+0x38>)
 80005fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_DMA_Init+0x38>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	639a      	str	r2, [r3, #56]	; 0x38
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_DMA_Init+0x38>)
 8000608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2009      	movs	r0, #9
 8000618:	f001 fcdc 	bl	8001fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800061c:	2009      	movs	r0, #9
 800061e:	f001 fcee 	bl	8001ffe <HAL_NVIC_EnableIRQ>

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	40021000 	.word	0x40021000

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	240c      	movs	r4, #12
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f004 f91f 	bl	8004884 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_GPIO_Init+0xb4>)
 8000664:	2102      	movs	r1, #2
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_GPIO_Init+0xb4>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066e:	2202      	movs	r2, #2
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_GPIO_Init+0xb8>)
 8000678:	2200      	movs	r2, #0
 800067a:	2130      	movs	r1, #48	; 0x30
 800067c:	0018      	movs	r0, r3
 800067e:	f002 f95d 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2210      	movs	r2, #16
 8000686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2288      	movs	r2, #136	; 0x88
 800068c:	0352      	lsls	r2, r2, #13
 800068e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2201      	movs	r2, #1
 8000694:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	193a      	adds	r2, r7, r4
 8000698:	23a0      	movs	r3, #160	; 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 ffe8 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2230      	movs	r2, #48	; 0x30
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <MX_GPIO_Init+0xb8>)
 80006c2:	0019      	movs	r1, r3
 80006c4:	0010      	movs	r0, r2
 80006c6:	f001 ffd5 	bl	8002674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2007      	movs	r0, #7
 80006d0:	f001 fc80 	bl	8001fd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006d4:	2007      	movs	r0, #7
 80006d6:	f001 fc92 	bl	8001ffe <HAL_NVIC_EnableIRQ>

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b009      	add	sp, #36	; 0x24
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000
 80006e8:	50000400 	.word	0x50000400

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 fa0c 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f836 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff ff9a 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fc:	f000 f926 	bl	800094c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000700:	f7ff ff78 	bl	80005f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f7ff fe72 	bl	80003ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK){
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <main+0x68>)
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fb14 	bl	8001d38 <HAL_ADCEx_Calibration_Start>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <main+0x2c>
	  Error_Handler();
 8000714:	f000 f89a 	bl	800084c <Error_Handler>
  }

  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCdata, (uint32_t)2) != HAL_OK){
 8000718:	490f      	ldr	r1, [pc, #60]	; (8000758 <main+0x6c>)
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <main+0x68>)
 800071c:	2202      	movs	r2, #2
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fdde 	bl	80012e0 <HAL_ADC_Start_DMA>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d00a      	beq.n	800073e <main+0x52>
	  Error_Handler();
 8000728:	f000 f890 	bl	800084c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	while(!Userbutton){
 800072c:	e007      	b.n	800073e <main+0x52>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <main+0x70>)
 8000730:	2110      	movs	r1, #16
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f91f 	bl	8002976 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000738:	2064      	movs	r0, #100	; 0x64
 800073a:	f000 fa6d 	bl	8000c18 <HAL_Delay>
	while(!Userbutton){
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <main+0x74>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f3      	beq.n	800072e <main+0x42>
	}

	HAL_Delay(100);
 8000746:	2064      	movs	r0, #100	; 0x64
 8000748:	f000 fa66 	bl	8000c18 <HAL_Delay>

	Userbutton = 0;
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <main+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	while(!Userbutton){
 8000752:	e7f4      	b.n	800073e <main+0x52>
 8000754:	20000028 	.word	0x20000028
 8000758:	200000ec 	.word	0x200000ec
 800075c:	50000400 	.word	0x50000400
 8000760:	200000e8 	.word	0x200000e8

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b093      	sub	sp, #76	; 0x4c
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	2414      	movs	r4, #20
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0018      	movs	r0, r3
 8000770:	2334      	movs	r3, #52	; 0x34
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f004 f885 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	0018      	movs	r0, r3
 800077e:	2310      	movs	r3, #16
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f004 f87e 	bl	8004884 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	0018      	movs	r0, r3
 800078e:	f002 f941 	bl	8002a14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2202      	movs	r2, #2
 8000796:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0052      	lsls	r2, r2, #1
 800079e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2240      	movs	r2, #64	; 0x40
 80007aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 f979 	bl	8002aac <HAL_RCC_OscConfig>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007be:	f000 f845 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2100      	movs	r1, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f002 fc7a 	bl	80030d8 <HAL_RCC_ClockConfig>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007e8:	f000 f830 	bl	800084c <Error_Handler>
  }
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b013      	add	sp, #76	; 0x4c
 80007f2:	bd90      	pop	{r4, r7, pc}

080007f4 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	0002      	movs	r2, r0
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_4){
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b10      	cmp	r3, #16
 8000806:	d108      	bne.n	800081a <HAL_GPIO_EXTI_Rising_Callback+0x26>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	0018      	movs	r0, r3
 8000810:	f002 f894 	bl	800293c <HAL_GPIO_WritePin>
	  Userbutton = 1;
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]
  }
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	50000400 	.word	0x50000400
 8000828:	200000e8 	.word	0x200000e8

0800082c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	0018      	movs	r0, r3
 800083c:	f002 f87e 	bl	800293c <HAL_GPIO_WritePin>
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}
 8000848:	50000400 	.word	0x50000400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <Error_Handler+0x18>)
 8000856:	2201      	movs	r2, #1
 8000858:	2110      	movs	r1, #16
 800085a:	0018      	movs	r0, r3
 800085c:	f002 f86e 	bl	800293c <HAL_GPIO_WritePin>
 8000860:	e7f8      	b.n	8000854 <Error_Handler+0x8>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	50000400 	.word	0x50000400

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_MspInit+0x4c>)
 8000870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	641a      	str	r2, [r3, #64]	; 0x40
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_MspInit+0x4c>)
 8000888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_MspInit+0x4c>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0549      	lsls	r1, r1, #21
 8000890:	430a      	orrs	r2, r1
 8000892:	63da      	str	r2, [r3, #60]	; 0x3c
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_MspInit+0x4c>)
 8000896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	055b      	lsls	r3, r3, #21
 800089c:	4013      	ands	r3, r2
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008a2:	23c0      	movs	r3, #192	; 0xc0
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 f9da 	bl	8000c60 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f980 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80008ea:	2010      	movs	r0, #16
 80008ec:	f002 f85e 	bl	80029ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <DMA1_Channel1_IRQHandler+0x14>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fd76 	bl	80023f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	2000008c 	.word	0x2000008c

08000910 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <ADC1_IRQHandler+0x14>)
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fd70 	bl	80013fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000028 	.word	0x20000028

08000928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <USART2_IRQHandler+0x14>)
 800092e:	0018      	movs	r0, r3
 8000930:	f002 ff06 	bl	8003740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	200000f0 	.word	0x200000f0

08000940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000952:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <MX_USART2_UART_Init+0x98>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000958:	22e1      	movs	r2, #225	; 0xe1
 800095a:	0252      	lsls	r2, r2, #9
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 8000996:	0018      	movs	r0, r3
 8000998:	f002 fe7c 	bl	8003694 <HAL_UART_Init>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009a0:	f7ff ff54 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f003 fe67 	bl	800467c <HAL_UARTEx_SetTxFifoThreshold>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009b2:	f7ff ff4b 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009b8:	2100      	movs	r1, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 fe9e 	bl	80046fc <HAL_UARTEx_SetRxFifoThreshold>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009c4:	f7ff ff42 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x94>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f003 fe1c 	bl	8004608 <HAL_UARTEx_DisableFifoMode>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f7ff ff3a 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200000f0 	.word	0x200000f0
 80009e4:	40004400 	.word	0x40004400

080009e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b091      	sub	sp, #68	; 0x44
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	232c      	movs	r3, #44	; 0x2c
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f003 ff42 	bl	8004884 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	2410      	movs	r4, #16
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	0018      	movs	r0, r3
 8000a06:	231c      	movs	r3, #28
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f003 ff3a 	bl	8004884 <memset>
  if(uartHandle->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <HAL_UART_MspInit+0xc8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d146      	bne.n	8000aa8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 fcff 	bl	800342c <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a32:	f7ff ff0b 	bl	800084c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_UART_MspInit+0xcc>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_UART_MspInit+0xcc>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	0289      	lsls	r1, r1, #10
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_UART_MspInit+0xcc>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	029b      	lsls	r3, r3, #10
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0xcc>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0xcc>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0xcc>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a6a:	212c      	movs	r1, #44	; 0x2c
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2202      	movs	r2, #2
 8000a76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2201      	movs	r2, #1
 8000a88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	187a      	adds	r2, r7, r1
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 fdee 	bl	8002674 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	201c      	movs	r0, #28
 8000a9e:	f001 fa99 	bl	8001fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa2:	201c      	movs	r0, #28
 8000aa4:	f001 faab 	bl	8001ffe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b011      	add	sp, #68	; 0x44
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f7ff ff40 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f003 fea9 	bl	800483c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000aea:	f7ff fdff 	bl	80006ec <main>

08000aee <LoopForever>:

LoopForever:
  b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
   ldr   r0, =_estack
 8000af0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000afc:	0800493c 	.word	0x0800493c
  ldr r2, =_sbss
 8000b00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b04:	20000184 	.word	0x20000184

08000b08 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x3c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Init+0x3c>)
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	0049      	lsls	r1, r1, #1
 8000b22:	430a      	orrs	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b26:	2003      	movs	r0, #3
 8000b28:	f000 f810 	bl	8000b4c <HAL_InitTick>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
 8000b36:	e001      	b.n	8000b3c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe96 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	230f      	movs	r3, #15
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_InitTick+0x88>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d02b      	beq.n	8000bbc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_InitTick+0x8c>)
 8000b66:	681c      	ldr	r4, [r3, #0]
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_InitTick+0x88>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	23fa      	movs	r3, #250	; 0xfa
 8000b70:	0098      	lsls	r0, r3, #2
 8000b72:	f7ff fac5 	bl	8000100 <__udivsi3>
 8000b76:	0003      	movs	r3, r0
 8000b78:	0019      	movs	r1, r3
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f7ff fac0 	bl	8000100 <__udivsi3>
 8000b80:	0003      	movs	r3, r0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 fa4b 	bl	800201e <HAL_SYSTICK_Config>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d112      	bne.n	8000bb2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d80a      	bhi.n	8000ba8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 fa1a 	bl	8001fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_InitTick+0x90>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e00d      	b.n	8000bc4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e008      	b.n	8000bc4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e003      	b.n	8000bc4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	781b      	ldrb	r3, [r3, #0]
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b005      	add	sp, #20
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	001a      	movs	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	18d2      	adds	r2, r2, r3
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000180 	.word	0x20000180

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000180 	.word	0x20000180

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	0003      	movs	r3, r0
 8000c26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	001a      	movs	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	0002      	movs	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20000008 	.word	0x20000008

08000c60 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	0019      	movs	r1, r3
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40010000 	.word	0x40010000
 8000c88:	fffff9ff 	.word	0xfffff9ff

08000c8c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000c9c:	401a      	ands	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	fe3fffff 	.word	0xfe3fffff

08000cb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	23e0      	movs	r3, #224	; 0xe0
 8000cc2:	045b      	lsls	r3, r3, #17
 8000cc4:	4013      	ands	r3, r2
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	2107      	movs	r1, #7
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	000a      	movs	r2, r1
 8000cea:	43d2      	mvns	r2, r2
 8000cec:	401a      	ands	r2, r3
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	4099      	lsls	r1, r3
 8000cf8:	000b      	movs	r3, r1
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b004      	add	sp, #16
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	23c0      	movs	r3, #192	; 0xc0
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	211f      	movs	r1, #31
 8000d3e:	400a      	ands	r2, r1
 8000d40:	210f      	movs	r1, #15
 8000d42:	4091      	lsls	r1, r2
 8000d44:	000a      	movs	r2, r1
 8000d46:	43d2      	mvns	r2, r2
 8000d48:	401a      	ands	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	0e9b      	lsrs	r3, r3, #26
 8000d4e:	210f      	movs	r1, #15
 8000d50:	4019      	ands	r1, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	201f      	movs	r0, #31
 8000d56:	4003      	ands	r3, r0
 8000d58:	4099      	lsls	r1, r3
 8000d5a:	000b      	movs	r3, r1
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b004      	add	sp, #16
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	035b      	lsls	r3, r3, #13
 8000d7c:	0b5b      	lsrs	r3, r3, #13
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	0352      	lsls	r2, r2, #13
 8000d9e:	0b52      	lsrs	r2, r2, #13
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4013      	ands	r3, r2
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	68ba      	ldr	r2, [r7, #8]
 8000dda:	0212      	lsls	r2, r2, #8
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	021b      	lsls	r3, r3, #8
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	400b      	ands	r3, r1
 8000de8:	4904      	ldr	r1, [pc, #16]	; (8000dfc <LL_ADC_SetChannelSamplingTime+0x34>)
 8000dea:	400b      	ands	r3, r1
 8000dec:	431a      	orrs	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b004      	add	sp, #16
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	07ffff00 	.word	0x07ffff00

08000e00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	0552      	lsls	r2, r2, #21
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	6fffffe8 	.word	0x6fffffe8

08000e28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	055b      	lsls	r3, r3, #21
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	055b      	lsls	r3, r3, #21
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d101      	bne.n	8000e46 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <LL_ADC_Enable+0x20>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2201      	movs	r2, #1
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	7fffffe8 	.word	0x7fffffe8

08000e74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <LL_ADC_Disable+0x20>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	2202      	movs	r2, #2
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	7fffffe8 	.word	0x7fffffe8

08000e98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <LL_ADC_IsEnabled+0x18>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <LL_ADC_IsEnabled+0x1a>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d101      	bne.n	8000ed2 <LL_ADC_IsDisableOngoing+0x18>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <LL_ADC_IsDisableOngoing+0x1a>
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}

08000edc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <LL_ADC_REG_StartConversion+0x20>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	2204      	movs	r2, #4
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	7fffffe8 	.word	0x7fffffe8

08000f00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d101      	bne.n	8000f18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f2c:	231f      	movs	r3, #31
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e1b1      	b.n	80012ae <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10a      	bne.n	8000f68 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fabb 	bl	80004d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2254      	movs	r2, #84	; 0x54
 8000f64:	2100      	movs	r1, #0
 8000f66:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ff5b 	bl	8000e28 <LL_ADC_IsInternalRegulatorEnabled>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d115      	bne.n	8000fa2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f7ff ff40 	bl	8000e00 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f80:	4bcd      	ldr	r3, [pc, #820]	; (80012b8 <HAL_ADC_Init+0x394>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	49cd      	ldr	r1, [pc, #820]	; (80012bc <HAL_ADC_Init+0x398>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff f8ba 	bl	8000100 <__udivsi3>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	3301      	adds	r3, #1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f94:	e002      	b.n	8000f9c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f9      	bne.n	8000f96 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f7ff ff3e 	bl	8000e28 <LL_ADC_IsInternalRegulatorEnabled>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d10f      	bne.n	8000fd0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	2210      	movs	r2, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000fc8:	231f      	movs	r3, #31
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ff93 	bl	8000f00 <LL_ADC_REG_IsConversionOngoing>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	2210      	movs	r2, #16
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d000      	beq.n	8000fea <HAL_ADC_Init+0xc6>
 8000fe8:	e154      	b.n	8001294 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d000      	beq.n	8000ff2 <HAL_ADC_Init+0xce>
 8000ff0:	e150      	b.n	8001294 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	4ab2      	ldr	r2, [pc, #712]	; (80012c0 <HAL_ADC_Init+0x39c>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff ff46 	bl	8000e98 <LL_ADC_IsEnabled>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d156      	bne.n	80010be <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2218      	movs	r2, #24
 8001018:	4393      	bics	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	0f9b      	lsrs	r3, r3, #30
 800102e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001034:	4313      	orrs	r3, r2
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	223c      	movs	r2, #60	; 0x3c
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d111      	bne.n	800106a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	0f9b      	lsrs	r3, r3, #30
 800104c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001052:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001058:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800105e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	4313      	orrs	r3, r2
 8001064:	2201      	movs	r2, #1
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a94      	ldr	r2, [pc, #592]	; (80012c4 <HAL_ADC_Init+0x3a0>)
 8001072:	4013      	ands	r3, r2
 8001074:	0019      	movs	r1, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	430a      	orrs	r2, r1
 800107e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	23c0      	movs	r3, #192	; 0xc0
 8001086:	061b      	lsls	r3, r3, #24
 8001088:	429a      	cmp	r2, r3
 800108a:	d018      	beq.n	80010be <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	05db      	lsls	r3, r3, #23
 8001094:	429a      	cmp	r2, r3
 8001096:	d012      	beq.n	80010be <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	061b      	lsls	r3, r3, #24
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d00c      	beq.n	80010be <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <HAL_ADC_Init+0x3a4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a88      	ldr	r2, [pc, #544]	; (80012cc <HAL_ADC_Init+0x3a8>)
 80010aa:	4013      	ands	r3, r2
 80010ac:	0019      	movs	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	23f0      	movs	r3, #240	; 0xf0
 80010b4:	039b      	lsls	r3, r3, #14
 80010b6:	401a      	ands	r2, r3
 80010b8:	4b83      	ldr	r3, [pc, #524]	; (80012c8 <HAL_ADC_Init+0x3a4>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e1b      	ldrb	r3, [r3, #24]
 80010c2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7e5b      	ldrb	r3, [r3, #25]
 80010c8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7e9b      	ldrb	r3, [r3, #26]
 80010d0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_ADC_Init+0x1be>
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	015b      	lsls	r3, r3, #5
 80010e0:	e000      	b.n	80010e4 <HAL_ADC_Init+0x1c0>
 80010e2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010e4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010ea:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da04      	bge.n	80010fe <HAL_ADC_Init+0x1da>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	e001      	b.n	8001102 <HAL_ADC_Init+0x1de>
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8001102:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	212c      	movs	r1, #44	; 0x2c
 8001108:	5c5b      	ldrb	r3, [r3, r1]
 800110a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800110c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2220      	movs	r2, #32
 8001118:	5c9b      	ldrb	r3, [r3, r2]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d115      	bne.n	800114a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7e9b      	ldrb	r3, [r3, #26]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	0252      	lsls	r2, r2, #9
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	e00b      	b.n	800114a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	2220      	movs	r2, #32
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001142:	2201      	movs	r2, #1
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00a      	beq.n	8001168 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001156:	23e0      	movs	r3, #224	; 0xe0
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001160:	4313      	orrs	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_ADC_Init+0x3ac>)
 8001170:	4013      	ands	r3, r2
 8001172:	0019      	movs	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	430a      	orrs	r2, r1
 800117c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <HAL_ADC_Init+0x3b0>)
 8001186:	4013      	ands	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	430a      	orrs	r2, r1
 8001192:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119c:	001a      	movs	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	f7ff fd95 	bl	8000cce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ac:	494a      	ldr	r1, [pc, #296]	; (80012d8 <HAL_ADC_Init+0x3b4>)
 80011ae:	001a      	movs	r2, r3
 80011b0:	f7ff fd8d 	bl	8000cce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2110      	movs	r1, #16
 80011c8:	4249      	negs	r1, r1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
 80011ce:	e03a      	b.n	8001246 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	039b      	lsls	r3, r3, #14
 80011d8:	429a      	cmp	r2, r3
 80011da:	d134      	bne.n	8001246 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	e00c      	b.n	80011fc <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	40da      	lsrs	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	220f      	movs	r2, #15
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	d006      	beq.n	8001204 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	3301      	adds	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b07      	cmp	r3, #7
 8001200:	d9ef      	bls.n	80011e2 <HAL_ADC_Init+0x2be>
 8001202:	e000      	b.n	8001206 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8001204:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d109      	bne.n	8001220 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2110      	movs	r1, #16
 8001218:	4249      	negs	r1, r1
 800121a:	430a      	orrs	r2, r1
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
 800121e:	e012      	b.n	8001246 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	3b01      	subs	r3, #1
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	221c      	movs	r2, #28
 8001230:	4013      	ands	r3, r2
 8001232:	2210      	movs	r2, #16
 8001234:	4252      	negs	r2, r2
 8001236:	409a      	lsls	r2, r3
 8001238:	0011      	movs	r1, r2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_ADC_Init+0x3b8>)
 800124e:	4013      	ands	r3, r2
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	429a      	cmp	r2, r3
 8001254:	d10b      	bne.n	800126e <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001260:	2203      	movs	r2, #3
 8001262:	4393      	bics	r3, r2
 8001264:	2201      	movs	r2, #1
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800126c:	e01c      	b.n	80012a8 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	2212      	movs	r2, #18
 8001274:	4393      	bics	r3, r2
 8001276:	2210      	movs	r2, #16
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001282:	2201      	movs	r2, #1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800128a:	231f      	movs	r3, #31
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001292:	e009      	b.n	80012a8 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001298:	2210      	movs	r2, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012a0:	231f      	movs	r3, #31
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80012a8:	231f      	movs	r3, #31
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	781b      	ldrb	r3, [r3, #0]
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b008      	add	sp, #32
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000000 	.word	0x20000000
 80012bc:	00030d40 	.word	0x00030d40
 80012c0:	fffffefd 	.word	0xfffffefd
 80012c4:	1ffffc02 	.word	0x1ffffc02
 80012c8:	40012708 	.word	0x40012708
 80012cc:	ffc3ffff 	.word	0xffc3ffff
 80012d0:	fffe0219 	.word	0xfffe0219
 80012d4:	dffffc02 	.word	0xdffffc02
 80012d8:	07ffff04 	.word	0x07ffff04
 80012dc:	833fffe7 	.word	0x833fffe7

080012e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff fe05 	bl	8000f00 <LL_ADC_REG_IsConversionOngoing>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d16c      	bne.n	80013d4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2254      	movs	r2, #84	; 0x54
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ADC_Start_DMA+0x28>
 8001304:	2302      	movs	r3, #2
 8001306:	e06c      	b.n	80013e2 <HAL_ADC_Start_DMA+0x102>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2254      	movs	r2, #84	; 0x54
 800130c:	2101      	movs	r1, #1
 800130e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d113      	bne.n	8001344 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fdb9 	bl	8000e98 <LL_ADC_IsEnabled>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d004      	beq.n	8001334 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	f7ff fda0 	bl	8000e74 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001344:	2517      	movs	r5, #23
 8001346:	197c      	adds	r4, r7, r5
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	0018      	movs	r0, r3
 800134c:	f000 fb5e 	bl	8001a0c <ADC_Enable>
 8001350:	0003      	movs	r3, r0
 8001352:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001354:	002c      	movs	r4, r5
 8001356:	193b      	adds	r3, r7, r4
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d13e      	bne.n	80013dc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a22      	ldr	r2, [pc, #136]	; (80013ec <HAL_ADC_Start_DMA+0x10c>)
 8001364:	4013      	ands	r3, r2
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	0052      	lsls	r2, r2, #1
 800136a:	431a      	orrs	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_ADC_Start_DMA+0x110>)
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <HAL_ADC_Start_DMA+0x114>)
 8001384:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_ADC_Start_DMA+0x118>)
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	221c      	movs	r2, #28
 8001394:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2254      	movs	r2, #84	; 0x54
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2110      	movs	r1, #16
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3340      	adds	r3, #64	; 0x40
 80013b8:	0019      	movs	r1, r3
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	193c      	adds	r4, r7, r4
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f000 fec4 	bl	800214c <HAL_DMA_Start_IT>
 80013c4:	0003      	movs	r3, r0
 80013c6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff fd85 	bl	8000edc <LL_ADC_REG_StartConversion>
 80013d2:	e003      	b.n	80013dc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d4:	2317      	movs	r3, #23
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	2202      	movs	r2, #2
 80013da:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013dc:	2317      	movs	r3, #23
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b006      	add	sp, #24
 80013e8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	fffff0fe 	.word	0xfffff0fe
 80013f0:	08001bd5 	.word	0x08001bd5
 80013f4:	08001c9d 	.word	0x08001c9d
 80013f8:	08001cbb 	.word	0x08001cbb

080013fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	d017      	beq.n	8001450 <HAL_ADC_IRQHandler+0x54>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d013      	beq.n	8001450 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	2210      	movs	r2, #16
 800142e:	4013      	ands	r3, r2
 8001430:	d106      	bne.n	8001440 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	0018      	movs	r0, r3
 8001444:	f000 fd0a 	bl	8001e5c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2202      	movs	r2, #2
 800144e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d003      	beq.n	8001460 <HAL_ADC_IRQHandler+0x64>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2204      	movs	r2, #4
 800145c:	4013      	ands	r3, r2
 800145e:	d107      	bne.n	8001470 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	2208      	movs	r2, #8
 8001464:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001466:	d04d      	beq.n	8001504 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2208      	movs	r2, #8
 800146c:	4013      	ands	r3, r2
 800146e:	d049      	beq.n	8001504 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	2210      	movs	r2, #16
 8001476:	4013      	ands	r3, r2
 8001478:	d106      	bne.n	8001488 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff fc3b 	bl	8000d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d02e      	beq.n	80014f4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7e9b      	ldrb	r3, [r3, #26]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d12a      	bne.n	80014f4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2208      	movs	r2, #8
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d123      	bne.n	80014f4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fd25 	bl	8000f00 <LL_ADC_REG_IsConversionOngoing>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d110      	bne.n	80014dc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	210c      	movs	r1, #12
 80014c6:	438a      	bics	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	4a56      	ldr	r2, [pc, #344]	; (8001628 <HAL_ADC_IRQHandler+0x22c>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	2201      	movs	r2, #1
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	659a      	str	r2, [r3, #88]	; 0x58
 80014da:	e00b      	b.n	80014f4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	2220      	movs	r2, #32
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	2201      	movs	r2, #1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7ff f998 	bl	800082c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	220c      	movs	r2, #12
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	4013      	ands	r3, r2
 800150a:	d012      	beq.n	8001532 <HAL_ADC_IRQHandler+0x136>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	4013      	ands	r3, r2
 8001512:	d00e      	beq.n	8001532 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	0252      	lsls	r2, r2, #9
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f000 f889 	bl	800163c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4013      	ands	r3, r2
 800153a:	d014      	beq.n	8001566 <HAL_ADC_IRQHandler+0x16a>
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4013      	ands	r3, r2
 8001544:	d00f      	beq.n	8001566 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	0292      	lsls	r2, r2, #10
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fc70 	bl	8001e3c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	0052      	lsls	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d014      	beq.n	800159a <HAL_ADC_IRQHandler+0x19e>
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d00f      	beq.n	800159a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	02d2      	lsls	r2, r2, #11
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	0018      	movs	r0, r3
 800158c:	f000 fc5e 	bl	8001e4c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2280      	movs	r2, #128	; 0x80
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2210      	movs	r2, #16
 800159e:	4013      	ands	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_ADC_IRQHandler+0x1fe>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2210      	movs	r2, #16
 80015a6:	4013      	ands	r3, r2
 80015a8:	d027      	beq.n	80015fa <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80015b2:	2301      	movs	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e008      	b.n	80015ca <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff fbf7 	bl	8000db0 <LL_ADC_REG_GetDMATransfer>
 80015c2:	1e03      	subs	r3, r0, #0
 80015c4:	d001      	beq.n	80015ca <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d110      	bne.n	80015f2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	00d2      	lsls	r2, r2, #3
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2202      	movs	r2, #2
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f000 f82d 	bl	800164c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2210      	movs	r2, #16
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	4013      	ands	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_ADC_IRQHandler+0x224>
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	4013      	ands	r3, r2
 800160c:	d008      	beq.n	8001620 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	0018      	movs	r0, r3
 8001612:	f000 fc2b 	bl	8001e6c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	0192      	lsls	r2, r2, #6
 800161e:	601a      	str	r2, [r3, #0]
  }
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bd80      	pop	{r7, pc}
 8001628:	fffffefe 	.word	0xfffffefe

0800162c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001666:	2317      	movs	r3, #23
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2254      	movs	r2, #84	; 0x54
 8001676:	5c9b      	ldrb	r3, [r3, r2]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d101      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x24>
 800167c:	2302      	movs	r3, #2
 800167e:	e1c0      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x3a6>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2254      	movs	r2, #84	; 0x54
 8001684:	2101      	movs	r1, #1
 8001686:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff fc37 	bl	8000f00 <LL_ADC_REG_IsConversionOngoing>
 8001692:	1e03      	subs	r3, r0, #0
 8001694:	d000      	beq.n	8001698 <HAL_ADC_ConfigChannel+0x3c>
 8001696:	e1a3      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d100      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x46>
 80016a0:	e143      	b.n	800192a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d004      	beq.n	80016b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80016b2:	4ac1      	ldr	r2, [pc, #772]	; (80019b8 <HAL_ADC_ConfigChannel+0x35c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d108      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0019      	movs	r1, r3
 80016c2:	0010      	movs	r0, r2
 80016c4:	f7ff fb51 	bl	8000d6a <LL_ADC_REG_SetSequencerChAdd>
 80016c8:	e0c9      	b.n	800185e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	211f      	movs	r1, #31
 80016d4:	400b      	ands	r3, r1
 80016d6:	210f      	movs	r1, #15
 80016d8:	4099      	lsls	r1, r3
 80016da:	000b      	movs	r3, r1
 80016dc:	43db      	mvns	r3, r3
 80016de:	4013      	ands	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	035b      	lsls	r3, r3, #13
 80016e8:	0b5b      	lsrs	r3, r3, #13
 80016ea:	d105      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x9c>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0e9b      	lsrs	r3, r3, #26
 80016f2:	221f      	movs	r2, #31
 80016f4:	4013      	ands	r3, r2
 80016f6:	e098      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	d000      	beq.n	8001704 <HAL_ADC_ConfigChannel+0xa8>
 8001702:	e091      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1cc>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d000      	beq.n	8001710 <HAL_ADC_ConfigChannel+0xb4>
 800170e:	e089      	b.n	8001824 <HAL_ADC_ConfigChannel+0x1c8>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d000      	beq.n	800171c <HAL_ADC_ConfigChannel+0xc0>
 800171a:	e081      	b.n	8001820 <HAL_ADC_ConfigChannel+0x1c4>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2208      	movs	r2, #8
 8001722:	4013      	ands	r3, r2
 8001724:	d000      	beq.n	8001728 <HAL_ADC_ConfigChannel+0xcc>
 8001726:	e079      	b.n	800181c <HAL_ADC_ConfigChannel+0x1c0>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2210      	movs	r2, #16
 800172e:	4013      	ands	r3, r2
 8001730:	d000      	beq.n	8001734 <HAL_ADC_ConfigChannel+0xd8>
 8001732:	e071      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1bc>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2220      	movs	r2, #32
 800173a:	4013      	ands	r3, r2
 800173c:	d000      	beq.n	8001740 <HAL_ADC_ConfigChannel+0xe4>
 800173e:	e069      	b.n	8001814 <HAL_ADC_ConfigChannel+0x1b8>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	4013      	ands	r3, r2
 8001748:	d000      	beq.n	800174c <HAL_ADC_ConfigChannel+0xf0>
 800174a:	e061      	b.n	8001810 <HAL_ADC_ConfigChannel+0x1b4>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	4013      	ands	r3, r2
 8001754:	d000      	beq.n	8001758 <HAL_ADC_ConfigChannel+0xfc>
 8001756:	e059      	b.n	800180c <HAL_ADC_ConfigChannel+0x1b0>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4013      	ands	r3, r2
 8001762:	d151      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1ac>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d149      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1a8>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4013      	ands	r3, r2
 800177a:	d141      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x1a4>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4013      	ands	r3, r2
 8001786:	d139      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1a0>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	015b      	lsls	r3, r3, #5
 8001790:	4013      	ands	r3, r2
 8001792:	d131      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x19c>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	019b      	lsls	r3, r3, #6
 800179c:	4013      	ands	r3, r2
 800179e:	d129      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x198>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	01db      	lsls	r3, r3, #7
 80017a8:	4013      	ands	r3, r2
 80017aa:	d121      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x194>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	4013      	ands	r3, r2
 80017b6:	d119      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x190>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	4013      	ands	r3, r2
 80017c2:	d111      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x18c>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d109      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x188>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	02db      	lsls	r3, r3, #11
 80017d8:	4013      	ands	r3, r2
 80017da:	d001      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x184>
 80017dc:	2312      	movs	r3, #18
 80017de:	e024      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017e0:	2300      	movs	r3, #0
 80017e2:	e022      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017e4:	2311      	movs	r3, #17
 80017e6:	e020      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017e8:	2310      	movs	r3, #16
 80017ea:	e01e      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017ec:	230f      	movs	r3, #15
 80017ee:	e01c      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017f0:	230e      	movs	r3, #14
 80017f2:	e01a      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017f4:	230d      	movs	r3, #13
 80017f6:	e018      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017f8:	230c      	movs	r3, #12
 80017fa:	e016      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 80017fc:	230b      	movs	r3, #11
 80017fe:	e014      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001800:	230a      	movs	r3, #10
 8001802:	e012      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001804:	2309      	movs	r3, #9
 8001806:	e010      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001808:	2308      	movs	r3, #8
 800180a:	e00e      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 800180c:	2307      	movs	r3, #7
 800180e:	e00c      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001810:	2306      	movs	r3, #6
 8001812:	e00a      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001814:	2305      	movs	r3, #5
 8001816:	e008      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001818:	2304      	movs	r3, #4
 800181a:	e006      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 800181c:	2303      	movs	r3, #3
 800181e:	e004      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001820:	2302      	movs	r3, #2
 8001822:	e002      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_ADC_ConfigChannel+0x1ce>
 8001828:	2300      	movs	r3, #0
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	6852      	ldr	r2, [r2, #4]
 800182e:	201f      	movs	r0, #31
 8001830:	4002      	ands	r2, r0
 8001832:	4093      	lsls	r3, r2
 8001834:	000a      	movs	r2, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	429a      	cmp	r2, r3
 800184a:	d808      	bhi.n	800185e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	001a      	movs	r2, r3
 800185a:	f7ff fa66 	bl	8000d2a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	001a      	movs	r2, r3
 800186c:	f7ff faac 	bl	8000dc8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db00      	blt.n	800187a <HAL_ADC_ConfigChannel+0x21e>
 8001878:	e0bc      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800187a:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff fa19 	bl	8000cb4 <LL_ADC_GetCommonPathInternalCh>
 8001882:	0003      	movs	r3, r0
 8001884:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a4d      	ldr	r2, [pc, #308]	; (80019c0 <HAL_ADC_ConfigChannel+0x364>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d122      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001898:	d11d      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2280      	movs	r2, #128	; 0x80
 800189e:	0412      	lsls	r2, r2, #16
 80018a0:	4313      	orrs	r3, r2
 80018a2:	4a46      	ldr	r2, [pc, #280]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 80018a4:	0019      	movs	r1, r3
 80018a6:	0010      	movs	r0, r2
 80018a8:	f7ff f9f0 	bl	8000c8c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018ac:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <HAL_ADC_ConfigChannel+0x368>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4945      	ldr	r1, [pc, #276]	; (80019c8 <HAL_ADC_ConfigChannel+0x36c>)
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7fe fc24 	bl	8000100 <__udivsi3>
 80018b8:	0003      	movs	r3, r0
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	0013      	movs	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	189b      	adds	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80018c6:	e002      	b.n	80018ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f9      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018d4:	e08e      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a3c      	ldr	r2, [pc, #240]	; (80019cc <HAL_ADC_ConfigChannel+0x370>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d10e      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x2a2>
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	045b      	lsls	r3, r3, #17
 80018e6:	4013      	ands	r3, r2
 80018e8:	d109      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	0452      	lsls	r2, r2, #17
 80018f0:	4313      	orrs	r3, r2
 80018f2:	4a32      	ldr	r2, [pc, #200]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 80018f4:	0019      	movs	r1, r3
 80018f6:	0010      	movs	r0, r2
 80018f8:	f7ff f9c8 	bl	8000c8c <LL_ADC_SetCommonPathInternalCh>
 80018fc:	e07a      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <HAL_ADC_ConfigChannel+0x374>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d000      	beq.n	800190a <HAL_ADC_ConfigChannel+0x2ae>
 8001908:	e074      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	03db      	lsls	r3, r3, #15
 8001910:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001912:	d000      	beq.n	8001916 <HAL_ADC_ConfigChannel+0x2ba>
 8001914:	e06e      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	03d2      	lsls	r2, r2, #15
 800191c:	4313      	orrs	r3, r2
 800191e:	4a27      	ldr	r2, [pc, #156]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 8001920:	0019      	movs	r1, r3
 8001922:	0010      	movs	r0, r2
 8001924:	f7ff f9b2 	bl	8000c8c <LL_ADC_SetCommonPathInternalCh>
 8001928:	e064      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	429a      	cmp	r2, r3
 8001934:	d004      	beq.n	8001940 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_ADC_ConfigChannel+0x35c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d107      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0019      	movs	r1, r3
 800194a:	0010      	movs	r0, r2
 800194c:	f7ff fa1e 	bl	8000d8c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	da4d      	bge.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff f9aa 	bl	8000cb4 <LL_ADC_GetCommonPathInternalCh>
 8001960:	0003      	movs	r3, r0
 8001962:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_ADC_ConfigChannel+0x364>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d108      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <HAL_ADC_ConfigChannel+0x378>)
 8001972:	4013      	ands	r3, r2
 8001974:	4a11      	ldr	r2, [pc, #68]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 8001976:	0019      	movs	r1, r3
 8001978:	0010      	movs	r0, r2
 800197a:	f7ff f987 	bl	8000c8c <LL_ADC_SetCommonPathInternalCh>
 800197e:	e039      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_ADC_ConfigChannel+0x370>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d108      	bne.n	800199c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_ADC_ConfigChannel+0x37c>)
 800198e:	4013      	ands	r3, r2
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 8001992:	0019      	movs	r1, r3
 8001994:	0010      	movs	r0, r2
 8001996:	f7ff f979 	bl	8000c8c <LL_ADC_SetCommonPathInternalCh>
 800199a:	e02b      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_ADC_ConfigChannel+0x374>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d126      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <HAL_ADC_ConfigChannel+0x380>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_ADC_ConfigChannel+0x360>)
 80019ae:	0019      	movs	r1, r3
 80019b0:	0010      	movs	r0, r2
 80019b2:	f7ff f96b 	bl	8000c8c <LL_ADC_SetCommonPathInternalCh>
 80019b6:	e01d      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x398>
 80019b8:	80000004 	.word	0x80000004
 80019bc:	40012708 	.word	0x40012708
 80019c0:	b0001000 	.word	0xb0001000
 80019c4:	20000000 	.word	0x20000000
 80019c8:	00030d40 	.word	0x00030d40
 80019cc:	b8004000 	.word	0xb8004000
 80019d0:	b4002000 	.word	0xb4002000
 80019d4:	ff7fffff 	.word	0xff7fffff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	2220      	movs	r2, #32
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019ec:	2317      	movs	r3, #23
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2254      	movs	r2, #84	; 0x54
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80019fc:	2317      	movs	r3, #23
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	781b      	ldrb	r3, [r3, #0]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b006      	add	sp, #24
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)

08001a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff fa3b 	bl	8000e98 <LL_ADC_IsEnabled>
 8001a22:	1e03      	subs	r3, r0, #0
 8001a24:	d000      	beq.n	8001a28 <ADC_Enable+0x1c>
 8001a26:	e069      	b.n	8001afc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	4a36      	ldr	r2, [pc, #216]	; (8001b08 <ADC_Enable+0xfc>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	d00d      	beq.n	8001a50 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	2210      	movs	r2, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	2201      	movs	r2, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e056      	b.n	8001afe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff f9fb 	bl	8000e50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <ADC_Enable+0x100>)
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff f929 	bl	8000cb4 <LL_ADC_GetCommonPathInternalCh>
 8001a62:	0002      	movs	r2, r0
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d00f      	beq.n	8001a8c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <ADC_Enable+0x104>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4928      	ldr	r1, [pc, #160]	; (8001b14 <ADC_Enable+0x108>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7fe fb44 	bl	8000100 <__udivsi3>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a7e:	e002      	b.n	8001a86 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f9      	bne.n	8001a80 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e5b      	ldrb	r3, [r3, #25]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d033      	beq.n	8001afc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001a94:	f7ff f8b6 	bl	8000c04 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a9c:	e027      	b.n	8001aee <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7ff f9f8 	bl	8000e98 <LL_ADC_IsEnabled>
 8001aa8:	1e03      	subs	r3, r0, #0
 8001aaa:	d104      	bne.n	8001ab6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff f9cd 	bl	8000e50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ab6:	f7ff f8a5 	bl	8000c04 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d914      	bls.n	8001aee <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00d      	beq.n	8001aee <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e007      	b.n	8001afe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d1d0      	bne.n	8001a9e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	0018      	movs	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b004      	add	sp, #16
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	80000017 	.word	0x80000017
 8001b0c:	40012708 	.word	0x40012708
 8001b10:	20000000 	.word	0x20000000
 8001b14:	00030d40 	.word	0x00030d40

08001b18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff f9c8 	bl	8000eba <LL_ADC_IsDisableOngoing>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7ff f9b0 	bl	8000e98 <LL_ADC_IsEnabled>
 8001b38:	1e03      	subs	r3, r0, #0
 8001b3a:	d046      	beq.n	8001bca <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d143      	bne.n	8001bca <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2205      	movs	r2, #5
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10d      	bne.n	8001b6c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f7ff f98d 	bl	8000e74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2203      	movs	r2, #3
 8001b60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b62:	f7ff f84f 	bl	8000c04 <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b6a:	e028      	b.n	8001bbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	2210      	movs	r2, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e021      	b.n	8001bcc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b88:	f7ff f83c 	bl	8000c04 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d913      	bls.n	8001bbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e006      	b.n	8001bcc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d1de      	bne.n	8001b88 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b004      	add	sp, #16
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	2250      	movs	r2, #80	; 0x50
 8001be8:	4013      	ands	r3, r2
 8001bea:	d141      	bne.n	8001c70 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff f882 	bl	8000d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d02e      	beq.n	8001c66 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	7e9b      	ldrb	r3, [r3, #26]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d12a      	bne.n	8001c66 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2208      	movs	r2, #8
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d123      	bne.n	8001c66 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff f96c 	bl	8000f00 <LL_ADC_REG_IsConversionOngoing>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d110      	bne.n	8001c4e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	210c      	movs	r1, #12
 8001c38:	438a      	bics	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <ADC_DMAConvCplt+0xc4>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	2201      	movs	r2, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c4c:	e00b      	b.n	8001c66 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	2220      	movs	r2, #32
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2201      	movs	r2, #1
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7fe fddf 	bl	800082c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c6e:	e00f      	b.n	8001c90 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	2210      	movs	r2, #16
 8001c76:	4013      	ands	r3, r2
 8001c78:	d004      	beq.n	8001c84 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff fce5 	bl	800164c <HAL_ADC_ErrorCallback>
}
 8001c82:	e005      	b.n	8001c90 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	0010      	movs	r0, r2
 8001c8e:	4798      	blx	r3
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	fffffefe 	.word	0xfffffefe

08001c9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff fcbd 	bl	800162c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b004      	add	sp, #16
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	2240      	movs	r2, #64	; 0x40
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	2204      	movs	r2, #4
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fcb2 	bl	800164c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b004      	add	sp, #16
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <LL_ADC_IsEnabled>:
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <LL_ADC_IsEnabled+0x18>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_ADC_IsEnabled+0x1a>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b002      	add	sp, #8
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <LL_ADC_IsCalibrationOnGoing>:
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0fdb      	lsrs	r3, r3, #31
 8001d20:	07da      	lsls	r2, r3, #31
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2254      	movs	r2, #84	; 0x54
 8001d48:	5c9b      	ldrb	r3, [r3, r2]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADCEx_Calibration_Start+0x1a>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e06c      	b.n	8001e2c <HAL_ADCEx_Calibration_Start+0xf4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2254      	movs	r2, #84	; 0x54
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001d5a:	2317      	movs	r3, #23
 8001d5c:	18fc      	adds	r4, r7, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fed9 	bl	8001b18 <ADC_Disable>
 8001d66:	0003      	movs	r3, r0
 8001d68:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff ffbe 	bl	8001cf0 <LL_ADC_IsEnabled>
 8001d74:	1e03      	subs	r3, r0, #0
 8001d76:	d14c      	bne.n	8001e12 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_ADCEx_Calibration_Start+0xfc>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2202      	movs	r2, #2
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2103      	movs	r1, #3
 8001da0:	438a      	bics	r2, r1
 8001da2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	0609      	lsls	r1, r1, #24
 8001db2:	430a      	orrs	r2, r1
 8001db4:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001db6:	e014      	b.n	8001de2 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_ADCEx_Calibration_Start+0x100>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d90d      	bls.n	8001de2 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	2212      	movs	r2, #18
 8001dcc:	4393      	bics	r3, r2
 8001dce:	2210      	movs	r2, #16
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2254      	movs	r2, #84	; 0x54
 8001dda:	2100      	movs	r1, #0
 8001ddc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e024      	b.n	8001e2c <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7ff ff93 	bl	8001d12 <LL_ADC_IsCalibrationOnGoing>
 8001dec:	1e03      	subs	r3, r0, #0
 8001dee:	d1e3      	bne.n	8001db8 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68d9      	ldr	r1, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	2203      	movs	r2, #3
 8001e06:	4393      	bics	r3, r2
 8001e08:	2201      	movs	r2, #1
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e10:	e005      	b.n	8001e1e <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	2210      	movs	r2, #16
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2254      	movs	r2, #84	; 0x54
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e26:	2317      	movs	r3, #23
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	781b      	ldrb	r3, [r3, #0]
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b007      	add	sp, #28
 8001e32:	bd90      	pop	{r4, r7, pc}
 8001e34:	fffffefd 	.word	0xfffffefd
 8001e38:	0002f1ff 	.word	0x0002f1ff

08001e3c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8001e8e:	d809      	bhi.n	8001ea4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	001a      	movs	r2, r3
 8001e96:	231f      	movs	r3, #31
 8001e98:	401a      	ands	r2, r3
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__NVIC_EnableIRQ+0x30>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4091      	lsls	r1, r2
 8001ea0:	000a      	movs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ec4:	d828      	bhi.n	8001f18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ec6:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <__NVIC_SetPriority+0xd4>)
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b25b      	sxtb	r3, r3
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	33c0      	adds	r3, #192	; 0xc0
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	589b      	ldr	r3, [r3, r2]
 8001ed6:	1dfa      	adds	r2, r7, #7
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	0011      	movs	r1, r2
 8001edc:	2203      	movs	r2, #3
 8001ede:	400a      	ands	r2, r1
 8001ee0:	00d2      	lsls	r2, r2, #3
 8001ee2:	21ff      	movs	r1, #255	; 0xff
 8001ee4:	4091      	lsls	r1, r2
 8001ee6:	000a      	movs	r2, r1
 8001ee8:	43d2      	mvns	r2, r2
 8001eea:	401a      	ands	r2, r3
 8001eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	1dfb      	adds	r3, r7, #7
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	0018      	movs	r0, r3
 8001efc:	2303      	movs	r3, #3
 8001efe:	4003      	ands	r3, r0
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f04:	481f      	ldr	r0, [pc, #124]	; (8001f84 <__NVIC_SetPriority+0xd4>)
 8001f06:	1dfb      	adds	r3, r7, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b25b      	sxtb	r3, r3
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	33c0      	adds	r3, #192	; 0xc0
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f16:	e031      	b.n	8001f7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f18:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <__NVIC_SetPriority+0xd8>)
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	0019      	movs	r1, r3
 8001f20:	230f      	movs	r3, #15
 8001f22:	400b      	ands	r3, r1
 8001f24:	3b08      	subs	r3, #8
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3306      	adds	r3, #6
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	18d3      	adds	r3, r2, r3
 8001f2e:	3304      	adds	r3, #4
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	1dfa      	adds	r2, r7, #7
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	0011      	movs	r1, r2
 8001f38:	2203      	movs	r2, #3
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	00d2      	lsls	r2, r2, #3
 8001f3e:	21ff      	movs	r1, #255	; 0xff
 8001f40:	4091      	lsls	r1, r2
 8001f42:	000a      	movs	r2, r1
 8001f44:	43d2      	mvns	r2, r2
 8001f46:	401a      	ands	r2, r3
 8001f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	019b      	lsls	r3, r3, #6
 8001f4e:	22ff      	movs	r2, #255	; 0xff
 8001f50:	401a      	ands	r2, r3
 8001f52:	1dfb      	adds	r3, r7, #7
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	0018      	movs	r0, r3
 8001f58:	2303      	movs	r3, #3
 8001f5a:	4003      	ands	r3, r0
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f60:	4809      	ldr	r0, [pc, #36]	; (8001f88 <__NVIC_SetPriority+0xd8>)
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	001c      	movs	r4, r3
 8001f68:	230f      	movs	r3, #15
 8001f6a:	4023      	ands	r3, r4
 8001f6c:	3b08      	subs	r3, #8
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	430a      	orrs	r2, r1
 8001f72:	3306      	adds	r3, #6
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	18c3      	adds	r3, r0, r3
 8001f78:	3304      	adds	r3, #4
 8001f7a:	601a      	str	r2, [r3, #0]
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b003      	add	sp, #12
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	1e5a      	subs	r2, r3, #1
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	045b      	lsls	r3, r3, #17
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d301      	bcc.n	8001fa4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e010      	b.n	8001fc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <SysTick_Config+0x44>)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	3a01      	subs	r2, #1
 8001faa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fac:	2301      	movs	r3, #1
 8001fae:	425b      	negs	r3, r3
 8001fb0:	2103      	movs	r1, #3
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7ff ff7c 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x44>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x44>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	210f      	movs	r1, #15
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	1c02      	adds	r2, r0, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	0011      	movs	r1, r2
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff ff5d 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	0002      	movs	r2, r0
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b25b      	sxtb	r3, r3
 8002010:	0018      	movs	r0, r3
 8002012:	f7ff ff33 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ffaf 	bl	8001f8c <SysTick_Config>
 800202e:	0003      	movs	r3, r0
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e077      	b.n	800213a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <HAL_DMA_Init+0x10c>)
 8002050:	4694      	mov	ip, r2
 8002052:	4463      	add	r3, ip
 8002054:	2114      	movs	r1, #20
 8002056:	0018      	movs	r0, r3
 8002058:	f7fe f852 	bl	8000100 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	009a      	lsls	r2, r3, #2
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2225      	movs	r2, #37	; 0x25
 8002068:	2102      	movs	r1, #2
 800206a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4934      	ldr	r1, [pc, #208]	; (8002148 <HAL_DMA_Init+0x110>)
 8002078:	400a      	ands	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fa8d 	bl	80025d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	01db      	lsls	r3, r3, #7
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d102      	bne.n	80020cc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d4:	213f      	movs	r1, #63	; 0x3f
 80020d6:	400a      	ands	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d011      	beq.n	8002110 <HAL_DMA_Init+0xd8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d80d      	bhi.n	8002110 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 fa98 	bl	800262c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e008      	b.n	8002122 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2225      	movs	r2, #37	; 0x25
 800212c:	2101      	movs	r1, #1
 800212e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	2100      	movs	r1, #0
 8002136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	bffdfff8 	.word	0xbffdfff8
 8002148:	ffff800f 	.word	0xffff800f

0800214c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2317      	movs	r3, #23
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2224      	movs	r2, #36	; 0x24
 8002166:	5c9b      	ldrb	r3, [r3, r2]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Start_IT+0x24>
 800216c:	2302      	movs	r3, #2
 800216e:	e06f      	b.n	8002250 <HAL_DMA_Start_IT+0x104>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	2101      	movs	r1, #1
 8002176:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2225      	movs	r2, #37	; 0x25
 800217c:	5c9b      	ldrb	r3, [r3, r2]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	d157      	bne.n	8002234 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2225      	movs	r2, #37	; 0x25
 8002188:	2102      	movs	r1, #2
 800218a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	438a      	bics	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f9d3 	bl	8002554 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	210e      	movs	r1, #14
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e00f      	b.n	80021e8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2104      	movs	r1, #4
 80021d4:	438a      	bics	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	210a      	movs	r1, #10
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	025b      	lsls	r3, r3, #9
 80021f2:	4013      	ands	r3, r2
 80021f4:	d008      	beq.n	8002208 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	0049      	lsls	r1, r1, #1
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0049      	lsls	r1, r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e00a      	b.n	800224a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2224      	movs	r2, #36	; 0x24
 800223e:	2100      	movs	r1, #0
 8002240:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002242:	2317      	movs	r3, #23
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800224a:	2317      	movs	r3, #23
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	781b      	ldrb	r3, [r3, #0]
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e050      	b.n	800230c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2225      	movs	r2, #37	; 0x25
 800226e:	5c9b      	ldrb	r3, [r3, r2]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d008      	beq.n	8002288 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2204      	movs	r2, #4
 800227a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	2100      	movs	r1, #0
 8002282:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e041      	b.n	800230c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	210e      	movs	r1, #14
 8002294:	438a      	bics	r2, r1
 8002296:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	491c      	ldr	r1, [pc, #112]	; (8002314 <HAL_DMA_Abort+0xbc>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2101      	movs	r1, #1
 80022b4:	438a      	bics	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_DMA_Abort+0xc0>)
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	221c      	movs	r2, #28
 80022c2:	4013      	ands	r3, r2
 80022c4:	2201      	movs	r2, #1
 80022c6:	409a      	lsls	r2, r3
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_DMA_Abort+0xc0>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00c      	beq.n	80022fa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ea:	490a      	ldr	r1, [pc, #40]	; (8002314 <HAL_DMA_Abort+0xbc>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80022f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2225      	movs	r2, #37	; 0x25
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2224      	movs	r2, #36	; 0x24
 8002306:	2100      	movs	r1, #0
 8002308:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}
 8002314:	fffffeff 	.word	0xfffffeff
 8002318:	40020000 	.word	0x40020000

0800231c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	210f      	movs	r1, #15
 8002326:	187b      	adds	r3, r7, r1
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2225      	movs	r2, #37	; 0x25
 8002330:	5c9b      	ldrb	r3, [r3, r2]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d006      	beq.n	8002346 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e049      	b.n	80023da <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	210e      	movs	r1, #14
 8002352:	438a      	bics	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	438a      	bics	r2, r1
 8002364:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	491d      	ldr	r1, [pc, #116]	; (80023e8 <HAL_DMA_Abort_IT+0xcc>)
 8002372:	400a      	ands	r2, r1
 8002374:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_DMA_Abort_IT+0xd0>)
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	221c      	movs	r2, #28
 8002380:	4013      	ands	r3, r2
 8002382:	2201      	movs	r2, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_DMA_Abort_IT+0xd0>)
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002394:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	490f      	ldr	r1, [pc, #60]	; (80023e8 <HAL_DMA_Abort_IT+0xcc>)
 80023aa:	400a      	ands	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80023b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2225      	movs	r2, #37	; 0x25
 80023bc:	2101      	movs	r1, #1
 80023be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	0010      	movs	r0, r2
 80023d8:	4798      	blx	r3
    }
  }
  return status;
 80023da:	230f      	movs	r3, #15
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781b      	ldrb	r3, [r3, #0]
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	fffffeff 	.word	0xfffffeff
 80023ec:	40020000 	.word	0x40020000

080023f0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <HAL_DMA_IRQHandler+0x160>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	221c      	movs	r2, #28
 800240c:	4013      	ands	r3, r2
 800240e:	2204      	movs	r2, #4
 8002410:	409a      	lsls	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	d027      	beq.n	800246a <HAL_DMA_IRQHandler+0x7a>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2204      	movs	r2, #4
 800241e:	4013      	ands	r3, r2
 8002420:	d023      	beq.n	800246a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2220      	movs	r2, #32
 800242a:	4013      	ands	r3, r2
 800242c:	d107      	bne.n	800243e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2104      	movs	r1, #4
 800243a:	438a      	bics	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <HAL_DMA_IRQHandler+0x160>)
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	221c      	movs	r2, #28
 8002448:	4013      	ands	r3, r2
 800244a:	2204      	movs	r2, #4
 800244c:	409a      	lsls	r2, r3
 800244e:	4b40      	ldr	r3, [pc, #256]	; (8002550 <HAL_DMA_IRQHandler+0x160>)
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	2b00      	cmp	r3, #0
 800245a:	d100      	bne.n	800245e <HAL_DMA_IRQHandler+0x6e>
 800245c:	e073      	b.n	8002546 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	0010      	movs	r0, r2
 8002466:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002468:	e06d      	b.n	8002546 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	221c      	movs	r2, #28
 8002470:	4013      	ands	r3, r2
 8002472:	2202      	movs	r2, #2
 8002474:	409a      	lsls	r2, r3
 8002476:	0013      	movs	r3, r2
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4013      	ands	r3, r2
 800247c:	d02e      	beq.n	80024dc <HAL_DMA_IRQHandler+0xec>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d02a      	beq.n	80024dc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2220      	movs	r2, #32
 800248e:	4013      	ands	r3, r2
 8002490:	d10b      	bne.n	80024aa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	210a      	movs	r1, #10
 800249e:	438a      	bics	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2225      	movs	r2, #37	; 0x25
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_DMA_IRQHandler+0x160>)
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	221c      	movs	r2, #28
 80024b4:	4013      	ands	r3, r2
 80024b6:	2202      	movs	r2, #2
 80024b8:	409a      	lsls	r2, r3
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_DMA_IRQHandler+0x160>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d03a      	beq.n	8002546 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	0010      	movs	r0, r2
 80024d8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80024da:	e034      	b.n	8002546 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	221c      	movs	r2, #28
 80024e2:	4013      	ands	r3, r2
 80024e4:	2208      	movs	r2, #8
 80024e6:	409a      	lsls	r2, r3
 80024e8:	0013      	movs	r3, r2
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	d02b      	beq.n	8002548 <HAL_DMA_IRQHandler+0x158>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2208      	movs	r2, #8
 80024f4:	4013      	ands	r3, r2
 80024f6:	d027      	beq.n	8002548 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	210e      	movs	r1, #14
 8002504:	438a      	bics	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_DMA_IRQHandler+0x160>)
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	221c      	movs	r2, #28
 8002512:	4013      	ands	r3, r2
 8002514:	2201      	movs	r2, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_DMA_IRQHandler+0x160>)
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2225      	movs	r2, #37	; 0x25
 8002528:	2101      	movs	r1, #1
 800252a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	2100      	movs	r1, #0
 8002532:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	0010      	movs	r0, r2
 8002544:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46c0      	nop			; (mov r8, r8)
}
 800254a:	46bd      	mov	sp, r7
 800254c:	b004      	add	sp, #16
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40020000 	.word	0x40020000

08002554 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800256a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800257c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <DMA_SetConfig+0x7c>)
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	221c      	movs	r2, #28
 8002588:	4013      	ands	r3, r2
 800258a:	2201      	movs	r2, #1
 800258c:	409a      	lsls	r2, r3
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <DMA_SetConfig+0x7c>)
 8002590:	430a      	orrs	r2, r1
 8002592:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d108      	bne.n	80025b6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025b4:	e007      	b.n	80025c6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	60da      	str	r2, [r3, #12]
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	40020000 	.word	0x40020000

080025d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80025e4:	4694      	mov	ip, r2
 80025e6:	4463      	add	r3, ip
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	001a      	movs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	001a      	movs	r2, r3
 80025f6:	23ff      	movs	r3, #255	; 0xff
 80025f8:	4013      	ands	r3, r2
 80025fa:	3b08      	subs	r3, #8
 80025fc:	2114      	movs	r1, #20
 80025fe:	0018      	movs	r0, r3
 8002600:	f7fd fd7e 	bl	8000100 <__udivsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800260c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	221f      	movs	r2, #31
 8002612:	4013      	ands	r3, r2
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b004      	add	sp, #16
 8002622:	bd80      	pop	{r7, pc}
 8002624:	10008200 	.word	0x10008200
 8002628:	40020880 	.word	0x40020880

0800262c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	223f      	movs	r2, #63	; 0x3f
 800263a:	4013      	ands	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002642:	4694      	mov	ip, r2
 8002644:	4463      	add	r3, ip
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	001a      	movs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002652:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3b01      	subs	r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	4013      	ands	r3, r2
 800265c:	2201      	movs	r2, #1
 800265e:	409a      	lsls	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b004      	add	sp, #16
 800266a:	bd80      	pop	{r7, pc}
 800266c:	1000823f 	.word	0x1000823f
 8002670:	40020940 	.word	0x40020940

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002682:	e147      	b.n	8002914 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4091      	lsls	r1, r2
 800268e:	000a      	movs	r2, r1
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d100      	bne.n	800269c <HAL_GPIO_Init+0x28>
 800269a:	e138      	b.n	800290e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d005      	beq.n	80026b4 <HAL_GPIO_Init+0x40>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d130      	bne.n	8002716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	409a      	lsls	r2, r3
 80026c2:	0013      	movs	r3, r2
 80026c4:	43da      	mvns	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	0013      	movs	r3, r2
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ea:	2201      	movs	r2, #1
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
 80026f0:	0013      	movs	r3, r2
 80026f2:	43da      	mvns	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	2201      	movs	r2, #1
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2203      	movs	r2, #3
 800271c:	4013      	ands	r3, r2
 800271e:	2b03      	cmp	r3, #3
 8002720:	d017      	beq.n	8002752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	43da      	mvns	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2203      	movs	r2, #3
 8002758:	4013      	ands	r3, r2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d123      	bne.n	80027a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	58d3      	ldr	r3, [r2, r3]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2207      	movs	r2, #7
 8002770:	4013      	ands	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	409a      	lsls	r2, r3
 8002778:	0013      	movs	r3, r2
 800277a:	43da      	mvns	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2107      	movs	r1, #7
 800278a:	400b      	ands	r3, r1
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	6939      	ldr	r1, [r7, #16]
 80027a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	409a      	lsls	r2, r3
 80027b4:	0013      	movs	r3, r2
 80027b6:	43da      	mvns	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2203      	movs	r2, #3
 80027c4:	401a      	ands	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	23c0      	movs	r3, #192	; 0xc0
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4013      	ands	r3, r2
 80027e4:	d100      	bne.n	80027e8 <HAL_GPIO_Init+0x174>
 80027e6:	e092      	b.n	800290e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3318      	adds	r3, #24
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	589b      	ldr	r3, [r3, r2]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2203      	movs	r2, #3
 80027fa:	4013      	ands	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	220f      	movs	r2, #15
 8002800:	409a      	lsls	r2, r3
 8002802:	0013      	movs	r3, r2
 8002804:	43da      	mvns	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	23a0      	movs	r3, #160	; 0xa0
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	429a      	cmp	r2, r3
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x1ca>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a45      	ldr	r2, [pc, #276]	; (8002930 <HAL_GPIO_Init+0x2bc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x1c6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a44      	ldr	r2, [pc, #272]	; (8002934 <HAL_GPIO_Init+0x2c0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x1c2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_GPIO_Init+0x2c4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x1be>
 800282e:	2303      	movs	r3, #3
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 8002832:	2305      	movs	r3, #5
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 800283e:	2300      	movs	r3, #0
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	2103      	movs	r1, #3
 8002844:	400a      	ands	r2, r1
 8002846:	00d2      	lsls	r2, r2, #3
 8002848:	4093      	lsls	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002850:	4936      	ldr	r1, [pc, #216]	; (800292c <HAL_GPIO_Init+0x2b8>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3318      	adds	r3, #24
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <HAL_GPIO_Init+0x2b8>)
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	58d3      	ldr	r3, [r2, r3]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43da      	mvns	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	025b      	lsls	r3, r3, #9
 8002878:	4013      	ands	r3, r2
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002884:	4929      	ldr	r1, [pc, #164]	; (800292c <HAL_GPIO_Init+0x2b8>)
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_GPIO_Init+0x2b8>)
 800288e:	2384      	movs	r3, #132	; 0x84
 8002890:	58d3      	ldr	r3, [r2, r3]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	43da      	mvns	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	029b      	lsls	r3, r3, #10
 80028a6:	4013      	ands	r3, r2
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b2:	491e      	ldr	r1, [pc, #120]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80028b4:	2284      	movs	r2, #132	; 0x84
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43da      	mvns	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	035b      	lsls	r3, r3, #13
 80028d2:	4013      	ands	r3, r2
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_GPIO_Init+0x2b8>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43da      	mvns	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	039b      	lsls	r3, r3, #14
 80028fc:	4013      	ands	r3, r2
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_GPIO_Init+0x2b8>)
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	40da      	lsrs	r2, r3
 800291c:	1e13      	subs	r3, r2, #0
 800291e:	d000      	beq.n	8002922 <HAL_GPIO_Init+0x2ae>
 8002920:	e6b0      	b.n	8002684 <HAL_GPIO_Init+0x10>
  }
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b006      	add	sp, #24
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021800 	.word	0x40021800
 8002930:	50000400 	.word	0x50000400
 8002934:	50000800 	.word	0x50000800
 8002938:	50000c00 	.word	0x50000c00

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	0008      	movs	r0, r1
 8002946:	0011      	movs	r1, r2
 8002948:	1cbb      	adds	r3, r7, #2
 800294a:	1c02      	adds	r2, r0, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	1c7b      	adds	r3, r7, #1
 8002950:	1c0a      	adds	r2, r1, #0
 8002952:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002954:	1c7b      	adds	r3, r7, #1
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295c:	1cbb      	adds	r3, r7, #2
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002966:	1cbb      	adds	r3, r7, #2
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	000a      	movs	r2, r1
 8002980:	1cbb      	adds	r3, r7, #2
 8002982:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800298a:	1cbb      	adds	r3, r7, #2
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	041a      	lsls	r2, r3, #16
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43db      	mvns	r3, r3
 8002998:	1cb9      	adds	r1, r7, #2
 800299a:	8809      	ldrh	r1, [r1, #0]
 800299c:	400b      	ands	r3, r1
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	0002      	movs	r2, r0
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	1dba      	adds	r2, r7, #6
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	4013      	ands	r3, r2
 80029c2:	d008      	beq.n	80029d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029c6:	1dba      	adds	r2, r7, #6
 80029c8:	8812      	ldrh	r2, [r2, #0]
 80029ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fd ff0f 	bl	80007f4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	1dba      	adds	r2, r7, #6
 80029dc:	8812      	ldrh	r2, [r2, #0]
 80029de:	4013      	ands	r3, r2
 80029e0:	d008      	beq.n	80029f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80029e4:	1dba      	adds	r2, r7, #6
 80029e6:	8812      	ldrh	r2, [r2, #0]
 80029e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80029ea:	1dbb      	adds	r3, r7, #6
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f806 	bl	8002a00 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021800 	.word	0x40021800

08002a00 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	0002      	movs	r2, r0
 8002a08:	1dbb      	adds	r3, r7, #6
 8002a0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d11f      	bne.n	8002a78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	189b      	adds	r3, r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4912      	ldr	r1, [pc, #72]	; (8002a90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7fd fb5a 	bl	8000100 <__udivsi3>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a52:	e008      	b.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e001      	b.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e009      	b.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d0ed      	beq.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b004      	add	sp, #16
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	40007000 	.word	0x40007000
 8002a88:	fffff9ff 	.word	0xfffff9ff
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	000f4240 	.word	0x000f4240

08002a94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	23e0      	movs	r3, #224	; 0xe0
 8002a9e:	01db      	lsls	r3, r3, #7
 8002aa0:	4013      	ands	r3, r2
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e2f9      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x1e>
 8002ac8:	e07c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aca:	4bc3      	ldr	r3, [pc, #780]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2238      	movs	r2, #56	; 0x38
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad4:	4bc0      	ldr	r3, [pc, #768]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4013      	ands	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d102      	bne.n	8002aea <HAL_RCC_OscConfig+0x3e>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d10b      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	4bb9      	ldr	r3, [pc, #740]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	029b      	lsls	r3, r3, #10
 8002af8:	4013      	ands	r3, r2
 8002afa:	d062      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x116>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d15e      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e2d4      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	025b      	lsls	r3, r3, #9
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x78>
 8002b14:	4bb0      	ldr	r3, [pc, #704]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4baf      	ldr	r3, [pc, #700]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	0249      	lsls	r1, r1, #9
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e020      	b.n	8002b66 <HAL_RCC_OscConfig+0xba>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	23a0      	movs	r3, #160	; 0xa0
 8002b2a:	02db      	lsls	r3, r3, #11
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d10e      	bne.n	8002b4e <HAL_RCC_OscConfig+0xa2>
 8002b30:	4ba9      	ldr	r3, [pc, #676]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4ba8      	ldr	r3, [pc, #672]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	02c9      	lsls	r1, r1, #11
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	4ba6      	ldr	r3, [pc, #664]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4ba5      	ldr	r3, [pc, #660]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0249      	lsls	r1, r1, #9
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0xba>
 8002b4e:	4ba2      	ldr	r3, [pc, #648]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4ba1      	ldr	r3, [pc, #644]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b54:	49a1      	ldr	r1, [pc, #644]	; (8002ddc <HAL_RCC_OscConfig+0x330>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	4b9f      	ldr	r3, [pc, #636]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b9e      	ldr	r3, [pc, #632]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b60:	499f      	ldr	r1, [pc, #636]	; (8002de0 <HAL_RCC_OscConfig+0x334>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f849 	bl	8000c04 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe f844 	bl	8000c04 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e293      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8a:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	4013      	ands	r3, r2
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0xcc>
 8002b96:	e015      	b.n	8002bc4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe f834 	bl	8000c04 <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba2:	f7fe f82f 	bl	8000c04 <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e27e      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb4:	4b88      	ldr	r3, [pc, #544]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0xf6>
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d100      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x124>
 8002bce:	e099      	b.n	8002d04 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd0:	4b81      	ldr	r3, [pc, #516]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2238      	movs	r2, #56	; 0x38
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bda:	4b7f      	ldr	r3, [pc, #508]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2203      	movs	r2, #3
 8002be0:	4013      	ands	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d102      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x144>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d002      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d135      	bne.n	8002c62 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf6:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x162>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e251      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0e:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a74      	ldr	r2, [pc, #464]	; (8002de4 <HAL_RCC_OscConfig+0x338>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	021a      	lsls	r2, r3, #8
 8002c1e:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d112      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c2a:	4b6b      	ldr	r3, [pc, #428]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x33c>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002c3e:	4b66      	ldr	r3, [pc, #408]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0adb      	lsrs	r3, r3, #11
 8002c44:	2207      	movs	r2, #7
 8002c46:	4013      	ands	r3, r2
 8002c48:	4a68      	ldr	r2, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x340>)
 8002c4a:	40da      	lsrs	r2, r3
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x344>)
 8002c4e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c50:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <HAL_RCC_OscConfig+0x348>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd ff79 	bl	8000b4c <HAL_InitTick>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d051      	beq.n	8002d02 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e227      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d030      	beq.n	8002ccc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x33c>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002c7e:	4b56      	ldr	r3, [pc, #344]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	0049      	lsls	r1, r1, #1
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fd ffba 	bl	8000c04 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fd ffb5 	bl	8000c04 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e204      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_RCC_OscConfig+0x338>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	021a      	lsls	r2, r3, #8
 8002cc4:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	e01b      	b.n	8002d04 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002ccc:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	4949      	ldr	r1, [pc, #292]	; (8002df8 <HAL_RCC_OscConfig+0x34c>)
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fd ff94 	bl	8000c04 <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fd ff8f 	bl	8000c04 <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1de      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf4:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x236>
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d02:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d047      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d0e:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2238      	movs	r2, #56	; 0x38
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b18      	cmp	r3, #24
 8002d18:	d10a      	bne.n	8002d30 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d03c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d138      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e1c0      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d019      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d3c:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d3e:	2101      	movs	r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fd ff5e 	bl	8000c04 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7fd ff59 	bl	8000c04 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1a8      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d0f1      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2a2>
 8002d6a:	e018      	b.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d72:	2101      	movs	r1, #1
 8002d74:	438a      	bics	r2, r1
 8002d76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fd ff44 	bl	8000c04 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fd ff3f 	bl	8000c04 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e18e      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d1f1      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2204      	movs	r2, #4
 8002da4:	4013      	ands	r3, r2
 8002da6:	d100      	bne.n	8002daa <HAL_RCC_OscConfig+0x2fe>
 8002da8:	e0c6      	b.n	8002f38 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	231f      	movs	r3, #31
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2238      	movs	r2, #56	; 0x38
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d11e      	bne.n	8002dfc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_OscConfig+0x32c>)
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d100      	bne.n	8002dca <HAL_RCC_OscConfig+0x31e>
 8002dc8:	e0b6      	b.n	8002f38 <HAL_RCC_OscConfig+0x48c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d000      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x328>
 8002dd2:	e0b1      	b.n	8002f38 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e16c      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	fffeffff 	.word	0xfffeffff
 8002de0:	fffbffff 	.word	0xfffbffff
 8002de4:	ffff80ff 	.word	0xffff80ff
 8002de8:	ffffc7ff 	.word	0xffffc7ff
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000004 	.word	0x20000004
 8002df8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dfc:	4baf      	ldr	r3, [pc, #700]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	055b      	lsls	r3, r3, #21
 8002e04:	4013      	ands	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_OscConfig+0x360>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x362>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d011      	beq.n	8002e36 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4baa      	ldr	r3, [pc, #680]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e16:	4ba9      	ldr	r3, [pc, #676]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0549      	lsls	r1, r1, #21
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e20:	4ba6      	ldr	r3, [pc, #664]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	055b      	lsls	r3, r3, #21
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002e2e:	231f      	movs	r3, #31
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e36:	4ba2      	ldr	r3, [pc, #648]	; (80030c0 <HAL_RCC_OscConfig+0x614>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d11a      	bne.n	8002e78 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e42:	4b9f      	ldr	r3, [pc, #636]	; (80030c0 <HAL_RCC_OscConfig+0x614>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b9e      	ldr	r3, [pc, #632]	; (80030c0 <HAL_RCC_OscConfig+0x614>)
 8002e48:	2180      	movs	r1, #128	; 0x80
 8002e4a:	0049      	lsls	r1, r1, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002e50:	f7fd fed8 	bl	8000c04 <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5a:	f7fd fed3 	bl	8000c04 <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e122      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6c:	4b94      	ldr	r3, [pc, #592]	; (80030c0 <HAL_RCC_OscConfig+0x614>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x3e2>
 8002e80:	4b8e      	ldr	r3, [pc, #568]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e84:	4b8d      	ldr	r3, [pc, #564]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e8c:	e01c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x404>
 8002e96:	4b89      	ldr	r3, [pc, #548]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e9a:	4b88      	ldr	r3, [pc, #544]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea2:	4b86      	ldr	r3, [pc, #536]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002ea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ea6:	4b85      	ldr	r3, [pc, #532]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
 8002eb0:	4b82      	ldr	r3, [pc, #520]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002eb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eb4:	4b81      	ldr	r3, [pc, #516]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	438a      	bics	r2, r1
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ebc:	4b7f      	ldr	r3, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002ec2:	2104      	movs	r1, #4
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d014      	beq.n	8002efa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fd fe98 	bl	8000c04 <HAL_GetTick>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed8:	e009      	b.n	8002eee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fd fe93 	bl	8000c04 <HAL_GetTick>
 8002ede:	0002      	movs	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	4a77      	ldr	r2, [pc, #476]	; (80030c4 <HAL_RCC_OscConfig+0x618>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e0e1      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x42e>
 8002ef8:	e013      	b.n	8002f22 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fd fe83 	bl	8000c04 <HAL_GetTick>
 8002efe:	0003      	movs	r3, r0
 8002f00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f02:	e009      	b.n	8002f18 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fd fe7e 	bl	8000c04 <HAL_GetTick>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	4a6d      	ldr	r2, [pc, #436]	; (80030c4 <HAL_RCC_OscConfig+0x618>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0cc      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f18:	4b68      	ldr	r3, [pc, #416]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f22:	231f      	movs	r3, #31
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f2c:	4b63      	ldr	r3, [pc, #396]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f30:	4b62      	ldr	r3, [pc, #392]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f32:	4965      	ldr	r1, [pc, #404]	; (80030c8 <HAL_RCC_OscConfig+0x61c>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d100      	bne.n	8002f42 <HAL_RCC_OscConfig+0x496>
 8002f40:	e0b6      	b.n	80030b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f42:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2238      	movs	r2, #56	; 0x38
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d100      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4a4>
 8002f4e:	e07e      	b.n	800304e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d153      	bne.n	8003000 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b58      	ldr	r3, [pc, #352]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b57      	ldr	r3, [pc, #348]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f5e:	495b      	ldr	r1, [pc, #364]	; (80030cc <HAL_RCC_OscConfig+0x620>)
 8002f60:	400a      	ands	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fd fe4e 	bl	8000c04 <HAL_GetTick>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fd fe49 	bl	8000c04 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e098      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	4b4e      	ldr	r3, [pc, #312]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	049b      	lsls	r3, r3, #18
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a4f      	ldr	r2, [pc, #316]	; (80030d0 <HAL_RCC_OscConfig+0x624>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fba:	4b40      	ldr	r3, [pc, #256]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	0449      	lsls	r1, r1, #17
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	0549      	lsls	r1, r1, #21
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fd fe15 	bl	8000c04 <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fd fe10 	bl	8000c04 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e05f      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	049b      	lsls	r3, r3, #18
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x534>
 8002ffe:	e057      	b.n	80030b0 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003000:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8003006:	4931      	ldr	r1, [pc, #196]	; (80030cc <HAL_RCC_OscConfig+0x620>)
 8003008:	400a      	ands	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4b2a      	ldr	r3, [pc, #168]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8003012:	2103      	movs	r1, #3
 8003014:	438a      	bics	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 800301e:	492d      	ldr	r1, [pc, #180]	; (80030d4 <HAL_RCC_OscConfig+0x628>)
 8003020:	400a      	ands	r2, r1
 8003022:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fd fdee 	bl	8000c04 <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fd fde9 	bl	8000c04 <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e038      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	049b      	lsls	r3, r3, #18
 8003048:	4013      	ands	r3, r2
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x582>
 800304c:	e030      	b.n	80030b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e02b      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <HAL_RCC_OscConfig+0x610>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2203      	movs	r2, #3
 8003064:	401a      	ands	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	429a      	cmp	r2, r3
 800306c:	d11e      	bne.n	80030ac <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2270      	movs	r2, #112	; 0x70
 8003072:	401a      	ands	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d117      	bne.n	80030ac <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	23fe      	movs	r3, #254	; 0xfe
 8003080:	01db      	lsls	r3, r3, #7
 8003082:	401a      	ands	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d10e      	bne.n	80030ac <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	23f8      	movs	r3, #248	; 0xf8
 8003092:	039b      	lsls	r3, r3, #14
 8003094:	401a      	ands	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	0f5b      	lsrs	r3, r3, #29
 80030a2:	075a      	lsls	r2, r3, #29
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e000      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b008      	add	sp, #32
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40007000 	.word	0x40007000
 80030c4:	00001388 	.word	0x00001388
 80030c8:	efffffff 	.word	0xefffffff
 80030cc:	feffffff 	.word	0xfeffffff
 80030d0:	1fc1808c 	.word	0x1fc1808c
 80030d4:	effeffff 	.word	0xeffeffff

080030d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0e9      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ec:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2207      	movs	r2, #7
 80030f2:	4013      	ands	r3, r2
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d91e      	bls.n	8003138 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b73      	ldr	r3, [pc, #460]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2207      	movs	r2, #7
 8003100:	4393      	bics	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	4b70      	ldr	r3, [pc, #448]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800310c:	f7fd fd7a 	bl	8000c04 <HAL_GetTick>
 8003110:	0003      	movs	r3, r0
 8003112:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003114:	e009      	b.n	800312a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f7fd fd75 	bl	8000c04 <HAL_GetTick>
 800311a:	0002      	movs	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <HAL_RCC_ClockConfig+0x1f4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d901      	bls.n	800312a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0ca      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2207      	movs	r2, #7
 8003130:	4013      	ands	r3, r2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d1ee      	bne.n	8003116 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2202      	movs	r2, #2
 800313e:	4013      	ands	r3, r2
 8003140:	d015      	beq.n	800316e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2204      	movs	r2, #4
 8003148:	4013      	ands	r3, r2
 800314a:	d006      	beq.n	800315a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800314c:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003152:	21e0      	movs	r1, #224	; 0xe0
 8003154:	01c9      	lsls	r1, r1, #7
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800315a:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4a5d      	ldr	r2, [pc, #372]	; (80032d4 <HAL_RCC_ClockConfig+0x1fc>)
 8003160:	4013      	ands	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2201      	movs	r2, #1
 8003174:	4013      	ands	r3, r2
 8003176:	d057      	beq.n	8003228 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d107      	bne.n	8003190 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	4013      	ands	r3, r2
 800318a:	d12b      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e097      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	049b      	lsls	r3, r3, #18
 80031a0:	4013      	ands	r3, r2
 80031a2:	d11f      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e08b      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b0:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4013      	ands	r3, r2
 80031ba:	d113      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e07f      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c8:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	2202      	movs	r2, #2
 80031ce:	4013      	ands	r3, r2
 80031d0:	d108      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e074      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	2202      	movs	r2, #2
 80031dc:	4013      	ands	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e06d      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e4:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2207      	movs	r2, #7
 80031ea:	4393      	bics	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f8:	f7fd fd04 	bl	8000c04 <HAL_GetTick>
 80031fc:	0003      	movs	r3, r0
 80031fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003200:	e009      	b.n	8003216 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003202:	f7fd fcff 	bl	8000c04 <HAL_GetTick>
 8003206:	0002      	movs	r2, r0
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	4a2f      	ldr	r2, [pc, #188]	; (80032cc <HAL_RCC_ClockConfig+0x1f4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e054      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2238      	movs	r2, #56	; 0x38
 800321c:	401a      	ands	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	429a      	cmp	r2, r3
 8003226:	d1ec      	bne.n	8003202 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2207      	movs	r2, #7
 800322e:	4013      	ands	r3, r2
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d21e      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2207      	movs	r2, #7
 800323c:	4393      	bics	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003248:	f7fd fcdc 	bl	8000c04 <HAL_GetTick>
 800324c:	0003      	movs	r3, r0
 800324e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003250:	e009      	b.n	8003266 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003252:	f7fd fcd7 	bl	8000c04 <HAL_GetTick>
 8003256:	0002      	movs	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_RCC_ClockConfig+0x1f4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e02c      	b.n	80032c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2207      	movs	r2, #7
 800326c:	4013      	ands	r3, r2
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2204      	movs	r2, #4
 800327a:	4013      	ands	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <HAL_RCC_ClockConfig+0x200>)
 8003284:	4013      	ands	r3, r2
 8003286:	0019      	movs	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003292:	f000 f829 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8003296:	0001      	movs	r1, r0
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCC_ClockConfig+0x1f8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	220f      	movs	r2, #15
 80032a0:	401a      	ands	r2, r3
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCC_ClockConfig+0x204>)
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	58d3      	ldr	r3, [r2, r3]
 80032a8:	221f      	movs	r2, #31
 80032aa:	4013      	ands	r3, r2
 80032ac:	000a      	movs	r2, r1
 80032ae:	40da      	lsrs	r2, r3
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x208>)
 80032b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x20c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7fd fc47 	bl	8000b4c <HAL_InitTick>
 80032be:	0003      	movs	r3, r0
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b004      	add	sp, #16
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40022000 	.word	0x40022000
 80032cc:	00001388 	.word	0x00001388
 80032d0:	40021000 	.word	0x40021000
 80032d4:	fffff0ff 	.word	0xfffff0ff
 80032d8:	ffff8fff 	.word	0xffff8fff
 80032dc:	080048ac 	.word	0x080048ac
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ee:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2238      	movs	r2, #56	; 0x38
 80032f4:	4013      	ands	r3, r2
 80032f6:	d10f      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0adb      	lsrs	r3, r3, #11
 80032fe:	2207      	movs	r2, #7
 8003300:	4013      	ands	r3, r2
 8003302:	2201      	movs	r2, #1
 8003304:	409a      	lsls	r2, r3
 8003306:	0013      	movs	r3, r2
 8003308:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	4835      	ldr	r0, [pc, #212]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800330e:	f7fc fef7 	bl	8000100 <__udivsi3>
 8003312:	0003      	movs	r3, r0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e05d      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2238      	movs	r2, #56	; 0x38
 800331e:	4013      	ands	r3, r2
 8003320:	2b08      	cmp	r3, #8
 8003322:	d102      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e054      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2238      	movs	r2, #56	; 0x38
 8003330:	4013      	ands	r3, r2
 8003332:	2b10      	cmp	r3, #16
 8003334:	d138      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003336:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2203      	movs	r2, #3
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	2207      	movs	r2, #7
 8003348:	4013      	ands	r3, r2
 800334a:	3301      	adds	r3, #1
 800334c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d10d      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	4824      	ldr	r0, [pc, #144]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003358:	f7fc fed2 	bl	8000100 <__udivsi3>
 800335c:	0003      	movs	r3, r0
 800335e:	0019      	movs	r1, r3
 8003360:	4b1f      	ldr	r3, [pc, #124]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	227f      	movs	r2, #127	; 0x7f
 8003368:	4013      	ands	r3, r2
 800336a:	434b      	muls	r3, r1
 800336c:	617b      	str	r3, [r7, #20]
        break;
 800336e:	e00d      	b.n	800338c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	481c      	ldr	r0, [pc, #112]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003374:	f7fc fec4 	bl	8000100 <__udivsi3>
 8003378:	0003      	movs	r3, r0
 800337a:	0019      	movs	r1, r3
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	227f      	movs	r2, #127	; 0x7f
 8003384:	4013      	ands	r3, r2
 8003386:	434b      	muls	r3, r1
 8003388:	617b      	str	r3, [r7, #20]
        break;
 800338a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0f5b      	lsrs	r3, r3, #29
 8003392:	2207      	movs	r2, #7
 8003394:	4013      	ands	r3, r2
 8003396:	3301      	adds	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	6978      	ldr	r0, [r7, #20]
 800339e:	f7fc feaf 	bl	8000100 <__udivsi3>
 80033a2:	0003      	movs	r3, r0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	e015      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2238      	movs	r2, #56	; 0x38
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d103      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2238      	movs	r2, #56	; 0x38
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b18      	cmp	r3, #24
 80033c6:	d103      	bne.n	80033d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80033c8:	23fa      	movs	r3, #250	; 0xfa
 80033ca:	01db      	lsls	r3, r3, #7
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e001      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033d4:	693b      	ldr	r3, [r7, #16]
}
 80033d6:	0018      	movs	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	b006      	add	sp, #24
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	40021000 	.word	0x40021000
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	007a1200 	.word	0x007a1200

080033ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b02      	ldr	r3, [pc, #8]	; (80033fc <HAL_RCC_GetHCLKFreq+0x10>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003404:	f7ff fff2 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003408:	0004      	movs	r4, r0
 800340a:	f7ff fb43 	bl	8002a94 <LL_RCC_GetAPB1Prescaler>
 800340e:	0003      	movs	r3, r0
 8003410:	0b1a      	lsrs	r2, r3, #12
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	58d3      	ldr	r3, [r2, r3]
 8003418:	221f      	movs	r2, #31
 800341a:	4013      	ands	r3, r2
 800341c:	40dc      	lsrs	r4, r3
 800341e:	0023      	movs	r3, r4
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	bdb0      	pop	{r4, r5, r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	080048ec 	.word	0x080048ec

0800342c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003434:	2313      	movs	r3, #19
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800343c:	2312      	movs	r3, #18
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	029b      	lsls	r3, r3, #10
 800344c:	4013      	ands	r3, r2
 800344e:	d100      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003450:	e0a3      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003452:	2011      	movs	r0, #17
 8003454:	183b      	adds	r3, r7, r0
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345a:	4b86      	ldr	r3, [pc, #536]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800345c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	055b      	lsls	r3, r3, #21
 8003462:	4013      	ands	r3, r2
 8003464:	d110      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b83      	ldr	r3, [pc, #524]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346a:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	0549      	lsls	r1, r1, #21
 8003470:	430a      	orrs	r2, r1
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
 8003474:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	055b      	lsls	r3, r3, #21
 800347c:	4013      	ands	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003482:	183b      	adds	r3, r7, r0
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003488:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	0049      	lsls	r1, r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003496:	f7fd fbb5 	bl	8000c04 <HAL_GetTick>
 800349a:	0003      	movs	r3, r0
 800349c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800349e:	e00b      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a0:	f7fd fbb0 	bl	8000c04 <HAL_GetTick>
 80034a4:	0002      	movs	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d904      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80034ae:	2313      	movs	r3, #19
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	2203      	movs	r2, #3
 80034b4:	701a      	strb	r2, [r3, #0]
        break;
 80034b6:	e005      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034b8:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	d0ed      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80034c4:	2313      	movs	r3, #19
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d154      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034ce:	4b69      	ldr	r3, [pc, #420]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d2:	23c0      	movs	r3, #192	; 0xc0
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4013      	ands	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d019      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d014      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034ea:	4b62      	ldr	r3, [pc, #392]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	4a63      	ldr	r2, [pc, #396]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034f4:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f8:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	0249      	lsls	r1, r1, #9
 80034fe:	430a      	orrs	r2, r1
 8003500:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003506:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003508:	495d      	ldr	r1, [pc, #372]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800350a:	400a      	ands	r2, r1
 800350c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800350e:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2201      	movs	r2, #1
 8003518:	4013      	ands	r3, r2
 800351a:	d016      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fb72 	bl	8000c04 <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003524:	e00c      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fd fb6d 	bl	8000c04 <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d904      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003536:	2313      	movs	r3, #19
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	2203      	movs	r2, #3
 800353c:	701a      	strb	r2, [r3, #0]
            break;
 800353e:	e004      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003540:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	2202      	movs	r2, #2
 8003546:	4013      	ands	r3, r2
 8003548:	d0ed      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800354a:	2313      	movs	r3, #19
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003554:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	4b44      	ldr	r3, [pc, #272]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003564:	430a      	orrs	r2, r1
 8003566:	65da      	str	r2, [r3, #92]	; 0x5c
 8003568:	e00c      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800356a:	2312      	movs	r3, #18
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	2213      	movs	r2, #19
 8003570:	18ba      	adds	r2, r7, r2
 8003572:	7812      	ldrb	r2, [r2, #0]
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e005      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003578:	2312      	movs	r3, #18
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2213      	movs	r2, #19
 800357e:	18ba      	adds	r2, r7, r2
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003584:	2311      	movs	r3, #17
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003594:	493c      	ldr	r1, [pc, #240]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003596:	400a      	ands	r2, r1
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035a4:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2203      	movs	r2, #3
 80035aa:	4393      	bics	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035b4:	430a      	orrs	r2, r1
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2202      	movs	r2, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	220c      	movs	r2, #12
 80035c8:	4393      	bics	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035d2:	430a      	orrs	r2, r1
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2220      	movs	r2, #32
 80035dc:	4013      	ands	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e4:	4a29      	ldr	r2, [pc, #164]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035f0:	430a      	orrs	r2, r1
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	01db      	lsls	r3, r3, #7
 80035fc:	4013      	ands	r3, r2
 80035fe:	d015      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	0899      	lsrs	r1, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800360e:	430a      	orrs	r2, r1
 8003610:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	05db      	lsls	r3, r3, #23
 800361a:	429a      	cmp	r2, r3
 800361c:	d106      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003624:	2180      	movs	r1, #128	; 0x80
 8003626:	0249      	lsls	r1, r1, #9
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	4013      	ands	r3, r2
 8003636:	d016      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800363e:	4013      	ands	r3, r2
 8003640:	0019      	movs	r1, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003648:	430a      	orrs	r2, r1
 800364a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	01db      	lsls	r3, r3, #7
 8003654:	429a      	cmp	r2, r3
 8003656:	d106      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	0249      	lsls	r1, r1, #9
 8003662:	430a      	orrs	r2, r1
 8003664:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003666:	2312      	movs	r3, #18
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	781b      	ldrb	r3, [r3, #0]
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b006      	add	sp, #24
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	40007000 	.word	0x40007000
 800367c:	fffffcff 	.word	0xfffffcff
 8003680:	fffeffff 	.word	0xfffeffff
 8003684:	00001388 	.word	0x00001388
 8003688:	efffffff 	.word	0xefffffff
 800368c:	ffffcfff 	.word	0xffffcfff
 8003690:	ffff3fff 	.word	0xffff3fff

08003694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e046      	b.n	8003734 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2284      	movs	r2, #132	; 0x84
 80036aa:	589b      	ldr	r3, [r3, r2]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7fd f994 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2284      	movs	r2, #132	; 0x84
 80036c4:	2124      	movs	r1, #36	; 0x24
 80036c6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	438a      	bics	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 fb66 	bl	8003dac <UART_SetConfig>
 80036e0:	0003      	movs	r3, r0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e024      	b.n	8003734 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 fcff 	bl	80040f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	490d      	ldr	r1, [pc, #52]	; (800373c <HAL_UART_Init+0xa8>)
 8003706:	400a      	ands	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	212a      	movs	r1, #42	; 0x2a
 8003716:	438a      	bics	r2, r1
 8003718:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 fd97 	bl	8004260 <UART_CheckIdleState>
 8003732:	0003      	movs	r3, r0
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}
 800373c:	ffffb7ff 	.word	0xffffb7ff

08003740 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b0aa      	sub	sp, #168	; 0xa8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	22a4      	movs	r2, #164	; 0xa4
 8003750:	18b9      	adds	r1, r7, r2
 8003752:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	20a0      	movs	r0, #160	; 0xa0
 800375c:	1839      	adds	r1, r7, r0
 800375e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	249c      	movs	r4, #156	; 0x9c
 8003768:	1939      	adds	r1, r7, r4
 800376a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800376c:	0011      	movs	r1, r2
 800376e:	18bb      	adds	r3, r7, r2
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4aa0      	ldr	r2, [pc, #640]	; (80039f4 <HAL_UART_IRQHandler+0x2b4>)
 8003774:	4013      	ands	r3, r2
 8003776:	2298      	movs	r2, #152	; 0x98
 8003778:	18bd      	adds	r5, r7, r2
 800377a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800377c:	18bb      	adds	r3, r7, r2
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11a      	bne.n	80037ba <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003784:	187b      	adds	r3, r7, r1
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2220      	movs	r2, #32
 800378a:	4013      	ands	r3, r2
 800378c:	d015      	beq.n	80037ba <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800378e:	183b      	adds	r3, r7, r0
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2220      	movs	r2, #32
 8003794:	4013      	ands	r3, r2
 8003796:	d105      	bne.n	80037a4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003798:	193b      	adds	r3, r7, r4
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	055b      	lsls	r3, r3, #21
 80037a0:	4013      	ands	r3, r2
 80037a2:	d00a      	beq.n	80037ba <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d100      	bne.n	80037ae <HAL_UART_IRQHandler+0x6e>
 80037ac:	e2cf      	b.n	8003d4e <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	0010      	movs	r0, r2
 80037b6:	4798      	blx	r3
      }
      return;
 80037b8:	e2c9      	b.n	8003d4e <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037ba:	2398      	movs	r3, #152	; 0x98
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d100      	bne.n	80037c6 <HAL_UART_IRQHandler+0x86>
 80037c4:	e11e      	b.n	8003a04 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037c6:	239c      	movs	r3, #156	; 0x9c
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a8a      	ldr	r2, [pc, #552]	; (80039f8 <HAL_UART_IRQHandler+0x2b8>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	d106      	bne.n	80037e0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037d2:	23a0      	movs	r3, #160	; 0xa0
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a88      	ldr	r2, [pc, #544]	; (80039fc <HAL_UART_IRQHandler+0x2bc>)
 80037da:	4013      	ands	r3, r2
 80037dc:	d100      	bne.n	80037e0 <HAL_UART_IRQHandler+0xa0>
 80037de:	e111      	b.n	8003a04 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037e0:	23a4      	movs	r3, #164	; 0xa4
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	d012      	beq.n	8003812 <HAL_UART_IRQHandler+0xd2>
 80037ec:	23a0      	movs	r3, #160	; 0xa0
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4013      	ands	r3, r2
 80037f8:	d00b      	beq.n	8003812 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2201      	movs	r2, #1
 8003800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	228c      	movs	r2, #140	; 0x8c
 8003806:	589b      	ldr	r3, [r3, r2]
 8003808:	2201      	movs	r2, #1
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	218c      	movs	r1, #140	; 0x8c
 8003810:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003812:	23a4      	movs	r3, #164	; 0xa4
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2202      	movs	r2, #2
 800381a:	4013      	ands	r3, r2
 800381c:	d011      	beq.n	8003842 <HAL_UART_IRQHandler+0x102>
 800381e:	239c      	movs	r3, #156	; 0x9c
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2201      	movs	r2, #1
 8003826:	4013      	ands	r3, r2
 8003828:	d00b      	beq.n	8003842 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2202      	movs	r2, #2
 8003830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	228c      	movs	r2, #140	; 0x8c
 8003836:	589b      	ldr	r3, [r3, r2]
 8003838:	2204      	movs	r2, #4
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	218c      	movs	r1, #140	; 0x8c
 8003840:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003842:	23a4      	movs	r3, #164	; 0xa4
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2204      	movs	r2, #4
 800384a:	4013      	ands	r3, r2
 800384c:	d011      	beq.n	8003872 <HAL_UART_IRQHandler+0x132>
 800384e:	239c      	movs	r3, #156	; 0x9c
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2201      	movs	r2, #1
 8003856:	4013      	ands	r3, r2
 8003858:	d00b      	beq.n	8003872 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2204      	movs	r2, #4
 8003860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	228c      	movs	r2, #140	; 0x8c
 8003866:	589b      	ldr	r3, [r3, r2]
 8003868:	2202      	movs	r2, #2
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	218c      	movs	r1, #140	; 0x8c
 8003870:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003872:	23a4      	movs	r3, #164	; 0xa4
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2208      	movs	r2, #8
 800387a:	4013      	ands	r3, r2
 800387c:	d017      	beq.n	80038ae <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800387e:	23a0      	movs	r3, #160	; 0xa0
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2220      	movs	r2, #32
 8003886:	4013      	ands	r3, r2
 8003888:	d105      	bne.n	8003896 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800388a:	239c      	movs	r3, #156	; 0x9c
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a59      	ldr	r2, [pc, #356]	; (80039f8 <HAL_UART_IRQHandler+0x2b8>)
 8003892:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003894:	d00b      	beq.n	80038ae <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2208      	movs	r2, #8
 800389c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	228c      	movs	r2, #140	; 0x8c
 80038a2:	589b      	ldr	r3, [r3, r2]
 80038a4:	2208      	movs	r2, #8
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	218c      	movs	r1, #140	; 0x8c
 80038ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038ae:	23a4      	movs	r3, #164	; 0xa4
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	4013      	ands	r3, r2
 80038ba:	d013      	beq.n	80038e4 <HAL_UART_IRQHandler+0x1a4>
 80038bc:	23a0      	movs	r3, #160	; 0xa0
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	04db      	lsls	r3, r3, #19
 80038c6:	4013      	ands	r3, r2
 80038c8:	d00c      	beq.n	80038e4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	228c      	movs	r2, #140	; 0x8c
 80038d8:	589b      	ldr	r3, [r3, r2]
 80038da:	2220      	movs	r2, #32
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	218c      	movs	r1, #140	; 0x8c
 80038e2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	228c      	movs	r2, #140	; 0x8c
 80038e8:	589b      	ldr	r3, [r3, r2]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d100      	bne.n	80038f0 <HAL_UART_IRQHandler+0x1b0>
 80038ee:	e230      	b.n	8003d52 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038f0:	23a4      	movs	r3, #164	; 0xa4
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2220      	movs	r2, #32
 80038f8:	4013      	ands	r3, r2
 80038fa:	d015      	beq.n	8003928 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038fc:	23a0      	movs	r3, #160	; 0xa0
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2220      	movs	r2, #32
 8003904:	4013      	ands	r3, r2
 8003906:	d106      	bne.n	8003916 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003908:	239c      	movs	r3, #156	; 0x9c
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	055b      	lsls	r3, r3, #21
 8003912:	4013      	ands	r3, r2
 8003914:	d008      	beq.n	8003928 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	0010      	movs	r0, r2
 8003926:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	228c      	movs	r2, #140	; 0x8c
 800392c:	589b      	ldr	r3, [r3, r2]
 800392e:	2194      	movs	r1, #148	; 0x94
 8003930:	187a      	adds	r2, r7, r1
 8003932:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	4013      	ands	r3, r2
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d004      	beq.n	800394c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003942:	187b      	adds	r3, r7, r1
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2228      	movs	r2, #40	; 0x28
 8003948:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800394a:	d047      	beq.n	80039dc <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 fd98 	bl	8004484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	4013      	ands	r3, r2
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d137      	bne.n	80039d2 <HAL_UART_IRQHandler+0x292>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003962:	f3ef 8310 	mrs	r3, PRIMASK
 8003966:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396a:	2090      	movs	r0, #144	; 0x90
 800396c:	183a      	adds	r2, r7, r0
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	2301      	movs	r3, #1
 8003972:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2140      	movs	r1, #64	; 0x40
 8003988:	438a      	bics	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	183b      	adds	r3, r7, r0
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003994:	f383 8810 	msr	PRIMASK, r3
}
 8003998:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d012      	beq.n	80039c8 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a6:	4a16      	ldr	r2, [pc, #88]	; (8003a00 <HAL_UART_IRQHandler+0x2c0>)
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7fe fcb4 	bl	800231c <HAL_DMA_Abort_IT>
 80039b4:	1e03      	subs	r3, r0, #0
 80039b6:	d01a      	beq.n	80039ee <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c2:	0018      	movs	r0, r3
 80039c4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c6:	e012      	b.n	80039ee <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 f9da 	bl	8003d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e00d      	b.n	80039ee <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 f9d5 	bl	8003d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039da:	e008      	b.n	80039ee <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 f9d0 	bl	8003d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	228c      	movs	r2, #140	; 0x8c
 80039e8:	2100      	movs	r1, #0
 80039ea:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80039ec:	e1b1      	b.n	8003d52 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ee:	46c0      	nop			; (mov r8, r8)
    return;
 80039f0:	e1af      	b.n	8003d52 <HAL_UART_IRQHandler+0x612>
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	0000080f 	.word	0x0000080f
 80039f8:	10000001 	.word	0x10000001
 80039fc:	04000120 	.word	0x04000120
 8003a00:	08004551 	.word	0x08004551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d000      	beq.n	8003a0e <HAL_UART_IRQHandler+0x2ce>
 8003a0c:	e135      	b.n	8003c7a <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a0e:	23a4      	movs	r3, #164	; 0xa4
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	4013      	ands	r3, r2
 8003a18:	d100      	bne.n	8003a1c <HAL_UART_IRQHandler+0x2dc>
 8003a1a:	e12e      	b.n	8003c7a <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a1c:	23a0      	movs	r3, #160	; 0xa0
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2210      	movs	r2, #16
 8003a24:	4013      	ands	r3, r2
 8003a26:	d100      	bne.n	8003a2a <HAL_UART_IRQHandler+0x2ea>
 8003a28:	e127      	b.n	8003c7a <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2210      	movs	r2, #16
 8003a30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d000      	beq.n	8003a42 <HAL_UART_IRQHandler+0x302>
 8003a40:	e09e      	b.n	8003b80 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	217e      	movs	r1, #126	; 0x7e
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d100      	bne.n	8003a5a <HAL_UART_IRQHandler+0x31a>
 8003a58:	e17d      	b.n	8003d56 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	225c      	movs	r2, #92	; 0x5c
 8003a5e:	5a9b      	ldrh	r3, [r3, r2]
 8003a60:	187a      	adds	r2, r7, r1
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d300      	bcc.n	8003a6a <HAL_UART_IRQHandler+0x32a>
 8003a68:	e175      	b.n	8003d56 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	187a      	adds	r2, r7, r1
 8003a6e:	215e      	movs	r1, #94	; 0x5e
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d16f      	bne.n	8003b62 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a82:	f3ef 8310 	mrs	r3, PRIMASK
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	49b1      	ldr	r1, [pc, #708]	; (8003d68 <HAL_UART_IRQHandler+0x628>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abc:	677b      	str	r3, [r7, #116]	; 0x74
 8003abe:	2301      	movs	r3, #1
 8003ac0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac4:	f383 8810 	msr	PRIMASK, r3
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	438a      	bics	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae0:	f383 8810 	msr	PRIMASK, r3
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	673b      	str	r3, [r7, #112]	; 0x70
 8003af0:	2301      	movs	r3, #1
 8003af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af6:	f383 8810 	msr	PRIMASK, r3
}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	438a      	bics	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b0e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2288      	movs	r2, #136	; 0x88
 8003b1c:	2120      	movs	r1, #32
 8003b1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b26:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b30:	2301      	movs	r3, #1
 8003b32:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2110      	movs	r1, #16
 8003b48:	438a      	bics	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b52:	f383 8810 	msr	PRIMASK, r3
}
 8003b56:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7fe fb7b 	bl	8002258 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	225c      	movs	r2, #92	; 0x5c
 8003b66:	5a9a      	ldrh	r2, [r3, r2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	215e      	movs	r1, #94	; 0x5e
 8003b6c:	5a5b      	ldrh	r3, [r3, r1]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	0011      	movs	r1, r2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 f90b 	bl	8003d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b7e:	e0ea      	b.n	8003d56 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	225c      	movs	r2, #92	; 0x5c
 8003b84:	5a99      	ldrh	r1, [r3, r2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	225e      	movs	r2, #94	; 0x5e
 8003b8a:	5a9b      	ldrh	r3, [r3, r2]
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	208e      	movs	r0, #142	; 0x8e
 8003b90:	183b      	adds	r3, r7, r0
 8003b92:	1a8a      	subs	r2, r1, r2
 8003b94:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	225e      	movs	r2, #94	; 0x5e
 8003b9a:	5a9b      	ldrh	r3, [r3, r2]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d100      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x464>
 8003ba2:	e0da      	b.n	8003d5a <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8003ba4:	183b      	adds	r3, r7, r0
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d100      	bne.n	8003bae <HAL_UART_IRQHandler+0x46e>
 8003bac:	e0d5      	b.n	8003d5a <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bae:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bb6:	2488      	movs	r4, #136	; 0x88
 8003bb8:	193a      	adds	r2, r7, r4
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4966      	ldr	r1, [pc, #408]	; (8003d6c <HAL_UART_IRQHandler+0x62c>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bec:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bee:	2484      	movs	r4, #132	; 0x84
 8003bf0:	193a      	adds	r2, r7, r4
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4959      	ldr	r1, [pc, #356]	; (8003d70 <HAL_UART_IRQHandler+0x630>)
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	193b      	adds	r3, r7, r4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2288      	movs	r2, #136	; 0x88
 8003c22:	2120      	movs	r1, #32
 8003c24:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c32:	f3ef 8310 	mrs	r3, PRIMASK
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	2480      	movs	r4, #128	; 0x80
 8003c3c:	193a      	adds	r2, r7, r4
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	2301      	movs	r3, #1
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2110      	movs	r1, #16
 8003c58:	438a      	bics	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	193b      	adds	r3, r7, r4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	0011      	movs	r1, r2
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 f88e 	bl	8003d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c78:	e06f      	b.n	8003d5a <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c7a:	23a4      	movs	r3, #164	; 0xa4
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	035b      	lsls	r3, r3, #13
 8003c84:	4013      	ands	r3, r2
 8003c86:	d010      	beq.n	8003caa <HAL_UART_IRQHandler+0x56a>
 8003c88:	239c      	movs	r3, #156	; 0x9c
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	03db      	lsls	r3, r3, #15
 8003c92:	4013      	ands	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	0352      	lsls	r2, r2, #13
 8003c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 fc97 	bl	80045d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ca8:	e05a      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003caa:	23a4      	movs	r3, #164	; 0xa4
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d016      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cb6:	23a0      	movs	r3, #160	; 0xa0
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d106      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003cc2:	239c      	movs	r3, #156	; 0x9c
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d042      	beq.n	8003d5e <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	0010      	movs	r0, r2
 8003ce0:	4798      	blx	r3
    }
    return;
 8003ce2:	e03c      	b.n	8003d5e <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ce4:	23a4      	movs	r3, #164	; 0xa4
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	4013      	ands	r3, r2
 8003cee:	d00a      	beq.n	8003d06 <HAL_UART_IRQHandler+0x5c6>
 8003cf0:	23a0      	movs	r3, #160	; 0xa0
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 fc3d 	bl	800457e <UART_EndTransmit_IT>
    return;
 8003d04:	e02c      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d06:	23a4      	movs	r3, #164	; 0xa4
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	4013      	ands	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <HAL_UART_IRQHandler+0x5ec>
 8003d14:	23a0      	movs	r3, #160	; 0xa0
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	05db      	lsls	r3, r3, #23
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d004      	beq.n	8003d2c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 fc66 	bl	80045f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d2a:	e019      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d2c:	23a4      	movs	r3, #164	; 0xa4
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	045b      	lsls	r3, r3, #17
 8003d36:	4013      	ands	r3, r2
 8003d38:	d012      	beq.n	8003d60 <HAL_UART_IRQHandler+0x620>
 8003d3a:	23a0      	movs	r3, #160	; 0xa0
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da0d      	bge.n	8003d60 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 fc4d 	bl	80045e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d4c:	e008      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
      return;
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	e006      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
    return;
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	e004      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
      return;
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	e002      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
      return;
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	e000      	b.n	8003d60 <HAL_UART_IRQHandler+0x620>
    return;
 8003d5e:	46c0      	nop			; (mov r8, r8)
  }
}
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b02a      	add	sp, #168	; 0xa8
 8003d64:	bdb0      	pop	{r4, r5, r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	fffffeff 	.word	0xfffffeff
 8003d6c:	fffffedf 	.word	0xfffffedf
 8003d70:	effffffe 	.word	0xeffffffe

08003d74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	000a      	movs	r2, r1
 8003d9e:	1cbb      	adds	r3, r7, #2
 8003da0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b002      	add	sp, #8
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db4:	231a      	movs	r3, #26
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4abd      	ldr	r2, [pc, #756]	; (80040d0 <UART_SetConfig+0x324>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4ab8      	ldr	r2, [pc, #736]	; (80040d4 <UART_SetConfig+0x328>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0019      	movs	r1, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4aaf      	ldr	r2, [pc, #700]	; (80040d8 <UART_SetConfig+0x32c>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	220f      	movs	r2, #15
 8003e30:	4393      	bics	r3, r2
 8003e32:	0019      	movs	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4aa5      	ldr	r2, [pc, #660]	; (80040dc <UART_SetConfig+0x330>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d127      	bne.n	8003e9a <UART_SetConfig+0xee>
 8003e4a:	4ba5      	ldr	r3, [pc, #660]	; (80040e0 <UART_SetConfig+0x334>)
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d017      	beq.n	8003e86 <UART_SetConfig+0xda>
 8003e56:	d81b      	bhi.n	8003e90 <UART_SetConfig+0xe4>
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d00a      	beq.n	8003e72 <UART_SetConfig+0xc6>
 8003e5c:	d818      	bhi.n	8003e90 <UART_SetConfig+0xe4>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <UART_SetConfig+0xbc>
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d00a      	beq.n	8003e7c <UART_SetConfig+0xd0>
 8003e66:	e013      	b.n	8003e90 <UART_SetConfig+0xe4>
 8003e68:	231b      	movs	r3, #27
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e058      	b.n	8003f24 <UART_SetConfig+0x178>
 8003e72:	231b      	movs	r3, #27
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	2202      	movs	r2, #2
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e053      	b.n	8003f24 <UART_SetConfig+0x178>
 8003e7c:	231b      	movs	r3, #27
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2204      	movs	r2, #4
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e04e      	b.n	8003f24 <UART_SetConfig+0x178>
 8003e86:	231b      	movs	r3, #27
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e049      	b.n	8003f24 <UART_SetConfig+0x178>
 8003e90:	231b      	movs	r3, #27
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2210      	movs	r2, #16
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	e044      	b.n	8003f24 <UART_SetConfig+0x178>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a91      	ldr	r2, [pc, #580]	; (80040e4 <UART_SetConfig+0x338>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d127      	bne.n	8003ef4 <UART_SetConfig+0x148>
 8003ea4:	4b8e      	ldr	r3, [pc, #568]	; (80040e0 <UART_SetConfig+0x334>)
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	220c      	movs	r2, #12
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d017      	beq.n	8003ee0 <UART_SetConfig+0x134>
 8003eb0:	d81b      	bhi.n	8003eea <UART_SetConfig+0x13e>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d00a      	beq.n	8003ecc <UART_SetConfig+0x120>
 8003eb6:	d818      	bhi.n	8003eea <UART_SetConfig+0x13e>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <UART_SetConfig+0x116>
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d00a      	beq.n	8003ed6 <UART_SetConfig+0x12a>
 8003ec0:	e013      	b.n	8003eea <UART_SetConfig+0x13e>
 8003ec2:	231b      	movs	r3, #27
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e02b      	b.n	8003f24 <UART_SetConfig+0x178>
 8003ecc:	231b      	movs	r3, #27
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e026      	b.n	8003f24 <UART_SetConfig+0x178>
 8003ed6:	231b      	movs	r3, #27
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2204      	movs	r2, #4
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	e021      	b.n	8003f24 <UART_SetConfig+0x178>
 8003ee0:	231b      	movs	r3, #27
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e01c      	b.n	8003f24 <UART_SetConfig+0x178>
 8003eea:	231b      	movs	r3, #27
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2210      	movs	r2, #16
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e017      	b.n	8003f24 <UART_SetConfig+0x178>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a7b      	ldr	r2, [pc, #492]	; (80040e8 <UART_SetConfig+0x33c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d104      	bne.n	8003f08 <UART_SetConfig+0x15c>
 8003efe:	231b      	movs	r3, #27
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e00d      	b.n	8003f24 <UART_SetConfig+0x178>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a77      	ldr	r2, [pc, #476]	; (80040ec <UART_SetConfig+0x340>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d104      	bne.n	8003f1c <UART_SetConfig+0x170>
 8003f12:	231b      	movs	r3, #27
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e003      	b.n	8003f24 <UART_SetConfig+0x178>
 8003f1c:	231b      	movs	r3, #27
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	2210      	movs	r2, #16
 8003f22:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d000      	beq.n	8003f32 <UART_SetConfig+0x186>
 8003f30:	e066      	b.n	8004000 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 8003f32:	231b      	movs	r3, #27
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d015      	beq.n	8003f68 <UART_SetConfig+0x1bc>
 8003f3c:	dc18      	bgt.n	8003f70 <UART_SetConfig+0x1c4>
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d00d      	beq.n	8003f5e <UART_SetConfig+0x1b2>
 8003f42:	dc15      	bgt.n	8003f70 <UART_SetConfig+0x1c4>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <UART_SetConfig+0x1a2>
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d005      	beq.n	8003f58 <UART_SetConfig+0x1ac>
 8003f4c:	e010      	b.n	8003f70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f4e:	f7ff fa57 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8003f52:	0003      	movs	r3, r0
 8003f54:	617b      	str	r3, [r7, #20]
        break;
 8003f56:	e012      	b.n	8003f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <UART_SetConfig+0x344>)
 8003f5a:	617b      	str	r3, [r7, #20]
        break;
 8003f5c:	e00f      	b.n	8003f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7ff f9c3 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8003f62:	0003      	movs	r3, r0
 8003f64:	617b      	str	r3, [r7, #20]
        break;
 8003f66:	e00a      	b.n	8003f7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	617b      	str	r3, [r7, #20]
        break;
 8003f6e:	e006      	b.n	8003f7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f74:	231a      	movs	r3, #26
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
        break;
 8003f7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d100      	bne.n	8003f86 <UART_SetConfig+0x1da>
 8003f84:	e08e      	b.n	80040a4 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8a:	4b5a      	ldr	r3, [pc, #360]	; (80040f4 <UART_SetConfig+0x348>)
 8003f8c:	0052      	lsls	r2, r2, #1
 8003f8e:	5ad3      	ldrh	r3, [r2, r3]
 8003f90:	0019      	movs	r1, r3
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	f7fc f8b4 	bl	8000100 <__udivsi3>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	005a      	lsls	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	18d2      	adds	r2, r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	0019      	movs	r1, r3
 8003faa:	0010      	movs	r0, r2
 8003fac:	f7fc f8a8 	bl	8000100 <__udivsi3>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b0f      	cmp	r3, #15
 8003fba:	d91c      	bls.n	8003ff6 <UART_SetConfig+0x24a>
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	025b      	lsls	r3, r3, #9
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d217      	bcs.n	8003ff6 <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	200e      	movs	r0, #14
 8003fcc:	183b      	adds	r3, r7, r0
 8003fce:	210f      	movs	r1, #15
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2207      	movs	r2, #7
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b299      	uxth	r1, r3
 8003fe0:	183b      	adds	r3, r7, r0
 8003fe2:	183a      	adds	r2, r7, r0
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	183a      	adds	r2, r7, r0
 8003ff0:	8812      	ldrh	r2, [r2, #0]
 8003ff2:	60da      	str	r2, [r3, #12]
 8003ff4:	e056      	b.n	80040a4 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ff6:	231a      	movs	r3, #26
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e051      	b.n	80040a4 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004000:	231b      	movs	r3, #27
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d015      	beq.n	8004036 <UART_SetConfig+0x28a>
 800400a:	dc18      	bgt.n	800403e <UART_SetConfig+0x292>
 800400c:	2b04      	cmp	r3, #4
 800400e:	d00d      	beq.n	800402c <UART_SetConfig+0x280>
 8004010:	dc15      	bgt.n	800403e <UART_SetConfig+0x292>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <UART_SetConfig+0x270>
 8004016:	2b02      	cmp	r3, #2
 8004018:	d005      	beq.n	8004026 <UART_SetConfig+0x27a>
 800401a:	e010      	b.n	800403e <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7ff f9f0 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004020:	0003      	movs	r3, r0
 8004022:	617b      	str	r3, [r7, #20]
        break;
 8004024:	e012      	b.n	800404c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <UART_SetConfig+0x344>)
 8004028:	617b      	str	r3, [r7, #20]
        break;
 800402a:	e00f      	b.n	800404c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402c:	f7ff f95c 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8004030:	0003      	movs	r3, r0
 8004032:	617b      	str	r3, [r7, #20]
        break;
 8004034:	e00a      	b.n	800404c <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	617b      	str	r3, [r7, #20]
        break;
 800403c:	e006      	b.n	800404c <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004042:	231a      	movs	r3, #26
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2201      	movs	r2, #1
 8004048:	701a      	strb	r2, [r3, #0]
        break;
 800404a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004056:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <UART_SetConfig+0x348>)
 8004058:	0052      	lsls	r2, r2, #1
 800405a:	5ad3      	ldrh	r3, [r2, r3]
 800405c:	0019      	movs	r1, r3
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	f7fc f84e 	bl	8000100 <__udivsi3>
 8004064:	0003      	movs	r3, r0
 8004066:	001a      	movs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	085b      	lsrs	r3, r3, #1
 800406e:	18d2      	adds	r2, r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	0019      	movs	r1, r3
 8004076:	0010      	movs	r0, r2
 8004078:	f7fc f842 	bl	8000100 <__udivsi3>
 800407c:	0003      	movs	r3, r0
 800407e:	b29b      	uxth	r3, r3
 8004080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	d909      	bls.n	800409c <UART_SetConfig+0x2f0>
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	429a      	cmp	r2, r3
 8004090:	d204      	bcs.n	800409c <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	e003      	b.n	80040a4 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800409c:	231a      	movs	r3, #26
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	226a      	movs	r2, #106	; 0x6a
 80040a8:	2101      	movs	r1, #1
 80040aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2268      	movs	r2, #104	; 0x68
 80040b0:	2101      	movs	r1, #1
 80040b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80040c0:	231a      	movs	r3, #26
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	781b      	ldrb	r3, [r3, #0]
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b008      	add	sp, #32
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	cfff69f3 	.word	0xcfff69f3
 80040d4:	ffffcfff 	.word	0xffffcfff
 80040d8:	11fff4ff 	.word	0x11fff4ff
 80040dc:	40013800 	.word	0x40013800
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40004400 	.word	0x40004400
 80040e8:	40004800 	.word	0x40004800
 80040ec:	40004c00 	.word	0x40004c00
 80040f0:	00f42400 	.word	0x00f42400
 80040f4:	0800490c 	.word	0x0800490c

080040f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	2201      	movs	r2, #1
 8004106:	4013      	ands	r3, r2
 8004108:	d00b      	beq.n	8004122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a4a      	ldr	r2, [pc, #296]	; (800423c <UART_AdvFeatureConfig+0x144>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	2202      	movs	r2, #2
 8004128:	4013      	ands	r3, r2
 800412a:	d00b      	beq.n	8004144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4a43      	ldr	r2, [pc, #268]	; (8004240 <UART_AdvFeatureConfig+0x148>)
 8004134:	4013      	ands	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	2204      	movs	r2, #4
 800414a:	4013      	ands	r3, r2
 800414c:	d00b      	beq.n	8004166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4a3b      	ldr	r2, [pc, #236]	; (8004244 <UART_AdvFeatureConfig+0x14c>)
 8004156:	4013      	ands	r3, r2
 8004158:	0019      	movs	r1, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	2208      	movs	r2, #8
 800416c:	4013      	ands	r3, r2
 800416e:	d00b      	beq.n	8004188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a34      	ldr	r2, [pc, #208]	; (8004248 <UART_AdvFeatureConfig+0x150>)
 8004178:	4013      	ands	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	2210      	movs	r2, #16
 800418e:	4013      	ands	r3, r2
 8004190:	d00b      	beq.n	80041aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a2c      	ldr	r2, [pc, #176]	; (800424c <UART_AdvFeatureConfig+0x154>)
 800419a:	4013      	ands	r3, r2
 800419c:	0019      	movs	r1, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	2220      	movs	r2, #32
 80041b0:	4013      	ands	r3, r2
 80041b2:	d00b      	beq.n	80041cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4a25      	ldr	r2, [pc, #148]	; (8004250 <UART_AdvFeatureConfig+0x158>)
 80041bc:	4013      	ands	r3, r2
 80041be:	0019      	movs	r1, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	2240      	movs	r2, #64	; 0x40
 80041d2:	4013      	ands	r3, r2
 80041d4:	d01d      	beq.n	8004212 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <UART_AdvFeatureConfig+0x15c>)
 80041de:	4013      	ands	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	035b      	lsls	r3, r3, #13
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d10b      	bne.n	8004212 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a15      	ldr	r2, [pc, #84]	; (8004258 <UART_AdvFeatureConfig+0x160>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	4013      	ands	r3, r2
 800421a:	d00b      	beq.n	8004234 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <UART_AdvFeatureConfig+0x164>)
 8004224:	4013      	ands	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
  }
}
 8004234:	46c0      	nop			; (mov r8, r8)
 8004236:	46bd      	mov	sp, r7
 8004238:	b002      	add	sp, #8
 800423a:	bd80      	pop	{r7, pc}
 800423c:	fffdffff 	.word	0xfffdffff
 8004240:	fffeffff 	.word	0xfffeffff
 8004244:	fffbffff 	.word	0xfffbffff
 8004248:	ffff7fff 	.word	0xffff7fff
 800424c:	ffffefff 	.word	0xffffefff
 8004250:	ffffdfff 	.word	0xffffdfff
 8004254:	ffefffff 	.word	0xffefffff
 8004258:	ff9fffff 	.word	0xff9fffff
 800425c:	fff7ffff 	.word	0xfff7ffff

08004260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	228c      	movs	r2, #140	; 0x8c
 800426c:	2100      	movs	r1, #0
 800426e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004270:	f7fc fcc8 	bl	8000c04 <HAL_GetTick>
 8004274:	0003      	movs	r3, r0
 8004276:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2208      	movs	r2, #8
 8004280:	4013      	ands	r3, r2
 8004282:	2b08      	cmp	r3, #8
 8004284:	d10c      	bne.n	80042a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	0391      	lsls	r1, r2, #14
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <UART_CheckIdleState+0x90>)
 8004290:	9200      	str	r2, [sp, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	f000 f82e 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e023      	b.n	80042e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2204      	movs	r2, #4
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d10c      	bne.n	80042c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	03d1      	lsls	r1, r2, #15
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <UART_CheckIdleState+0x90>)
 80042b8:	9200      	str	r2, [sp, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f000 f81a 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e00f      	b.n	80042e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2284      	movs	r2, #132	; 0x84
 80042cc:	2120      	movs	r1, #32
 80042ce:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2288      	movs	r2, #136	; 0x88
 80042d4:	2120      	movs	r1, #32
 80042d6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2280      	movs	r2, #128	; 0x80
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b004      	add	sp, #16
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	01ffffff 	.word	0x01ffffff

080042f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b094      	sub	sp, #80	; 0x50
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	e0a7      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004308:	3301      	adds	r3, #1
 800430a:	d100      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0x1a>
 800430c:	e0a3      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fc fc79 	bl	8000c04 <HAL_GetTick>
 8004312:	0002      	movs	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
 800431e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004320:	2b00      	cmp	r3, #0
 8004322:	d13f      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800432c:	647b      	str	r3, [r7, #68]	; 0x44
 800432e:	2301      	movs	r3, #1
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	494e      	ldr	r1, [pc, #312]	; (8004480 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004346:	400a      	ands	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004356:	f3ef 8310 	mrs	r3, PRIMASK
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	643b      	str	r3, [r7, #64]	; 0x40
 8004360:	2301      	movs	r3, #1
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	438a      	bics	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2284      	movs	r2, #132	; 0x84
 800438c:	2120      	movs	r1, #32
 800438e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2288      	movs	r2, #136	; 0x88
 8004394:	2120      	movs	r1, #32
 8004396:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2280      	movs	r2, #128	; 0x80
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e069      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2204      	movs	r2, #4
 80043ac:	4013      	ands	r3, r2
 80043ae:	d052      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	401a      	ands	r2, r3
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d148      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ce:	f3ef 8310 	mrs	r3, PRIMASK
 80043d2:	613b      	str	r3, [r7, #16]
  return(result);
 80043d4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f383 8810 	msr	PRIMASK, r3
}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4924      	ldr	r1, [pc, #144]	; (8004480 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80043f0:	400a      	ands	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f383 8810 	msr	PRIMASK, r3
}
 80043fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004400:	f3ef 8310 	mrs	r3, PRIMASK
 8004404:	61fb      	str	r3, [r7, #28]
  return(result);
 8004406:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	64bb      	str	r3, [r7, #72]	; 0x48
 800440a:	2301      	movs	r3, #1
 800440c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f383 8810 	msr	PRIMASK, r3
}
 8004414:	46c0      	nop			; (mov r8, r8)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2101      	movs	r1, #1
 8004422:	438a      	bics	r2, r1
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	f383 8810 	msr	PRIMASK, r3
}
 8004430:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2284      	movs	r2, #132	; 0x84
 8004436:	2120      	movs	r1, #32
 8004438:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2288      	movs	r2, #136	; 0x88
 800443e:	2120      	movs	r1, #32
 8004440:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	228c      	movs	r2, #140	; 0x8c
 8004446:	2120      	movs	r1, #32
 8004448:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2280      	movs	r2, #128	; 0x80
 800444e:	2100      	movs	r1, #0
 8004450:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e010      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	425a      	negs	r2, r3
 8004466:	4153      	adcs	r3, r2
 8004468:	b2db      	uxtb	r3, r3
 800446a:	001a      	movs	r2, r3
 800446c:	1dfb      	adds	r3, r7, #7
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d100      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x182>
 8004474:	e747      	b.n	8004306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b014      	add	sp, #80	; 0x50
 800447e:	bd80      	pop	{r7, pc}
 8004480:	fffffe5f 	.word	0xfffffe5f

08004484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08e      	sub	sp, #56	; 0x38
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800448c:	f3ef 8310 	mrs	r3, PRIMASK
 8004490:	617b      	str	r3, [r7, #20]
  return(result);
 8004492:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
 8004496:	2301      	movs	r3, #1
 8004498:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f383 8810 	msr	PRIMASK, r3
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4926      	ldr	r1, [pc, #152]	; (8004548 <UART_EndRxTransfer+0xc4>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f383 8810 	msr	PRIMASK, r3
}
 80044bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044be:	f3ef 8310 	mrs	r3, PRIMASK
 80044c2:	623b      	str	r3, [r7, #32]
  return(result);
 80044c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044c6:	633b      	str	r3, [r7, #48]	; 0x30
 80044c8:	2301      	movs	r3, #1
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	f383 8810 	msr	PRIMASK, r3
}
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	491b      	ldr	r1, [pc, #108]	; (800454c <UART_EndRxTransfer+0xc8>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f383 8810 	msr	PRIMASK, r3
}
 80044ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d118      	bne.n	800452a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f8:	f3ef 8310 	mrs	r3, PRIMASK
 80044fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80044fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004502:	2301      	movs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f383 8810 	msr	PRIMASK, r3
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2110      	movs	r1, #16
 800451a:	438a      	bics	r2, r1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f383 8810 	msr	PRIMASK, r3
}
 8004528:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2288      	movs	r2, #136	; 0x88
 800452e:	2120      	movs	r1, #32
 8004530:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b00e      	add	sp, #56	; 0x38
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	fffffedf 	.word	0xfffffedf
 800454c:	effffffe 	.word	0xeffffffe

08004550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	225e      	movs	r2, #94	; 0x5e
 8004562:	2100      	movs	r1, #0
 8004564:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2256      	movs	r2, #86	; 0x56
 800456a:	2100      	movs	r1, #0
 800456c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0018      	movs	r0, r3
 8004572:	f7ff fc07 	bl	8003d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b004      	add	sp, #16
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004586:	f3ef 8310 	mrs	r3, PRIMASK
 800458a:	60bb      	str	r3, [r7, #8]
  return(result);
 800458c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	2301      	movs	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f383 8810 	msr	PRIMASK, r3
}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2140      	movs	r1, #64	; 0x40
 80045a8:	438a      	bics	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2284      	movs	r2, #132	; 0x84
 80045bc:	2120      	movs	r1, #32
 80045be:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff fbd3 	bl	8003d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b006      	add	sp, #24
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b002      	add	sp, #8
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2280      	movs	r2, #128	; 0x80
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_UARTEx_DisableFifoMode+0x16>
 800461a:	2302      	movs	r3, #2
 800461c:	e027      	b.n	800466e <HAL_UARTEx_DisableFifoMode+0x66>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	2101      	movs	r1, #1
 8004624:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2284      	movs	r2, #132	; 0x84
 800462a:	2124      	movs	r1, #36	; 0x24
 800462c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2101      	movs	r1, #1
 8004642:	438a      	bics	r2, r1
 8004644:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a0b      	ldr	r2, [pc, #44]	; (8004678 <HAL_UARTEx_DisableFifoMode+0x70>)
 800464a:	4013      	ands	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2284      	movs	r2, #132	; 0x84
 8004660:	2120      	movs	r1, #32
 8004662:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b004      	add	sp, #16
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	dfffffff 	.word	0xdfffffff

0800467c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2280      	movs	r2, #128	; 0x80
 800468a:	5c9b      	ldrb	r3, [r3, r2]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e02e      	b.n	80046f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	2101      	movs	r1, #1
 800469a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2284      	movs	r2, #132	; 0x84
 80046a0:	2124      	movs	r1, #36	; 0x24
 80046a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2101      	movs	r1, #1
 80046b8:	438a      	bics	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	08d9      	lsrs	r1, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 f854 	bl	8004780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2284      	movs	r2, #132	; 0x84
 80046e4:	2120      	movs	r1, #32
 80046e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	0018      	movs	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b004      	add	sp, #16
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	5c9b      	ldrb	r3, [r3, r2]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e02f      	b.n	8004774 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	2101      	movs	r1, #1
 800471a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2284      	movs	r2, #132	; 0x84
 8004720:	2124      	movs	r1, #36	; 0x24
 8004722:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2101      	movs	r1, #1
 8004738:	438a      	bics	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4a0e      	ldr	r2, [pc, #56]	; (800477c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004744:	4013      	ands	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 f813 	bl	8004780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2284      	movs	r2, #132	; 0x84
 8004766:	2120      	movs	r1, #32
 8004768:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2280      	movs	r2, #128	; 0x80
 800476e:	2100      	movs	r1, #0
 8004770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b004      	add	sp, #16
 800477a:	bd80      	pop	{r7, pc}
 800477c:	f1ffffff 	.word	0xf1ffffff

08004780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	226a      	movs	r2, #106	; 0x6a
 8004794:	2101      	movs	r1, #1
 8004796:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2268      	movs	r2, #104	; 0x68
 800479c:	2101      	movs	r1, #1
 800479e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047a0:	e043      	b.n	800482a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047a2:	260f      	movs	r6, #15
 80047a4:	19bb      	adds	r3, r7, r6
 80047a6:	2208      	movs	r2, #8
 80047a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047aa:	200e      	movs	r0, #14
 80047ac:	183b      	adds	r3, r7, r0
 80047ae:	2208      	movs	r2, #8
 80047b0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	0e5b      	lsrs	r3, r3, #25
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	240d      	movs	r4, #13
 80047be:	193b      	adds	r3, r7, r4
 80047c0:	2107      	movs	r1, #7
 80047c2:	400a      	ands	r2, r1
 80047c4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	0f5b      	lsrs	r3, r3, #29
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	250c      	movs	r5, #12
 80047d2:	197b      	adds	r3, r7, r5
 80047d4:	2107      	movs	r1, #7
 80047d6:	400a      	ands	r2, r1
 80047d8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047da:	183b      	adds	r3, r7, r0
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	197a      	adds	r2, r7, r5
 80047e0:	7812      	ldrb	r2, [r2, #0]
 80047e2:	4914      	ldr	r1, [pc, #80]	; (8004834 <UARTEx_SetNbDataToProcess+0xb4>)
 80047e4:	5c8a      	ldrb	r2, [r1, r2]
 80047e6:	435a      	muls	r2, r3
 80047e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80047ea:	197b      	adds	r3, r7, r5
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	4a12      	ldr	r2, [pc, #72]	; (8004838 <UARTEx_SetNbDataToProcess+0xb8>)
 80047f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047f2:	0019      	movs	r1, r3
 80047f4:	f7fb fd0e 	bl	8000214 <__divsi3>
 80047f8:	0003      	movs	r3, r0
 80047fa:	b299      	uxth	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	226a      	movs	r2, #106	; 0x6a
 8004800:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004802:	19bb      	adds	r3, r7, r6
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	193a      	adds	r2, r7, r4
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	490a      	ldr	r1, [pc, #40]	; (8004834 <UARTEx_SetNbDataToProcess+0xb4>)
 800480c:	5c8a      	ldrb	r2, [r1, r2]
 800480e:	435a      	muls	r2, r3
 8004810:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004812:	193b      	adds	r3, r7, r4
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	4a08      	ldr	r2, [pc, #32]	; (8004838 <UARTEx_SetNbDataToProcess+0xb8>)
 8004818:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800481a:	0019      	movs	r1, r3
 800481c:	f7fb fcfa 	bl	8000214 <__divsi3>
 8004820:	0003      	movs	r3, r0
 8004822:	b299      	uxth	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2268      	movs	r2, #104	; 0x68
 8004828:	5299      	strh	r1, [r3, r2]
}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	46bd      	mov	sp, r7
 800482e:	b005      	add	sp, #20
 8004830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	08004924 	.word	0x08004924
 8004838:	0800492c 	.word	0x0800492c

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	2600      	movs	r6, #0
 8004840:	4d0c      	ldr	r5, [pc, #48]	; (8004874 <__libc_init_array+0x38>)
 8004842:	4c0d      	ldr	r4, [pc, #52]	; (8004878 <__libc_init_array+0x3c>)
 8004844:	1b64      	subs	r4, r4, r5
 8004846:	10a4      	asrs	r4, r4, #2
 8004848:	42a6      	cmp	r6, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	2600      	movs	r6, #0
 800484e:	f000 f821 	bl	8004894 <_init>
 8004852:	4d0a      	ldr	r5, [pc, #40]	; (800487c <__libc_init_array+0x40>)
 8004854:	4c0a      	ldr	r4, [pc, #40]	; (8004880 <__libc_init_array+0x44>)
 8004856:	1b64      	subs	r4, r4, r5
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	42a6      	cmp	r6, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	00b3      	lsls	r3, r6, #2
 8004862:	58eb      	ldr	r3, [r5, r3]
 8004864:	4798      	blx	r3
 8004866:	3601      	adds	r6, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	00b3      	lsls	r3, r6, #2
 800486c:	58eb      	ldr	r3, [r5, r3]
 800486e:	4798      	blx	r3
 8004870:	3601      	adds	r6, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	08004934 	.word	0x08004934
 8004878:	08004934 	.word	0x08004934
 800487c:	08004934 	.word	0x08004934
 8004880:	08004938 	.word	0x08004938

08004884 <memset>:
 8004884:	0003      	movs	r3, r0
 8004886:	1882      	adds	r2, r0, r2
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	7019      	strb	r1, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <_init>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr

080048a0 <_fini>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr
