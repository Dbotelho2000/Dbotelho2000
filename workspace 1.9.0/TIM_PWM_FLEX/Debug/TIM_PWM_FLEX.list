
TIM_PWM_FLEX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000823c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  080082f8  080082f8  000182f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008698  08008698  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008698  08008698  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008698  08008698  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080086a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000074  08008714  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08008714  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eda  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ee  00000000  00000000  00030f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00033268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00034078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c62  00000000  00000000  00034db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011075  00000000  00000000  0004ba12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2ae  00000000  00000000  0005ca87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebd35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000ebd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080082dc 	.word	0x080082dc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080082dc 	.word	0x080082dc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 f815 	bl	800142c <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 ff65 	bl	80012dc <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 f807 	bl	800142c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fffd 	bl	800142c <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ff8d 	bl	8001360 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff83 	bl	8001360 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_cfrcmple>:
 8000468:	4684      	mov	ip, r0
 800046a:	0008      	movs	r0, r1
 800046c:	4661      	mov	r1, ip
 800046e:	e7ff      	b.n	8000470 <__aeabi_cfcmpeq>

08000470 <__aeabi_cfcmpeq>:
 8000470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000472:	f000 f8bd 	bl	80005f0 <__lesf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	d401      	bmi.n	800047e <__aeabi_cfcmpeq+0xe>
 800047a:	2100      	movs	r1, #0
 800047c:	42c8      	cmn	r0, r1
 800047e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000480 <__aeabi_fcmpeq>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 f849 	bl	8000518 <__eqsf2>
 8000486:	4240      	negs	r0, r0
 8000488:	3001      	adds	r0, #1
 800048a:	bd10      	pop	{r4, pc}

0800048c <__aeabi_fcmplt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 f8af 	bl	80005f0 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	db01      	blt.n	800049a <__aeabi_fcmplt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fcmple>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 f8a5 	bl	80005f0 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dd01      	ble.n	80004ae <__aeabi_fcmple+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmpgt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 f855 	bl	8000564 <__gesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dc01      	bgt.n	80004c2 <__aeabi_fcmpgt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpge>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f84b 	bl	8000564 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	da01      	bge.n	80004d6 <__aeabi_fcmpge+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_d2uiz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb5 	bl	8000454 <__aeabi_dcmpge>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d104      	bne.n	80004f8 <__aeabi_d2uiz+0x1c>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f001 fdfd 	bl	80020f0 <__aeabi_d2iz>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	0020      	movs	r0, r4
 80004fe:	0029      	movs	r1, r5
 8000500:	f001 fa64 	bl	80019cc <__aeabi_dsub>
 8000504:	f001 fdf4 	bl	80020f0 <__aeabi_d2iz>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	469c      	mov	ip, r3
 800050e:	4460      	add	r0, ip
 8000510:	e7f1      	b.n	80004f6 <__aeabi_d2uiz+0x1a>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	41e00000 	.word	0x41e00000

08000518 <__eqsf2>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	0042      	lsls	r2, r0, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	024e      	lsls	r6, r1, #9
 8000520:	004c      	lsls	r4, r1, #1
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a6d      	lsrs	r5, r5, #9
 8000526:	2001      	movs	r0, #1
 8000528:	0e12      	lsrs	r2, r2, #24
 800052a:	0a76      	lsrs	r6, r6, #9
 800052c:	0e24      	lsrs	r4, r4, #24
 800052e:	0fc9      	lsrs	r1, r1, #31
 8000530:	2aff      	cmp	r2, #255	; 0xff
 8000532:	d006      	beq.n	8000542 <__eqsf2+0x2a>
 8000534:	2cff      	cmp	r4, #255	; 0xff
 8000536:	d003      	beq.n	8000540 <__eqsf2+0x28>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d101      	bne.n	8000540 <__eqsf2+0x28>
 800053c:	42b5      	cmp	r5, r6
 800053e:	d006      	beq.n	800054e <__eqsf2+0x36>
 8000540:	bd70      	pop	{r4, r5, r6, pc}
 8000542:	2d00      	cmp	r5, #0
 8000544:	d1fc      	bne.n	8000540 <__eqsf2+0x28>
 8000546:	2cff      	cmp	r4, #255	; 0xff
 8000548:	d1fa      	bne.n	8000540 <__eqsf2+0x28>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__eqsf2+0x28>
 800054e:	428b      	cmp	r3, r1
 8000550:	d006      	beq.n	8000560 <__eqsf2+0x48>
 8000552:	2001      	movs	r0, #1
 8000554:	2a00      	cmp	r2, #0
 8000556:	d1f3      	bne.n	8000540 <__eqsf2+0x28>
 8000558:	0028      	movs	r0, r5
 800055a:	1e43      	subs	r3, r0, #1
 800055c:	4198      	sbcs	r0, r3
 800055e:	e7ef      	b.n	8000540 <__eqsf2+0x28>
 8000560:	2000      	movs	r0, #0
 8000562:	e7ed      	b.n	8000540 <__eqsf2+0x28>

08000564 <__gesf2>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0245      	lsls	r5, r0, #9
 800056a:	024e      	lsls	r6, r1, #9
 800056c:	004c      	lsls	r4, r1, #1
 800056e:	0fc3      	lsrs	r3, r0, #31
 8000570:	0a6d      	lsrs	r5, r5, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a76      	lsrs	r6, r6, #9
 8000576:	0e24      	lsrs	r4, r4, #24
 8000578:	0fc8      	lsrs	r0, r1, #31
 800057a:	2aff      	cmp	r2, #255	; 0xff
 800057c:	d01b      	beq.n	80005b6 <__gesf2+0x52>
 800057e:	2cff      	cmp	r4, #255	; 0xff
 8000580:	d00e      	beq.n	80005a0 <__gesf2+0x3c>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11b      	bne.n	80005be <__gesf2+0x5a>
 8000586:	2c00      	cmp	r4, #0
 8000588:	d101      	bne.n	800058e <__gesf2+0x2a>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d01c      	beq.n	80005c8 <__gesf2+0x64>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d00c      	beq.n	80005ac <__gesf2+0x48>
 8000592:	4283      	cmp	r3, r0
 8000594:	d01c      	beq.n	80005d0 <__gesf2+0x6c>
 8000596:	2102      	movs	r1, #2
 8000598:	1e58      	subs	r0, r3, #1
 800059a:	4008      	ands	r0, r1
 800059c:	3801      	subs	r0, #1
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d122      	bne.n	80005ea <__gesf2+0x86>
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d1f4      	bne.n	8000592 <__gesf2+0x2e>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d1f2      	bne.n	8000592 <__gesf2+0x2e>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d1f6      	bne.n	800059e <__gesf2+0x3a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4240      	negs	r0, r0
 80005b4:	e7f3      	b.n	800059e <__gesf2+0x3a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d117      	bne.n	80005ea <__gesf2+0x86>
 80005ba:	2cff      	cmp	r4, #255	; 0xff
 80005bc:	d0f0      	beq.n	80005a0 <__gesf2+0x3c>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d1e7      	bne.n	8000592 <__gesf2+0x2e>
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1e5      	bne.n	8000592 <__gesf2+0x2e>
 80005c6:	e7e6      	b.n	8000596 <__gesf2+0x32>
 80005c8:	2000      	movs	r0, #0
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0e7      	beq.n	800059e <__gesf2+0x3a>
 80005ce:	e7e2      	b.n	8000596 <__gesf2+0x32>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	dc05      	bgt.n	80005e0 <__gesf2+0x7c>
 80005d4:	dbea      	blt.n	80005ac <__gesf2+0x48>
 80005d6:	42b5      	cmp	r5, r6
 80005d8:	d802      	bhi.n	80005e0 <__gesf2+0x7c>
 80005da:	d3e7      	bcc.n	80005ac <__gesf2+0x48>
 80005dc:	2000      	movs	r0, #0
 80005de:	e7de      	b.n	800059e <__gesf2+0x3a>
 80005e0:	4243      	negs	r3, r0
 80005e2:	4158      	adcs	r0, r3
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	3801      	subs	r0, #1
 80005e8:	e7d9      	b.n	800059e <__gesf2+0x3a>
 80005ea:	2002      	movs	r0, #2
 80005ec:	4240      	negs	r0, r0
 80005ee:	e7d6      	b.n	800059e <__gesf2+0x3a>

080005f0 <__lesf2>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	0042      	lsls	r2, r0, #1
 80005f4:	0245      	lsls	r5, r0, #9
 80005f6:	024e      	lsls	r6, r1, #9
 80005f8:	004c      	lsls	r4, r1, #1
 80005fa:	0fc3      	lsrs	r3, r0, #31
 80005fc:	0a6d      	lsrs	r5, r5, #9
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	0a76      	lsrs	r6, r6, #9
 8000602:	0e24      	lsrs	r4, r4, #24
 8000604:	0fc8      	lsrs	r0, r1, #31
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d00b      	beq.n	8000622 <__lesf2+0x32>
 800060a:	2cff      	cmp	r4, #255	; 0xff
 800060c:	d00d      	beq.n	800062a <__lesf2+0x3a>
 800060e:	2a00      	cmp	r2, #0
 8000610:	d11f      	bne.n	8000652 <__lesf2+0x62>
 8000612:	2c00      	cmp	r4, #0
 8000614:	d116      	bne.n	8000644 <__lesf2+0x54>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d114      	bne.n	8000644 <__lesf2+0x54>
 800061a:	2000      	movs	r0, #0
 800061c:	2d00      	cmp	r5, #0
 800061e:	d010      	beq.n	8000642 <__lesf2+0x52>
 8000620:	e009      	b.n	8000636 <__lesf2+0x46>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d10c      	bne.n	8000640 <__lesf2+0x50>
 8000626:	2cff      	cmp	r4, #255	; 0xff
 8000628:	d113      	bne.n	8000652 <__lesf2+0x62>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d108      	bne.n	8000640 <__lesf2+0x50>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d008      	beq.n	8000644 <__lesf2+0x54>
 8000632:	4283      	cmp	r3, r0
 8000634:	d012      	beq.n	800065c <__lesf2+0x6c>
 8000636:	2102      	movs	r1, #2
 8000638:	1e58      	subs	r0, r3, #1
 800063a:	4008      	ands	r0, r1
 800063c:	3801      	subs	r0, #1
 800063e:	e000      	b.n	8000642 <__lesf2+0x52>
 8000640:	2002      	movs	r0, #2
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	2d00      	cmp	r5, #0
 8000646:	d1f4      	bne.n	8000632 <__lesf2+0x42>
 8000648:	2800      	cmp	r0, #0
 800064a:	d1fa      	bne.n	8000642 <__lesf2+0x52>
 800064c:	2001      	movs	r0, #1
 800064e:	4240      	negs	r0, r0
 8000650:	e7f7      	b.n	8000642 <__lesf2+0x52>
 8000652:	2c00      	cmp	r4, #0
 8000654:	d1ed      	bne.n	8000632 <__lesf2+0x42>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d1eb      	bne.n	8000632 <__lesf2+0x42>
 800065a:	e7ec      	b.n	8000636 <__lesf2+0x46>
 800065c:	42a2      	cmp	r2, r4
 800065e:	dc05      	bgt.n	800066c <__lesf2+0x7c>
 8000660:	dbf2      	blt.n	8000648 <__lesf2+0x58>
 8000662:	42b5      	cmp	r5, r6
 8000664:	d802      	bhi.n	800066c <__lesf2+0x7c>
 8000666:	d3ef      	bcc.n	8000648 <__lesf2+0x58>
 8000668:	2000      	movs	r0, #0
 800066a:	e7ea      	b.n	8000642 <__lesf2+0x52>
 800066c:	4243      	negs	r3, r0
 800066e:	4158      	adcs	r0, r3
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	3801      	subs	r0, #1
 8000674:	e7e5      	b.n	8000642 <__lesf2+0x52>
 8000676:	46c0      	nop			; (mov r8, r8)

08000678 <__aeabi_dadd>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	464f      	mov	r7, r9
 800067c:	4646      	mov	r6, r8
 800067e:	46d6      	mov	lr, sl
 8000680:	000d      	movs	r5, r1
 8000682:	0004      	movs	r4, r0
 8000684:	b5c0      	push	{r6, r7, lr}
 8000686:	001f      	movs	r7, r3
 8000688:	0011      	movs	r1, r2
 800068a:	0328      	lsls	r0, r5, #12
 800068c:	0f62      	lsrs	r2, r4, #29
 800068e:	0a40      	lsrs	r0, r0, #9
 8000690:	4310      	orrs	r0, r2
 8000692:	007a      	lsls	r2, r7, #1
 8000694:	0d52      	lsrs	r2, r2, #21
 8000696:	00e3      	lsls	r3, r4, #3
 8000698:	033c      	lsls	r4, r7, #12
 800069a:	4691      	mov	r9, r2
 800069c:	0a64      	lsrs	r4, r4, #9
 800069e:	0ffa      	lsrs	r2, r7, #31
 80006a0:	0f4f      	lsrs	r7, r1, #29
 80006a2:	006e      	lsls	r6, r5, #1
 80006a4:	4327      	orrs	r7, r4
 80006a6:	4692      	mov	sl, r2
 80006a8:	46b8      	mov	r8, r7
 80006aa:	0d76      	lsrs	r6, r6, #21
 80006ac:	0fed      	lsrs	r5, r5, #31
 80006ae:	00c9      	lsls	r1, r1, #3
 80006b0:	4295      	cmp	r5, r2
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x3e>
 80006b4:	e099      	b.n	80007ea <__aeabi_dadd+0x172>
 80006b6:	464c      	mov	r4, r9
 80006b8:	1b34      	subs	r4, r6, r4
 80006ba:	46a4      	mov	ip, r4
 80006bc:	2c00      	cmp	r4, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x4a>
 80006c0:	e07c      	b.n	80007bc <__aeabi_dadd+0x144>
 80006c2:	464a      	mov	r2, r9
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x52>
 80006c8:	e0b8      	b.n	800083c <__aeabi_dadd+0x1c4>
 80006ca:	4ac5      	ldr	r2, [pc, #788]	; (80009e0 <__aeabi_dadd+0x368>)
 80006cc:	4296      	cmp	r6, r2
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x5a>
 80006d0:	e11c      	b.n	800090c <__aeabi_dadd+0x294>
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	003c      	movs	r4, r7
 80006d6:	0412      	lsls	r2, r2, #16
 80006d8:	4314      	orrs	r4, r2
 80006da:	46a0      	mov	r8, r4
 80006dc:	4662      	mov	r2, ip
 80006de:	2a38      	cmp	r2, #56	; 0x38
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x6c>
 80006e2:	e161      	b.n	80009a8 <__aeabi_dadd+0x330>
 80006e4:	2a1f      	cmp	r2, #31
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dadd+0x72>
 80006e8:	e1cc      	b.n	8000a84 <__aeabi_dadd+0x40c>
 80006ea:	4664      	mov	r4, ip
 80006ec:	2220      	movs	r2, #32
 80006ee:	1b12      	subs	r2, r2, r4
 80006f0:	4644      	mov	r4, r8
 80006f2:	4094      	lsls	r4, r2
 80006f4:	000f      	movs	r7, r1
 80006f6:	46a1      	mov	r9, r4
 80006f8:	4664      	mov	r4, ip
 80006fa:	4091      	lsls	r1, r2
 80006fc:	40e7      	lsrs	r7, r4
 80006fe:	464c      	mov	r4, r9
 8000700:	1e4a      	subs	r2, r1, #1
 8000702:	4191      	sbcs	r1, r2
 8000704:	433c      	orrs	r4, r7
 8000706:	4642      	mov	r2, r8
 8000708:	4321      	orrs	r1, r4
 800070a:	4664      	mov	r4, ip
 800070c:	40e2      	lsrs	r2, r4
 800070e:	1a80      	subs	r0, r0, r2
 8000710:	1a5c      	subs	r4, r3, r1
 8000712:	42a3      	cmp	r3, r4
 8000714:	419b      	sbcs	r3, r3
 8000716:	425f      	negs	r7, r3
 8000718:	1bc7      	subs	r7, r0, r7
 800071a:	023b      	lsls	r3, r7, #8
 800071c:	d400      	bmi.n	8000720 <__aeabi_dadd+0xa8>
 800071e:	e0d0      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000720:	027f      	lsls	r7, r7, #9
 8000722:	0a7f      	lsrs	r7, r7, #9
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0xb2>
 8000728:	e0ff      	b.n	800092a <__aeabi_dadd+0x2b2>
 800072a:	0038      	movs	r0, r7
 800072c:	f001 fdce 	bl	80022cc <__clzsi2>
 8000730:	0001      	movs	r1, r0
 8000732:	3908      	subs	r1, #8
 8000734:	2320      	movs	r3, #32
 8000736:	0022      	movs	r2, r4
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	408f      	lsls	r7, r1
 800073c:	40da      	lsrs	r2, r3
 800073e:	408c      	lsls	r4, r1
 8000740:	4317      	orrs	r7, r2
 8000742:	42b1      	cmp	r1, r6
 8000744:	da00      	bge.n	8000748 <__aeabi_dadd+0xd0>
 8000746:	e0ff      	b.n	8000948 <__aeabi_dadd+0x2d0>
 8000748:	1b89      	subs	r1, r1, r6
 800074a:	1c4b      	adds	r3, r1, #1
 800074c:	2b1f      	cmp	r3, #31
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0xda>
 8000750:	e0a8      	b.n	80008a4 <__aeabi_dadd+0x22c>
 8000752:	2220      	movs	r2, #32
 8000754:	0039      	movs	r1, r7
 8000756:	1ad2      	subs	r2, r2, r3
 8000758:	0020      	movs	r0, r4
 800075a:	4094      	lsls	r4, r2
 800075c:	4091      	lsls	r1, r2
 800075e:	40d8      	lsrs	r0, r3
 8000760:	1e62      	subs	r2, r4, #1
 8000762:	4194      	sbcs	r4, r2
 8000764:	40df      	lsrs	r7, r3
 8000766:	2600      	movs	r6, #0
 8000768:	4301      	orrs	r1, r0
 800076a:	430c      	orrs	r4, r1
 800076c:	0763      	lsls	r3, r4, #29
 800076e:	d009      	beq.n	8000784 <__aeabi_dadd+0x10c>
 8000770:	230f      	movs	r3, #15
 8000772:	4023      	ands	r3, r4
 8000774:	2b04      	cmp	r3, #4
 8000776:	d005      	beq.n	8000784 <__aeabi_dadd+0x10c>
 8000778:	1d23      	adds	r3, r4, #4
 800077a:	42a3      	cmp	r3, r4
 800077c:	41a4      	sbcs	r4, r4
 800077e:	4264      	negs	r4, r4
 8000780:	193f      	adds	r7, r7, r4
 8000782:	001c      	movs	r4, r3
 8000784:	023b      	lsls	r3, r7, #8
 8000786:	d400      	bmi.n	800078a <__aeabi_dadd+0x112>
 8000788:	e09e      	b.n	80008c8 <__aeabi_dadd+0x250>
 800078a:	4b95      	ldr	r3, [pc, #596]	; (80009e0 <__aeabi_dadd+0x368>)
 800078c:	3601      	adds	r6, #1
 800078e:	429e      	cmp	r6, r3
 8000790:	d100      	bne.n	8000794 <__aeabi_dadd+0x11c>
 8000792:	e0b7      	b.n	8000904 <__aeabi_dadd+0x28c>
 8000794:	4a93      	ldr	r2, [pc, #588]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000796:	08e4      	lsrs	r4, r4, #3
 8000798:	4017      	ands	r7, r2
 800079a:	077b      	lsls	r3, r7, #29
 800079c:	0571      	lsls	r1, r6, #21
 800079e:	027f      	lsls	r7, r7, #9
 80007a0:	4323      	orrs	r3, r4
 80007a2:	0b3f      	lsrs	r7, r7, #12
 80007a4:	0d4a      	lsrs	r2, r1, #21
 80007a6:	0512      	lsls	r2, r2, #20
 80007a8:	433a      	orrs	r2, r7
 80007aa:	07ed      	lsls	r5, r5, #31
 80007ac:	432a      	orrs	r2, r5
 80007ae:	0018      	movs	r0, r3
 80007b0:	0011      	movs	r1, r2
 80007b2:	bce0      	pop	{r5, r6, r7}
 80007b4:	46ba      	mov	sl, r7
 80007b6:	46b1      	mov	r9, r6
 80007b8:	46a8      	mov	r8, r5
 80007ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007bc:	2c00      	cmp	r4, #0
 80007be:	d04b      	beq.n	8000858 <__aeabi_dadd+0x1e0>
 80007c0:	464c      	mov	r4, r9
 80007c2:	1ba4      	subs	r4, r4, r6
 80007c4:	46a4      	mov	ip, r4
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_dadd+0x154>
 80007ca:	e123      	b.n	8000a14 <__aeabi_dadd+0x39c>
 80007cc:	0004      	movs	r4, r0
 80007ce:	431c      	orrs	r4, r3
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x15c>
 80007d2:	e1af      	b.n	8000b34 <__aeabi_dadd+0x4bc>
 80007d4:	4662      	mov	r2, ip
 80007d6:	1e54      	subs	r4, r2, #1
 80007d8:	2a01      	cmp	r2, #1
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x166>
 80007dc:	e215      	b.n	8000c0a <__aeabi_dadd+0x592>
 80007de:	4d80      	ldr	r5, [pc, #512]	; (80009e0 <__aeabi_dadd+0x368>)
 80007e0:	45ac      	cmp	ip, r5
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16e>
 80007e4:	e1c8      	b.n	8000b78 <__aeabi_dadd+0x500>
 80007e6:	46a4      	mov	ip, r4
 80007e8:	e11b      	b.n	8000a22 <__aeabi_dadd+0x3aa>
 80007ea:	464a      	mov	r2, r9
 80007ec:	1ab2      	subs	r2, r6, r2
 80007ee:	4694      	mov	ip, r2
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_dadd+0x17e>
 80007f4:	e0ac      	b.n	8000950 <__aeabi_dadd+0x2d8>
 80007f6:	464a      	mov	r2, r9
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d043      	beq.n	8000884 <__aeabi_dadd+0x20c>
 80007fc:	4a78      	ldr	r2, [pc, #480]	; (80009e0 <__aeabi_dadd+0x368>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x18c>
 8000802:	e1af      	b.n	8000b64 <__aeabi_dadd+0x4ec>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	003c      	movs	r4, r7
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a0      	mov	r8, r4
 800080e:	4662      	mov	r2, ip
 8000810:	2a38      	cmp	r2, #56	; 0x38
 8000812:	dc67      	bgt.n	80008e4 <__aeabi_dadd+0x26c>
 8000814:	2a1f      	cmp	r2, #31
 8000816:	dc00      	bgt.n	800081a <__aeabi_dadd+0x1a2>
 8000818:	e15f      	b.n	8000ada <__aeabi_dadd+0x462>
 800081a:	4647      	mov	r7, r8
 800081c:	3a20      	subs	r2, #32
 800081e:	40d7      	lsrs	r7, r2
 8000820:	4662      	mov	r2, ip
 8000822:	2a20      	cmp	r2, #32
 8000824:	d005      	beq.n	8000832 <__aeabi_dadd+0x1ba>
 8000826:	4664      	mov	r4, ip
 8000828:	2240      	movs	r2, #64	; 0x40
 800082a:	1b12      	subs	r2, r2, r4
 800082c:	4644      	mov	r4, r8
 800082e:	4094      	lsls	r4, r2
 8000830:	4321      	orrs	r1, r4
 8000832:	1e4a      	subs	r2, r1, #1
 8000834:	4191      	sbcs	r1, r2
 8000836:	000c      	movs	r4, r1
 8000838:	433c      	orrs	r4, r7
 800083a:	e057      	b.n	80008ec <__aeabi_dadd+0x274>
 800083c:	003a      	movs	r2, r7
 800083e:	430a      	orrs	r2, r1
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x1cc>
 8000842:	e105      	b.n	8000a50 <__aeabi_dadd+0x3d8>
 8000844:	0022      	movs	r2, r4
 8000846:	3a01      	subs	r2, #1
 8000848:	2c01      	cmp	r4, #1
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1d6>
 800084c:	e182      	b.n	8000b54 <__aeabi_dadd+0x4dc>
 800084e:	4c64      	ldr	r4, [pc, #400]	; (80009e0 <__aeabi_dadd+0x368>)
 8000850:	45a4      	cmp	ip, r4
 8000852:	d05b      	beq.n	800090c <__aeabi_dadd+0x294>
 8000854:	4694      	mov	ip, r2
 8000856:	e741      	b.n	80006dc <__aeabi_dadd+0x64>
 8000858:	4c63      	ldr	r4, [pc, #396]	; (80009e8 <__aeabi_dadd+0x370>)
 800085a:	1c77      	adds	r7, r6, #1
 800085c:	4227      	tst	r7, r4
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x1ea>
 8000860:	e0c4      	b.n	80009ec <__aeabi_dadd+0x374>
 8000862:	0004      	movs	r4, r0
 8000864:	431c      	orrs	r4, r3
 8000866:	2e00      	cmp	r6, #0
 8000868:	d000      	beq.n	800086c <__aeabi_dadd+0x1f4>
 800086a:	e169      	b.n	8000b40 <__aeabi_dadd+0x4c8>
 800086c:	2c00      	cmp	r4, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x1fa>
 8000870:	e1bf      	b.n	8000bf2 <__aeabi_dadd+0x57a>
 8000872:	4644      	mov	r4, r8
 8000874:	430c      	orrs	r4, r1
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x202>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a4>
 800087a:	0742      	lsls	r2, r0, #29
 800087c:	08db      	lsrs	r3, r3, #3
 800087e:	4313      	orrs	r3, r2
 8000880:	08c0      	lsrs	r0, r0, #3
 8000882:	e029      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000884:	003a      	movs	r2, r7
 8000886:	430a      	orrs	r2, r1
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x214>
 800088a:	e170      	b.n	8000b6e <__aeabi_dadd+0x4f6>
 800088c:	4662      	mov	r2, ip
 800088e:	4664      	mov	r4, ip
 8000890:	3a01      	subs	r2, #1
 8000892:	2c01      	cmp	r4, #1
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x220>
 8000896:	e0e0      	b.n	8000a5a <__aeabi_dadd+0x3e2>
 8000898:	4c51      	ldr	r4, [pc, #324]	; (80009e0 <__aeabi_dadd+0x368>)
 800089a:	45a4      	cmp	ip, r4
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x228>
 800089e:	e161      	b.n	8000b64 <__aeabi_dadd+0x4ec>
 80008a0:	4694      	mov	ip, r2
 80008a2:	e7b4      	b.n	800080e <__aeabi_dadd+0x196>
 80008a4:	003a      	movs	r2, r7
 80008a6:	391f      	subs	r1, #31
 80008a8:	40ca      	lsrs	r2, r1
 80008aa:	0011      	movs	r1, r2
 80008ac:	2b20      	cmp	r3, #32
 80008ae:	d003      	beq.n	80008b8 <__aeabi_dadd+0x240>
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	409f      	lsls	r7, r3
 80008b6:	433c      	orrs	r4, r7
 80008b8:	1e63      	subs	r3, r4, #1
 80008ba:	419c      	sbcs	r4, r3
 80008bc:	2700      	movs	r7, #0
 80008be:	2600      	movs	r6, #0
 80008c0:	430c      	orrs	r4, r1
 80008c2:	0763      	lsls	r3, r4, #29
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x250>
 80008c6:	e753      	b.n	8000770 <__aeabi_dadd+0xf8>
 80008c8:	46b4      	mov	ip, r6
 80008ca:	08e4      	lsrs	r4, r4, #3
 80008cc:	077b      	lsls	r3, r7, #29
 80008ce:	4323      	orrs	r3, r4
 80008d0:	08f8      	lsrs	r0, r7, #3
 80008d2:	4a43      	ldr	r2, [pc, #268]	; (80009e0 <__aeabi_dadd+0x368>)
 80008d4:	4594      	cmp	ip, r2
 80008d6:	d01d      	beq.n	8000914 <__aeabi_dadd+0x29c>
 80008d8:	4662      	mov	r2, ip
 80008da:	0307      	lsls	r7, r0, #12
 80008dc:	0552      	lsls	r2, r2, #21
 80008de:	0b3f      	lsrs	r7, r7, #12
 80008e0:	0d52      	lsrs	r2, r2, #21
 80008e2:	e760      	b.n	80007a6 <__aeabi_dadd+0x12e>
 80008e4:	4644      	mov	r4, r8
 80008e6:	430c      	orrs	r4, r1
 80008e8:	1e62      	subs	r2, r4, #1
 80008ea:	4194      	sbcs	r4, r2
 80008ec:	18e4      	adds	r4, r4, r3
 80008ee:	429c      	cmp	r4, r3
 80008f0:	419b      	sbcs	r3, r3
 80008f2:	425f      	negs	r7, r3
 80008f4:	183f      	adds	r7, r7, r0
 80008f6:	023b      	lsls	r3, r7, #8
 80008f8:	d5e3      	bpl.n	80008c2 <__aeabi_dadd+0x24a>
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <__aeabi_dadd+0x368>)
 80008fc:	3601      	adds	r6, #1
 80008fe:	429e      	cmp	r6, r3
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x28c>
 8000902:	e0b5      	b.n	8000a70 <__aeabi_dadd+0x3f8>
 8000904:	0032      	movs	r2, r6
 8000906:	2700      	movs	r7, #0
 8000908:	2300      	movs	r3, #0
 800090a:	e74c      	b.n	80007a6 <__aeabi_dadd+0x12e>
 800090c:	0742      	lsls	r2, r0, #29
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	4313      	orrs	r3, r2
 8000912:	08c0      	lsrs	r0, r0, #3
 8000914:	001a      	movs	r2, r3
 8000916:	4302      	orrs	r2, r0
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x2a4>
 800091a:	e1e1      	b.n	8000ce0 <__aeabi_dadd+0x668>
 800091c:	2780      	movs	r7, #128	; 0x80
 800091e:	033f      	lsls	r7, r7, #12
 8000920:	4307      	orrs	r7, r0
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <__aeabi_dadd+0x368>)
 8000926:	0b3f      	lsrs	r7, r7, #12
 8000928:	e73d      	b.n	80007a6 <__aeabi_dadd+0x12e>
 800092a:	0020      	movs	r0, r4
 800092c:	f001 fcce 	bl	80022cc <__clzsi2>
 8000930:	0001      	movs	r1, r0
 8000932:	3118      	adds	r1, #24
 8000934:	291f      	cmp	r1, #31
 8000936:	dc00      	bgt.n	800093a <__aeabi_dadd+0x2c2>
 8000938:	e6fc      	b.n	8000734 <__aeabi_dadd+0xbc>
 800093a:	3808      	subs	r0, #8
 800093c:	4084      	lsls	r4, r0
 800093e:	0027      	movs	r7, r4
 8000940:	2400      	movs	r4, #0
 8000942:	42b1      	cmp	r1, r6
 8000944:	db00      	blt.n	8000948 <__aeabi_dadd+0x2d0>
 8000946:	e6ff      	b.n	8000748 <__aeabi_dadd+0xd0>
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <__aeabi_dadd+0x36c>)
 800094a:	1a76      	subs	r6, r6, r1
 800094c:	4017      	ands	r7, r2
 800094e:	e70d      	b.n	800076c <__aeabi_dadd+0xf4>
 8000950:	2a00      	cmp	r2, #0
 8000952:	d02f      	beq.n	80009b4 <__aeabi_dadd+0x33c>
 8000954:	464a      	mov	r2, r9
 8000956:	1b92      	subs	r2, r2, r6
 8000958:	4694      	mov	ip, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x2e8>
 800095e:	e0ad      	b.n	8000abc <__aeabi_dadd+0x444>
 8000960:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <__aeabi_dadd+0x368>)
 8000962:	4591      	cmp	r9, r2
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x2f0>
 8000966:	e10f      	b.n	8000b88 <__aeabi_dadd+0x510>
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0412      	lsls	r2, r2, #16
 800096c:	4310      	orrs	r0, r2
 800096e:	4662      	mov	r2, ip
 8000970:	2a38      	cmp	r2, #56	; 0x38
 8000972:	dd00      	ble.n	8000976 <__aeabi_dadd+0x2fe>
 8000974:	e10f      	b.n	8000b96 <__aeabi_dadd+0x51e>
 8000976:	2a1f      	cmp	r2, #31
 8000978:	dd00      	ble.n	800097c <__aeabi_dadd+0x304>
 800097a:	e180      	b.n	8000c7e <__aeabi_dadd+0x606>
 800097c:	4664      	mov	r4, ip
 800097e:	2220      	movs	r2, #32
 8000980:	001e      	movs	r6, r3
 8000982:	1b12      	subs	r2, r2, r4
 8000984:	4667      	mov	r7, ip
 8000986:	0004      	movs	r4, r0
 8000988:	4093      	lsls	r3, r2
 800098a:	4094      	lsls	r4, r2
 800098c:	40fe      	lsrs	r6, r7
 800098e:	1e5a      	subs	r2, r3, #1
 8000990:	4193      	sbcs	r3, r2
 8000992:	40f8      	lsrs	r0, r7
 8000994:	4334      	orrs	r4, r6
 8000996:	431c      	orrs	r4, r3
 8000998:	4480      	add	r8, r0
 800099a:	1864      	adds	r4, r4, r1
 800099c:	428c      	cmp	r4, r1
 800099e:	41bf      	sbcs	r7, r7
 80009a0:	427f      	negs	r7, r7
 80009a2:	464e      	mov	r6, r9
 80009a4:	4447      	add	r7, r8
 80009a6:	e7a6      	b.n	80008f6 <__aeabi_dadd+0x27e>
 80009a8:	4642      	mov	r2, r8
 80009aa:	430a      	orrs	r2, r1
 80009ac:	0011      	movs	r1, r2
 80009ae:	1e4a      	subs	r2, r1, #1
 80009b0:	4191      	sbcs	r1, r2
 80009b2:	e6ad      	b.n	8000710 <__aeabi_dadd+0x98>
 80009b4:	4c0c      	ldr	r4, [pc, #48]	; (80009e8 <__aeabi_dadd+0x370>)
 80009b6:	1c72      	adds	r2, r6, #1
 80009b8:	4222      	tst	r2, r4
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x346>
 80009bc:	e0a1      	b.n	8000b02 <__aeabi_dadd+0x48a>
 80009be:	0002      	movs	r2, r0
 80009c0:	431a      	orrs	r2, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_dadd+0x350>
 80009c6:	e0fa      	b.n	8000bbe <__aeabi_dadd+0x546>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x356>
 80009cc:	e145      	b.n	8000c5a <__aeabi_dadd+0x5e2>
 80009ce:	003a      	movs	r2, r7
 80009d0:	430a      	orrs	r2, r1
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x35e>
 80009d4:	e146      	b.n	8000c64 <__aeabi_dadd+0x5ec>
 80009d6:	0742      	lsls	r2, r0, #29
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	4313      	orrs	r3, r2
 80009dc:	08c0      	lsrs	r0, r0, #3
 80009de:	e77b      	b.n	80008d8 <__aeabi_dadd+0x260>
 80009e0:	000007ff 	.word	0x000007ff
 80009e4:	ff7fffff 	.word	0xff7fffff
 80009e8:	000007fe 	.word	0x000007fe
 80009ec:	4647      	mov	r7, r8
 80009ee:	1a5c      	subs	r4, r3, r1
 80009f0:	1bc2      	subs	r2, r0, r7
 80009f2:	42a3      	cmp	r3, r4
 80009f4:	41bf      	sbcs	r7, r7
 80009f6:	427f      	negs	r7, r7
 80009f8:	46b9      	mov	r9, r7
 80009fa:	0017      	movs	r7, r2
 80009fc:	464a      	mov	r2, r9
 80009fe:	1abf      	subs	r7, r7, r2
 8000a00:	023a      	lsls	r2, r7, #8
 8000a02:	d500      	bpl.n	8000a06 <__aeabi_dadd+0x38e>
 8000a04:	e08d      	b.n	8000b22 <__aeabi_dadd+0x4aa>
 8000a06:	0023      	movs	r3, r4
 8000a08:	433b      	orrs	r3, r7
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_dadd+0x396>
 8000a0c:	e68a      	b.n	8000724 <__aeabi_dadd+0xac>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	2500      	movs	r5, #0
 8000a12:	e761      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000a14:	4cb4      	ldr	r4, [pc, #720]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000a16:	45a1      	cmp	r9, r4
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x3a4>
 8000a1a:	e0ad      	b.n	8000b78 <__aeabi_dadd+0x500>
 8000a1c:	2480      	movs	r4, #128	; 0x80
 8000a1e:	0424      	lsls	r4, r4, #16
 8000a20:	4320      	orrs	r0, r4
 8000a22:	4664      	mov	r4, ip
 8000a24:	2c38      	cmp	r4, #56	; 0x38
 8000a26:	dc3d      	bgt.n	8000aa4 <__aeabi_dadd+0x42c>
 8000a28:	4662      	mov	r2, ip
 8000a2a:	2c1f      	cmp	r4, #31
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x3b8>
 8000a2e:	e0b7      	b.n	8000ba0 <__aeabi_dadd+0x528>
 8000a30:	2520      	movs	r5, #32
 8000a32:	001e      	movs	r6, r3
 8000a34:	1b2d      	subs	r5, r5, r4
 8000a36:	0004      	movs	r4, r0
 8000a38:	40ab      	lsls	r3, r5
 8000a3a:	40ac      	lsls	r4, r5
 8000a3c:	40d6      	lsrs	r6, r2
 8000a3e:	40d0      	lsrs	r0, r2
 8000a40:	4642      	mov	r2, r8
 8000a42:	1e5d      	subs	r5, r3, #1
 8000a44:	41ab      	sbcs	r3, r5
 8000a46:	4334      	orrs	r4, r6
 8000a48:	1a12      	subs	r2, r2, r0
 8000a4a:	4690      	mov	r8, r2
 8000a4c:	4323      	orrs	r3, r4
 8000a4e:	e02c      	b.n	8000aaa <__aeabi_dadd+0x432>
 8000a50:	0742      	lsls	r2, r0, #29
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	08c0      	lsrs	r0, r0, #3
 8000a58:	e73b      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000a5a:	185c      	adds	r4, r3, r1
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	419b      	sbcs	r3, r3
 8000a60:	4440      	add	r0, r8
 8000a62:	425b      	negs	r3, r3
 8000a64:	18c7      	adds	r7, r0, r3
 8000a66:	2601      	movs	r6, #1
 8000a68:	023b      	lsls	r3, r7, #8
 8000a6a:	d400      	bmi.n	8000a6e <__aeabi_dadd+0x3f6>
 8000a6c:	e729      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000a6e:	2602      	movs	r6, #2
 8000a70:	4a9e      	ldr	r2, [pc, #632]	; (8000cec <__aeabi_dadd+0x674>)
 8000a72:	0863      	lsrs	r3, r4, #1
 8000a74:	4017      	ands	r7, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	4014      	ands	r4, r2
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	07fb      	lsls	r3, r7, #31
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	087f      	lsrs	r7, r7, #1
 8000a82:	e673      	b.n	800076c <__aeabi_dadd+0xf4>
 8000a84:	4644      	mov	r4, r8
 8000a86:	3a20      	subs	r2, #32
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	4662      	mov	r2, ip
 8000a8c:	2a20      	cmp	r2, #32
 8000a8e:	d005      	beq.n	8000a9c <__aeabi_dadd+0x424>
 8000a90:	4667      	mov	r7, ip
 8000a92:	2240      	movs	r2, #64	; 0x40
 8000a94:	1bd2      	subs	r2, r2, r7
 8000a96:	4647      	mov	r7, r8
 8000a98:	4097      	lsls	r7, r2
 8000a9a:	4339      	orrs	r1, r7
 8000a9c:	1e4a      	subs	r2, r1, #1
 8000a9e:	4191      	sbcs	r1, r2
 8000aa0:	4321      	orrs	r1, r4
 8000aa2:	e635      	b.n	8000710 <__aeabi_dadd+0x98>
 8000aa4:	4303      	orrs	r3, r0
 8000aa6:	1e58      	subs	r0, r3, #1
 8000aa8:	4183      	sbcs	r3, r0
 8000aaa:	1acc      	subs	r4, r1, r3
 8000aac:	42a1      	cmp	r1, r4
 8000aae:	41bf      	sbcs	r7, r7
 8000ab0:	4643      	mov	r3, r8
 8000ab2:	427f      	negs	r7, r7
 8000ab4:	4655      	mov	r5, sl
 8000ab6:	464e      	mov	r6, r9
 8000ab8:	1bdf      	subs	r7, r3, r7
 8000aba:	e62e      	b.n	800071a <__aeabi_dadd+0xa2>
 8000abc:	0002      	movs	r2, r0
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x44c>
 8000ac2:	e0bd      	b.n	8000c40 <__aeabi_dadd+0x5c8>
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	4664      	mov	r4, ip
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	2c01      	cmp	r4, #1
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x458>
 8000ace:	e0e5      	b.n	8000c9c <__aeabi_dadd+0x624>
 8000ad0:	4c85      	ldr	r4, [pc, #532]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000ad2:	45a4      	cmp	ip, r4
 8000ad4:	d058      	beq.n	8000b88 <__aeabi_dadd+0x510>
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	e749      	b.n	800096e <__aeabi_dadd+0x2f6>
 8000ada:	4664      	mov	r4, ip
 8000adc:	2220      	movs	r2, #32
 8000ade:	1b12      	subs	r2, r2, r4
 8000ae0:	4644      	mov	r4, r8
 8000ae2:	4094      	lsls	r4, r2
 8000ae4:	000f      	movs	r7, r1
 8000ae6:	46a1      	mov	r9, r4
 8000ae8:	4664      	mov	r4, ip
 8000aea:	4091      	lsls	r1, r2
 8000aec:	40e7      	lsrs	r7, r4
 8000aee:	464c      	mov	r4, r9
 8000af0:	1e4a      	subs	r2, r1, #1
 8000af2:	4191      	sbcs	r1, r2
 8000af4:	433c      	orrs	r4, r7
 8000af6:	4642      	mov	r2, r8
 8000af8:	430c      	orrs	r4, r1
 8000afa:	4661      	mov	r1, ip
 8000afc:	40ca      	lsrs	r2, r1
 8000afe:	1880      	adds	r0, r0, r2
 8000b00:	e6f4      	b.n	80008ec <__aeabi_dadd+0x274>
 8000b02:	4c79      	ldr	r4, [pc, #484]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000b04:	42a2      	cmp	r2, r4
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x492>
 8000b08:	e6fd      	b.n	8000906 <__aeabi_dadd+0x28e>
 8000b0a:	1859      	adds	r1, r3, r1
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	419b      	sbcs	r3, r3
 8000b10:	4440      	add	r0, r8
 8000b12:	425f      	negs	r7, r3
 8000b14:	19c7      	adds	r7, r0, r7
 8000b16:	07fc      	lsls	r4, r7, #31
 8000b18:	0849      	lsrs	r1, r1, #1
 8000b1a:	0016      	movs	r6, r2
 8000b1c:	430c      	orrs	r4, r1
 8000b1e:	087f      	lsrs	r7, r7, #1
 8000b20:	e6cf      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000b22:	1acc      	subs	r4, r1, r3
 8000b24:	42a1      	cmp	r1, r4
 8000b26:	41bf      	sbcs	r7, r7
 8000b28:	4643      	mov	r3, r8
 8000b2a:	427f      	negs	r7, r7
 8000b2c:	1a18      	subs	r0, r3, r0
 8000b2e:	4655      	mov	r5, sl
 8000b30:	1bc7      	subs	r7, r0, r7
 8000b32:	e5f7      	b.n	8000724 <__aeabi_dadd+0xac>
 8000b34:	08c9      	lsrs	r1, r1, #3
 8000b36:	077b      	lsls	r3, r7, #29
 8000b38:	4655      	mov	r5, sl
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	08f8      	lsrs	r0, r7, #3
 8000b3e:	e6c8      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d000      	beq.n	8000b46 <__aeabi_dadd+0x4ce>
 8000b44:	e081      	b.n	8000c4a <__aeabi_dadd+0x5d2>
 8000b46:	4643      	mov	r3, r8
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	d115      	bne.n	8000b78 <__aeabi_dadd+0x500>
 8000b4c:	2080      	movs	r0, #128	; 0x80
 8000b4e:	2500      	movs	r5, #0
 8000b50:	0300      	lsls	r0, r0, #12
 8000b52:	e6e3      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000b54:	1a5c      	subs	r4, r3, r1
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	419b      	sbcs	r3, r3
 8000b5a:	1bc7      	subs	r7, r0, r7
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	2601      	movs	r6, #1
 8000b60:	1aff      	subs	r7, r7, r3
 8000b62:	e5da      	b.n	800071a <__aeabi_dadd+0xa2>
 8000b64:	0742      	lsls	r2, r0, #29
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	08c0      	lsrs	r0, r0, #3
 8000b6c:	e6d2      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000b6e:	0742      	lsls	r2, r0, #29
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	08c0      	lsrs	r0, r0, #3
 8000b76:	e6ac      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000b78:	4643      	mov	r3, r8
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	08c9      	lsrs	r1, r1, #3
 8000b7e:	075b      	lsls	r3, r3, #29
 8000b80:	4655      	mov	r5, sl
 8000b82:	430b      	orrs	r3, r1
 8000b84:	08d0      	lsrs	r0, r2, #3
 8000b86:	e6c5      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000b88:	4643      	mov	r3, r8
 8000b8a:	4642      	mov	r2, r8
 8000b8c:	075b      	lsls	r3, r3, #29
 8000b8e:	08c9      	lsrs	r1, r1, #3
 8000b90:	430b      	orrs	r3, r1
 8000b92:	08d0      	lsrs	r0, r2, #3
 8000b94:	e6be      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000b96:	4303      	orrs	r3, r0
 8000b98:	001c      	movs	r4, r3
 8000b9a:	1e63      	subs	r3, r4, #1
 8000b9c:	419c      	sbcs	r4, r3
 8000b9e:	e6fc      	b.n	800099a <__aeabi_dadd+0x322>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	3c20      	subs	r4, #32
 8000ba4:	40e2      	lsrs	r2, r4
 8000ba6:	0014      	movs	r4, r2
 8000ba8:	4662      	mov	r2, ip
 8000baa:	2a20      	cmp	r2, #32
 8000bac:	d003      	beq.n	8000bb6 <__aeabi_dadd+0x53e>
 8000bae:	2540      	movs	r5, #64	; 0x40
 8000bb0:	1aad      	subs	r5, r5, r2
 8000bb2:	40a8      	lsls	r0, r5
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	1e58      	subs	r0, r3, #1
 8000bb8:	4183      	sbcs	r3, r0
 8000bba:	4323      	orrs	r3, r4
 8000bbc:	e775      	b.n	8000aaa <__aeabi_dadd+0x432>
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d0e2      	beq.n	8000b88 <__aeabi_dadd+0x510>
 8000bc2:	003a      	movs	r2, r7
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	d0cd      	beq.n	8000b64 <__aeabi_dadd+0x4ec>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	08c0      	lsrs	r0, r0, #3
 8000bd2:	0312      	lsls	r2, r2, #12
 8000bd4:	4210      	tst	r0, r2
 8000bd6:	d006      	beq.n	8000be6 <__aeabi_dadd+0x56e>
 8000bd8:	08fc      	lsrs	r4, r7, #3
 8000bda:	4214      	tst	r4, r2
 8000bdc:	d103      	bne.n	8000be6 <__aeabi_dadd+0x56e>
 8000bde:	0020      	movs	r0, r4
 8000be0:	08cb      	lsrs	r3, r1, #3
 8000be2:	077a      	lsls	r2, r7, #29
 8000be4:	4313      	orrs	r3, r2
 8000be6:	0f5a      	lsrs	r2, r3, #29
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	e690      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dadd+0x582>
 8000bf8:	e709      	b.n	8000a0e <__aeabi_dadd+0x396>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	4642      	mov	r2, r8
 8000bfe:	08c9      	lsrs	r1, r1, #3
 8000c00:	075b      	lsls	r3, r3, #29
 8000c02:	4655      	mov	r5, sl
 8000c04:	430b      	orrs	r3, r1
 8000c06:	08d0      	lsrs	r0, r2, #3
 8000c08:	e666      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000c0a:	1acc      	subs	r4, r1, r3
 8000c0c:	42a1      	cmp	r1, r4
 8000c0e:	4189      	sbcs	r1, r1
 8000c10:	1a3f      	subs	r7, r7, r0
 8000c12:	4249      	negs	r1, r1
 8000c14:	4655      	mov	r5, sl
 8000c16:	2601      	movs	r6, #1
 8000c18:	1a7f      	subs	r7, r7, r1
 8000c1a:	e57e      	b.n	800071a <__aeabi_dadd+0xa2>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	1a5c      	subs	r4, r3, r1
 8000c20:	1a87      	subs	r7, r0, r2
 8000c22:	42a3      	cmp	r3, r4
 8000c24:	4192      	sbcs	r2, r2
 8000c26:	4252      	negs	r2, r2
 8000c28:	1abf      	subs	r7, r7, r2
 8000c2a:	023a      	lsls	r2, r7, #8
 8000c2c:	d53d      	bpl.n	8000caa <__aeabi_dadd+0x632>
 8000c2e:	1acc      	subs	r4, r1, r3
 8000c30:	42a1      	cmp	r1, r4
 8000c32:	4189      	sbcs	r1, r1
 8000c34:	4643      	mov	r3, r8
 8000c36:	4249      	negs	r1, r1
 8000c38:	1a1f      	subs	r7, r3, r0
 8000c3a:	4655      	mov	r5, sl
 8000c3c:	1a7f      	subs	r7, r7, r1
 8000c3e:	e595      	b.n	800076c <__aeabi_dadd+0xf4>
 8000c40:	077b      	lsls	r3, r7, #29
 8000c42:	08c9      	lsrs	r1, r1, #3
 8000c44:	430b      	orrs	r3, r1
 8000c46:	08f8      	lsrs	r0, r7, #3
 8000c48:	e643      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000c4a:	4644      	mov	r4, r8
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	430c      	orrs	r4, r1
 8000c50:	d130      	bne.n	8000cb4 <__aeabi_dadd+0x63c>
 8000c52:	0742      	lsls	r2, r0, #29
 8000c54:	4313      	orrs	r3, r2
 8000c56:	08c0      	lsrs	r0, r0, #3
 8000c58:	e65c      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000c5a:	077b      	lsls	r3, r7, #29
 8000c5c:	08c9      	lsrs	r1, r1, #3
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	08f8      	lsrs	r0, r7, #3
 8000c62:	e639      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000c64:	185c      	adds	r4, r3, r1
 8000c66:	429c      	cmp	r4, r3
 8000c68:	419b      	sbcs	r3, r3
 8000c6a:	4440      	add	r0, r8
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	18c7      	adds	r7, r0, r3
 8000c70:	023b      	lsls	r3, r7, #8
 8000c72:	d400      	bmi.n	8000c76 <__aeabi_dadd+0x5fe>
 8000c74:	e625      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <__aeabi_dadd+0x674>)
 8000c78:	2601      	movs	r6, #1
 8000c7a:	401f      	ands	r7, r3
 8000c7c:	e621      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000c7e:	0004      	movs	r4, r0
 8000c80:	3a20      	subs	r2, #32
 8000c82:	40d4      	lsrs	r4, r2
 8000c84:	4662      	mov	r2, ip
 8000c86:	2a20      	cmp	r2, #32
 8000c88:	d004      	beq.n	8000c94 <__aeabi_dadd+0x61c>
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	4666      	mov	r6, ip
 8000c8e:	1b92      	subs	r2, r2, r6
 8000c90:	4090      	lsls	r0, r2
 8000c92:	4303      	orrs	r3, r0
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	4193      	sbcs	r3, r2
 8000c98:	431c      	orrs	r4, r3
 8000c9a:	e67e      	b.n	800099a <__aeabi_dadd+0x322>
 8000c9c:	185c      	adds	r4, r3, r1
 8000c9e:	428c      	cmp	r4, r1
 8000ca0:	4189      	sbcs	r1, r1
 8000ca2:	4440      	add	r0, r8
 8000ca4:	4249      	negs	r1, r1
 8000ca6:	1847      	adds	r7, r0, r1
 8000ca8:	e6dd      	b.n	8000a66 <__aeabi_dadd+0x3ee>
 8000caa:	0023      	movs	r3, r4
 8000cac:	433b      	orrs	r3, r7
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0x63a>
 8000cb0:	e6ad      	b.n	8000a0e <__aeabi_dadd+0x396>
 8000cb2:	e606      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cb4:	0744      	lsls	r4, r0, #29
 8000cb6:	4323      	orrs	r3, r4
 8000cb8:	2480      	movs	r4, #128	; 0x80
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	0324      	lsls	r4, r4, #12
 8000cbe:	4220      	tst	r0, r4
 8000cc0:	d008      	beq.n	8000cd4 <__aeabi_dadd+0x65c>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	08d6      	lsrs	r6, r2, #3
 8000cc6:	4226      	tst	r6, r4
 8000cc8:	d104      	bne.n	8000cd4 <__aeabi_dadd+0x65c>
 8000cca:	4655      	mov	r5, sl
 8000ccc:	0030      	movs	r0, r6
 8000cce:	08cb      	lsrs	r3, r1, #3
 8000cd0:	0751      	lsls	r1, r2, #29
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	0f5a      	lsrs	r2, r3, #29
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	0752      	lsls	r2, r2, #29
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	e619      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	4a01      	ldr	r2, [pc, #4]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000ce4:	001f      	movs	r7, r3
 8000ce6:	e55e      	b.n	80007a6 <__aeabi_dadd+0x12e>
 8000ce8:	000007ff 	.word	0x000007ff
 8000cec:	ff7fffff 	.word	0xff7fffff

08000cf0 <__aeabi_ddiv>:
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	4657      	mov	r7, sl
 8000cf4:	464e      	mov	r6, r9
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	46de      	mov	lr, fp
 8000cfa:	b5e0      	push	{r5, r6, r7, lr}
 8000cfc:	4681      	mov	r9, r0
 8000cfe:	0005      	movs	r5, r0
 8000d00:	030c      	lsls	r4, r1, #12
 8000d02:	0048      	lsls	r0, r1, #1
 8000d04:	4692      	mov	sl, r2
 8000d06:	001f      	movs	r7, r3
 8000d08:	b085      	sub	sp, #20
 8000d0a:	0b24      	lsrs	r4, r4, #12
 8000d0c:	0d40      	lsrs	r0, r0, #21
 8000d0e:	0fce      	lsrs	r6, r1, #31
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_ddiv+0x26>
 8000d14:	e156      	b.n	8000fc4 <__aeabi_ddiv+0x2d4>
 8000d16:	4bd4      	ldr	r3, [pc, #848]	; (8001068 <__aeabi_ddiv+0x378>)
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_ddiv+0x2e>
 8000d1c:	e172      	b.n	8001004 <__aeabi_ddiv+0x314>
 8000d1e:	0f6b      	lsrs	r3, r5, #29
 8000d20:	00e4      	lsls	r4, r4, #3
 8000d22:	431c      	orrs	r4, r3
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	041b      	lsls	r3, r3, #16
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	4698      	mov	r8, r3
 8000d2c:	4bcf      	ldr	r3, [pc, #828]	; (800106c <__aeabi_ddiv+0x37c>)
 8000d2e:	00ed      	lsls	r5, r5, #3
 8000d30:	469b      	mov	fp, r3
 8000d32:	2300      	movs	r3, #0
 8000d34:	4699      	mov	r9, r3
 8000d36:	4483      	add	fp, r0
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	033c      	lsls	r4, r7, #12
 8000d3c:	007b      	lsls	r3, r7, #1
 8000d3e:	4650      	mov	r0, sl
 8000d40:	0b24      	lsrs	r4, r4, #12
 8000d42:	0d5b      	lsrs	r3, r3, #21
 8000d44:	0fff      	lsrs	r7, r7, #31
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x5c>
 8000d4a:	e11f      	b.n	8000f8c <__aeabi_ddiv+0x29c>
 8000d4c:	4ac6      	ldr	r2, [pc, #792]	; (8001068 <__aeabi_ddiv+0x378>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x64>
 8000d52:	e162      	b.n	800101a <__aeabi_ddiv+0x32a>
 8000d54:	49c5      	ldr	r1, [pc, #788]	; (800106c <__aeabi_ddiv+0x37c>)
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	468c      	mov	ip, r1
 8000d5a:	00e4      	lsls	r4, r4, #3
 8000d5c:	4659      	mov	r1, fp
 8000d5e:	4314      	orrs	r4, r2
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	4463      	add	r3, ip
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	4314      	orrs	r4, r2
 8000d6a:	469b      	mov	fp, r3
 8000d6c:	00c2      	lsls	r2, r0, #3
 8000d6e:	2000      	movs	r0, #0
 8000d70:	0033      	movs	r3, r6
 8000d72:	407b      	eors	r3, r7
 8000d74:	469a      	mov	sl, r3
 8000d76:	464b      	mov	r3, r9
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d827      	bhi.n	8000dcc <__aeabi_ddiv+0xdc>
 8000d7c:	49bc      	ldr	r1, [pc, #752]	; (8001070 <__aeabi_ddiv+0x380>)
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	58cb      	ldr	r3, [r1, r3]
 8000d82:	469f      	mov	pc, r3
 8000d84:	46b2      	mov	sl, r6
 8000d86:	9b00      	ldr	r3, [sp, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d016      	beq.n	8000dba <__aeabi_ddiv+0xca>
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_ddiv+0xa2>
 8000d90:	e28e      	b.n	80012b0 <__aeabi_ddiv+0x5c0>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <__aeabi_ddiv+0xa8>
 8000d96:	e0d9      	b.n	8000f4c <__aeabi_ddiv+0x25c>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	4652      	mov	r2, sl
 8000da0:	051b      	lsls	r3, r3, #20
 8000da2:	4323      	orrs	r3, r4
 8000da4:	07d2      	lsls	r2, r2, #31
 8000da6:	4313      	orrs	r3, r2
 8000da8:	0028      	movs	r0, r5
 8000daa:	0019      	movs	r1, r3
 8000dac:	b005      	add	sp, #20
 8000dae:	bcf0      	pop	{r4, r5, r6, r7}
 8000db0:	46bb      	mov	fp, r7
 8000db2:	46b2      	mov	sl, r6
 8000db4:	46a9      	mov	r9, r5
 8000db6:	46a0      	mov	r8, r4
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dba:	2400      	movs	r4, #0
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	4baa      	ldr	r3, [pc, #680]	; (8001068 <__aeabi_ddiv+0x378>)
 8000dc0:	e7ed      	b.n	8000d9e <__aeabi_ddiv+0xae>
 8000dc2:	46ba      	mov	sl, r7
 8000dc4:	46a0      	mov	r8, r4
 8000dc6:	0015      	movs	r5, r2
 8000dc8:	9000      	str	r0, [sp, #0]
 8000dca:	e7dc      	b.n	8000d86 <__aeabi_ddiv+0x96>
 8000dcc:	4544      	cmp	r4, r8
 8000dce:	d200      	bcs.n	8000dd2 <__aeabi_ddiv+0xe2>
 8000dd0:	e1c7      	b.n	8001162 <__aeabi_ddiv+0x472>
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0xe6>
 8000dd4:	e1c2      	b.n	800115c <__aeabi_ddiv+0x46c>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	425b      	negs	r3, r3
 8000dda:	469c      	mov	ip, r3
 8000ddc:	002e      	movs	r6, r5
 8000dde:	4640      	mov	r0, r8
 8000de0:	2500      	movs	r5, #0
 8000de2:	44e3      	add	fp, ip
 8000de4:	0223      	lsls	r3, r4, #8
 8000de6:	0e14      	lsrs	r4, r2, #24
 8000de8:	431c      	orrs	r4, r3
 8000dea:	0c1b      	lsrs	r3, r3, #16
 8000dec:	4699      	mov	r9, r3
 8000dee:	0423      	lsls	r3, r4, #16
 8000df0:	0c1f      	lsrs	r7, r3, #16
 8000df2:	0212      	lsls	r2, r2, #8
 8000df4:	4649      	mov	r1, r9
 8000df6:	9200      	str	r2, [sp, #0]
 8000df8:	9701      	str	r7, [sp, #4]
 8000dfa:	f7ff fa07 	bl	800020c <__aeabi_uidivmod>
 8000dfe:	0002      	movs	r2, r0
 8000e00:	437a      	muls	r2, r7
 8000e02:	040b      	lsls	r3, r1, #16
 8000e04:	0c31      	lsrs	r1, r6, #16
 8000e06:	4680      	mov	r8, r0
 8000e08:	4319      	orrs	r1, r3
 8000e0a:	428a      	cmp	r2, r1
 8000e0c:	d907      	bls.n	8000e1e <__aeabi_ddiv+0x12e>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	469c      	mov	ip, r3
 8000e14:	1909      	adds	r1, r1, r4
 8000e16:	44e0      	add	r8, ip
 8000e18:	428c      	cmp	r4, r1
 8000e1a:	d800      	bhi.n	8000e1e <__aeabi_ddiv+0x12e>
 8000e1c:	e207      	b.n	800122e <__aeabi_ddiv+0x53e>
 8000e1e:	1a88      	subs	r0, r1, r2
 8000e20:	4649      	mov	r1, r9
 8000e22:	f7ff f9f3 	bl	800020c <__aeabi_uidivmod>
 8000e26:	0409      	lsls	r1, r1, #16
 8000e28:	468c      	mov	ip, r1
 8000e2a:	0431      	lsls	r1, r6, #16
 8000e2c:	4666      	mov	r6, ip
 8000e2e:	9a01      	ldr	r2, [sp, #4]
 8000e30:	0c09      	lsrs	r1, r1, #16
 8000e32:	4342      	muls	r2, r0
 8000e34:	0003      	movs	r3, r0
 8000e36:	4331      	orrs	r1, r6
 8000e38:	428a      	cmp	r2, r1
 8000e3a:	d904      	bls.n	8000e46 <__aeabi_ddiv+0x156>
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	428c      	cmp	r4, r1
 8000e42:	d800      	bhi.n	8000e46 <__aeabi_ddiv+0x156>
 8000e44:	e1ed      	b.n	8001222 <__aeabi_ddiv+0x532>
 8000e46:	1a88      	subs	r0, r1, r2
 8000e48:	4642      	mov	r2, r8
 8000e4a:	0412      	lsls	r2, r2, #16
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4690      	mov	r8, r2
 8000e50:	4641      	mov	r1, r8
 8000e52:	9b00      	ldr	r3, [sp, #0]
 8000e54:	040e      	lsls	r6, r1, #16
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	001f      	movs	r7, r3
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	9b00      	ldr	r3, [sp, #0]
 8000e5e:	0c36      	lsrs	r6, r6, #16
 8000e60:	041b      	lsls	r3, r3, #16
 8000e62:	0c19      	lsrs	r1, r3, #16
 8000e64:	000b      	movs	r3, r1
 8000e66:	4373      	muls	r3, r6
 8000e68:	0c12      	lsrs	r2, r2, #16
 8000e6a:	437e      	muls	r6, r7
 8000e6c:	9103      	str	r1, [sp, #12]
 8000e6e:	4351      	muls	r1, r2
 8000e70:	437a      	muls	r2, r7
 8000e72:	0c1f      	lsrs	r7, r3, #16
 8000e74:	46bc      	mov	ip, r7
 8000e76:	1876      	adds	r6, r6, r1
 8000e78:	4466      	add	r6, ip
 8000e7a:	42b1      	cmp	r1, r6
 8000e7c:	d903      	bls.n	8000e86 <__aeabi_ddiv+0x196>
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	468c      	mov	ip, r1
 8000e84:	4462      	add	r2, ip
 8000e86:	0c31      	lsrs	r1, r6, #16
 8000e88:	188a      	adds	r2, r1, r2
 8000e8a:	0431      	lsls	r1, r6, #16
 8000e8c:	041e      	lsls	r6, r3, #16
 8000e8e:	0c36      	lsrs	r6, r6, #16
 8000e90:	198e      	adds	r6, r1, r6
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d302      	bcc.n	8000e9c <__aeabi_ddiv+0x1ac>
 8000e96:	d112      	bne.n	8000ebe <__aeabi_ddiv+0x1ce>
 8000e98:	42b5      	cmp	r5, r6
 8000e9a:	d210      	bcs.n	8000ebe <__aeabi_ddiv+0x1ce>
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	1e59      	subs	r1, r3, #1
 8000ea0:	9b00      	ldr	r3, [sp, #0]
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	4465      	add	r5, ip
 8000ea6:	001f      	movs	r7, r3
 8000ea8:	429d      	cmp	r5, r3
 8000eaa:	419b      	sbcs	r3, r3
 8000eac:	425b      	negs	r3, r3
 8000eae:	191b      	adds	r3, r3, r4
 8000eb0:	18c0      	adds	r0, r0, r3
 8000eb2:	4284      	cmp	r4, r0
 8000eb4:	d200      	bcs.n	8000eb8 <__aeabi_ddiv+0x1c8>
 8000eb6:	e1a0      	b.n	80011fa <__aeabi_ddiv+0x50a>
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_ddiv+0x1cc>
 8000eba:	e19b      	b.n	80011f4 <__aeabi_ddiv+0x504>
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	1bae      	subs	r6, r5, r6
 8000ec0:	42b5      	cmp	r5, r6
 8000ec2:	41ad      	sbcs	r5, r5
 8000ec4:	1a80      	subs	r0, r0, r2
 8000ec6:	426d      	negs	r5, r5
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	4284      	cmp	r4, r0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_ddiv+0x1e0>
 8000ece:	e1d5      	b.n	800127c <__aeabi_ddiv+0x58c>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	f7ff f99b 	bl	800020c <__aeabi_uidivmod>
 8000ed6:	9a01      	ldr	r2, [sp, #4]
 8000ed8:	040b      	lsls	r3, r1, #16
 8000eda:	4342      	muls	r2, r0
 8000edc:	0c31      	lsrs	r1, r6, #16
 8000ede:	0005      	movs	r5, r0
 8000ee0:	4319      	orrs	r1, r3
 8000ee2:	428a      	cmp	r2, r1
 8000ee4:	d900      	bls.n	8000ee8 <__aeabi_ddiv+0x1f8>
 8000ee6:	e16c      	b.n	80011c2 <__aeabi_ddiv+0x4d2>
 8000ee8:	1a88      	subs	r0, r1, r2
 8000eea:	4649      	mov	r1, r9
 8000eec:	f7ff f98e 	bl	800020c <__aeabi_uidivmod>
 8000ef0:	9a01      	ldr	r2, [sp, #4]
 8000ef2:	0436      	lsls	r6, r6, #16
 8000ef4:	4342      	muls	r2, r0
 8000ef6:	0409      	lsls	r1, r1, #16
 8000ef8:	0c36      	lsrs	r6, r6, #16
 8000efa:	0003      	movs	r3, r0
 8000efc:	430e      	orrs	r6, r1
 8000efe:	42b2      	cmp	r2, r6
 8000f00:	d900      	bls.n	8000f04 <__aeabi_ddiv+0x214>
 8000f02:	e153      	b.n	80011ac <__aeabi_ddiv+0x4bc>
 8000f04:	9803      	ldr	r0, [sp, #12]
 8000f06:	1ab6      	subs	r6, r6, r2
 8000f08:	0002      	movs	r2, r0
 8000f0a:	042d      	lsls	r5, r5, #16
 8000f0c:	431d      	orrs	r5, r3
 8000f0e:	9f02      	ldr	r7, [sp, #8]
 8000f10:	042b      	lsls	r3, r5, #16
 8000f12:	0c1b      	lsrs	r3, r3, #16
 8000f14:	435a      	muls	r2, r3
 8000f16:	437b      	muls	r3, r7
 8000f18:	469c      	mov	ip, r3
 8000f1a:	0c29      	lsrs	r1, r5, #16
 8000f1c:	4348      	muls	r0, r1
 8000f1e:	0c13      	lsrs	r3, r2, #16
 8000f20:	4484      	add	ip, r0
 8000f22:	4463      	add	r3, ip
 8000f24:	4379      	muls	r1, r7
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d903      	bls.n	8000f32 <__aeabi_ddiv+0x242>
 8000f2a:	2080      	movs	r0, #128	; 0x80
 8000f2c:	0240      	lsls	r0, r0, #9
 8000f2e:	4684      	mov	ip, r0
 8000f30:	4461      	add	r1, ip
 8000f32:	0c18      	lsrs	r0, r3, #16
 8000f34:	0412      	lsls	r2, r2, #16
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	0c12      	lsrs	r2, r2, #16
 8000f3a:	1841      	adds	r1, r0, r1
 8000f3c:	189b      	adds	r3, r3, r2
 8000f3e:	428e      	cmp	r6, r1
 8000f40:	d200      	bcs.n	8000f44 <__aeabi_ddiv+0x254>
 8000f42:	e0ff      	b.n	8001144 <__aeabi_ddiv+0x454>
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x258>
 8000f46:	e0fa      	b.n	800113e <__aeabi_ddiv+0x44e>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	431d      	orrs	r5, r3
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <__aeabi_ddiv+0x384>)
 8000f4e:	445a      	add	r2, fp
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	dc00      	bgt.n	8000f56 <__aeabi_ddiv+0x266>
 8000f54:	e0aa      	b.n	80010ac <__aeabi_ddiv+0x3bc>
 8000f56:	076b      	lsls	r3, r5, #29
 8000f58:	d000      	beq.n	8000f5c <__aeabi_ddiv+0x26c>
 8000f5a:	e13d      	b.n	80011d8 <__aeabi_ddiv+0x4e8>
 8000f5c:	08ed      	lsrs	r5, r5, #3
 8000f5e:	4643      	mov	r3, r8
 8000f60:	01db      	lsls	r3, r3, #7
 8000f62:	d506      	bpl.n	8000f72 <__aeabi_ddiv+0x282>
 8000f64:	4642      	mov	r2, r8
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <__aeabi_ddiv+0x388>)
 8000f68:	401a      	ands	r2, r3
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	00d2      	lsls	r2, r2, #3
 8000f70:	445a      	add	r2, fp
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <__aeabi_ddiv+0x38c>)
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dd00      	ble.n	8000f7a <__aeabi_ddiv+0x28a>
 8000f78:	e71f      	b.n	8000dba <__aeabi_ddiv+0xca>
 8000f7a:	4643      	mov	r3, r8
 8000f7c:	075b      	lsls	r3, r3, #29
 8000f7e:	431d      	orrs	r5, r3
 8000f80:	4643      	mov	r3, r8
 8000f82:	0552      	lsls	r2, r2, #21
 8000f84:	025c      	lsls	r4, r3, #9
 8000f86:	0b24      	lsrs	r4, r4, #12
 8000f88:	0d53      	lsrs	r3, r2, #21
 8000f8a:	e708      	b.n	8000d9e <__aeabi_ddiv+0xae>
 8000f8c:	4652      	mov	r2, sl
 8000f8e:	4322      	orrs	r2, r4
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x2a4>
 8000f92:	e07b      	b.n	800108c <__aeabi_ddiv+0x39c>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d100      	bne.n	8000f9a <__aeabi_ddiv+0x2aa>
 8000f98:	e0fa      	b.n	8001190 <__aeabi_ddiv+0x4a0>
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	f001 f996 	bl	80022cc <__clzsi2>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	3a0b      	subs	r2, #11
 8000fa4:	231d      	movs	r3, #29
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	4652      	mov	r2, sl
 8000fac:	3908      	subs	r1, #8
 8000fae:	40da      	lsrs	r2, r3
 8000fb0:	408c      	lsls	r4, r1
 8000fb2:	4314      	orrs	r4, r2
 8000fb4:	4652      	mov	r2, sl
 8000fb6:	408a      	lsls	r2, r1
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <__aeabi_ddiv+0x390>)
 8000fba:	4458      	add	r0, fp
 8000fbc:	469b      	mov	fp, r3
 8000fbe:	4483      	add	fp, r0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	e6d5      	b.n	8000d70 <__aeabi_ddiv+0x80>
 8000fc4:	464b      	mov	r3, r9
 8000fc6:	4323      	orrs	r3, r4
 8000fc8:	4698      	mov	r8, r3
 8000fca:	d044      	beq.n	8001056 <__aeabi_ddiv+0x366>
 8000fcc:	2c00      	cmp	r4, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x2e2>
 8000fd0:	e0ce      	b.n	8001170 <__aeabi_ddiv+0x480>
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f001 f97a 	bl	80022cc <__clzsi2>
 8000fd8:	0001      	movs	r1, r0
 8000fda:	0002      	movs	r2, r0
 8000fdc:	390b      	subs	r1, #11
 8000fde:	231d      	movs	r3, #29
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	40d9      	lsrs	r1, r3
 8000fe8:	3808      	subs	r0, #8
 8000fea:	4084      	lsls	r4, r0
 8000fec:	000b      	movs	r3, r1
 8000fee:	464d      	mov	r5, r9
 8000ff0:	4323      	orrs	r3, r4
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4085      	lsls	r5, r0
 8000ff6:	4823      	ldr	r0, [pc, #140]	; (8001084 <__aeabi_ddiv+0x394>)
 8000ff8:	1a83      	subs	r3, r0, r2
 8000ffa:	469b      	mov	fp, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4699      	mov	r9, r3
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	e69a      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 8001004:	464b      	mov	r3, r9
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	d11d      	bne.n	8001048 <__aeabi_ddiv+0x358>
 800100c:	2308      	movs	r3, #8
 800100e:	4699      	mov	r9, r3
 8001010:	3b06      	subs	r3, #6
 8001012:	2500      	movs	r5, #0
 8001014:	4683      	mov	fp, r0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	e68f      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 800101a:	4652      	mov	r2, sl
 800101c:	4322      	orrs	r2, r4
 800101e:	d109      	bne.n	8001034 <__aeabi_ddiv+0x344>
 8001020:	2302      	movs	r3, #2
 8001022:	4649      	mov	r1, r9
 8001024:	4319      	orrs	r1, r3
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <__aeabi_ddiv+0x398>)
 8001028:	4689      	mov	r9, r1
 800102a:	469c      	mov	ip, r3
 800102c:	2400      	movs	r4, #0
 800102e:	2002      	movs	r0, #2
 8001030:	44e3      	add	fp, ip
 8001032:	e69d      	b.n	8000d70 <__aeabi_ddiv+0x80>
 8001034:	2303      	movs	r3, #3
 8001036:	464a      	mov	r2, r9
 8001038:	431a      	orrs	r2, r3
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <__aeabi_ddiv+0x398>)
 800103c:	4691      	mov	r9, r2
 800103e:	469c      	mov	ip, r3
 8001040:	4652      	mov	r2, sl
 8001042:	2003      	movs	r0, #3
 8001044:	44e3      	add	fp, ip
 8001046:	e693      	b.n	8000d70 <__aeabi_ddiv+0x80>
 8001048:	230c      	movs	r3, #12
 800104a:	4699      	mov	r9, r3
 800104c:	3b09      	subs	r3, #9
 800104e:	46a0      	mov	r8, r4
 8001050:	4683      	mov	fp, r0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	e671      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 8001056:	2304      	movs	r3, #4
 8001058:	4699      	mov	r9, r3
 800105a:	2300      	movs	r3, #0
 800105c:	469b      	mov	fp, r3
 800105e:	3301      	adds	r3, #1
 8001060:	2500      	movs	r5, #0
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	e669      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	000007ff 	.word	0x000007ff
 800106c:	fffffc01 	.word	0xfffffc01
 8001070:	0800833c 	.word	0x0800833c
 8001074:	000003ff 	.word	0x000003ff
 8001078:	feffffff 	.word	0xfeffffff
 800107c:	000007fe 	.word	0x000007fe
 8001080:	000003f3 	.word	0x000003f3
 8001084:	fffffc0d 	.word	0xfffffc0d
 8001088:	fffff801 	.word	0xfffff801
 800108c:	4649      	mov	r1, r9
 800108e:	2301      	movs	r3, #1
 8001090:	4319      	orrs	r1, r3
 8001092:	4689      	mov	r9, r1
 8001094:	2400      	movs	r4, #0
 8001096:	2001      	movs	r0, #1
 8001098:	e66a      	b.n	8000d70 <__aeabi_ddiv+0x80>
 800109a:	2300      	movs	r3, #0
 800109c:	2480      	movs	r4, #128	; 0x80
 800109e:	469a      	mov	sl, r3
 80010a0:	2500      	movs	r5, #0
 80010a2:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <__aeabi_ddiv+0x5dc>)
 80010a4:	0324      	lsls	r4, r4, #12
 80010a6:	e67a      	b.n	8000d9e <__aeabi_ddiv+0xae>
 80010a8:	2501      	movs	r5, #1
 80010aa:	426d      	negs	r5, r5
 80010ac:	2301      	movs	r3, #1
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	2b38      	cmp	r3, #56	; 0x38
 80010b2:	dd00      	ble.n	80010b6 <__aeabi_ddiv+0x3c6>
 80010b4:	e670      	b.n	8000d98 <__aeabi_ddiv+0xa8>
 80010b6:	2b1f      	cmp	r3, #31
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_ddiv+0x3cc>
 80010ba:	e0bf      	b.n	800123c <__aeabi_ddiv+0x54c>
 80010bc:	211f      	movs	r1, #31
 80010be:	4249      	negs	r1, r1
 80010c0:	1a8a      	subs	r2, r1, r2
 80010c2:	4641      	mov	r1, r8
 80010c4:	40d1      	lsrs	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	2b20      	cmp	r3, #32
 80010ca:	d004      	beq.n	80010d6 <__aeabi_ddiv+0x3e6>
 80010cc:	4641      	mov	r1, r8
 80010ce:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <__aeabi_ddiv+0x5e0>)
 80010d0:	445b      	add	r3, fp
 80010d2:	4099      	lsls	r1, r3
 80010d4:	430d      	orrs	r5, r1
 80010d6:	1e6b      	subs	r3, r5, #1
 80010d8:	419d      	sbcs	r5, r3
 80010da:	2307      	movs	r3, #7
 80010dc:	432a      	orrs	r2, r5
 80010de:	001d      	movs	r5, r3
 80010e0:	2400      	movs	r4, #0
 80010e2:	4015      	ands	r5, r2
 80010e4:	4213      	tst	r3, r2
 80010e6:	d100      	bne.n	80010ea <__aeabi_ddiv+0x3fa>
 80010e8:	e0d4      	b.n	8001294 <__aeabi_ddiv+0x5a4>
 80010ea:	210f      	movs	r1, #15
 80010ec:	2300      	movs	r3, #0
 80010ee:	4011      	ands	r1, r2
 80010f0:	2904      	cmp	r1, #4
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x406>
 80010f4:	e0cb      	b.n	800128e <__aeabi_ddiv+0x59e>
 80010f6:	1d11      	adds	r1, r2, #4
 80010f8:	4291      	cmp	r1, r2
 80010fa:	4192      	sbcs	r2, r2
 80010fc:	4252      	negs	r2, r2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	000a      	movs	r2, r1
 8001102:	0219      	lsls	r1, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_ddiv+0x418>
 8001106:	e0c2      	b.n	800128e <__aeabi_ddiv+0x59e>
 8001108:	2301      	movs	r3, #1
 800110a:	2400      	movs	r4, #0
 800110c:	2500      	movs	r5, #0
 800110e:	e646      	b.n	8000d9e <__aeabi_ddiv+0xae>
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	4641      	mov	r1, r8
 8001114:	031b      	lsls	r3, r3, #12
 8001116:	4219      	tst	r1, r3
 8001118:	d008      	beq.n	800112c <__aeabi_ddiv+0x43c>
 800111a:	421c      	tst	r4, r3
 800111c:	d106      	bne.n	800112c <__aeabi_ddiv+0x43c>
 800111e:	431c      	orrs	r4, r3
 8001120:	0324      	lsls	r4, r4, #12
 8001122:	46ba      	mov	sl, r7
 8001124:	0015      	movs	r5, r2
 8001126:	4b69      	ldr	r3, [pc, #420]	; (80012cc <__aeabi_ddiv+0x5dc>)
 8001128:	0b24      	lsrs	r4, r4, #12
 800112a:	e638      	b.n	8000d9e <__aeabi_ddiv+0xae>
 800112c:	2480      	movs	r4, #128	; 0x80
 800112e:	4643      	mov	r3, r8
 8001130:	0324      	lsls	r4, r4, #12
 8001132:	431c      	orrs	r4, r3
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	46b2      	mov	sl, r6
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <__aeabi_ddiv+0x5dc>)
 800113a:	0b24      	lsrs	r4, r4, #12
 800113c:	e62f      	b.n	8000d9e <__aeabi_ddiv+0xae>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x454>
 8001142:	e703      	b.n	8000f4c <__aeabi_ddiv+0x25c>
 8001144:	19a6      	adds	r6, r4, r6
 8001146:	1e68      	subs	r0, r5, #1
 8001148:	42a6      	cmp	r6, r4
 800114a:	d200      	bcs.n	800114e <__aeabi_ddiv+0x45e>
 800114c:	e08d      	b.n	800126a <__aeabi_ddiv+0x57a>
 800114e:	428e      	cmp	r6, r1
 8001150:	d200      	bcs.n	8001154 <__aeabi_ddiv+0x464>
 8001152:	e0a3      	b.n	800129c <__aeabi_ddiv+0x5ac>
 8001154:	d100      	bne.n	8001158 <__aeabi_ddiv+0x468>
 8001156:	e0b3      	b.n	80012c0 <__aeabi_ddiv+0x5d0>
 8001158:	0005      	movs	r5, r0
 800115a:	e6f5      	b.n	8000f48 <__aeabi_ddiv+0x258>
 800115c:	42aa      	cmp	r2, r5
 800115e:	d900      	bls.n	8001162 <__aeabi_ddiv+0x472>
 8001160:	e639      	b.n	8000dd6 <__aeabi_ddiv+0xe6>
 8001162:	4643      	mov	r3, r8
 8001164:	07de      	lsls	r6, r3, #31
 8001166:	0858      	lsrs	r0, r3, #1
 8001168:	086b      	lsrs	r3, r5, #1
 800116a:	431e      	orrs	r6, r3
 800116c:	07ed      	lsls	r5, r5, #31
 800116e:	e639      	b.n	8000de4 <__aeabi_ddiv+0xf4>
 8001170:	4648      	mov	r0, r9
 8001172:	f001 f8ab 	bl	80022cc <__clzsi2>
 8001176:	0001      	movs	r1, r0
 8001178:	0002      	movs	r2, r0
 800117a:	3115      	adds	r1, #21
 800117c:	3220      	adds	r2, #32
 800117e:	291c      	cmp	r1, #28
 8001180:	dc00      	bgt.n	8001184 <__aeabi_ddiv+0x494>
 8001182:	e72c      	b.n	8000fde <__aeabi_ddiv+0x2ee>
 8001184:	464b      	mov	r3, r9
 8001186:	3808      	subs	r0, #8
 8001188:	4083      	lsls	r3, r0
 800118a:	2500      	movs	r5, #0
 800118c:	4698      	mov	r8, r3
 800118e:	e732      	b.n	8000ff6 <__aeabi_ddiv+0x306>
 8001190:	f001 f89c 	bl	80022cc <__clzsi2>
 8001194:	0003      	movs	r3, r0
 8001196:	001a      	movs	r2, r3
 8001198:	3215      	adds	r2, #21
 800119a:	3020      	adds	r0, #32
 800119c:	2a1c      	cmp	r2, #28
 800119e:	dc00      	bgt.n	80011a2 <__aeabi_ddiv+0x4b2>
 80011a0:	e700      	b.n	8000fa4 <__aeabi_ddiv+0x2b4>
 80011a2:	4654      	mov	r4, sl
 80011a4:	3b08      	subs	r3, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	409c      	lsls	r4, r3
 80011aa:	e705      	b.n	8000fb8 <__aeabi_ddiv+0x2c8>
 80011ac:	1936      	adds	r6, r6, r4
 80011ae:	3b01      	subs	r3, #1
 80011b0:	42b4      	cmp	r4, r6
 80011b2:	d900      	bls.n	80011b6 <__aeabi_ddiv+0x4c6>
 80011b4:	e6a6      	b.n	8000f04 <__aeabi_ddiv+0x214>
 80011b6:	42b2      	cmp	r2, r6
 80011b8:	d800      	bhi.n	80011bc <__aeabi_ddiv+0x4cc>
 80011ba:	e6a3      	b.n	8000f04 <__aeabi_ddiv+0x214>
 80011bc:	1e83      	subs	r3, r0, #2
 80011be:	1936      	adds	r6, r6, r4
 80011c0:	e6a0      	b.n	8000f04 <__aeabi_ddiv+0x214>
 80011c2:	1909      	adds	r1, r1, r4
 80011c4:	3d01      	subs	r5, #1
 80011c6:	428c      	cmp	r4, r1
 80011c8:	d900      	bls.n	80011cc <__aeabi_ddiv+0x4dc>
 80011ca:	e68d      	b.n	8000ee8 <__aeabi_ddiv+0x1f8>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	d800      	bhi.n	80011d2 <__aeabi_ddiv+0x4e2>
 80011d0:	e68a      	b.n	8000ee8 <__aeabi_ddiv+0x1f8>
 80011d2:	1e85      	subs	r5, r0, #2
 80011d4:	1909      	adds	r1, r1, r4
 80011d6:	e687      	b.n	8000ee8 <__aeabi_ddiv+0x1f8>
 80011d8:	230f      	movs	r3, #15
 80011da:	402b      	ands	r3, r5
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x4f2>
 80011e0:	e6bc      	b.n	8000f5c <__aeabi_ddiv+0x26c>
 80011e2:	2305      	movs	r3, #5
 80011e4:	425b      	negs	r3, r3
 80011e6:	42ab      	cmp	r3, r5
 80011e8:	419b      	sbcs	r3, r3
 80011ea:	3504      	adds	r5, #4
 80011ec:	425b      	negs	r3, r3
 80011ee:	08ed      	lsrs	r5, r5, #3
 80011f0:	4498      	add	r8, r3
 80011f2:	e6b4      	b.n	8000f5e <__aeabi_ddiv+0x26e>
 80011f4:	42af      	cmp	r7, r5
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x50a>
 80011f8:	e660      	b.n	8000ebc <__aeabi_ddiv+0x1cc>
 80011fa:	4282      	cmp	r2, r0
 80011fc:	d804      	bhi.n	8001208 <__aeabi_ddiv+0x518>
 80011fe:	d000      	beq.n	8001202 <__aeabi_ddiv+0x512>
 8001200:	e65c      	b.n	8000ebc <__aeabi_ddiv+0x1cc>
 8001202:	42ae      	cmp	r6, r5
 8001204:	d800      	bhi.n	8001208 <__aeabi_ddiv+0x518>
 8001206:	e659      	b.n	8000ebc <__aeabi_ddiv+0x1cc>
 8001208:	2302      	movs	r3, #2
 800120a:	425b      	negs	r3, r3
 800120c:	469c      	mov	ip, r3
 800120e:	9b00      	ldr	r3, [sp, #0]
 8001210:	44e0      	add	r8, ip
 8001212:	469c      	mov	ip, r3
 8001214:	4465      	add	r5, ip
 8001216:	429d      	cmp	r5, r3
 8001218:	419b      	sbcs	r3, r3
 800121a:	425b      	negs	r3, r3
 800121c:	191b      	adds	r3, r3, r4
 800121e:	18c0      	adds	r0, r0, r3
 8001220:	e64d      	b.n	8000ebe <__aeabi_ddiv+0x1ce>
 8001222:	428a      	cmp	r2, r1
 8001224:	d800      	bhi.n	8001228 <__aeabi_ddiv+0x538>
 8001226:	e60e      	b.n	8000e46 <__aeabi_ddiv+0x156>
 8001228:	1e83      	subs	r3, r0, #2
 800122a:	1909      	adds	r1, r1, r4
 800122c:	e60b      	b.n	8000e46 <__aeabi_ddiv+0x156>
 800122e:	428a      	cmp	r2, r1
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x544>
 8001232:	e5f4      	b.n	8000e1e <__aeabi_ddiv+0x12e>
 8001234:	1e83      	subs	r3, r0, #2
 8001236:	4698      	mov	r8, r3
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e5f0      	b.n	8000e1e <__aeabi_ddiv+0x12e>
 800123c:	4925      	ldr	r1, [pc, #148]	; (80012d4 <__aeabi_ddiv+0x5e4>)
 800123e:	0028      	movs	r0, r5
 8001240:	4459      	add	r1, fp
 8001242:	408d      	lsls	r5, r1
 8001244:	4642      	mov	r2, r8
 8001246:	408a      	lsls	r2, r1
 8001248:	1e69      	subs	r1, r5, #1
 800124a:	418d      	sbcs	r5, r1
 800124c:	4641      	mov	r1, r8
 800124e:	40d8      	lsrs	r0, r3
 8001250:	40d9      	lsrs	r1, r3
 8001252:	4302      	orrs	r2, r0
 8001254:	432a      	orrs	r2, r5
 8001256:	000b      	movs	r3, r1
 8001258:	0751      	lsls	r1, r2, #29
 800125a:	d100      	bne.n	800125e <__aeabi_ddiv+0x56e>
 800125c:	e751      	b.n	8001102 <__aeabi_ddiv+0x412>
 800125e:	210f      	movs	r1, #15
 8001260:	4011      	ands	r1, r2
 8001262:	2904      	cmp	r1, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_ddiv+0x578>
 8001266:	e746      	b.n	80010f6 <__aeabi_ddiv+0x406>
 8001268:	e74b      	b.n	8001102 <__aeabi_ddiv+0x412>
 800126a:	0005      	movs	r5, r0
 800126c:	428e      	cmp	r6, r1
 800126e:	d000      	beq.n	8001272 <__aeabi_ddiv+0x582>
 8001270:	e66a      	b.n	8000f48 <__aeabi_ddiv+0x258>
 8001272:	9a00      	ldr	r2, [sp, #0]
 8001274:	4293      	cmp	r3, r2
 8001276:	d000      	beq.n	800127a <__aeabi_ddiv+0x58a>
 8001278:	e666      	b.n	8000f48 <__aeabi_ddiv+0x258>
 800127a:	e667      	b.n	8000f4c <__aeabi_ddiv+0x25c>
 800127c:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <__aeabi_ddiv+0x5e8>)
 800127e:	445a      	add	r2, fp
 8001280:	2a00      	cmp	r2, #0
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x596>
 8001284:	e710      	b.n	80010a8 <__aeabi_ddiv+0x3b8>
 8001286:	2301      	movs	r3, #1
 8001288:	2500      	movs	r5, #0
 800128a:	4498      	add	r8, r3
 800128c:	e667      	b.n	8000f5e <__aeabi_ddiv+0x26e>
 800128e:	075d      	lsls	r5, r3, #29
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	0b1c      	lsrs	r4, r3, #12
 8001294:	08d2      	lsrs	r2, r2, #3
 8001296:	2300      	movs	r3, #0
 8001298:	4315      	orrs	r5, r2
 800129a:	e580      	b.n	8000d9e <__aeabi_ddiv+0xae>
 800129c:	9800      	ldr	r0, [sp, #0]
 800129e:	3d02      	subs	r5, #2
 80012a0:	0042      	lsls	r2, r0, #1
 80012a2:	4282      	cmp	r2, r0
 80012a4:	41bf      	sbcs	r7, r7
 80012a6:	427f      	negs	r7, r7
 80012a8:	193c      	adds	r4, r7, r4
 80012aa:	1936      	adds	r6, r6, r4
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	e7dd      	b.n	800126c <__aeabi_ddiv+0x57c>
 80012b0:	2480      	movs	r4, #128	; 0x80
 80012b2:	4643      	mov	r3, r8
 80012b4:	0324      	lsls	r4, r4, #12
 80012b6:	431c      	orrs	r4, r3
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__aeabi_ddiv+0x5dc>)
 80012bc:	0b24      	lsrs	r4, r4, #12
 80012be:	e56e      	b.n	8000d9e <__aeabi_ddiv+0xae>
 80012c0:	9a00      	ldr	r2, [sp, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d3ea      	bcc.n	800129c <__aeabi_ddiv+0x5ac>
 80012c6:	0005      	movs	r5, r0
 80012c8:	e7d3      	b.n	8001272 <__aeabi_ddiv+0x582>
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	000007ff 	.word	0x000007ff
 80012d0:	0000043e 	.word	0x0000043e
 80012d4:	0000041e 	.word	0x0000041e
 80012d8:	000003ff 	.word	0x000003ff

080012dc <__eqdf2>:
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	464e      	mov	r6, r9
 80012e0:	4645      	mov	r5, r8
 80012e2:	46de      	mov	lr, fp
 80012e4:	4657      	mov	r7, sl
 80012e6:	4690      	mov	r8, r2
 80012e8:	b5e0      	push	{r5, r6, r7, lr}
 80012ea:	0017      	movs	r7, r2
 80012ec:	031a      	lsls	r2, r3, #12
 80012ee:	0b12      	lsrs	r2, r2, #12
 80012f0:	0005      	movs	r5, r0
 80012f2:	4684      	mov	ip, r0
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <__eqdf2+0x80>)
 80012f6:	030e      	lsls	r6, r1, #12
 80012f8:	004c      	lsls	r4, r1, #1
 80012fa:	4691      	mov	r9, r2
 80012fc:	005a      	lsls	r2, r3, #1
 80012fe:	0fdb      	lsrs	r3, r3, #31
 8001300:	469b      	mov	fp, r3
 8001302:	0b36      	lsrs	r6, r6, #12
 8001304:	0d64      	lsrs	r4, r4, #21
 8001306:	0fc9      	lsrs	r1, r1, #31
 8001308:	0d52      	lsrs	r2, r2, #21
 800130a:	4284      	cmp	r4, r0
 800130c:	d019      	beq.n	8001342 <__eqdf2+0x66>
 800130e:	4282      	cmp	r2, r0
 8001310:	d010      	beq.n	8001334 <__eqdf2+0x58>
 8001312:	2001      	movs	r0, #1
 8001314:	4294      	cmp	r4, r2
 8001316:	d10e      	bne.n	8001336 <__eqdf2+0x5a>
 8001318:	454e      	cmp	r6, r9
 800131a:	d10c      	bne.n	8001336 <__eqdf2+0x5a>
 800131c:	2001      	movs	r0, #1
 800131e:	45c4      	cmp	ip, r8
 8001320:	d109      	bne.n	8001336 <__eqdf2+0x5a>
 8001322:	4559      	cmp	r1, fp
 8001324:	d017      	beq.n	8001356 <__eqdf2+0x7a>
 8001326:	2c00      	cmp	r4, #0
 8001328:	d105      	bne.n	8001336 <__eqdf2+0x5a>
 800132a:	0030      	movs	r0, r6
 800132c:	4328      	orrs	r0, r5
 800132e:	1e43      	subs	r3, r0, #1
 8001330:	4198      	sbcs	r0, r3
 8001332:	e000      	b.n	8001336 <__eqdf2+0x5a>
 8001334:	2001      	movs	r0, #1
 8001336:	bcf0      	pop	{r4, r5, r6, r7}
 8001338:	46bb      	mov	fp, r7
 800133a:	46b2      	mov	sl, r6
 800133c:	46a9      	mov	r9, r5
 800133e:	46a0      	mov	r8, r4
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	0033      	movs	r3, r6
 8001344:	2001      	movs	r0, #1
 8001346:	432b      	orrs	r3, r5
 8001348:	d1f5      	bne.n	8001336 <__eqdf2+0x5a>
 800134a:	42a2      	cmp	r2, r4
 800134c:	d1f3      	bne.n	8001336 <__eqdf2+0x5a>
 800134e:	464b      	mov	r3, r9
 8001350:	433b      	orrs	r3, r7
 8001352:	d1f0      	bne.n	8001336 <__eqdf2+0x5a>
 8001354:	e7e2      	b.n	800131c <__eqdf2+0x40>
 8001356:	2000      	movs	r0, #0
 8001358:	e7ed      	b.n	8001336 <__eqdf2+0x5a>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	000007ff 	.word	0x000007ff

08001360 <__gedf2>:
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	4647      	mov	r7, r8
 8001364:	46ce      	mov	lr, r9
 8001366:	0004      	movs	r4, r0
 8001368:	0018      	movs	r0, r3
 800136a:	0016      	movs	r6, r2
 800136c:	031b      	lsls	r3, r3, #12
 800136e:	0b1b      	lsrs	r3, r3, #12
 8001370:	4d2d      	ldr	r5, [pc, #180]	; (8001428 <__gedf2+0xc8>)
 8001372:	004a      	lsls	r2, r1, #1
 8001374:	4699      	mov	r9, r3
 8001376:	b580      	push	{r7, lr}
 8001378:	0043      	lsls	r3, r0, #1
 800137a:	030f      	lsls	r7, r1, #12
 800137c:	46a4      	mov	ip, r4
 800137e:	46b0      	mov	r8, r6
 8001380:	0b3f      	lsrs	r7, r7, #12
 8001382:	0d52      	lsrs	r2, r2, #21
 8001384:	0fc9      	lsrs	r1, r1, #31
 8001386:	0d5b      	lsrs	r3, r3, #21
 8001388:	0fc0      	lsrs	r0, r0, #31
 800138a:	42aa      	cmp	r2, r5
 800138c:	d021      	beq.n	80013d2 <__gedf2+0x72>
 800138e:	42ab      	cmp	r3, r5
 8001390:	d013      	beq.n	80013ba <__gedf2+0x5a>
 8001392:	2a00      	cmp	r2, #0
 8001394:	d122      	bne.n	80013dc <__gedf2+0x7c>
 8001396:	433c      	orrs	r4, r7
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <__gedf2+0x42>
 800139c:	464d      	mov	r5, r9
 800139e:	432e      	orrs	r6, r5
 80013a0:	d022      	beq.n	80013e8 <__gedf2+0x88>
 80013a2:	2c00      	cmp	r4, #0
 80013a4:	d010      	beq.n	80013c8 <__gedf2+0x68>
 80013a6:	4281      	cmp	r1, r0
 80013a8:	d022      	beq.n	80013f0 <__gedf2+0x90>
 80013aa:	2002      	movs	r0, #2
 80013ac:	3901      	subs	r1, #1
 80013ae:	4008      	ands	r0, r1
 80013b0:	3801      	subs	r0, #1
 80013b2:	bcc0      	pop	{r6, r7}
 80013b4:	46b9      	mov	r9, r7
 80013b6:	46b0      	mov	r8, r6
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ba:	464d      	mov	r5, r9
 80013bc:	432e      	orrs	r6, r5
 80013be:	d129      	bne.n	8001414 <__gedf2+0xb4>
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	d1f0      	bne.n	80013a6 <__gedf2+0x46>
 80013c4:	433c      	orrs	r4, r7
 80013c6:	d1ee      	bne.n	80013a6 <__gedf2+0x46>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d1f2      	bne.n	80013b2 <__gedf2+0x52>
 80013cc:	2001      	movs	r0, #1
 80013ce:	4240      	negs	r0, r0
 80013d0:	e7ef      	b.n	80013b2 <__gedf2+0x52>
 80013d2:	003d      	movs	r5, r7
 80013d4:	4325      	orrs	r5, r4
 80013d6:	d11d      	bne.n	8001414 <__gedf2+0xb4>
 80013d8:	4293      	cmp	r3, r2
 80013da:	d0ee      	beq.n	80013ba <__gedf2+0x5a>
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e2      	bne.n	80013a6 <__gedf2+0x46>
 80013e0:	464c      	mov	r4, r9
 80013e2:	4326      	orrs	r6, r4
 80013e4:	d1df      	bne.n	80013a6 <__gedf2+0x46>
 80013e6:	e7e0      	b.n	80013aa <__gedf2+0x4a>
 80013e8:	2000      	movs	r0, #0
 80013ea:	2c00      	cmp	r4, #0
 80013ec:	d0e1      	beq.n	80013b2 <__gedf2+0x52>
 80013ee:	e7dc      	b.n	80013aa <__gedf2+0x4a>
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dc0a      	bgt.n	800140a <__gedf2+0xaa>
 80013f4:	dbe8      	blt.n	80013c8 <__gedf2+0x68>
 80013f6:	454f      	cmp	r7, r9
 80013f8:	d8d7      	bhi.n	80013aa <__gedf2+0x4a>
 80013fa:	d00e      	beq.n	800141a <__gedf2+0xba>
 80013fc:	2000      	movs	r0, #0
 80013fe:	454f      	cmp	r7, r9
 8001400:	d2d7      	bcs.n	80013b2 <__gedf2+0x52>
 8001402:	2900      	cmp	r1, #0
 8001404:	d0e2      	beq.n	80013cc <__gedf2+0x6c>
 8001406:	0008      	movs	r0, r1
 8001408:	e7d3      	b.n	80013b2 <__gedf2+0x52>
 800140a:	4243      	negs	r3, r0
 800140c:	4158      	adcs	r0, r3
 800140e:	0040      	lsls	r0, r0, #1
 8001410:	3801      	subs	r0, #1
 8001412:	e7ce      	b.n	80013b2 <__gedf2+0x52>
 8001414:	2002      	movs	r0, #2
 8001416:	4240      	negs	r0, r0
 8001418:	e7cb      	b.n	80013b2 <__gedf2+0x52>
 800141a:	45c4      	cmp	ip, r8
 800141c:	d8c5      	bhi.n	80013aa <__gedf2+0x4a>
 800141e:	2000      	movs	r0, #0
 8001420:	45c4      	cmp	ip, r8
 8001422:	d2c6      	bcs.n	80013b2 <__gedf2+0x52>
 8001424:	e7ed      	b.n	8001402 <__gedf2+0xa2>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	000007ff 	.word	0x000007ff

0800142c <__ledf2>:
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	4647      	mov	r7, r8
 8001430:	46ce      	mov	lr, r9
 8001432:	0004      	movs	r4, r0
 8001434:	0018      	movs	r0, r3
 8001436:	0016      	movs	r6, r2
 8001438:	031b      	lsls	r3, r3, #12
 800143a:	0b1b      	lsrs	r3, r3, #12
 800143c:	4d2c      	ldr	r5, [pc, #176]	; (80014f0 <__ledf2+0xc4>)
 800143e:	004a      	lsls	r2, r1, #1
 8001440:	4699      	mov	r9, r3
 8001442:	b580      	push	{r7, lr}
 8001444:	0043      	lsls	r3, r0, #1
 8001446:	030f      	lsls	r7, r1, #12
 8001448:	46a4      	mov	ip, r4
 800144a:	46b0      	mov	r8, r6
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	0fc9      	lsrs	r1, r1, #31
 8001452:	0d5b      	lsrs	r3, r3, #21
 8001454:	0fc0      	lsrs	r0, r0, #31
 8001456:	42aa      	cmp	r2, r5
 8001458:	d00d      	beq.n	8001476 <__ledf2+0x4a>
 800145a:	42ab      	cmp	r3, r5
 800145c:	d010      	beq.n	8001480 <__ledf2+0x54>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d127      	bne.n	80014b2 <__ledf2+0x86>
 8001462:	433c      	orrs	r4, r7
 8001464:	2b00      	cmp	r3, #0
 8001466:	d111      	bne.n	800148c <__ledf2+0x60>
 8001468:	464d      	mov	r5, r9
 800146a:	432e      	orrs	r6, r5
 800146c:	d10e      	bne.n	800148c <__ledf2+0x60>
 800146e:	2000      	movs	r0, #0
 8001470:	2c00      	cmp	r4, #0
 8001472:	d015      	beq.n	80014a0 <__ledf2+0x74>
 8001474:	e00e      	b.n	8001494 <__ledf2+0x68>
 8001476:	003d      	movs	r5, r7
 8001478:	4325      	orrs	r5, r4
 800147a:	d110      	bne.n	800149e <__ledf2+0x72>
 800147c:	4293      	cmp	r3, r2
 800147e:	d118      	bne.n	80014b2 <__ledf2+0x86>
 8001480:	464d      	mov	r5, r9
 8001482:	432e      	orrs	r6, r5
 8001484:	d10b      	bne.n	800149e <__ledf2+0x72>
 8001486:	2a00      	cmp	r2, #0
 8001488:	d102      	bne.n	8001490 <__ledf2+0x64>
 800148a:	433c      	orrs	r4, r7
 800148c:	2c00      	cmp	r4, #0
 800148e:	d00b      	beq.n	80014a8 <__ledf2+0x7c>
 8001490:	4281      	cmp	r1, r0
 8001492:	d014      	beq.n	80014be <__ledf2+0x92>
 8001494:	2002      	movs	r0, #2
 8001496:	3901      	subs	r1, #1
 8001498:	4008      	ands	r0, r1
 800149a:	3801      	subs	r0, #1
 800149c:	e000      	b.n	80014a0 <__ledf2+0x74>
 800149e:	2002      	movs	r0, #2
 80014a0:	bcc0      	pop	{r6, r7}
 80014a2:	46b9      	mov	r9, r7
 80014a4:	46b0      	mov	r8, r6
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d1f9      	bne.n	80014a0 <__ledf2+0x74>
 80014ac:	2001      	movs	r0, #1
 80014ae:	4240      	negs	r0, r0
 80014b0:	e7f6      	b.n	80014a0 <__ledf2+0x74>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ec      	bne.n	8001490 <__ledf2+0x64>
 80014b6:	464c      	mov	r4, r9
 80014b8:	4326      	orrs	r6, r4
 80014ba:	d1e9      	bne.n	8001490 <__ledf2+0x64>
 80014bc:	e7ea      	b.n	8001494 <__ledf2+0x68>
 80014be:	429a      	cmp	r2, r3
 80014c0:	dd04      	ble.n	80014cc <__ledf2+0xa0>
 80014c2:	4243      	negs	r3, r0
 80014c4:	4158      	adcs	r0, r3
 80014c6:	0040      	lsls	r0, r0, #1
 80014c8:	3801      	subs	r0, #1
 80014ca:	e7e9      	b.n	80014a0 <__ledf2+0x74>
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbeb      	blt.n	80014a8 <__ledf2+0x7c>
 80014d0:	454f      	cmp	r7, r9
 80014d2:	d8df      	bhi.n	8001494 <__ledf2+0x68>
 80014d4:	d006      	beq.n	80014e4 <__ledf2+0xb8>
 80014d6:	2000      	movs	r0, #0
 80014d8:	454f      	cmp	r7, r9
 80014da:	d2e1      	bcs.n	80014a0 <__ledf2+0x74>
 80014dc:	2900      	cmp	r1, #0
 80014de:	d0e5      	beq.n	80014ac <__ledf2+0x80>
 80014e0:	0008      	movs	r0, r1
 80014e2:	e7dd      	b.n	80014a0 <__ledf2+0x74>
 80014e4:	45c4      	cmp	ip, r8
 80014e6:	d8d5      	bhi.n	8001494 <__ledf2+0x68>
 80014e8:	2000      	movs	r0, #0
 80014ea:	45c4      	cmp	ip, r8
 80014ec:	d2d8      	bcs.n	80014a0 <__ledf2+0x74>
 80014ee:	e7f5      	b.n	80014dc <__ledf2+0xb0>
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__aeabi_dmul>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	4657      	mov	r7, sl
 80014f8:	464e      	mov	r6, r9
 80014fa:	4645      	mov	r5, r8
 80014fc:	46de      	mov	lr, fp
 80014fe:	b5e0      	push	{r5, r6, r7, lr}
 8001500:	4698      	mov	r8, r3
 8001502:	030c      	lsls	r4, r1, #12
 8001504:	004b      	lsls	r3, r1, #1
 8001506:	0006      	movs	r6, r0
 8001508:	4692      	mov	sl, r2
 800150a:	b087      	sub	sp, #28
 800150c:	0b24      	lsrs	r4, r4, #12
 800150e:	0d5b      	lsrs	r3, r3, #21
 8001510:	0fcf      	lsrs	r7, r1, #31
 8001512:	2b00      	cmp	r3, #0
 8001514:	d100      	bne.n	8001518 <__aeabi_dmul+0x24>
 8001516:	e15c      	b.n	80017d2 <__aeabi_dmul+0x2de>
 8001518:	4ad9      	ldr	r2, [pc, #868]	; (8001880 <__aeabi_dmul+0x38c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d100      	bne.n	8001520 <__aeabi_dmul+0x2c>
 800151e:	e175      	b.n	800180c <__aeabi_dmul+0x318>
 8001520:	0f42      	lsrs	r2, r0, #29
 8001522:	00e4      	lsls	r4, r4, #3
 8001524:	4314      	orrs	r4, r2
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0412      	lsls	r2, r2, #16
 800152a:	4314      	orrs	r4, r2
 800152c:	4ad5      	ldr	r2, [pc, #852]	; (8001884 <__aeabi_dmul+0x390>)
 800152e:	00c5      	lsls	r5, r0, #3
 8001530:	4694      	mov	ip, r2
 8001532:	4463      	add	r3, ip
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	4699      	mov	r9, r3
 800153a:	469b      	mov	fp, r3
 800153c:	4643      	mov	r3, r8
 800153e:	4642      	mov	r2, r8
 8001540:	031e      	lsls	r6, r3, #12
 8001542:	0fd2      	lsrs	r2, r2, #31
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4650      	mov	r0, sl
 8001548:	4690      	mov	r8, r2
 800154a:	0b36      	lsrs	r6, r6, #12
 800154c:	0d5b      	lsrs	r3, r3, #21
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x5e>
 8001550:	e120      	b.n	8001794 <__aeabi_dmul+0x2a0>
 8001552:	4acb      	ldr	r2, [pc, #812]	; (8001880 <__aeabi_dmul+0x38c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x66>
 8001558:	e162      	b.n	8001820 <__aeabi_dmul+0x32c>
 800155a:	49ca      	ldr	r1, [pc, #808]	; (8001884 <__aeabi_dmul+0x390>)
 800155c:	0f42      	lsrs	r2, r0, #29
 800155e:	468c      	mov	ip, r1
 8001560:	9900      	ldr	r1, [sp, #0]
 8001562:	4463      	add	r3, ip
 8001564:	00f6      	lsls	r6, r6, #3
 8001566:	468c      	mov	ip, r1
 8001568:	4316      	orrs	r6, r2
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	449c      	add	ip, r3
 800156e:	0412      	lsls	r2, r2, #16
 8001570:	4663      	mov	r3, ip
 8001572:	4316      	orrs	r6, r2
 8001574:	00c2      	lsls	r2, r0, #3
 8001576:	2000      	movs	r0, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	9900      	ldr	r1, [sp, #0]
 800157c:	4643      	mov	r3, r8
 800157e:	3101      	adds	r1, #1
 8001580:	468c      	mov	ip, r1
 8001582:	4649      	mov	r1, r9
 8001584:	407b      	eors	r3, r7
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	290f      	cmp	r1, #15
 800158a:	d826      	bhi.n	80015da <__aeabi_dmul+0xe6>
 800158c:	4bbe      	ldr	r3, [pc, #760]	; (8001888 <__aeabi_dmul+0x394>)
 800158e:	0089      	lsls	r1, r1, #2
 8001590:	5859      	ldr	r1, [r3, r1]
 8001592:	468f      	mov	pc, r1
 8001594:	4643      	mov	r3, r8
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	0034      	movs	r4, r6
 800159a:	0015      	movs	r5, r2
 800159c:	4683      	mov	fp, r0
 800159e:	465b      	mov	r3, fp
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d016      	beq.n	80015d2 <__aeabi_dmul+0xde>
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0xb6>
 80015a8:	e203      	b.n	80019b2 <__aeabi_dmul+0x4be>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xbc>
 80015ae:	e0cd      	b.n	800174c <__aeabi_dmul+0x258>
 80015b0:	2200      	movs	r2, #0
 80015b2:	2400      	movs	r4, #0
 80015b4:	2500      	movs	r5, #0
 80015b6:	9b01      	ldr	r3, [sp, #4]
 80015b8:	0512      	lsls	r2, r2, #20
 80015ba:	4322      	orrs	r2, r4
 80015bc:	07db      	lsls	r3, r3, #31
 80015be:	431a      	orrs	r2, r3
 80015c0:	0028      	movs	r0, r5
 80015c2:	0011      	movs	r1, r2
 80015c4:	b007      	add	sp, #28
 80015c6:	bcf0      	pop	{r4, r5, r6, r7}
 80015c8:	46bb      	mov	fp, r7
 80015ca:	46b2      	mov	sl, r6
 80015cc:	46a9      	mov	r9, r5
 80015ce:	46a0      	mov	r8, r4
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d2:	2400      	movs	r4, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	4aaa      	ldr	r2, [pc, #680]	; (8001880 <__aeabi_dmul+0x38c>)
 80015d8:	e7ed      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80015da:	0c28      	lsrs	r0, r5, #16
 80015dc:	042d      	lsls	r5, r5, #16
 80015de:	0c2d      	lsrs	r5, r5, #16
 80015e0:	002b      	movs	r3, r5
 80015e2:	0c11      	lsrs	r1, r2, #16
 80015e4:	0412      	lsls	r2, r2, #16
 80015e6:	0c12      	lsrs	r2, r2, #16
 80015e8:	4353      	muls	r3, r2
 80015ea:	4698      	mov	r8, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	002f      	movs	r7, r5
 80015f0:	4343      	muls	r3, r0
 80015f2:	4699      	mov	r9, r3
 80015f4:	434f      	muls	r7, r1
 80015f6:	444f      	add	r7, r9
 80015f8:	46bb      	mov	fp, r7
 80015fa:	4647      	mov	r7, r8
 80015fc:	000b      	movs	r3, r1
 80015fe:	0c3f      	lsrs	r7, r7, #16
 8001600:	46ba      	mov	sl, r7
 8001602:	4343      	muls	r3, r0
 8001604:	44da      	add	sl, fp
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	45d1      	cmp	r9, sl
 800160a:	d904      	bls.n	8001616 <__aeabi_dmul+0x122>
 800160c:	2780      	movs	r7, #128	; 0x80
 800160e:	027f      	lsls	r7, r7, #9
 8001610:	46b9      	mov	r9, r7
 8001612:	444b      	add	r3, r9
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	4653      	mov	r3, sl
 8001618:	0c1b      	lsrs	r3, r3, #16
 800161a:	469b      	mov	fp, r3
 800161c:	4653      	mov	r3, sl
 800161e:	041f      	lsls	r7, r3, #16
 8001620:	4643      	mov	r3, r8
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	4698      	mov	r8, r3
 8001628:	003b      	movs	r3, r7
 800162a:	4443      	add	r3, r8
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	0c33      	lsrs	r3, r6, #16
 8001630:	0436      	lsls	r6, r6, #16
 8001632:	0c36      	lsrs	r6, r6, #16
 8001634:	4698      	mov	r8, r3
 8001636:	0033      	movs	r3, r6
 8001638:	4343      	muls	r3, r0
 800163a:	4699      	mov	r9, r3
 800163c:	4643      	mov	r3, r8
 800163e:	4343      	muls	r3, r0
 8001640:	002f      	movs	r7, r5
 8001642:	469a      	mov	sl, r3
 8001644:	4643      	mov	r3, r8
 8001646:	4377      	muls	r7, r6
 8001648:	435d      	muls	r5, r3
 800164a:	0c38      	lsrs	r0, r7, #16
 800164c:	444d      	add	r5, r9
 800164e:	1945      	adds	r5, r0, r5
 8001650:	45a9      	cmp	r9, r5
 8001652:	d903      	bls.n	800165c <__aeabi_dmul+0x168>
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	4699      	mov	r9, r3
 800165a:	44ca      	add	sl, r9
 800165c:	043f      	lsls	r7, r7, #16
 800165e:	0c28      	lsrs	r0, r5, #16
 8001660:	0c3f      	lsrs	r7, r7, #16
 8001662:	042d      	lsls	r5, r5, #16
 8001664:	19ed      	adds	r5, r5, r7
 8001666:	0c27      	lsrs	r7, r4, #16
 8001668:	0424      	lsls	r4, r4, #16
 800166a:	0c24      	lsrs	r4, r4, #16
 800166c:	0003      	movs	r3, r0
 800166e:	0020      	movs	r0, r4
 8001670:	4350      	muls	r0, r2
 8001672:	437a      	muls	r2, r7
 8001674:	4691      	mov	r9, r2
 8001676:	003a      	movs	r2, r7
 8001678:	4453      	add	r3, sl
 800167a:	9305      	str	r3, [sp, #20]
 800167c:	0c03      	lsrs	r3, r0, #16
 800167e:	469a      	mov	sl, r3
 8001680:	434a      	muls	r2, r1
 8001682:	4361      	muls	r1, r4
 8001684:	4449      	add	r1, r9
 8001686:	4451      	add	r1, sl
 8001688:	44ab      	add	fp, r5
 800168a:	4589      	cmp	r9, r1
 800168c:	d903      	bls.n	8001696 <__aeabi_dmul+0x1a2>
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	4699      	mov	r9, r3
 8001694:	444a      	add	r2, r9
 8001696:	0400      	lsls	r0, r0, #16
 8001698:	0c0b      	lsrs	r3, r1, #16
 800169a:	0c00      	lsrs	r0, r0, #16
 800169c:	0409      	lsls	r1, r1, #16
 800169e:	1809      	adds	r1, r1, r0
 80016a0:	0020      	movs	r0, r4
 80016a2:	4699      	mov	r9, r3
 80016a4:	4643      	mov	r3, r8
 80016a6:	4370      	muls	r0, r6
 80016a8:	435c      	muls	r4, r3
 80016aa:	437e      	muls	r6, r7
 80016ac:	435f      	muls	r7, r3
 80016ae:	0c03      	lsrs	r3, r0, #16
 80016b0:	4698      	mov	r8, r3
 80016b2:	19a4      	adds	r4, r4, r6
 80016b4:	4444      	add	r4, r8
 80016b6:	444a      	add	r2, r9
 80016b8:	9703      	str	r7, [sp, #12]
 80016ba:	42a6      	cmp	r6, r4
 80016bc:	d904      	bls.n	80016c8 <__aeabi_dmul+0x1d4>
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	025b      	lsls	r3, r3, #9
 80016c2:	4698      	mov	r8, r3
 80016c4:	4447      	add	r7, r8
 80016c6:	9703      	str	r7, [sp, #12]
 80016c8:	0423      	lsls	r3, r4, #16
 80016ca:	9e02      	ldr	r6, [sp, #8]
 80016cc:	469a      	mov	sl, r3
 80016ce:	9b05      	ldr	r3, [sp, #20]
 80016d0:	445e      	add	r6, fp
 80016d2:	4698      	mov	r8, r3
 80016d4:	42ae      	cmp	r6, r5
 80016d6:	41ad      	sbcs	r5, r5
 80016d8:	1876      	adds	r6, r6, r1
 80016da:	428e      	cmp	r6, r1
 80016dc:	4189      	sbcs	r1, r1
 80016de:	0400      	lsls	r0, r0, #16
 80016e0:	0c00      	lsrs	r0, r0, #16
 80016e2:	4450      	add	r0, sl
 80016e4:	4440      	add	r0, r8
 80016e6:	426d      	negs	r5, r5
 80016e8:	1947      	adds	r7, r0, r5
 80016ea:	46b8      	mov	r8, r7
 80016ec:	4693      	mov	fp, r2
 80016ee:	4249      	negs	r1, r1
 80016f0:	4689      	mov	r9, r1
 80016f2:	44c3      	add	fp, r8
 80016f4:	44d9      	add	r9, fp
 80016f6:	4298      	cmp	r0, r3
 80016f8:	4180      	sbcs	r0, r0
 80016fa:	45a8      	cmp	r8, r5
 80016fc:	41ad      	sbcs	r5, r5
 80016fe:	4593      	cmp	fp, r2
 8001700:	4192      	sbcs	r2, r2
 8001702:	4589      	cmp	r9, r1
 8001704:	4189      	sbcs	r1, r1
 8001706:	426d      	negs	r5, r5
 8001708:	4240      	negs	r0, r0
 800170a:	4328      	orrs	r0, r5
 800170c:	0c24      	lsrs	r4, r4, #16
 800170e:	4252      	negs	r2, r2
 8001710:	4249      	negs	r1, r1
 8001712:	430a      	orrs	r2, r1
 8001714:	9b03      	ldr	r3, [sp, #12]
 8001716:	1900      	adds	r0, r0, r4
 8001718:	1880      	adds	r0, r0, r2
 800171a:	18c7      	adds	r7, r0, r3
 800171c:	464b      	mov	r3, r9
 800171e:	0ddc      	lsrs	r4, r3, #23
 8001720:	9b04      	ldr	r3, [sp, #16]
 8001722:	0275      	lsls	r5, r6, #9
 8001724:	431d      	orrs	r5, r3
 8001726:	1e6a      	subs	r2, r5, #1
 8001728:	4195      	sbcs	r5, r2
 800172a:	464b      	mov	r3, r9
 800172c:	0df6      	lsrs	r6, r6, #23
 800172e:	027f      	lsls	r7, r7, #9
 8001730:	4335      	orrs	r5, r6
 8001732:	025a      	lsls	r2, r3, #9
 8001734:	433c      	orrs	r4, r7
 8001736:	4315      	orrs	r5, r2
 8001738:	01fb      	lsls	r3, r7, #7
 800173a:	d400      	bmi.n	800173e <__aeabi_dmul+0x24a>
 800173c:	e11c      	b.n	8001978 <__aeabi_dmul+0x484>
 800173e:	2101      	movs	r1, #1
 8001740:	086a      	lsrs	r2, r5, #1
 8001742:	400d      	ands	r5, r1
 8001744:	4315      	orrs	r5, r2
 8001746:	07e2      	lsls	r2, r4, #31
 8001748:	4315      	orrs	r5, r2
 800174a:	0864      	lsrs	r4, r4, #1
 800174c:	494f      	ldr	r1, [pc, #316]	; (800188c <__aeabi_dmul+0x398>)
 800174e:	4461      	add	r1, ip
 8001750:	2900      	cmp	r1, #0
 8001752:	dc00      	bgt.n	8001756 <__aeabi_dmul+0x262>
 8001754:	e0b0      	b.n	80018b8 <__aeabi_dmul+0x3c4>
 8001756:	076b      	lsls	r3, r5, #29
 8001758:	d009      	beq.n	800176e <__aeabi_dmul+0x27a>
 800175a:	220f      	movs	r2, #15
 800175c:	402a      	ands	r2, r5
 800175e:	2a04      	cmp	r2, #4
 8001760:	d005      	beq.n	800176e <__aeabi_dmul+0x27a>
 8001762:	1d2a      	adds	r2, r5, #4
 8001764:	42aa      	cmp	r2, r5
 8001766:	41ad      	sbcs	r5, r5
 8001768:	426d      	negs	r5, r5
 800176a:	1964      	adds	r4, r4, r5
 800176c:	0015      	movs	r5, r2
 800176e:	01e3      	lsls	r3, r4, #7
 8001770:	d504      	bpl.n	800177c <__aeabi_dmul+0x288>
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	4a46      	ldr	r2, [pc, #280]	; (8001890 <__aeabi_dmul+0x39c>)
 8001776:	00c9      	lsls	r1, r1, #3
 8001778:	4014      	ands	r4, r2
 800177a:	4461      	add	r1, ip
 800177c:	4a45      	ldr	r2, [pc, #276]	; (8001894 <__aeabi_dmul+0x3a0>)
 800177e:	4291      	cmp	r1, r2
 8001780:	dd00      	ble.n	8001784 <__aeabi_dmul+0x290>
 8001782:	e726      	b.n	80015d2 <__aeabi_dmul+0xde>
 8001784:	0762      	lsls	r2, r4, #29
 8001786:	08ed      	lsrs	r5, r5, #3
 8001788:	0264      	lsls	r4, r4, #9
 800178a:	0549      	lsls	r1, r1, #21
 800178c:	4315      	orrs	r5, r2
 800178e:	0b24      	lsrs	r4, r4, #12
 8001790:	0d4a      	lsrs	r2, r1, #21
 8001792:	e710      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001794:	4652      	mov	r2, sl
 8001796:	4332      	orrs	r2, r6
 8001798:	d100      	bne.n	800179c <__aeabi_dmul+0x2a8>
 800179a:	e07f      	b.n	800189c <__aeabi_dmul+0x3a8>
 800179c:	2e00      	cmp	r6, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dmul+0x2ae>
 80017a0:	e0dc      	b.n	800195c <__aeabi_dmul+0x468>
 80017a2:	0030      	movs	r0, r6
 80017a4:	f000 fd92 	bl	80022cc <__clzsi2>
 80017a8:	0002      	movs	r2, r0
 80017aa:	3a0b      	subs	r2, #11
 80017ac:	231d      	movs	r3, #29
 80017ae:	0001      	movs	r1, r0
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	4652      	mov	r2, sl
 80017b4:	3908      	subs	r1, #8
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	408e      	lsls	r6, r1
 80017ba:	4316      	orrs	r6, r2
 80017bc:	4652      	mov	r2, sl
 80017be:	408a      	lsls	r2, r1
 80017c0:	9b00      	ldr	r3, [sp, #0]
 80017c2:	4935      	ldr	r1, [pc, #212]	; (8001898 <__aeabi_dmul+0x3a4>)
 80017c4:	1a18      	subs	r0, r3, r0
 80017c6:	0003      	movs	r3, r0
 80017c8:	468c      	mov	ip, r1
 80017ca:	4463      	add	r3, ip
 80017cc:	2000      	movs	r0, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	e6d3      	b.n	800157a <__aeabi_dmul+0x86>
 80017d2:	0025      	movs	r5, r4
 80017d4:	4305      	orrs	r5, r0
 80017d6:	d04a      	beq.n	800186e <__aeabi_dmul+0x37a>
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d100      	bne.n	80017de <__aeabi_dmul+0x2ea>
 80017dc:	e0b0      	b.n	8001940 <__aeabi_dmul+0x44c>
 80017de:	0020      	movs	r0, r4
 80017e0:	f000 fd74 	bl	80022cc <__clzsi2>
 80017e4:	0001      	movs	r1, r0
 80017e6:	0002      	movs	r2, r0
 80017e8:	390b      	subs	r1, #11
 80017ea:	231d      	movs	r3, #29
 80017ec:	0010      	movs	r0, r2
 80017ee:	1a5b      	subs	r3, r3, r1
 80017f0:	0031      	movs	r1, r6
 80017f2:	0035      	movs	r5, r6
 80017f4:	3808      	subs	r0, #8
 80017f6:	4084      	lsls	r4, r0
 80017f8:	40d9      	lsrs	r1, r3
 80017fa:	4085      	lsls	r5, r0
 80017fc:	430c      	orrs	r4, r1
 80017fe:	4826      	ldr	r0, [pc, #152]	; (8001898 <__aeabi_dmul+0x3a4>)
 8001800:	1a83      	subs	r3, r0, r2
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2300      	movs	r3, #0
 8001806:	4699      	mov	r9, r3
 8001808:	469b      	mov	fp, r3
 800180a:	e697      	b.n	800153c <__aeabi_dmul+0x48>
 800180c:	0005      	movs	r5, r0
 800180e:	4325      	orrs	r5, r4
 8001810:	d126      	bne.n	8001860 <__aeabi_dmul+0x36c>
 8001812:	2208      	movs	r2, #8
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2302      	movs	r3, #2
 8001818:	2400      	movs	r4, #0
 800181a:	4691      	mov	r9, r2
 800181c:	469b      	mov	fp, r3
 800181e:	e68d      	b.n	800153c <__aeabi_dmul+0x48>
 8001820:	4652      	mov	r2, sl
 8001822:	9b00      	ldr	r3, [sp, #0]
 8001824:	4332      	orrs	r2, r6
 8001826:	d110      	bne.n	800184a <__aeabi_dmul+0x356>
 8001828:	4915      	ldr	r1, [pc, #84]	; (8001880 <__aeabi_dmul+0x38c>)
 800182a:	2600      	movs	r6, #0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	4649      	mov	r1, r9
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	4319      	orrs	r1, r3
 8001838:	4689      	mov	r9, r1
 800183a:	2002      	movs	r0, #2
 800183c:	e69d      	b.n	800157a <__aeabi_dmul+0x86>
 800183e:	465b      	mov	r3, fp
 8001840:	9701      	str	r7, [sp, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d000      	beq.n	8001848 <__aeabi_dmul+0x354>
 8001846:	e6ad      	b.n	80015a4 <__aeabi_dmul+0xb0>
 8001848:	e6c3      	b.n	80015d2 <__aeabi_dmul+0xde>
 800184a:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <__aeabi_dmul+0x38c>)
 800184c:	2003      	movs	r0, #3
 800184e:	4694      	mov	ip, r2
 8001850:	4463      	add	r3, ip
 8001852:	464a      	mov	r2, r9
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2303      	movs	r3, #3
 8001858:	431a      	orrs	r2, r3
 800185a:	4691      	mov	r9, r2
 800185c:	4652      	mov	r2, sl
 800185e:	e68c      	b.n	800157a <__aeabi_dmul+0x86>
 8001860:	220c      	movs	r2, #12
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2303      	movs	r3, #3
 8001866:	0005      	movs	r5, r0
 8001868:	4691      	mov	r9, r2
 800186a:	469b      	mov	fp, r3
 800186c:	e666      	b.n	800153c <__aeabi_dmul+0x48>
 800186e:	2304      	movs	r3, #4
 8001870:	4699      	mov	r9, r3
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	2400      	movs	r4, #0
 800187a:	469b      	mov	fp, r3
 800187c:	e65e      	b.n	800153c <__aeabi_dmul+0x48>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff
 8001884:	fffffc01 	.word	0xfffffc01
 8001888:	0800837c 	.word	0x0800837c
 800188c:	000003ff 	.word	0x000003ff
 8001890:	feffffff 	.word	0xfeffffff
 8001894:	000007fe 	.word	0x000007fe
 8001898:	fffffc0d 	.word	0xfffffc0d
 800189c:	4649      	mov	r1, r9
 800189e:	2301      	movs	r3, #1
 80018a0:	4319      	orrs	r1, r3
 80018a2:	4689      	mov	r9, r1
 80018a4:	2600      	movs	r6, #0
 80018a6:	2001      	movs	r0, #1
 80018a8:	e667      	b.n	800157a <__aeabi_dmul+0x86>
 80018aa:	2300      	movs	r3, #0
 80018ac:	2480      	movs	r4, #128	; 0x80
 80018ae:	2500      	movs	r5, #0
 80018b0:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <__aeabi_dmul+0x4cc>)
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	0324      	lsls	r4, r4, #12
 80018b6:	e67e      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80018b8:	2001      	movs	r0, #1
 80018ba:	1a40      	subs	r0, r0, r1
 80018bc:	2838      	cmp	r0, #56	; 0x38
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dmul+0x3ce>
 80018c0:	e676      	b.n	80015b0 <__aeabi_dmul+0xbc>
 80018c2:	281f      	cmp	r0, #31
 80018c4:	dd5b      	ble.n	800197e <__aeabi_dmul+0x48a>
 80018c6:	221f      	movs	r2, #31
 80018c8:	0023      	movs	r3, r4
 80018ca:	4252      	negs	r2, r2
 80018cc:	1a51      	subs	r1, r2, r1
 80018ce:	40cb      	lsrs	r3, r1
 80018d0:	0019      	movs	r1, r3
 80018d2:	2820      	cmp	r0, #32
 80018d4:	d003      	beq.n	80018de <__aeabi_dmul+0x3ea>
 80018d6:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <__aeabi_dmul+0x4d0>)
 80018d8:	4462      	add	r2, ip
 80018da:	4094      	lsls	r4, r2
 80018dc:	4325      	orrs	r5, r4
 80018de:	1e6a      	subs	r2, r5, #1
 80018e0:	4195      	sbcs	r5, r2
 80018e2:	002a      	movs	r2, r5
 80018e4:	430a      	orrs	r2, r1
 80018e6:	2107      	movs	r1, #7
 80018e8:	000d      	movs	r5, r1
 80018ea:	2400      	movs	r4, #0
 80018ec:	4015      	ands	r5, r2
 80018ee:	4211      	tst	r1, r2
 80018f0:	d05b      	beq.n	80019aa <__aeabi_dmul+0x4b6>
 80018f2:	210f      	movs	r1, #15
 80018f4:	2400      	movs	r4, #0
 80018f6:	4011      	ands	r1, r2
 80018f8:	2904      	cmp	r1, #4
 80018fa:	d053      	beq.n	80019a4 <__aeabi_dmul+0x4b0>
 80018fc:	1d11      	adds	r1, r2, #4
 80018fe:	4291      	cmp	r1, r2
 8001900:	4192      	sbcs	r2, r2
 8001902:	4252      	negs	r2, r2
 8001904:	18a4      	adds	r4, r4, r2
 8001906:	000a      	movs	r2, r1
 8001908:	0223      	lsls	r3, r4, #8
 800190a:	d54b      	bpl.n	80019a4 <__aeabi_dmul+0x4b0>
 800190c:	2201      	movs	r2, #1
 800190e:	2400      	movs	r4, #0
 8001910:	2500      	movs	r5, #0
 8001912:	e650      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	031b      	lsls	r3, r3, #12
 8001918:	421c      	tst	r4, r3
 800191a:	d009      	beq.n	8001930 <__aeabi_dmul+0x43c>
 800191c:	421e      	tst	r6, r3
 800191e:	d107      	bne.n	8001930 <__aeabi_dmul+0x43c>
 8001920:	4333      	orrs	r3, r6
 8001922:	031c      	lsls	r4, r3, #12
 8001924:	4643      	mov	r3, r8
 8001926:	0015      	movs	r5, r2
 8001928:	0b24      	lsrs	r4, r4, #12
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <__aeabi_dmul+0x4cc>)
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	e642      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	0312      	lsls	r2, r2, #12
 8001934:	4314      	orrs	r4, r2
 8001936:	0324      	lsls	r4, r4, #12
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <__aeabi_dmul+0x4cc>)
 800193a:	0b24      	lsrs	r4, r4, #12
 800193c:	9701      	str	r7, [sp, #4]
 800193e:	e63a      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001940:	f000 fcc4 	bl	80022cc <__clzsi2>
 8001944:	0001      	movs	r1, r0
 8001946:	0002      	movs	r2, r0
 8001948:	3115      	adds	r1, #21
 800194a:	3220      	adds	r2, #32
 800194c:	291c      	cmp	r1, #28
 800194e:	dc00      	bgt.n	8001952 <__aeabi_dmul+0x45e>
 8001950:	e74b      	b.n	80017ea <__aeabi_dmul+0x2f6>
 8001952:	0034      	movs	r4, r6
 8001954:	3808      	subs	r0, #8
 8001956:	2500      	movs	r5, #0
 8001958:	4084      	lsls	r4, r0
 800195a:	e750      	b.n	80017fe <__aeabi_dmul+0x30a>
 800195c:	f000 fcb6 	bl	80022cc <__clzsi2>
 8001960:	0003      	movs	r3, r0
 8001962:	001a      	movs	r2, r3
 8001964:	3215      	adds	r2, #21
 8001966:	3020      	adds	r0, #32
 8001968:	2a1c      	cmp	r2, #28
 800196a:	dc00      	bgt.n	800196e <__aeabi_dmul+0x47a>
 800196c:	e71e      	b.n	80017ac <__aeabi_dmul+0x2b8>
 800196e:	4656      	mov	r6, sl
 8001970:	3b08      	subs	r3, #8
 8001972:	2200      	movs	r2, #0
 8001974:	409e      	lsls	r6, r3
 8001976:	e723      	b.n	80017c0 <__aeabi_dmul+0x2cc>
 8001978:	9b00      	ldr	r3, [sp, #0]
 800197a:	469c      	mov	ip, r3
 800197c:	e6e6      	b.n	800174c <__aeabi_dmul+0x258>
 800197e:	4912      	ldr	r1, [pc, #72]	; (80019c8 <__aeabi_dmul+0x4d4>)
 8001980:	0022      	movs	r2, r4
 8001982:	4461      	add	r1, ip
 8001984:	002e      	movs	r6, r5
 8001986:	408d      	lsls	r5, r1
 8001988:	408a      	lsls	r2, r1
 800198a:	40c6      	lsrs	r6, r0
 800198c:	1e69      	subs	r1, r5, #1
 800198e:	418d      	sbcs	r5, r1
 8001990:	4332      	orrs	r2, r6
 8001992:	432a      	orrs	r2, r5
 8001994:	40c4      	lsrs	r4, r0
 8001996:	0753      	lsls	r3, r2, #29
 8001998:	d0b6      	beq.n	8001908 <__aeabi_dmul+0x414>
 800199a:	210f      	movs	r1, #15
 800199c:	4011      	ands	r1, r2
 800199e:	2904      	cmp	r1, #4
 80019a0:	d1ac      	bne.n	80018fc <__aeabi_dmul+0x408>
 80019a2:	e7b1      	b.n	8001908 <__aeabi_dmul+0x414>
 80019a4:	0765      	lsls	r5, r4, #29
 80019a6:	0264      	lsls	r4, r4, #9
 80019a8:	0b24      	lsrs	r4, r4, #12
 80019aa:	08d2      	lsrs	r2, r2, #3
 80019ac:	4315      	orrs	r5, r2
 80019ae:	2200      	movs	r2, #0
 80019b0:	e601      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0312      	lsls	r2, r2, #12
 80019b6:	4314      	orrs	r4, r2
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	4a01      	ldr	r2, [pc, #4]	; (80019c0 <__aeabi_dmul+0x4cc>)
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	e5fa      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80019c0:	000007ff 	.word	0x000007ff
 80019c4:	0000043e 	.word	0x0000043e
 80019c8:	0000041e 	.word	0x0000041e

080019cc <__aeabi_dsub>:
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	4657      	mov	r7, sl
 80019d0:	464e      	mov	r6, r9
 80019d2:	4645      	mov	r5, r8
 80019d4:	46de      	mov	lr, fp
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	001e      	movs	r6, r3
 80019da:	0017      	movs	r7, r2
 80019dc:	004a      	lsls	r2, r1, #1
 80019de:	030b      	lsls	r3, r1, #12
 80019e0:	0d52      	lsrs	r2, r2, #21
 80019e2:	0a5b      	lsrs	r3, r3, #9
 80019e4:	4690      	mov	r8, r2
 80019e6:	0f42      	lsrs	r2, r0, #29
 80019e8:	431a      	orrs	r2, r3
 80019ea:	0fcd      	lsrs	r5, r1, #31
 80019ec:	4ccd      	ldr	r4, [pc, #820]	; (8001d24 <__aeabi_dsub+0x358>)
 80019ee:	0331      	lsls	r1, r6, #12
 80019f0:	00c3      	lsls	r3, r0, #3
 80019f2:	4694      	mov	ip, r2
 80019f4:	0070      	lsls	r0, r6, #1
 80019f6:	0f7a      	lsrs	r2, r7, #29
 80019f8:	0a49      	lsrs	r1, r1, #9
 80019fa:	00ff      	lsls	r7, r7, #3
 80019fc:	469a      	mov	sl, r3
 80019fe:	46b9      	mov	r9, r7
 8001a00:	0d40      	lsrs	r0, r0, #21
 8001a02:	0ff6      	lsrs	r6, r6, #31
 8001a04:	4311      	orrs	r1, r2
 8001a06:	42a0      	cmp	r0, r4
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x40>
 8001a0a:	e0b1      	b.n	8001b70 <__aeabi_dsub+0x1a4>
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4056      	eors	r6, r2
 8001a10:	46b3      	mov	fp, r6
 8001a12:	42b5      	cmp	r5, r6
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x4c>
 8001a16:	e088      	b.n	8001b2a <__aeabi_dsub+0x15e>
 8001a18:	4642      	mov	r2, r8
 8001a1a:	1a12      	subs	r2, r2, r0
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	dc00      	bgt.n	8001a22 <__aeabi_dsub+0x56>
 8001a20:	e0ae      	b.n	8001b80 <__aeabi_dsub+0x1b4>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dsub+0x5c>
 8001a26:	e0c1      	b.n	8001bac <__aeabi_dsub+0x1e0>
 8001a28:	48be      	ldr	r0, [pc, #760]	; (8001d24 <__aeabi_dsub+0x358>)
 8001a2a:	4580      	cmp	r8, r0
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dsub+0x64>
 8001a2e:	e151      	b.n	8001cd4 <__aeabi_dsub+0x308>
 8001a30:	2080      	movs	r0, #128	; 0x80
 8001a32:	0400      	lsls	r0, r0, #16
 8001a34:	4301      	orrs	r1, r0
 8001a36:	2a38      	cmp	r2, #56	; 0x38
 8001a38:	dd00      	ble.n	8001a3c <__aeabi_dsub+0x70>
 8001a3a:	e17b      	b.n	8001d34 <__aeabi_dsub+0x368>
 8001a3c:	2a1f      	cmp	r2, #31
 8001a3e:	dd00      	ble.n	8001a42 <__aeabi_dsub+0x76>
 8001a40:	e1ee      	b.n	8001e20 <__aeabi_dsub+0x454>
 8001a42:	2020      	movs	r0, #32
 8001a44:	003e      	movs	r6, r7
 8001a46:	1a80      	subs	r0, r0, r2
 8001a48:	000c      	movs	r4, r1
 8001a4a:	40d6      	lsrs	r6, r2
 8001a4c:	40d1      	lsrs	r1, r2
 8001a4e:	4087      	lsls	r7, r0
 8001a50:	4662      	mov	r2, ip
 8001a52:	4084      	lsls	r4, r0
 8001a54:	1a52      	subs	r2, r2, r1
 8001a56:	1e78      	subs	r0, r7, #1
 8001a58:	4187      	sbcs	r7, r0
 8001a5a:	4694      	mov	ip, r2
 8001a5c:	4334      	orrs	r4, r6
 8001a5e:	4327      	orrs	r7, r4
 8001a60:	1bdc      	subs	r4, r3, r7
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	419b      	sbcs	r3, r3
 8001a66:	4662      	mov	r2, ip
 8001a68:	425b      	negs	r3, r3
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	464b      	mov	r3, r9
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	d400      	bmi.n	8001a76 <__aeabi_dsub+0xaa>
 8001a74:	e118      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001a76:	464b      	mov	r3, r9
 8001a78:	0258      	lsls	r0, r3, #9
 8001a7a:	0a43      	lsrs	r3, r0, #9
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	464b      	mov	r3, r9
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0xba>
 8001a84:	e137      	b.n	8001cf6 <__aeabi_dsub+0x32a>
 8001a86:	4648      	mov	r0, r9
 8001a88:	f000 fc20 	bl	80022cc <__clzsi2>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	3908      	subs	r1, #8
 8001a90:	2320      	movs	r3, #32
 8001a92:	0022      	movs	r2, r4
 8001a94:	4648      	mov	r0, r9
 8001a96:	1a5b      	subs	r3, r3, r1
 8001a98:	40da      	lsrs	r2, r3
 8001a9a:	4088      	lsls	r0, r1
 8001a9c:	408c      	lsls	r4, r1
 8001a9e:	4643      	mov	r3, r8
 8001aa0:	4310      	orrs	r0, r2
 8001aa2:	4588      	cmp	r8, r1
 8001aa4:	dd00      	ble.n	8001aa8 <__aeabi_dsub+0xdc>
 8001aa6:	e136      	b.n	8001d16 <__aeabi_dsub+0x34a>
 8001aa8:	1ac9      	subs	r1, r1, r3
 8001aaa:	1c4b      	adds	r3, r1, #1
 8001aac:	2b1f      	cmp	r3, #31
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dsub+0xe6>
 8001ab0:	e0ea      	b.n	8001c88 <__aeabi_dsub+0x2bc>
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	0026      	movs	r6, r4
 8001ab6:	1ad2      	subs	r2, r2, r3
 8001ab8:	0001      	movs	r1, r0
 8001aba:	4094      	lsls	r4, r2
 8001abc:	40de      	lsrs	r6, r3
 8001abe:	40d8      	lsrs	r0, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4091      	lsls	r1, r2
 8001ac4:	1e62      	subs	r2, r4, #1
 8001ac6:	4194      	sbcs	r4, r2
 8001ac8:	4681      	mov	r9, r0
 8001aca:	4698      	mov	r8, r3
 8001acc:	4331      	orrs	r1, r6
 8001ace:	430c      	orrs	r4, r1
 8001ad0:	0763      	lsls	r3, r4, #29
 8001ad2:	d009      	beq.n	8001ae8 <__aeabi_dsub+0x11c>
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	4023      	ands	r3, r4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dsub+0x11c>
 8001adc:	1d23      	adds	r3, r4, #4
 8001ade:	42a3      	cmp	r3, r4
 8001ae0:	41a4      	sbcs	r4, r4
 8001ae2:	4264      	negs	r4, r4
 8001ae4:	44a1      	add	r9, r4
 8001ae6:	001c      	movs	r4, r3
 8001ae8:	464b      	mov	r3, r9
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	d400      	bmi.n	8001af0 <__aeabi_dsub+0x124>
 8001aee:	e0de      	b.n	8001cae <__aeabi_dsub+0x2e2>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <__aeabi_dsub+0x358>)
 8001af4:	3101      	adds	r1, #1
 8001af6:	4299      	cmp	r1, r3
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x130>
 8001afa:	e0e7      	b.n	8001ccc <__aeabi_dsub+0x300>
 8001afc:	464b      	mov	r3, r9
 8001afe:	488a      	ldr	r0, [pc, #552]	; (8001d28 <__aeabi_dsub+0x35c>)
 8001b00:	08e4      	lsrs	r4, r4, #3
 8001b02:	4003      	ands	r3, r0
 8001b04:	0018      	movs	r0, r3
 8001b06:	0549      	lsls	r1, r1, #21
 8001b08:	075b      	lsls	r3, r3, #29
 8001b0a:	0240      	lsls	r0, r0, #9
 8001b0c:	4323      	orrs	r3, r4
 8001b0e:	0d4a      	lsrs	r2, r1, #21
 8001b10:	0b04      	lsrs	r4, r0, #12
 8001b12:	0512      	lsls	r2, r2, #20
 8001b14:	07ed      	lsls	r5, r5, #31
 8001b16:	4322      	orrs	r2, r4
 8001b18:	432a      	orrs	r2, r5
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	0011      	movs	r1, r2
 8001b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b20:	46bb      	mov	fp, r7
 8001b22:	46b2      	mov	sl, r6
 8001b24:	46a9      	mov	r9, r5
 8001b26:	46a0      	mov	r8, r4
 8001b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	1a12      	subs	r2, r2, r0
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	dd52      	ble.n	8001bd8 <__aeabi_dsub+0x20c>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x16c>
 8001b36:	e09c      	b.n	8001c72 <__aeabi_dsub+0x2a6>
 8001b38:	45a0      	cmp	r8, r4
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x172>
 8001b3c:	e0ca      	b.n	8001cd4 <__aeabi_dsub+0x308>
 8001b3e:	2080      	movs	r0, #128	; 0x80
 8001b40:	0400      	lsls	r0, r0, #16
 8001b42:	4301      	orrs	r1, r0
 8001b44:	2a38      	cmp	r2, #56	; 0x38
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_dsub+0x17e>
 8001b48:	e149      	b.n	8001dde <__aeabi_dsub+0x412>
 8001b4a:	2a1f      	cmp	r2, #31
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dsub+0x184>
 8001b4e:	e197      	b.n	8001e80 <__aeabi_dsub+0x4b4>
 8001b50:	0010      	movs	r0, r2
 8001b52:	000e      	movs	r6, r1
 8001b54:	3820      	subs	r0, #32
 8001b56:	40c6      	lsrs	r6, r0
 8001b58:	2a20      	cmp	r2, #32
 8001b5a:	d004      	beq.n	8001b66 <__aeabi_dsub+0x19a>
 8001b5c:	2040      	movs	r0, #64	; 0x40
 8001b5e:	1a82      	subs	r2, r0, r2
 8001b60:	4091      	lsls	r1, r2
 8001b62:	430f      	orrs	r7, r1
 8001b64:	46b9      	mov	r9, r7
 8001b66:	464c      	mov	r4, r9
 8001b68:	1e62      	subs	r2, r4, #1
 8001b6a:	4194      	sbcs	r4, r2
 8001b6c:	4334      	orrs	r4, r6
 8001b6e:	e13a      	b.n	8001de6 <__aeabi_dsub+0x41a>
 8001b70:	000a      	movs	r2, r1
 8001b72:	433a      	orrs	r2, r7
 8001b74:	d028      	beq.n	8001bc8 <__aeabi_dsub+0x1fc>
 8001b76:	46b3      	mov	fp, r6
 8001b78:	42b5      	cmp	r5, r6
 8001b7a:	d02b      	beq.n	8001bd4 <__aeabi_dsub+0x208>
 8001b7c:	4a6b      	ldr	r2, [pc, #428]	; (8001d2c <__aeabi_dsub+0x360>)
 8001b7e:	4442      	add	r2, r8
 8001b80:	2a00      	cmp	r2, #0
 8001b82:	d05d      	beq.n	8001c40 <__aeabi_dsub+0x274>
 8001b84:	4642      	mov	r2, r8
 8001b86:	4644      	mov	r4, r8
 8001b88:	1a82      	subs	r2, r0, r2
 8001b8a:	2c00      	cmp	r4, #0
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x1c4>
 8001b8e:	e0f5      	b.n	8001d7c <__aeabi_dsub+0x3b0>
 8001b90:	4665      	mov	r5, ip
 8001b92:	431d      	orrs	r5, r3
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x1cc>
 8001b96:	e19c      	b.n	8001ed2 <__aeabi_dsub+0x506>
 8001b98:	1e55      	subs	r5, r2, #1
 8001b9a:	2a01      	cmp	r2, #1
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x1d4>
 8001b9e:	e1fb      	b.n	8001f98 <__aeabi_dsub+0x5cc>
 8001ba0:	4c60      	ldr	r4, [pc, #384]	; (8001d24 <__aeabi_dsub+0x358>)
 8001ba2:	42a2      	cmp	r2, r4
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x1dc>
 8001ba6:	e1bd      	b.n	8001f24 <__aeabi_dsub+0x558>
 8001ba8:	002a      	movs	r2, r5
 8001baa:	e0f0      	b.n	8001d8e <__aeabi_dsub+0x3c2>
 8001bac:	0008      	movs	r0, r1
 8001bae:	4338      	orrs	r0, r7
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x1e8>
 8001bb2:	e0c3      	b.n	8001d3c <__aeabi_dsub+0x370>
 8001bb4:	1e50      	subs	r0, r2, #1
 8001bb6:	2a01      	cmp	r2, #1
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x1f0>
 8001bba:	e1a8      	b.n	8001f0e <__aeabi_dsub+0x542>
 8001bbc:	4c59      	ldr	r4, [pc, #356]	; (8001d24 <__aeabi_dsub+0x358>)
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x1f8>
 8001bc2:	e087      	b.n	8001cd4 <__aeabi_dsub+0x308>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	e736      	b.n	8001a36 <__aeabi_dsub+0x6a>
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4056      	eors	r6, r2
 8001bcc:	46b3      	mov	fp, r6
 8001bce:	42b5      	cmp	r5, r6
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_dsub+0x208>
 8001bd2:	e721      	b.n	8001a18 <__aeabi_dsub+0x4c>
 8001bd4:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <__aeabi_dsub+0x360>)
 8001bd6:	4442      	add	r2, r8
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x212>
 8001bdc:	e0b5      	b.n	8001d4a <__aeabi_dsub+0x37e>
 8001bde:	4642      	mov	r2, r8
 8001be0:	4644      	mov	r4, r8
 8001be2:	1a82      	subs	r2, r0, r2
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x21e>
 8001be8:	e138      	b.n	8001e5c <__aeabi_dsub+0x490>
 8001bea:	4e4e      	ldr	r6, [pc, #312]	; (8001d24 <__aeabi_dsub+0x358>)
 8001bec:	42b0      	cmp	r0, r6
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x226>
 8001bf0:	e1de      	b.n	8001fb0 <__aeabi_dsub+0x5e4>
 8001bf2:	2680      	movs	r6, #128	; 0x80
 8001bf4:	4664      	mov	r4, ip
 8001bf6:	0436      	lsls	r6, r6, #16
 8001bf8:	4334      	orrs	r4, r6
 8001bfa:	46a4      	mov	ip, r4
 8001bfc:	2a38      	cmp	r2, #56	; 0x38
 8001bfe:	dd00      	ble.n	8001c02 <__aeabi_dsub+0x236>
 8001c00:	e196      	b.n	8001f30 <__aeabi_dsub+0x564>
 8001c02:	2a1f      	cmp	r2, #31
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dsub+0x23c>
 8001c06:	e224      	b.n	8002052 <__aeabi_dsub+0x686>
 8001c08:	2620      	movs	r6, #32
 8001c0a:	1ab4      	subs	r4, r6, r2
 8001c0c:	46a2      	mov	sl, r4
 8001c0e:	4664      	mov	r4, ip
 8001c10:	4656      	mov	r6, sl
 8001c12:	40b4      	lsls	r4, r6
 8001c14:	46a1      	mov	r9, r4
 8001c16:	001c      	movs	r4, r3
 8001c18:	464e      	mov	r6, r9
 8001c1a:	40d4      	lsrs	r4, r2
 8001c1c:	4326      	orrs	r6, r4
 8001c1e:	0034      	movs	r4, r6
 8001c20:	4656      	mov	r6, sl
 8001c22:	40b3      	lsls	r3, r6
 8001c24:	1e5e      	subs	r6, r3, #1
 8001c26:	41b3      	sbcs	r3, r6
 8001c28:	431c      	orrs	r4, r3
 8001c2a:	4663      	mov	r3, ip
 8001c2c:	40d3      	lsrs	r3, r2
 8001c2e:	18c9      	adds	r1, r1, r3
 8001c30:	19e4      	adds	r4, r4, r7
 8001c32:	42bc      	cmp	r4, r7
 8001c34:	41bf      	sbcs	r7, r7
 8001c36:	427f      	negs	r7, r7
 8001c38:	46b9      	mov	r9, r7
 8001c3a:	4680      	mov	r8, r0
 8001c3c:	4489      	add	r9, r1
 8001c3e:	e0d8      	b.n	8001df2 <__aeabi_dsub+0x426>
 8001c40:	4640      	mov	r0, r8
 8001c42:	4c3b      	ldr	r4, [pc, #236]	; (8001d30 <__aeabi_dsub+0x364>)
 8001c44:	3001      	adds	r0, #1
 8001c46:	4220      	tst	r0, r4
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dsub+0x280>
 8001c4a:	e0b4      	b.n	8001db6 <__aeabi_dsub+0x3ea>
 8001c4c:	4640      	mov	r0, r8
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d000      	beq.n	8001c54 <__aeabi_dsub+0x288>
 8001c52:	e144      	b.n	8001ede <__aeabi_dsub+0x512>
 8001c54:	4660      	mov	r0, ip
 8001c56:	4318      	orrs	r0, r3
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x290>
 8001c5a:	e190      	b.n	8001f7e <__aeabi_dsub+0x5b2>
 8001c5c:	0008      	movs	r0, r1
 8001c5e:	4338      	orrs	r0, r7
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dsub+0x298>
 8001c62:	e1aa      	b.n	8001fba <__aeabi_dsub+0x5ee>
 8001c64:	4661      	mov	r1, ip
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	0749      	lsls	r1, r1, #29
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	4661      	mov	r1, ip
 8001c6e:	08cc      	lsrs	r4, r1, #3
 8001c70:	e027      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001c72:	0008      	movs	r0, r1
 8001c74:	4338      	orrs	r0, r7
 8001c76:	d061      	beq.n	8001d3c <__aeabi_dsub+0x370>
 8001c78:	1e50      	subs	r0, r2, #1
 8001c7a:	2a01      	cmp	r2, #1
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x2b4>
 8001c7e:	e139      	b.n	8001ef4 <__aeabi_dsub+0x528>
 8001c80:	42a2      	cmp	r2, r4
 8001c82:	d027      	beq.n	8001cd4 <__aeabi_dsub+0x308>
 8001c84:	0002      	movs	r2, r0
 8001c86:	e75d      	b.n	8001b44 <__aeabi_dsub+0x178>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	391f      	subs	r1, #31
 8001c8c:	40ca      	lsrs	r2, r1
 8001c8e:	0011      	movs	r1, r2
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d003      	beq.n	8001c9c <__aeabi_dsub+0x2d0>
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4098      	lsls	r0, r3
 8001c9a:	4304      	orrs	r4, r0
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	4698      	mov	r8, r3
 8001ca6:	430c      	orrs	r4, r1
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d000      	beq.n	8001cae <__aeabi_dsub+0x2e2>
 8001cac:	e712      	b.n	8001ad4 <__aeabi_dsub+0x108>
 8001cae:	464b      	mov	r3, r9
 8001cb0:	464a      	mov	r2, r9
 8001cb2:	08e4      	lsrs	r4, r4, #3
 8001cb4:	075b      	lsls	r3, r3, #29
 8001cb6:	4323      	orrs	r3, r4
 8001cb8:	08d4      	lsrs	r4, r2, #3
 8001cba:	4642      	mov	r2, r8
 8001cbc:	4919      	ldr	r1, [pc, #100]	; (8001d24 <__aeabi_dsub+0x358>)
 8001cbe:	428a      	cmp	r2, r1
 8001cc0:	d00e      	beq.n	8001ce0 <__aeabi_dsub+0x314>
 8001cc2:	0324      	lsls	r4, r4, #12
 8001cc4:	0552      	lsls	r2, r2, #21
 8001cc6:	0b24      	lsrs	r4, r4, #12
 8001cc8:	0d52      	lsrs	r2, r2, #21
 8001cca:	e722      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001ccc:	000a      	movs	r2, r1
 8001cce:	2400      	movs	r4, #0
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e71e      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	4662      	mov	r2, ip
 8001cd8:	0752      	lsls	r2, r2, #29
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	4662      	mov	r2, ip
 8001cde:	08d4      	lsrs	r4, r2, #3
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	4322      	orrs	r2, r4
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x31c>
 8001ce6:	e1fc      	b.n	80020e2 <__aeabi_dsub+0x716>
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0312      	lsls	r2, r2, #12
 8001cec:	4314      	orrs	r4, r2
 8001cee:	0324      	lsls	r4, r4, #12
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <__aeabi_dsub+0x358>)
 8001cf2:	0b24      	lsrs	r4, r4, #12
 8001cf4:	e70d      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001cf6:	0020      	movs	r0, r4
 8001cf8:	f000 fae8 	bl	80022cc <__clzsi2>
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	3118      	adds	r1, #24
 8001d00:	291f      	cmp	r1, #31
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dsub+0x33a>
 8001d04:	e6c4      	b.n	8001a90 <__aeabi_dsub+0xc4>
 8001d06:	3808      	subs	r0, #8
 8001d08:	4084      	lsls	r4, r0
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	0020      	movs	r0, r4
 8001d0e:	2400      	movs	r4, #0
 8001d10:	4588      	cmp	r8, r1
 8001d12:	dc00      	bgt.n	8001d16 <__aeabi_dsub+0x34a>
 8001d14:	e6c8      	b.n	8001aa8 <__aeabi_dsub+0xdc>
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__aeabi_dsub+0x35c>)
 8001d18:	1a5b      	subs	r3, r3, r1
 8001d1a:	4010      	ands	r0, r2
 8001d1c:	4698      	mov	r8, r3
 8001d1e:	4681      	mov	r9, r0
 8001d20:	e6d6      	b.n	8001ad0 <__aeabi_dsub+0x104>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	000007ff 	.word	0x000007ff
 8001d28:	ff7fffff 	.word	0xff7fffff
 8001d2c:	fffff801 	.word	0xfffff801
 8001d30:	000007fe 	.word	0x000007fe
 8001d34:	430f      	orrs	r7, r1
 8001d36:	1e7a      	subs	r2, r7, #1
 8001d38:	4197      	sbcs	r7, r2
 8001d3a:	e691      	b.n	8001a60 <__aeabi_dsub+0x94>
 8001d3c:	4661      	mov	r1, ip
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	0749      	lsls	r1, r1, #29
 8001d42:	430b      	orrs	r3, r1
 8001d44:	4661      	mov	r1, ip
 8001d46:	08cc      	lsrs	r4, r1, #3
 8001d48:	e7b8      	b.n	8001cbc <__aeabi_dsub+0x2f0>
 8001d4a:	4640      	mov	r0, r8
 8001d4c:	4cd3      	ldr	r4, [pc, #844]	; (800209c <__aeabi_dsub+0x6d0>)
 8001d4e:	3001      	adds	r0, #1
 8001d50:	4220      	tst	r0, r4
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x38a>
 8001d54:	e0a2      	b.n	8001e9c <__aeabi_dsub+0x4d0>
 8001d56:	4640      	mov	r0, r8
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x392>
 8001d5c:	e101      	b.n	8001f62 <__aeabi_dsub+0x596>
 8001d5e:	4660      	mov	r0, ip
 8001d60:	4318      	orrs	r0, r3
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x39a>
 8001d64:	e15e      	b.n	8002024 <__aeabi_dsub+0x658>
 8001d66:	0008      	movs	r0, r1
 8001d68:	4338      	orrs	r0, r7
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_dsub+0x3a2>
 8001d6c:	e15f      	b.n	800202e <__aeabi_dsub+0x662>
 8001d6e:	4661      	mov	r1, ip
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	0749      	lsls	r1, r1, #29
 8001d74:	430b      	orrs	r3, r1
 8001d76:	4661      	mov	r1, ip
 8001d78:	08cc      	lsrs	r4, r1, #3
 8001d7a:	e7a2      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001d7c:	4dc8      	ldr	r5, [pc, #800]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a8      	cmp	r0, r5
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x3b8>
 8001d82:	e0cf      	b.n	8001f24 <__aeabi_dsub+0x558>
 8001d84:	2580      	movs	r5, #128	; 0x80
 8001d86:	4664      	mov	r4, ip
 8001d88:	042d      	lsls	r5, r5, #16
 8001d8a:	432c      	orrs	r4, r5
 8001d8c:	46a4      	mov	ip, r4
 8001d8e:	2a38      	cmp	r2, #56	; 0x38
 8001d90:	dc56      	bgt.n	8001e40 <__aeabi_dsub+0x474>
 8001d92:	2a1f      	cmp	r2, #31
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x3cc>
 8001d96:	e0d1      	b.n	8001f3c <__aeabi_dsub+0x570>
 8001d98:	2520      	movs	r5, #32
 8001d9a:	001e      	movs	r6, r3
 8001d9c:	1aad      	subs	r5, r5, r2
 8001d9e:	4664      	mov	r4, ip
 8001da0:	40ab      	lsls	r3, r5
 8001da2:	40ac      	lsls	r4, r5
 8001da4:	40d6      	lsrs	r6, r2
 8001da6:	1e5d      	subs	r5, r3, #1
 8001da8:	41ab      	sbcs	r3, r5
 8001daa:	4334      	orrs	r4, r6
 8001dac:	4323      	orrs	r3, r4
 8001dae:	4664      	mov	r4, ip
 8001db0:	40d4      	lsrs	r4, r2
 8001db2:	1b09      	subs	r1, r1, r4
 8001db4:	e049      	b.n	8001e4a <__aeabi_dsub+0x47e>
 8001db6:	4660      	mov	r0, ip
 8001db8:	1bdc      	subs	r4, r3, r7
 8001dba:	1a46      	subs	r6, r0, r1
 8001dbc:	42a3      	cmp	r3, r4
 8001dbe:	4180      	sbcs	r0, r0
 8001dc0:	4240      	negs	r0, r0
 8001dc2:	4681      	mov	r9, r0
 8001dc4:	0030      	movs	r0, r6
 8001dc6:	464e      	mov	r6, r9
 8001dc8:	1b80      	subs	r0, r0, r6
 8001dca:	4681      	mov	r9, r0
 8001dcc:	0200      	lsls	r0, r0, #8
 8001dce:	d476      	bmi.n	8001ebe <__aeabi_dsub+0x4f2>
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	4323      	orrs	r3, r4
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dsub+0x40c>
 8001dd6:	e652      	b.n	8001a7e <__aeabi_dsub+0xb2>
 8001dd8:	2400      	movs	r4, #0
 8001dda:	2500      	movs	r5, #0
 8001ddc:	e771      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001dde:	4339      	orrs	r1, r7
 8001de0:	000c      	movs	r4, r1
 8001de2:	1e62      	subs	r2, r4, #1
 8001de4:	4194      	sbcs	r4, r2
 8001de6:	18e4      	adds	r4, r4, r3
 8001de8:	429c      	cmp	r4, r3
 8001dea:	419b      	sbcs	r3, r3
 8001dec:	425b      	negs	r3, r3
 8001dee:	4463      	add	r3, ip
 8001df0:	4699      	mov	r9, r3
 8001df2:	464b      	mov	r3, r9
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	d400      	bmi.n	8001dfa <__aeabi_dsub+0x42e>
 8001df8:	e756      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	469c      	mov	ip, r3
 8001dfe:	4ba8      	ldr	r3, [pc, #672]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001e00:	44e0      	add	r8, ip
 8001e02:	4598      	cmp	r8, r3
 8001e04:	d038      	beq.n	8001e78 <__aeabi_dsub+0x4ac>
 8001e06:	464b      	mov	r3, r9
 8001e08:	48a6      	ldr	r0, [pc, #664]	; (80020a4 <__aeabi_dsub+0x6d8>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4003      	ands	r3, r0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	0863      	lsrs	r3, r4, #1
 8001e12:	4014      	ands	r4, r2
 8001e14:	431c      	orrs	r4, r3
 8001e16:	07c3      	lsls	r3, r0, #31
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	0843      	lsrs	r3, r0, #1
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	e657      	b.n	8001ad0 <__aeabi_dsub+0x104>
 8001e20:	0010      	movs	r0, r2
 8001e22:	000e      	movs	r6, r1
 8001e24:	3820      	subs	r0, #32
 8001e26:	40c6      	lsrs	r6, r0
 8001e28:	2a20      	cmp	r2, #32
 8001e2a:	d004      	beq.n	8001e36 <__aeabi_dsub+0x46a>
 8001e2c:	2040      	movs	r0, #64	; 0x40
 8001e2e:	1a82      	subs	r2, r0, r2
 8001e30:	4091      	lsls	r1, r2
 8001e32:	430f      	orrs	r7, r1
 8001e34:	46b9      	mov	r9, r7
 8001e36:	464f      	mov	r7, r9
 8001e38:	1e7a      	subs	r2, r7, #1
 8001e3a:	4197      	sbcs	r7, r2
 8001e3c:	4337      	orrs	r7, r6
 8001e3e:	e60f      	b.n	8001a60 <__aeabi_dsub+0x94>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	1e5a      	subs	r2, r3, #1
 8001e48:	4193      	sbcs	r3, r2
 8001e4a:	1afc      	subs	r4, r7, r3
 8001e4c:	42a7      	cmp	r7, r4
 8001e4e:	41bf      	sbcs	r7, r7
 8001e50:	427f      	negs	r7, r7
 8001e52:	1bcb      	subs	r3, r1, r7
 8001e54:	4699      	mov	r9, r3
 8001e56:	465d      	mov	r5, fp
 8001e58:	4680      	mov	r8, r0
 8001e5a:	e608      	b.n	8001a6e <__aeabi_dsub+0xa2>
 8001e5c:	4666      	mov	r6, ip
 8001e5e:	431e      	orrs	r6, r3
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x498>
 8001e62:	e0be      	b.n	8001fe2 <__aeabi_dsub+0x616>
 8001e64:	1e56      	subs	r6, r2, #1
 8001e66:	2a01      	cmp	r2, #1
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x4a0>
 8001e6a:	e109      	b.n	8002080 <__aeabi_dsub+0x6b4>
 8001e6c:	4c8c      	ldr	r4, [pc, #560]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x4a8>
 8001e72:	e119      	b.n	80020a8 <__aeabi_dsub+0x6dc>
 8001e74:	0032      	movs	r2, r6
 8001e76:	e6c1      	b.n	8001bfc <__aeabi_dsub+0x230>
 8001e78:	4642      	mov	r2, r8
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e648      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001e80:	2020      	movs	r0, #32
 8001e82:	000c      	movs	r4, r1
 8001e84:	1a80      	subs	r0, r0, r2
 8001e86:	003e      	movs	r6, r7
 8001e88:	4087      	lsls	r7, r0
 8001e8a:	4084      	lsls	r4, r0
 8001e8c:	40d6      	lsrs	r6, r2
 8001e8e:	1e78      	subs	r0, r7, #1
 8001e90:	4187      	sbcs	r7, r0
 8001e92:	40d1      	lsrs	r1, r2
 8001e94:	4334      	orrs	r4, r6
 8001e96:	433c      	orrs	r4, r7
 8001e98:	448c      	add	ip, r1
 8001e9a:	e7a4      	b.n	8001de6 <__aeabi_dsub+0x41a>
 8001e9c:	4a80      	ldr	r2, [pc, #512]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001e9e:	4290      	cmp	r0, r2
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x4d8>
 8001ea2:	e0e9      	b.n	8002078 <__aeabi_dsub+0x6ac>
 8001ea4:	19df      	adds	r7, r3, r7
 8001ea6:	429f      	cmp	r7, r3
 8001ea8:	419b      	sbcs	r3, r3
 8001eaa:	4461      	add	r1, ip
 8001eac:	425b      	negs	r3, r3
 8001eae:	18c9      	adds	r1, r1, r3
 8001eb0:	07cc      	lsls	r4, r1, #31
 8001eb2:	087f      	lsrs	r7, r7, #1
 8001eb4:	084b      	lsrs	r3, r1, #1
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	4680      	mov	r8, r0
 8001eba:	433c      	orrs	r4, r7
 8001ebc:	e6f4      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001ebe:	1afc      	subs	r4, r7, r3
 8001ec0:	42a7      	cmp	r7, r4
 8001ec2:	41bf      	sbcs	r7, r7
 8001ec4:	4663      	mov	r3, ip
 8001ec6:	427f      	negs	r7, r7
 8001ec8:	1ac9      	subs	r1, r1, r3
 8001eca:	1bcb      	subs	r3, r1, r7
 8001ecc:	4699      	mov	r9, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e5d5      	b.n	8001a7e <__aeabi_dsub+0xb2>
 8001ed2:	08ff      	lsrs	r7, r7, #3
 8001ed4:	074b      	lsls	r3, r1, #29
 8001ed6:	465d      	mov	r5, fp
 8001ed8:	433b      	orrs	r3, r7
 8001eda:	08cc      	lsrs	r4, r1, #3
 8001edc:	e6ee      	b.n	8001cbc <__aeabi_dsub+0x2f0>
 8001ede:	4662      	mov	r2, ip
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x51a>
 8001ee4:	e082      	b.n	8001fec <__aeabi_dsub+0x620>
 8001ee6:	000b      	movs	r3, r1
 8001ee8:	433b      	orrs	r3, r7
 8001eea:	d11b      	bne.n	8001f24 <__aeabi_dsub+0x558>
 8001eec:	2480      	movs	r4, #128	; 0x80
 8001eee:	2500      	movs	r5, #0
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	e6f9      	b.n	8001ce8 <__aeabi_dsub+0x31c>
 8001ef4:	19dc      	adds	r4, r3, r7
 8001ef6:	429c      	cmp	r4, r3
 8001ef8:	419b      	sbcs	r3, r3
 8001efa:	4461      	add	r1, ip
 8001efc:	4689      	mov	r9, r1
 8001efe:	425b      	negs	r3, r3
 8001f00:	4499      	add	r9, r3
 8001f02:	464b      	mov	r3, r9
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	d444      	bmi.n	8001f92 <__aeabi_dsub+0x5c6>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	e6cc      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001f0e:	1bdc      	subs	r4, r3, r7
 8001f10:	4662      	mov	r2, ip
 8001f12:	42a3      	cmp	r3, r4
 8001f14:	419b      	sbcs	r3, r3
 8001f16:	1a51      	subs	r1, r2, r1
 8001f18:	425b      	negs	r3, r3
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	4699      	mov	r9, r3
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4698      	mov	r8, r3
 8001f22:	e5a4      	b.n	8001a6e <__aeabi_dsub+0xa2>
 8001f24:	08ff      	lsrs	r7, r7, #3
 8001f26:	074b      	lsls	r3, r1, #29
 8001f28:	465d      	mov	r5, fp
 8001f2a:	433b      	orrs	r3, r7
 8001f2c:	08cc      	lsrs	r4, r1, #3
 8001f2e:	e6d7      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001f30:	4662      	mov	r2, ip
 8001f32:	431a      	orrs	r2, r3
 8001f34:	0014      	movs	r4, r2
 8001f36:	1e63      	subs	r3, r4, #1
 8001f38:	419c      	sbcs	r4, r3
 8001f3a:	e679      	b.n	8001c30 <__aeabi_dsub+0x264>
 8001f3c:	0015      	movs	r5, r2
 8001f3e:	4664      	mov	r4, ip
 8001f40:	3d20      	subs	r5, #32
 8001f42:	40ec      	lsrs	r4, r5
 8001f44:	46a0      	mov	r8, r4
 8001f46:	2a20      	cmp	r2, #32
 8001f48:	d005      	beq.n	8001f56 <__aeabi_dsub+0x58a>
 8001f4a:	2540      	movs	r5, #64	; 0x40
 8001f4c:	4664      	mov	r4, ip
 8001f4e:	1aaa      	subs	r2, r5, r2
 8001f50:	4094      	lsls	r4, r2
 8001f52:	4323      	orrs	r3, r4
 8001f54:	469a      	mov	sl, r3
 8001f56:	4654      	mov	r4, sl
 8001f58:	1e63      	subs	r3, r4, #1
 8001f5a:	419c      	sbcs	r4, r3
 8001f5c:	4643      	mov	r3, r8
 8001f5e:	4323      	orrs	r3, r4
 8001f60:	e773      	b.n	8001e4a <__aeabi_dsub+0x47e>
 8001f62:	4662      	mov	r2, ip
 8001f64:	431a      	orrs	r2, r3
 8001f66:	d023      	beq.n	8001fb0 <__aeabi_dsub+0x5e4>
 8001f68:	000a      	movs	r2, r1
 8001f6a:	433a      	orrs	r2, r7
 8001f6c:	d000      	beq.n	8001f70 <__aeabi_dsub+0x5a4>
 8001f6e:	e0a0      	b.n	80020b2 <__aeabi_dsub+0x6e6>
 8001f70:	4662      	mov	r2, ip
 8001f72:	08db      	lsrs	r3, r3, #3
 8001f74:	0752      	lsls	r2, r2, #29
 8001f76:	4313      	orrs	r3, r2
 8001f78:	4662      	mov	r2, ip
 8001f7a:	08d4      	lsrs	r4, r2, #3
 8001f7c:	e6b0      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001f7e:	000b      	movs	r3, r1
 8001f80:	433b      	orrs	r3, r7
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x5ba>
 8001f84:	e728      	b.n	8001dd8 <__aeabi_dsub+0x40c>
 8001f86:	08ff      	lsrs	r7, r7, #3
 8001f88:	074b      	lsls	r3, r1, #29
 8001f8a:	465d      	mov	r5, fp
 8001f8c:	433b      	orrs	r3, r7
 8001f8e:	08cc      	lsrs	r4, r1, #3
 8001f90:	e697      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001f92:	2302      	movs	r3, #2
 8001f94:	4698      	mov	r8, r3
 8001f96:	e736      	b.n	8001e06 <__aeabi_dsub+0x43a>
 8001f98:	1afc      	subs	r4, r7, r3
 8001f9a:	42a7      	cmp	r7, r4
 8001f9c:	41bf      	sbcs	r7, r7
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	427f      	negs	r7, r7
 8001fa2:	1ac9      	subs	r1, r1, r3
 8001fa4:	1bcb      	subs	r3, r1, r7
 8001fa6:	4699      	mov	r9, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	465d      	mov	r5, fp
 8001fac:	4698      	mov	r8, r3
 8001fae:	e55e      	b.n	8001a6e <__aeabi_dsub+0xa2>
 8001fb0:	074b      	lsls	r3, r1, #29
 8001fb2:	08ff      	lsrs	r7, r7, #3
 8001fb4:	433b      	orrs	r3, r7
 8001fb6:	08cc      	lsrs	r4, r1, #3
 8001fb8:	e692      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001fba:	1bdc      	subs	r4, r3, r7
 8001fbc:	4660      	mov	r0, ip
 8001fbe:	42a3      	cmp	r3, r4
 8001fc0:	41b6      	sbcs	r6, r6
 8001fc2:	1a40      	subs	r0, r0, r1
 8001fc4:	4276      	negs	r6, r6
 8001fc6:	1b80      	subs	r0, r0, r6
 8001fc8:	4681      	mov	r9, r0
 8001fca:	0200      	lsls	r0, r0, #8
 8001fcc:	d560      	bpl.n	8002090 <__aeabi_dsub+0x6c4>
 8001fce:	1afc      	subs	r4, r7, r3
 8001fd0:	42a7      	cmp	r7, r4
 8001fd2:	41bf      	sbcs	r7, r7
 8001fd4:	4663      	mov	r3, ip
 8001fd6:	427f      	negs	r7, r7
 8001fd8:	1ac9      	subs	r1, r1, r3
 8001fda:	1bcb      	subs	r3, r1, r7
 8001fdc:	4699      	mov	r9, r3
 8001fde:	465d      	mov	r5, fp
 8001fe0:	e576      	b.n	8001ad0 <__aeabi_dsub+0x104>
 8001fe2:	08ff      	lsrs	r7, r7, #3
 8001fe4:	074b      	lsls	r3, r1, #29
 8001fe6:	433b      	orrs	r3, r7
 8001fe8:	08cc      	lsrs	r4, r1, #3
 8001fea:	e667      	b.n	8001cbc <__aeabi_dsub+0x2f0>
 8001fec:	000a      	movs	r2, r1
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	433a      	orrs	r2, r7
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x62a>
 8001ff4:	e66f      	b.n	8001cd6 <__aeabi_dsub+0x30a>
 8001ff6:	4662      	mov	r2, ip
 8001ff8:	0752      	lsls	r2, r2, #29
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	4662      	mov	r2, ip
 8001ffe:	08d4      	lsrs	r4, r2, #3
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	0312      	lsls	r2, r2, #12
 8002004:	4214      	tst	r4, r2
 8002006:	d007      	beq.n	8002018 <__aeabi_dsub+0x64c>
 8002008:	08c8      	lsrs	r0, r1, #3
 800200a:	4210      	tst	r0, r2
 800200c:	d104      	bne.n	8002018 <__aeabi_dsub+0x64c>
 800200e:	465d      	mov	r5, fp
 8002010:	0004      	movs	r4, r0
 8002012:	08fb      	lsrs	r3, r7, #3
 8002014:	0749      	lsls	r1, r1, #29
 8002016:	430b      	orrs	r3, r1
 8002018:	0f5a      	lsrs	r2, r3, #29
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	0752      	lsls	r2, r2, #29
 8002020:	4313      	orrs	r3, r2
 8002022:	e65d      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8002024:	074b      	lsls	r3, r1, #29
 8002026:	08ff      	lsrs	r7, r7, #3
 8002028:	433b      	orrs	r3, r7
 800202a:	08cc      	lsrs	r4, r1, #3
 800202c:	e649      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 800202e:	19dc      	adds	r4, r3, r7
 8002030:	429c      	cmp	r4, r3
 8002032:	419b      	sbcs	r3, r3
 8002034:	4461      	add	r1, ip
 8002036:	4689      	mov	r9, r1
 8002038:	425b      	negs	r3, r3
 800203a:	4499      	add	r9, r3
 800203c:	464b      	mov	r3, r9
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	d400      	bmi.n	8002044 <__aeabi_dsub+0x678>
 8002042:	e631      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8002044:	464a      	mov	r2, r9
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <__aeabi_dsub+0x6d8>)
 8002048:	401a      	ands	r2, r3
 800204a:	2301      	movs	r3, #1
 800204c:	4691      	mov	r9, r2
 800204e:	4698      	mov	r8, r3
 8002050:	e62a      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8002052:	0016      	movs	r6, r2
 8002054:	4664      	mov	r4, ip
 8002056:	3e20      	subs	r6, #32
 8002058:	40f4      	lsrs	r4, r6
 800205a:	46a0      	mov	r8, r4
 800205c:	2a20      	cmp	r2, #32
 800205e:	d005      	beq.n	800206c <__aeabi_dsub+0x6a0>
 8002060:	2640      	movs	r6, #64	; 0x40
 8002062:	4664      	mov	r4, ip
 8002064:	1ab2      	subs	r2, r6, r2
 8002066:	4094      	lsls	r4, r2
 8002068:	4323      	orrs	r3, r4
 800206a:	469a      	mov	sl, r3
 800206c:	4654      	mov	r4, sl
 800206e:	1e63      	subs	r3, r4, #1
 8002070:	419c      	sbcs	r4, r3
 8002072:	4643      	mov	r3, r8
 8002074:	431c      	orrs	r4, r3
 8002076:	e5db      	b.n	8001c30 <__aeabi_dsub+0x264>
 8002078:	0002      	movs	r2, r0
 800207a:	2400      	movs	r4, #0
 800207c:	2300      	movs	r3, #0
 800207e:	e548      	b.n	8001b12 <__aeabi_dsub+0x146>
 8002080:	19dc      	adds	r4, r3, r7
 8002082:	42bc      	cmp	r4, r7
 8002084:	41bf      	sbcs	r7, r7
 8002086:	4461      	add	r1, ip
 8002088:	4689      	mov	r9, r1
 800208a:	427f      	negs	r7, r7
 800208c:	44b9      	add	r9, r7
 800208e:	e738      	b.n	8001f02 <__aeabi_dsub+0x536>
 8002090:	464b      	mov	r3, r9
 8002092:	4323      	orrs	r3, r4
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x6cc>
 8002096:	e69f      	b.n	8001dd8 <__aeabi_dsub+0x40c>
 8002098:	e606      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007fe 	.word	0x000007fe
 80020a0:	000007ff 	.word	0x000007ff
 80020a4:	ff7fffff 	.word	0xff7fffff
 80020a8:	08ff      	lsrs	r7, r7, #3
 80020aa:	074b      	lsls	r3, r1, #29
 80020ac:	433b      	orrs	r3, r7
 80020ae:	08cc      	lsrs	r4, r1, #3
 80020b0:	e616      	b.n	8001ce0 <__aeabi_dsub+0x314>
 80020b2:	4662      	mov	r2, ip
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	0752      	lsls	r2, r2, #29
 80020b8:	4313      	orrs	r3, r2
 80020ba:	4662      	mov	r2, ip
 80020bc:	08d4      	lsrs	r4, r2, #3
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	0312      	lsls	r2, r2, #12
 80020c2:	4214      	tst	r4, r2
 80020c4:	d007      	beq.n	80020d6 <__aeabi_dsub+0x70a>
 80020c6:	08c8      	lsrs	r0, r1, #3
 80020c8:	4210      	tst	r0, r2
 80020ca:	d104      	bne.n	80020d6 <__aeabi_dsub+0x70a>
 80020cc:	465d      	mov	r5, fp
 80020ce:	0004      	movs	r4, r0
 80020d0:	08fb      	lsrs	r3, r7, #3
 80020d2:	0749      	lsls	r1, r1, #29
 80020d4:	430b      	orrs	r3, r1
 80020d6:	0f5a      	lsrs	r2, r3, #29
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	0752      	lsls	r2, r2, #29
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	4313      	orrs	r3, r2
 80020e0:	e5fe      	b.n	8001ce0 <__aeabi_dsub+0x314>
 80020e2:	2300      	movs	r3, #0
 80020e4:	4a01      	ldr	r2, [pc, #4]	; (80020ec <__aeabi_dsub+0x720>)
 80020e6:	001c      	movs	r4, r3
 80020e8:	e513      	b.n	8001b12 <__aeabi_dsub+0x146>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__aeabi_d2iz>:
 80020f0:	000a      	movs	r2, r1
 80020f2:	b530      	push	{r4, r5, lr}
 80020f4:	4c13      	ldr	r4, [pc, #76]	; (8002144 <__aeabi_d2iz+0x54>)
 80020f6:	0053      	lsls	r3, r2, #1
 80020f8:	0309      	lsls	r1, r1, #12
 80020fa:	0005      	movs	r5, r0
 80020fc:	0b09      	lsrs	r1, r1, #12
 80020fe:	2000      	movs	r0, #0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	0fd2      	lsrs	r2, r2, #31
 8002104:	42a3      	cmp	r3, r4
 8002106:	dd04      	ble.n	8002112 <__aeabi_d2iz+0x22>
 8002108:	480f      	ldr	r0, [pc, #60]	; (8002148 <__aeabi_d2iz+0x58>)
 800210a:	4283      	cmp	r3, r0
 800210c:	dd02      	ble.n	8002114 <__aeabi_d2iz+0x24>
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <__aeabi_d2iz+0x5c>)
 8002110:	18d0      	adds	r0, r2, r3
 8002112:	bd30      	pop	{r4, r5, pc}
 8002114:	2080      	movs	r0, #128	; 0x80
 8002116:	0340      	lsls	r0, r0, #13
 8002118:	4301      	orrs	r1, r0
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <__aeabi_d2iz+0x60>)
 800211c:	1ac0      	subs	r0, r0, r3
 800211e:	281f      	cmp	r0, #31
 8002120:	dd08      	ble.n	8002134 <__aeabi_d2iz+0x44>
 8002122:	480c      	ldr	r0, [pc, #48]	; (8002154 <__aeabi_d2iz+0x64>)
 8002124:	1ac3      	subs	r3, r0, r3
 8002126:	40d9      	lsrs	r1, r3
 8002128:	000b      	movs	r3, r1
 800212a:	4258      	negs	r0, r3
 800212c:	2a00      	cmp	r2, #0
 800212e:	d1f0      	bne.n	8002112 <__aeabi_d2iz+0x22>
 8002130:	0018      	movs	r0, r3
 8002132:	e7ee      	b.n	8002112 <__aeabi_d2iz+0x22>
 8002134:	4c08      	ldr	r4, [pc, #32]	; (8002158 <__aeabi_d2iz+0x68>)
 8002136:	40c5      	lsrs	r5, r0
 8002138:	46a4      	mov	ip, r4
 800213a:	4463      	add	r3, ip
 800213c:	4099      	lsls	r1, r3
 800213e:	000b      	movs	r3, r1
 8002140:	432b      	orrs	r3, r5
 8002142:	e7f2      	b.n	800212a <__aeabi_d2iz+0x3a>
 8002144:	000003fe 	.word	0x000003fe
 8002148:	0000041d 	.word	0x0000041d
 800214c:	7fffffff 	.word	0x7fffffff
 8002150:	00000433 	.word	0x00000433
 8002154:	00000413 	.word	0x00000413
 8002158:	fffffbed 	.word	0xfffffbed

0800215c <__aeabi_i2d>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	2800      	cmp	r0, #0
 8002160:	d016      	beq.n	8002190 <__aeabi_i2d+0x34>
 8002162:	17c3      	asrs	r3, r0, #31
 8002164:	18c5      	adds	r5, r0, r3
 8002166:	405d      	eors	r5, r3
 8002168:	0fc4      	lsrs	r4, r0, #31
 800216a:	0028      	movs	r0, r5
 800216c:	f000 f8ae 	bl	80022cc <__clzsi2>
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <__aeabi_i2d+0x5c>)
 8002172:	1a12      	subs	r2, r2, r0
 8002174:	280a      	cmp	r0, #10
 8002176:	dc16      	bgt.n	80021a6 <__aeabi_i2d+0x4a>
 8002178:	0003      	movs	r3, r0
 800217a:	002e      	movs	r6, r5
 800217c:	3315      	adds	r3, #21
 800217e:	409e      	lsls	r6, r3
 8002180:	230b      	movs	r3, #11
 8002182:	1a18      	subs	r0, r3, r0
 8002184:	40c5      	lsrs	r5, r0
 8002186:	0552      	lsls	r2, r2, #21
 8002188:	032d      	lsls	r5, r5, #12
 800218a:	0b2d      	lsrs	r5, r5, #12
 800218c:	0d53      	lsrs	r3, r2, #21
 800218e:	e003      	b.n	8002198 <__aeabi_i2d+0x3c>
 8002190:	2400      	movs	r4, #0
 8002192:	2300      	movs	r3, #0
 8002194:	2500      	movs	r5, #0
 8002196:	2600      	movs	r6, #0
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	432b      	orrs	r3, r5
 800219c:	07e4      	lsls	r4, r4, #31
 800219e:	4323      	orrs	r3, r4
 80021a0:	0030      	movs	r0, r6
 80021a2:	0019      	movs	r1, r3
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
 80021a6:	380b      	subs	r0, #11
 80021a8:	4085      	lsls	r5, r0
 80021aa:	0552      	lsls	r2, r2, #21
 80021ac:	032d      	lsls	r5, r5, #12
 80021ae:	2600      	movs	r6, #0
 80021b0:	0b2d      	lsrs	r5, r5, #12
 80021b2:	0d53      	lsrs	r3, r2, #21
 80021b4:	e7f0      	b.n	8002198 <__aeabi_i2d+0x3c>
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	0000041e 	.word	0x0000041e

080021bc <__aeabi_d2f>:
 80021bc:	0002      	movs	r2, r0
 80021be:	004b      	lsls	r3, r1, #1
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	030c      	lsls	r4, r1, #12
 80021c6:	4e3d      	ldr	r6, [pc, #244]	; (80022bc <__aeabi_d2f+0x100>)
 80021c8:	0a64      	lsrs	r4, r4, #9
 80021ca:	0f40      	lsrs	r0, r0, #29
 80021cc:	1c5f      	adds	r7, r3, #1
 80021ce:	0fc9      	lsrs	r1, r1, #31
 80021d0:	4304      	orrs	r4, r0
 80021d2:	00d5      	lsls	r5, r2, #3
 80021d4:	4237      	tst	r7, r6
 80021d6:	d00a      	beq.n	80021ee <__aeabi_d2f+0x32>
 80021d8:	4839      	ldr	r0, [pc, #228]	; (80022c0 <__aeabi_d2f+0x104>)
 80021da:	181e      	adds	r6, r3, r0
 80021dc:	2efe      	cmp	r6, #254	; 0xfe
 80021de:	dd16      	ble.n	800220e <__aeabi_d2f+0x52>
 80021e0:	20ff      	movs	r0, #255	; 0xff
 80021e2:	2400      	movs	r4, #0
 80021e4:	05c0      	lsls	r0, r0, #23
 80021e6:	4320      	orrs	r0, r4
 80021e8:	07c9      	lsls	r1, r1, #31
 80021ea:	4308      	orrs	r0, r1
 80021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <__aeabi_d2f+0x44>
 80021f2:	432c      	orrs	r4, r5
 80021f4:	d026      	beq.n	8002244 <__aeabi_d2f+0x88>
 80021f6:	2205      	movs	r2, #5
 80021f8:	0192      	lsls	r2, r2, #6
 80021fa:	0a54      	lsrs	r4, r2, #9
 80021fc:	b2d8      	uxtb	r0, r3
 80021fe:	e7f1      	b.n	80021e4 <__aeabi_d2f+0x28>
 8002200:	4325      	orrs	r5, r4
 8002202:	d0ed      	beq.n	80021e0 <__aeabi_d2f+0x24>
 8002204:	2080      	movs	r0, #128	; 0x80
 8002206:	03c0      	lsls	r0, r0, #15
 8002208:	4304      	orrs	r4, r0
 800220a:	20ff      	movs	r0, #255	; 0xff
 800220c:	e7ea      	b.n	80021e4 <__aeabi_d2f+0x28>
 800220e:	2e00      	cmp	r6, #0
 8002210:	dd1b      	ble.n	800224a <__aeabi_d2f+0x8e>
 8002212:	0192      	lsls	r2, r2, #6
 8002214:	1e53      	subs	r3, r2, #1
 8002216:	419a      	sbcs	r2, r3
 8002218:	00e4      	lsls	r4, r4, #3
 800221a:	0f6d      	lsrs	r5, r5, #29
 800221c:	4322      	orrs	r2, r4
 800221e:	432a      	orrs	r2, r5
 8002220:	0753      	lsls	r3, r2, #29
 8002222:	d048      	beq.n	80022b6 <__aeabi_d2f+0xfa>
 8002224:	230f      	movs	r3, #15
 8002226:	4013      	ands	r3, r2
 8002228:	2b04      	cmp	r3, #4
 800222a:	d000      	beq.n	800222e <__aeabi_d2f+0x72>
 800222c:	3204      	adds	r2, #4
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	04db      	lsls	r3, r3, #19
 8002232:	4013      	ands	r3, r2
 8002234:	d03f      	beq.n	80022b6 <__aeabi_d2f+0xfa>
 8002236:	1c70      	adds	r0, r6, #1
 8002238:	2efe      	cmp	r6, #254	; 0xfe
 800223a:	d0d1      	beq.n	80021e0 <__aeabi_d2f+0x24>
 800223c:	0192      	lsls	r2, r2, #6
 800223e:	0a54      	lsrs	r4, r2, #9
 8002240:	b2c0      	uxtb	r0, r0
 8002242:	e7cf      	b.n	80021e4 <__aeabi_d2f+0x28>
 8002244:	2000      	movs	r0, #0
 8002246:	2400      	movs	r4, #0
 8002248:	e7cc      	b.n	80021e4 <__aeabi_d2f+0x28>
 800224a:	0032      	movs	r2, r6
 800224c:	3217      	adds	r2, #23
 800224e:	db22      	blt.n	8002296 <__aeabi_d2f+0xda>
 8002250:	2080      	movs	r0, #128	; 0x80
 8002252:	0400      	lsls	r0, r0, #16
 8002254:	4320      	orrs	r0, r4
 8002256:	241e      	movs	r4, #30
 8002258:	1ba4      	subs	r4, r4, r6
 800225a:	2c1f      	cmp	r4, #31
 800225c:	dd1d      	ble.n	800229a <__aeabi_d2f+0xde>
 800225e:	2202      	movs	r2, #2
 8002260:	4252      	negs	r2, r2
 8002262:	1b96      	subs	r6, r2, r6
 8002264:	0002      	movs	r2, r0
 8002266:	40f2      	lsrs	r2, r6
 8002268:	0016      	movs	r6, r2
 800226a:	2c20      	cmp	r4, #32
 800226c:	d004      	beq.n	8002278 <__aeabi_d2f+0xbc>
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <__aeabi_d2f+0x108>)
 8002270:	4694      	mov	ip, r2
 8002272:	4463      	add	r3, ip
 8002274:	4098      	lsls	r0, r3
 8002276:	4305      	orrs	r5, r0
 8002278:	002a      	movs	r2, r5
 800227a:	1e53      	subs	r3, r2, #1
 800227c:	419a      	sbcs	r2, r3
 800227e:	4332      	orrs	r2, r6
 8002280:	2600      	movs	r6, #0
 8002282:	0753      	lsls	r3, r2, #29
 8002284:	d1ce      	bne.n	8002224 <__aeabi_d2f+0x68>
 8002286:	2480      	movs	r4, #128	; 0x80
 8002288:	0013      	movs	r3, r2
 800228a:	04e4      	lsls	r4, r4, #19
 800228c:	2001      	movs	r0, #1
 800228e:	4023      	ands	r3, r4
 8002290:	4222      	tst	r2, r4
 8002292:	d1d3      	bne.n	800223c <__aeabi_d2f+0x80>
 8002294:	e7b0      	b.n	80021f8 <__aeabi_d2f+0x3c>
 8002296:	2300      	movs	r3, #0
 8002298:	e7ad      	b.n	80021f6 <__aeabi_d2f+0x3a>
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <__aeabi_d2f+0x10c>)
 800229c:	4694      	mov	ip, r2
 800229e:	002a      	movs	r2, r5
 80022a0:	40e2      	lsrs	r2, r4
 80022a2:	0014      	movs	r4, r2
 80022a4:	002a      	movs	r2, r5
 80022a6:	4463      	add	r3, ip
 80022a8:	409a      	lsls	r2, r3
 80022aa:	4098      	lsls	r0, r3
 80022ac:	1e55      	subs	r5, r2, #1
 80022ae:	41aa      	sbcs	r2, r5
 80022b0:	4302      	orrs	r2, r0
 80022b2:	4322      	orrs	r2, r4
 80022b4:	e7e4      	b.n	8002280 <__aeabi_d2f+0xc4>
 80022b6:	0033      	movs	r3, r6
 80022b8:	e79e      	b.n	80021f8 <__aeabi_d2f+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	000007fe 	.word	0x000007fe
 80022c0:	fffffc80 	.word	0xfffffc80
 80022c4:	fffffca2 	.word	0xfffffca2
 80022c8:	fffffc82 	.word	0xfffffc82

080022cc <__clzsi2>:
 80022cc:	211c      	movs	r1, #28
 80022ce:	2301      	movs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	4298      	cmp	r0, r3
 80022d4:	d301      	bcc.n	80022da <__clzsi2+0xe>
 80022d6:	0c00      	lsrs	r0, r0, #16
 80022d8:	3910      	subs	r1, #16
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	4298      	cmp	r0, r3
 80022de:	d301      	bcc.n	80022e4 <__clzsi2+0x18>
 80022e0:	0a00      	lsrs	r0, r0, #8
 80022e2:	3908      	subs	r1, #8
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	4298      	cmp	r0, r3
 80022e8:	d301      	bcc.n	80022ee <__clzsi2+0x22>
 80022ea:	0900      	lsrs	r0, r0, #4
 80022ec:	3904      	subs	r1, #4
 80022ee:	a202      	add	r2, pc, #8	; (adr r2, 80022f8 <__clzsi2+0x2c>)
 80022f0:	5c10      	ldrb	r0, [r2, r0]
 80022f2:	1840      	adds	r0, r0, r1
 80022f4:	4770      	bx	lr
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	02020304 	.word	0x02020304
 80022fc:	01010101 	.word	0x01010101
	...

08002308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	b08d      	sub	sp, #52	; 0x34
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800230e:	f000 fd0b 	bl	8002d28 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002312:	f000 fa91 	bl	8002838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002316:	f000 fa23 	bl	8002760 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800231a:	f000 fa6f 	bl	80027fc <MX_DMA_Init>
  MX_TIM1_Init();
 800231e:	f000 f971 	bl	8002604 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002322:	4ba7      	ldr	r3, [pc, #668]	; (80025c0 <main+0x2b8>)
 8002324:	2100      	movs	r1, #0
 8002326:	0018      	movs	r0, r3
 8002328:	f001 fcca 	bl	8003cc0 <HAL_TIM_PWM_Start>

  UARTSTATUS = RESET;
 800232c:	4ba5      	ldr	r3, [pc, #660]	; (80025c4 <main+0x2bc>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]

  while(stateM == 0){
 8002332:	e025      	b.n	8002380 <main+0x78>

	  UARTSTATUS = RESET;
 8002334:	4ba3      	ldr	r3, [pc, #652]	; (80025c4 <main+0x2bc>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]

	  printf("Amplitude em Volts:\r\n");
 800233a:	4ba3      	ldr	r3, [pc, #652]	; (80025c8 <main+0x2c0>)
 800233c:	0018      	movs	r0, r3
 800233e:	f004 fae7 	bl	8006910 <puts>

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 8002342:	49a2      	ldr	r1, [pc, #648]	; (80025cc <main+0x2c4>)
 8002344:	4ba2      	ldr	r3, [pc, #648]	; (80025d0 <main+0x2c8>)
 8002346:	2201      	movs	r2, #1
 8002348:	0018      	movs	r0, r3
 800234a:	f002 fc00 	bl	8004b4e <HAL_UART_Receive_IT>

	  while(!UARTSTATUS){
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	4b9c      	ldr	r3, [pc, #624]	; (80025c4 <main+0x2bc>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0fa      	beq.n	8002350 <main+0x48>
	  }

	  amplitude = rxBuffer[0] - 48;
 800235a:	4b9c      	ldr	r3, [pc, #624]	; (80025cc <main+0x2c4>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b30      	subs	r3, #48	; 0x30
 8002364:	b29a      	uxth	r2, r3
 8002366:	4b9b      	ldr	r3, [pc, #620]	; (80025d4 <main+0x2cc>)
 8002368:	801a      	strh	r2, [r3, #0]

	  if(amplitude > 0 && amplitude < 4){
 800236a:	4b9a      	ldr	r3, [pc, #616]	; (80025d4 <main+0x2cc>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <main+0x78>
 8002372:	4b98      	ldr	r3, [pc, #608]	; (80025d4 <main+0x2cc>)
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d802      	bhi.n	8002380 <main+0x78>
		  stateM = 1;
 800237a:	4b97      	ldr	r3, [pc, #604]	; (80025d8 <main+0x2d0>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
  while(stateM == 0){
 8002380:	4b95      	ldr	r3, [pc, #596]	; (80025d8 <main+0x2d0>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0d5      	beq.n	8002334 <main+0x2c>
	  }

  }

  while(stateM == 1){
 8002388:	e042      	b.n	8002410 <main+0x108>

	  UARTSTATUS = RESET;
 800238a:	4b8e      	ldr	r3, [pc, #568]	; (80025c4 <main+0x2bc>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

	  printf("Offset em volts:\r\n");
 8002390:	4b92      	ldr	r3, [pc, #584]	; (80025dc <main+0x2d4>)
 8002392:	0018      	movs	r0, r3
 8002394:	f004 fabc 	bl	8006910 <puts>

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 2);
 8002398:	498c      	ldr	r1, [pc, #560]	; (80025cc <main+0x2c4>)
 800239a:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <main+0x2c8>)
 800239c:	2202      	movs	r2, #2
 800239e:	0018      	movs	r0, r3
 80023a0:	f002 fbd5 	bl	8004b4e <HAL_UART_Receive_IT>

	  while(!UARTSTATUS){
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	4b87      	ldr	r3, [pc, #540]	; (80025c4 <main+0x2bc>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0fa      	beq.n	80023a6 <main+0x9e>
	  }

	  offset = (rxBuffer[0]-48)*1+(rxBuffer[1]-48)*0.1;
 80023b0:	4b86      	ldr	r3, [pc, #536]	; (80025cc <main+0x2c4>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3b30      	subs	r3, #48	; 0x30
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7ff fecf 	bl	800215c <__aeabi_i2d>
 80023be:	6038      	str	r0, [r7, #0]
 80023c0:	6079      	str	r1, [r7, #4]
 80023c2:	4b82      	ldr	r3, [pc, #520]	; (80025cc <main+0x2c4>)
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3b30      	subs	r3, #48	; 0x30
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff fec6 	bl	800215c <__aeabi_i2d>
 80023d0:	4a83      	ldr	r2, [pc, #524]	; (80025e0 <main+0x2d8>)
 80023d2:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <main+0x2dc>)
 80023d4:	f7ff f88e 	bl	80014f4 <__aeabi_dmul>
 80023d8:	0002      	movs	r2, r0
 80023da:	000b      	movs	r3, r1
 80023dc:	6838      	ldr	r0, [r7, #0]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	f7fe f94a 	bl	8000678 <__aeabi_dadd>
 80023e4:	0002      	movs	r2, r0
 80023e6:	000b      	movs	r3, r1
 80023e8:	0010      	movs	r0, r2
 80023ea:	0019      	movs	r1, r3
 80023ec:	f7ff fee6 	bl	80021bc <__aeabi_d2f>
 80023f0:	1c02      	adds	r2, r0, #0
 80023f2:	4b7d      	ldr	r3, [pc, #500]	; (80025e8 <main+0x2e0>)
 80023f4:	601a      	str	r2, [r3, #0]

	  if(offset > 2){
 80023f6:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <main+0x2e0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	05c9      	lsls	r1, r1, #23
 80023fe:	1c18      	adds	r0, r3, #0
 8002400:	f7fe f858 	bl	80004b4 <__aeabi_fcmpgt>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d100      	bne.n	800240a <main+0x102>
 8002408:	e002      	b.n	8002410 <main+0x108>
		  stateM = 2;
 800240a:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <main+0x2d0>)
 800240c:	2202      	movs	r2, #2
 800240e:	601a      	str	r2, [r3, #0]
  while(stateM == 1){
 8002410:	4b71      	ldr	r3, [pc, #452]	; (80025d8 <main+0x2d0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d0b8      	beq.n	800238a <main+0x82>
	  }

  }

  while(stateM == 2){
 8002418:	e032      	b.n	8002480 <main+0x178>

	  UARTSTATUS = RESET;
 800241a:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <main+0x2bc>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]

	  printf("Frequência em Hertz:\r\n");
 8002420:	4b72      	ldr	r3, [pc, #456]	; (80025ec <main+0x2e4>)
 8002422:	0018      	movs	r0, r3
 8002424:	f004 fa74 	bl	8006910 <puts>

	  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 3);
 8002428:	4968      	ldr	r1, [pc, #416]	; (80025cc <main+0x2c4>)
 800242a:	4b69      	ldr	r3, [pc, #420]	; (80025d0 <main+0x2c8>)
 800242c:	2203      	movs	r2, #3
 800242e:	0018      	movs	r0, r3
 8002430:	f002 fb8d 	bl	8004b4e <HAL_UART_Receive_IT>

	  while(!UARTSTATUS){
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <main+0x2bc>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0fa      	beq.n	8002436 <main+0x12e>
	  }

	  frequencia = (rxBuffer[0] - 48)*100 + (rxBuffer[1] - 48)*10 + rxBuffer[2] - 48;
 8002440:	4b62      	ldr	r3, [pc, #392]	; (80025cc <main+0x2c4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2264      	movs	r2, #100	; 0x64
 8002448:	4353      	muls	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <main+0x2c4>)
 800244e:	785b      	ldrb	r3, [r3, #1]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	1c19      	adds	r1, r3, #0
 8002454:	0089      	lsls	r1, r1, #2
 8002456:	18cb      	adds	r3, r1, r3
 8002458:	18db      	adds	r3, r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	18d3      	adds	r3, r2, r3
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b5a      	ldr	r3, [pc, #360]	; (80025cc <main+0x2c4>)
 8002462:	789b      	ldrb	r3, [r3, #2]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	18d3      	adds	r3, r2, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3330      	adds	r3, #48	; 0x30
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b60      	ldr	r3, [pc, #384]	; (80025f0 <main+0x2e8>)
 8002470:	701a      	strb	r2, [r3, #0]

	  if(frequencia > 0 && frequencia < 300){
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <main+0x2e8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <main+0x178>
		  stateM = 3;
 800247a:	4b57      	ldr	r3, [pc, #348]	; (80025d8 <main+0x2d0>)
 800247c:	2203      	movs	r2, #3
 800247e:	601a      	str	r2, [r3, #0]
  while(stateM == 2){
 8002480:	4b55      	ldr	r3, [pc, #340]	; (80025d8 <main+0x2d0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d0c8      	beq.n	800241a <main+0x112>
	  }
  }

  pontos = (uint16_t) (16000/frequencia);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <main+0x2e8>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	0019      	movs	r1, r3
 800248e:	23fa      	movs	r3, #250	; 0xfa
 8002490:	0198      	lsls	r0, r3, #6
 8002492:	f7fd febf 	bl	8000214 <__divsi3>
 8002496:	0003      	movs	r3, r0
 8002498:	b29a      	uxth	r2, r3
 800249a:	4b56      	ldr	r3, [pc, #344]	; (80025f4 <main+0x2ec>)
 800249c:	801a      	strh	r2, [r3, #0]
  __IO uint32_t sinBuffer[pontos];
 800249e:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <main+0x2ec>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	001a      	movs	r2, r3
 80024a4:	3a01      	subs	r2, #1
 80024a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	2200      	movs	r2, #0
 80024ac:	617a      	str	r2, [r7, #20]
 80024ae:	6938      	ldr	r0, [r7, #16]
 80024b0:	6979      	ldr	r1, [r7, #20]
 80024b2:	0002      	movs	r2, r0
 80024b4:	0ed2      	lsrs	r2, r2, #27
 80024b6:	000e      	movs	r6, r1
 80024b8:	0176      	lsls	r6, r6, #5
 80024ba:	61fe      	str	r6, [r7, #28]
 80024bc:	69fe      	ldr	r6, [r7, #28]
 80024be:	4316      	orrs	r6, r2
 80024c0:	61fe      	str	r6, [r7, #28]
 80024c2:	0002      	movs	r2, r0
 80024c4:	0152      	lsls	r2, r2, #5
 80024c6:	61ba      	str	r2, [r7, #24]
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	2200      	movs	r2, #0
 80024cc:	60fa      	str	r2, [r7, #12]
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	0002      	movs	r2, r0
 80024d4:	0ed2      	lsrs	r2, r2, #27
 80024d6:	000e      	movs	r6, r1
 80024d8:	0175      	lsls	r5, r6, #5
 80024da:	4315      	orrs	r5, r2
 80024dc:	0002      	movs	r2, r0
 80024de:	0154      	lsls	r4, r2, #5
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	3307      	adds	r3, #7
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	466a      	mov	r2, sp
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	469d      	mov	sp, r3
 80024ee:	466b      	mov	r3, sp
 80024f0:	3303      	adds	r3, #3
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24

  amplitude = (uint16_t)(1000*amplitude/6);
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <main+0x2cc>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	001a      	movs	r2, r3
 80024fe:	0013      	movs	r3, r2
 8002500:	015b      	lsls	r3, r3, #5
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	189b      	adds	r3, r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	2106      	movs	r1, #6
 800250c:	0018      	movs	r0, r3
 800250e:	f7fd fe81 	bl	8000214 <__divsi3>
 8002512:	0003      	movs	r3, r0
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <main+0x2cc>)
 8002518:	801a      	strh	r2, [r3, #0]

  int i;

  for(i = 0; i < pontos; i++){
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251e:	e03e      	b.n	800259e <main+0x296>
	  sinBuffer[i] = (uint32_t)(amplitude*sin(2*M_PI*i/pontos)+500);
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <main+0x2cc>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff fe19 	bl	800215c <__aeabi_i2d>
 800252a:	0004      	movs	r4, r0
 800252c:	000d      	movs	r5, r1
 800252e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002530:	f7ff fe14 	bl	800215c <__aeabi_i2d>
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <main+0x2f0>)
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <main+0x2f4>)
 8002538:	f7fe ffdc 	bl	80014f4 <__aeabi_dmul>
 800253c:	0002      	movs	r2, r0
 800253e:	000b      	movs	r3, r1
 8002540:	61ba      	str	r2, [r7, #24]
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <main+0x2ec>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff fe07 	bl	800215c <__aeabi_i2d>
 800254e:	0002      	movs	r2, r0
 8002550:	000b      	movs	r3, r1
 8002552:	69b8      	ldr	r0, [r7, #24]
 8002554:	69f9      	ldr	r1, [r7, #28]
 8002556:	f7fe fbcb 	bl	8000cf0 <__aeabi_ddiv>
 800255a:	0002      	movs	r2, r0
 800255c:	000b      	movs	r3, r1
 800255e:	0010      	movs	r0, r2
 8002560:	0019      	movs	r1, r3
 8002562:	f004 fead 	bl	80072c0 <sin>
 8002566:	0002      	movs	r2, r0
 8002568:	000b      	movs	r3, r1
 800256a:	0020      	movs	r0, r4
 800256c:	0029      	movs	r1, r5
 800256e:	f7fe ffc1 	bl	80014f4 <__aeabi_dmul>
 8002572:	0002      	movs	r2, r0
 8002574:	000b      	movs	r3, r1
 8002576:	0010      	movs	r0, r2
 8002578:	0019      	movs	r1, r3
 800257a:	2200      	movs	r2, #0
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <main+0x2f8>)
 800257e:	f7fe f87b 	bl	8000678 <__aeabi_dadd>
 8002582:	0002      	movs	r2, r0
 8002584:	000b      	movs	r3, r1
 8002586:	0010      	movs	r0, r2
 8002588:	0019      	movs	r1, r3
 800258a:	f7fd ffa7 	bl	80004dc <__aeabi_d2uiz>
 800258e:	0001      	movs	r1, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	50d1      	str	r1, [r2, r3]
  for(i = 0; i < pontos; i++){
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	3301      	adds	r3, #1
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <main+0x2ec>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	001a      	movs	r2, r3
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a6:	4293      	cmp	r3, r2
 80025a8:	dbba      	blt.n	8002520 <main+0x218>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80025aa:	23a0      	movs	r3, #160	; 0xa0
 80025ac:	05db      	lsls	r3, r3, #23
 80025ae:	2120      	movs	r1, #32
 80025b0:	0018      	movs	r0, r3
 80025b2:	f001 f930 	bl	8003816 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80025b6:	20c8      	movs	r0, #200	; 0xc8
 80025b8:	f000 fc3c 	bl	8002e34 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80025bc:	e7f5      	b.n	80025aa <main+0x2a2>
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	20000090 	.word	0x20000090
 80025c4:	20000000 	.word	0x20000000
 80025c8:	080082f8 	.word	0x080082f8
 80025cc:	200001c8 	.word	0x200001c8
 80025d0:	20000138 	.word	0x20000138
 80025d4:	200001d6 	.word	0x200001d6
 80025d8:	200001d0 	.word	0x200001d0
 80025dc:	08008310 	.word	0x08008310
 80025e0:	9999999a 	.word	0x9999999a
 80025e4:	3fb99999 	.word	0x3fb99999
 80025e8:	200001dc 	.word	0x200001dc
 80025ec:	08008324 	.word	0x08008324
 80025f0:	200001d4 	.word	0x200001d4
 80025f4:	200001d8 	.word	0x200001d8
 80025f8:	54442d18 	.word	0x54442d18
 80025fc:	401921fb 	.word	0x401921fb
 8002600:	407f4000 	.word	0x407f4000

08002604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b098      	sub	sp, #96	; 0x60
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260a:	2354      	movs	r3, #84	; 0x54
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	0018      	movs	r0, r3
 8002610:	230c      	movs	r3, #12
 8002612:	001a      	movs	r2, r3
 8002614:	2100      	movs	r1, #0
 8002616:	f004 f901 	bl	800681c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800261a:	2338      	movs	r3, #56	; 0x38
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	0018      	movs	r0, r3
 8002620:	231c      	movs	r3, #28
 8002622:	001a      	movs	r2, r3
 8002624:	2100      	movs	r1, #0
 8002626:	f004 f8f9 	bl	800681c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	0018      	movs	r0, r3
 800262e:	2334      	movs	r3, #52	; 0x34
 8002630:	001a      	movs	r2, r3
 8002632:	2100      	movs	r1, #0
 8002634:	f004 f8f2 	bl	800681c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <MX_TIM1_Init+0x150>)
 800263a:	4a47      	ldr	r2, [pc, #284]	; (8002758 <MX_TIM1_Init+0x154>)
 800263c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800263e:	4b45      	ldr	r3, [pc, #276]	; (8002754 <MX_TIM1_Init+0x150>)
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <MX_TIM1_Init+0x150>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <MX_TIM1_Init+0x150>)
 800264c:	4a43      	ldr	r2, [pc, #268]	; (800275c <MX_TIM1_Init+0x158>)
 800264e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <MX_TIM1_Init+0x150>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <MX_TIM1_Init+0x150>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265c:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <MX_TIM1_Init+0x150>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <MX_TIM1_Init+0x150>)
 8002664:	0018      	movs	r0, r3
 8002666:	f001 fad3 	bl	8003c10 <HAL_TIM_PWM_Init>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800266e:	f000 f93b 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002672:	2154      	movs	r1, #84	; 0x54
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002680:	187b      	adds	r3, r7, r1
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002686:	187a      	adds	r2, r7, r1
 8002688:	4b32      	ldr	r3, [pc, #200]	; (8002754 <MX_TIM1_Init+0x150>)
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f002 f84f 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002696:	f000 f927 	bl	80028e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269a:	2138      	movs	r1, #56	; 0x38
 800269c:	187b      	adds	r3, r7, r1
 800269e:	2260      	movs	r2, #96	; 0x60
 80026a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	22fa      	movs	r2, #250	; 0xfa
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026aa:	187b      	adds	r3, r7, r1
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026b0:	187b      	adds	r3, r7, r1
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026c8:	1879      	adds	r1, r7, r1
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <MX_TIM1_Init+0x150>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	0018      	movs	r0, r3
 80026d0:	f001 fbda 	bl	8003e88 <HAL_TIM_PWM_ConfigChannel>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80026d8:	f000 f906 	bl	80028e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	0192      	lsls	r2, r2, #6
 8002700:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	0492      	lsls	r2, r2, #18
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2200      	movs	r2, #0
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800272e:	1d3a      	adds	r2, r7, #4
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_TIM1_Init+0x150>)
 8002732:	0011      	movs	r1, r2
 8002734:	0018      	movs	r0, r3
 8002736:	f002 f863 	bl	8004800 <HAL_TIMEx_ConfigBreakDeadTime>
 800273a:	1e03      	subs	r3, r0, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800273e:	f000 f8d3 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <MX_TIM1_Init+0x150>)
 8002744:	0018      	movs	r0, r3
 8002746:	f000 f94d 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b018      	add	sp, #96	; 0x60
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	20000090 	.word	0x20000090
 8002758:	40012c00 	.word	0x40012c00
 800275c:	000003e7 	.word	0x000003e7

08002760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002764:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 8002766:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <MX_USART2_UART_Init+0x98>)
 8002768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 800276c:	22e1      	movs	r2, #225	; 0xe1
 800276e:	0252      	lsls	r2, r2, #9
 8002770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002784:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 8002786:	220c      	movs	r2, #12
 8002788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 800279e:	2200      	movs	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f002 f8ce 	bl	800494c <HAL_UART_Init>
 80027b0:	1e03      	subs	r3, r0, #0
 80027b2:	d001      	beq.n	80027b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027b4:	f000 f898 	bl	80028e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 80027ba:	2100      	movs	r1, #0
 80027bc:	0018      	movs	r0, r3
 80027be:	f003 ff23 	bl	8006608 <HAL_UARTEx_SetTxFifoThreshold>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80027c6:	f000 f88f 	bl	80028e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 80027cc:	2100      	movs	r1, #0
 80027ce:	0018      	movs	r0, r3
 80027d0:	f003 ff5a 	bl	8006688 <HAL_UARTEx_SetRxFifoThreshold>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d001      	beq.n	80027dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80027d8:	f000 f886 	bl	80028e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <MX_USART2_UART_Init+0x94>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f003 fed8 	bl	8006594 <HAL_UARTEx_DisableFifoMode>
 80027e4:	1e03      	subs	r3, r0, #0
 80027e6:	d001      	beq.n	80027ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80027e8:	f000 f87e 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	20000138 	.word	0x20000138
 80027f8:	40004400 	.word	0x40004400

080027fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002802:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <MX_DMA_Init+0x38>)
 8002804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <MX_DMA_Init+0x38>)
 8002808:	2101      	movs	r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <MX_DMA_Init+0x38>)
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2100      	movs	r1, #0
 800281e:	2009      	movs	r0, #9
 8002820:	f000 fbee 	bl	8003000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002824:	2009      	movs	r0, #9
 8002826:	f000 fc00 	bl	800302a <HAL_NVIC_EnableIRQ>

}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b002      	add	sp, #8
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	40021000 	.word	0x40021000

08002838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	0018      	movs	r0, r3
 8002842:	2314      	movs	r3, #20
 8002844:	001a      	movs	r2, r3
 8002846:	2100      	movs	r1, #0
 8002848:	f003 ffe8 	bl	800681c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_GPIO_Init+0x68>)
 800284e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <MX_GPIO_Init+0x68>)
 8002852:	2101      	movs	r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	635a      	str	r2, [r3, #52]	; 0x34
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_GPIO_Init+0x68>)
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002864:	23a0      	movs	r3, #160	; 0xa0
 8002866:	05db      	lsls	r3, r3, #23
 8002868:	2200      	movs	r2, #0
 800286a:	2120      	movs	r1, #32
 800286c:	0018      	movs	r0, r3
 800286e:	f000 ffb5 	bl	80037dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2220      	movs	r2, #32
 8002876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2201      	movs	r2, #1
 800287c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	1d3a      	adds	r2, r7, #4
 800288c:	23a0      	movs	r3, #160	; 0xa0
 800288e:	05db      	lsls	r3, r3, #23
 8002890:	0011      	movs	r1, r2
 8002892:	0018      	movs	r0, r3
 8002894:	f000 fe3e 	bl	8003514 <HAL_GPIO_Init>

}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b006      	add	sp, #24
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000

080028a4 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	0002      	movs	r2, r0
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 200);
 80028b0:	1df9      	adds	r1, r7, #7
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <__io_putchar+0x24>)
 80028b4:	23c8      	movs	r3, #200	; 0xc8
 80028b6:	2201      	movs	r2, #1
 80028b8:	f002 f89e 	bl	80049f8 <HAL_UART_Transmit>
	return ch;
 80028bc:	1dfb      	adds	r3, r7, #7
 80028be:	781b      	ldrb	r3, [r3, #0]
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000138 	.word	0x20000138

080028cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	UARTSTATUS = SET;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_UART_RxCpltCallback+0x18>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b002      	add	sp, #8
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	20000000 	.word	0x20000000

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <Error_Handler+0x8>
	...

080028f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_MspInit+0x4c>)
 80028fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_MspInit+0x4c>)
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_MspInit+0x4c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_MspInit+0x4c>)
 8002914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_MspInit+0x4c>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0549      	lsls	r1, r1, #21
 800291c:	430a      	orrs	r2, r1
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002920:	4b07      	ldr	r3, [pc, #28]	; (8002940 <HAL_MspInit+0x4c>)
 8002922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	055b      	lsls	r3, r3, #21
 8002928:	4013      	ands	r3, r2
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800292e:	23c0      	movs	r3, #192	; 0xc0
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	0018      	movs	r0, r3
 8002934:	f000 faa2 	bl	8002e7c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_TIM_PWM_MspInit+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d139      	bne.n	80029ca <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_TIM_PWM_MspInit+0x94>)
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	4b1f      	ldr	r3, [pc, #124]	; (80029d8 <HAL_TIM_PWM_MspInit+0x94>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0109      	lsls	r1, r1, #4
 8002960:	430a      	orrs	r2, r1
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_TIM_PWM_MspInit+0x94>)
 8002966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002972:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002976:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 800297a:	2214      	movs	r2, #20
 800297c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 8002980:	2210      	movs	r2, #16
 8002982:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	0092      	lsls	r2, r2, #2
 8002996:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 80029a2:	2220      	movs	r2, #32
 80029a4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0192      	lsls	r2, r2, #6
 80029ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 fb57 	bl	8003064 <HAL_DMA_Init>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <HAL_TIM_PWM_MspInit+0x7a>
    {
      Error_Handler();
 80029ba:	f7ff ff95 	bl	80028e8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a06      	ldr	r2, [pc, #24]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_TIM_PWM_MspInit+0x98>)
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40021000 	.word	0x40021000
 80029dc:	200000dc 	.word	0x200000dc
 80029e0:	40020008 	.word	0x40020008

080029e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	240c      	movs	r4, #12
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	0018      	movs	r0, r3
 80029f2:	2314      	movs	r3, #20
 80029f4:	001a      	movs	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	f003 ff10 	bl	800681c <memset>
  if(htim->Instance==TIM1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_TIM_MspPostInit+0x74>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d123      	bne.n	8002a4e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_TIM_MspPostInit+0x78>)
 8002a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_TIM_MspPostInit+0x78>)
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_TIM_MspPostInit+0x78>)
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	2201      	movs	r2, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	0021      	movs	r1, r4
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a40:	187a      	adds	r2, r7, r1
 8002a42:	23a0      	movs	r3, #160	; 0xa0
 8002a44:	05db      	lsls	r3, r3, #23
 8002a46:	0011      	movs	r1, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fd63 	bl	8003514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b009      	add	sp, #36	; 0x24
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b091      	sub	sp, #68	; 0x44
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	232c      	movs	r3, #44	; 0x2c
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	2314      	movs	r3, #20
 8002a70:	001a      	movs	r2, r3
 8002a72:	2100      	movs	r1, #0
 8002a74:	f003 fed2 	bl	800681c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a78:	2410      	movs	r4, #16
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	231c      	movs	r3, #28
 8002a80:	001a      	movs	r2, r3
 8002a82:	2100      	movs	r1, #0
 8002a84:	f003 feca 	bl	800681c <memset>
  if(huart->Instance==USART2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <HAL_UART_MspInit+0xc8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d146      	bne.n	8002b20 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a92:	193b      	adds	r3, r7, r4
 8002a94:	2202      	movs	r2, #2
 8002a96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a98:	193b      	adds	r3, r7, r4
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 ff81 	bl	80039a8 <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002aaa:	f7ff ff1d 	bl	80028e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aae:	4b1f      	ldr	r3, [pc, #124]	; (8002b2c <HAL_UART_MspInit+0xcc>)
 8002ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_UART_MspInit+0xcc>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0289      	lsls	r1, r1, #10
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_UART_MspInit+0xcc>)
 8002abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	029b      	lsls	r3, r3, #10
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_UART_MspInit+0xcc>)
 8002acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_UART_MspInit+0xcc>)
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_UART_MspInit+0xcc>)
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	2201      	movs	r2, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2202      	movs	r2, #2
 8002aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2201      	movs	r2, #1
 8002b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	187a      	adds	r2, r7, r1
 8002b04:	23a0      	movs	r3, #160	; 0xa0
 8002b06:	05db      	lsls	r3, r3, #23
 8002b08:	0011      	movs	r1, r2
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 fd02 	bl	8003514 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2100      	movs	r1, #0
 8002b14:	201c      	movs	r0, #28
 8002b16:	f000 fa73 	bl	8003000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b1a:	201c      	movs	r0, #28
 8002b1c:	f000 fa85 	bl	800302a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b011      	add	sp, #68	; 0x44
 8002b26:	bd90      	pop	{r4, r7, pc}
 8002b28:	40004400 	.word	0x40004400
 8002b2c:	40021000 	.word	0x40021000

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <NMI_Handler+0x4>

08002b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <HardFault_Handler+0x4>

08002b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b54:	f000 f952 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <DMA1_Channel1_IRQHandler+0x14>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fbd2 	bl	8003310 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	200000dc 	.word	0x200000dc

08002b78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <USART2_IRQHandler+0x14>)
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f002 f848 	bl	8004c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	20000138 	.word	0x20000138

08002b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	e00a      	b.n	8002bb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ba2:	e000      	b.n	8002ba6 <_read+0x16>
 8002ba4:	bf00      	nop
 8002ba6:	0001      	movs	r1, r0
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	60ba      	str	r2, [r7, #8]
 8002bae:	b2ca      	uxtb	r2, r1
 8002bb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	dbf0      	blt.n	8002ba2 <_read+0x12>
	}

return len;
 8002bc0:	687b      	ldr	r3, [r7, #4]
}
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b006      	add	sp, #24
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	e009      	b.n	8002bf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	60ba      	str	r2, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f7ff fe5d 	bl	80028a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3301      	adds	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	dbf1      	blt.n	8002bdc <_write+0x12>
	}
	return len;
 8002bf8:	687b      	ldr	r3, [r7, #4]
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b006      	add	sp, #24
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_close>:

int _close(int file)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
	return -1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	425b      	negs	r3, r3
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	0192      	lsls	r2, r2, #6
 8002c26:	605a      	str	r2, [r3, #4]
	return 0;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_isatty>:

int _isatty(int file)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
	return 1;
 8002c3a:	2301      	movs	r3, #1
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <_sbrk+0x5c>)
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <_sbrk+0x60>)
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <_sbrk+0x64>)
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <_sbrk+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7e:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	18d3      	adds	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d207      	bcs.n	8002c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c8c:	f003 fd9c 	bl	80067c8 <__errno>
 8002c90:	0003      	movs	r3, r0
 8002c92:	220c      	movs	r2, #12
 8002c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	425b      	negs	r3, r3
 8002c9a:	e009      	b.n	8002cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <_sbrk+0x64>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	18d2      	adds	r2, r2, r3
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <_sbrk+0x64>)
 8002cac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b006      	add	sp, #24
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20009000 	.word	0x20009000
 8002cbc:	00000400 	.word	0x00000400
 8002cc0:	200001e0 	.word	0x200001e0
 8002cc4:	200001f8 	.word	0x200001f8

08002cc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cd8:	f7ff fff6 	bl	8002cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cdc:	480c      	ldr	r0, [pc, #48]	; (8002d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <LoopForever+0xe>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ce4:	e002      	b.n	8002cec <LoopCopyDataInit>

08002ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cea:	3304      	adds	r3, #4

08002cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cf0:	d3f9      	bcc.n	8002ce6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cf4:	4c0a      	ldr	r4, [pc, #40]	; (8002d20 <LoopForever+0x16>)
  movs r3, #0
 8002cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf8:	e001      	b.n	8002cfe <LoopFillZerobss>

08002cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cfc:	3204      	adds	r2, #4

08002cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d00:	d3fb      	bcc.n	8002cfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d02:	f003 fd67 	bl	80067d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d06:	f7ff faff 	bl	8002308 <main>

08002d0a <LoopForever>:

LoopForever:
  b LoopForever
 8002d0a:	e7fe      	b.n	8002d0a <LoopForever>
  ldr   r0, =_estack
 8002d0c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002d18:	080086a0 	.word	0x080086a0
  ldr r2, =_sbss
 8002d1c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002d20:	200001f8 	.word	0x200001f8

08002d24 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d24:	e7fe      	b.n	8002d24 <ADC1_IRQHandler>
	...

08002d28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d2e:	1dfb      	adds	r3, r7, #7
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_Init+0x3c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_Init+0x3c>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0049      	lsls	r1, r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d42:	2003      	movs	r0, #3
 8002d44:	f000 f810 	bl	8002d68 <HAL_InitTick>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002d4c:	1dfb      	adds	r3, r7, #7
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e001      	b.n	8002d58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff fdce 	bl	80028f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	781b      	ldrb	r3, [r3, #0]
}
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40022000 	.word	0x40022000

08002d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d70:	230f      	movs	r3, #15
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_InitTick+0x88>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02b      	beq.n	8002dd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d80:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <HAL_InitTick+0x8c>)
 8002d82:	681c      	ldr	r4, [r3, #0]
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_InitTick+0x88>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	0019      	movs	r1, r3
 8002d8a:	23fa      	movs	r3, #250	; 0xfa
 8002d8c:	0098      	lsls	r0, r3, #2
 8002d8e:	f7fd f9b7 	bl	8000100 <__udivsi3>
 8002d92:	0003      	movs	r3, r0
 8002d94:	0019      	movs	r1, r3
 8002d96:	0020      	movs	r0, r4
 8002d98:	f7fd f9b2 	bl	8000100 <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 f953 	bl	800304a <HAL_SYSTICK_Config>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d112      	bne.n	8002dce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d80a      	bhi.n	8002dc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	2301      	movs	r3, #1
 8002db2:	425b      	negs	r3, r3
 8002db4:	2200      	movs	r2, #0
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 f922 	bl	8003000 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_InitTick+0x90>)
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e00d      	b.n	8002de0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e008      	b.n	8002de0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dce:	230f      	movs	r3, #15
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e003      	b.n	8002de0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dd8:	230f      	movs	r3, #15
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002de0:	230f      	movs	r3, #15
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	781b      	ldrb	r3, [r3, #0]
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b005      	add	sp, #20
 8002dec:	bd90      	pop	{r4, r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	2000000c 	.word	0x2000000c
 8002df4:	20000004 	.word	0x20000004
 8002df8:	20000008 	.word	0x20000008

08002dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_IncTick+0x1c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	001a      	movs	r2, r3
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_IncTick+0x20>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	18d2      	adds	r2, r2, r3
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <HAL_IncTick+0x20>)
 8002e0e:	601a      	str	r2, [r3, #0]
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	2000000c 	.word	0x2000000c
 8002e1c:	200001e4 	.word	0x200001e4

08002e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <HAL_GetTick+0x10>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	200001e4 	.word	0x200001e4

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	001a      	movs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	f7ff ffe0 	bl	8002e20 <HAL_GetTick>
 8002e60:	0002      	movs	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b004      	add	sp, #16
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	2000000c 	.word	0x2000000c

08002e7c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a06      	ldr	r2, [pc, #24]	; (8002ea4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	fffff9ff 	.word	0xfffff9ff

08002ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	0002      	movs	r2, r0
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	1dfb      	adds	r3, r7, #7
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8002eba:	d809      	bhi.n	8002ed0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	231f      	movs	r3, #31
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <__NVIC_EnableIRQ+0x30>)
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4091      	lsls	r1, r2
 8002ecc:	000a      	movs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	e000e100 	.word	0xe000e100

08002edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	1dfb      	adds	r3, r7, #7
 8002ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b7f      	cmp	r3, #127	; 0x7f
 8002ef0:	d828      	bhi.n	8002f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ef2:	4a2f      	ldr	r2, [pc, #188]	; (8002fb0 <__NVIC_SetPriority+0xd4>)
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	33c0      	adds	r3, #192	; 0xc0
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	589b      	ldr	r3, [r3, r2]
 8002f02:	1dfa      	adds	r2, r7, #7
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	0011      	movs	r1, r2
 8002f08:	2203      	movs	r2, #3
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	00d2      	lsls	r2, r2, #3
 8002f0e:	21ff      	movs	r1, #255	; 0xff
 8002f10:	4091      	lsls	r1, r2
 8002f12:	000a      	movs	r2, r1
 8002f14:	43d2      	mvns	r2, r2
 8002f16:	401a      	ands	r2, r3
 8002f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	22ff      	movs	r2, #255	; 0xff
 8002f20:	401a      	ands	r2, r3
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	0018      	movs	r0, r3
 8002f28:	2303      	movs	r3, #3
 8002f2a:	4003      	ands	r3, r0
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f30:	481f      	ldr	r0, [pc, #124]	; (8002fb0 <__NVIC_SetPriority+0xd4>)
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b25b      	sxtb	r3, r3
 8002f38:	089b      	lsrs	r3, r3, #2
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	33c0      	adds	r3, #192	; 0xc0
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f42:	e031      	b.n	8002fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <__NVIC_SetPriority+0xd8>)
 8002f46:	1dfb      	adds	r3, r7, #7
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	230f      	movs	r3, #15
 8002f4e:	400b      	ands	r3, r1
 8002f50:	3b08      	subs	r3, #8
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3306      	adds	r3, #6
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	1dfa      	adds	r2, r7, #7
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	0011      	movs	r1, r2
 8002f64:	2203      	movs	r2, #3
 8002f66:	400a      	ands	r2, r1
 8002f68:	00d2      	lsls	r2, r2, #3
 8002f6a:	21ff      	movs	r1, #255	; 0xff
 8002f6c:	4091      	lsls	r1, r2
 8002f6e:	000a      	movs	r2, r1
 8002f70:	43d2      	mvns	r2, r2
 8002f72:	401a      	ands	r2, r3
 8002f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	019b      	lsls	r3, r3, #6
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	0018      	movs	r0, r3
 8002f84:	2303      	movs	r3, #3
 8002f86:	4003      	ands	r3, r0
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f8c:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <__NVIC_SetPriority+0xd8>)
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	001c      	movs	r4, r3
 8002f94:	230f      	movs	r3, #15
 8002f96:	4023      	ands	r3, r4
 8002f98:	3b08      	subs	r3, #8
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	3306      	adds	r3, #6
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	18c3      	adds	r3, r0, r3
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	601a      	str	r2, [r3, #0]
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b003      	add	sp, #12
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1e5a      	subs	r2, r3, #1
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	045b      	lsls	r3, r3, #17
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d301      	bcc.n	8002fd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e010      	b.n	8002ff2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <SysTick_Config+0x44>)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd8:	2301      	movs	r3, #1
 8002fda:	425b      	negs	r3, r3
 8002fdc:	2103      	movs	r1, #3
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f7ff ff7c 	bl	8002edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <SysTick_Config+0x44>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <SysTick_Config+0x44>)
 8002fec:	2207      	movs	r2, #7
 8002fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	e000e010 	.word	0xe000e010

08003000 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	210f      	movs	r1, #15
 800300c:	187b      	adds	r3, r7, r1
 800300e:	1c02      	adds	r2, r0, #0
 8003010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	187b      	adds	r3, r7, r1
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b25b      	sxtb	r3, r3
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f7ff ff5d 	bl	8002edc <__NVIC_SetPriority>
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b004      	add	sp, #16
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	0002      	movs	r2, r0
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b25b      	sxtb	r3, r3
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff ff33 	bl	8002ea8 <__NVIC_EnableIRQ>
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff ffaf 	bl	8002fb8 <SysTick_Config>
 800305a:	0003      	movs	r3, r0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e077      	b.n	8003166 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a3d      	ldr	r2, [pc, #244]	; (8003170 <HAL_DMA_Init+0x10c>)
 800307c:	4694      	mov	ip, r2
 800307e:	4463      	add	r3, ip
 8003080:	2114      	movs	r1, #20
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd f83c 	bl	8000100 <__udivsi3>
 8003088:	0003      	movs	r3, r0
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2225      	movs	r2, #37	; 0x25
 8003094:	2102      	movs	r1, #2
 8003096:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4934      	ldr	r1, [pc, #208]	; (8003174 <HAL_DMA_Init+0x110>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0018      	movs	r0, r3
 80030e2:	f000 f9c7 	bl	8003474 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	01db      	lsls	r3, r3, #7
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d102      	bne.n	80030f8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	213f      	movs	r1, #63	; 0x3f
 8003102:	400a      	ands	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800310e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d011      	beq.n	800313c <HAL_DMA_Init+0xd8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d80d      	bhi.n	800313c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f000 f9d2 	bl	80034cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	e008      	b.n	800314e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2225      	movs	r2, #37	; 0x25
 8003158:	2101      	movs	r1, #1
 800315a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	2100      	movs	r1, #0
 8003162:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	0018      	movs	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	b002      	add	sp, #8
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	bffdfff8 	.word	0xbffdfff8
 8003174:	ffff800f 	.word	0xffff800f

08003178 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e050      	b.n	800322c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2225      	movs	r2, #37	; 0x25
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d008      	beq.n	80031a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2204      	movs	r2, #4
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e041      	b.n	800322c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	210e      	movs	r1, #14
 80031b4:	438a      	bics	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	491c      	ldr	r1, [pc, #112]	; (8003234 <HAL_DMA_Abort+0xbc>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2101      	movs	r1, #1
 80031d4:	438a      	bics	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_DMA_Abort+0xc0>)
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	221c      	movs	r2, #28
 80031e2:	4013      	ands	r3, r2
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_DMA_Abort+0xc0>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320a:	490a      	ldr	r1, [pc, #40]	; (8003234 <HAL_DMA_Abort+0xbc>)
 800320c:	400a      	ands	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003218:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2225      	movs	r2, #37	; 0x25
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2224      	movs	r2, #36	; 0x24
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}
 8003234:	fffffeff 	.word	0xfffffeff
 8003238:	40020000 	.word	0x40020000

0800323c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	210f      	movs	r1, #15
 8003246:	187b      	adds	r3, r7, r1
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2225      	movs	r2, #37	; 0x25
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d006      	beq.n	8003266 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2204      	movs	r2, #4
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2201      	movs	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	e049      	b.n	80032fa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	210e      	movs	r1, #14
 8003272:	438a      	bics	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	438a      	bics	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	491d      	ldr	r1, [pc, #116]	; (8003308 <HAL_DMA_Abort_IT+0xcc>)
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_DMA_Abort_IT+0xd0>)
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	221c      	movs	r2, #28
 80032a0:	4013      	ands	r3, r2
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_DMA_Abort_IT+0xd0>)
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	490f      	ldr	r1, [pc, #60]	; (8003308 <HAL_DMA_Abort_IT+0xcc>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80032d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2225      	movs	r2, #37	; 0x25
 80032dc:	2101      	movs	r1, #1
 80032de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	2100      	movs	r1, #0
 80032e6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	0010      	movs	r0, r2
 80032f8:	4798      	blx	r3
    }
  }
  return status;
 80032fa:	230f      	movs	r3, #15
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	781b      	ldrb	r3, [r3, #0]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}
 8003308:	fffffeff 	.word	0xfffffeff
 800330c:	40020000 	.word	0x40020000

08003310 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003318:	4b55      	ldr	r3, [pc, #340]	; (8003470 <HAL_DMA_IRQHandler+0x160>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	221c      	movs	r2, #28
 800332c:	4013      	ands	r3, r2
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	0013      	movs	r3, r2
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	d027      	beq.n	800338a <HAL_DMA_IRQHandler+0x7a>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2204      	movs	r2, #4
 800333e:	4013      	ands	r3, r2
 8003340:	d023      	beq.n	800338a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2220      	movs	r2, #32
 800334a:	4013      	ands	r3, r2
 800334c:	d107      	bne.n	800335e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2104      	movs	r1, #4
 800335a:	438a      	bics	r2, r1
 800335c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <HAL_DMA_IRQHandler+0x160>)
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	221c      	movs	r2, #28
 8003368:	4013      	ands	r3, r2
 800336a:	2204      	movs	r2, #4
 800336c:	409a      	lsls	r2, r3
 800336e:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_DMA_IRQHandler+0x160>)
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	2b00      	cmp	r3, #0
 800337a:	d100      	bne.n	800337e <HAL_DMA_IRQHandler+0x6e>
 800337c:	e073      	b.n	8003466 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	0010      	movs	r0, r2
 8003386:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003388:	e06d      	b.n	8003466 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	221c      	movs	r2, #28
 8003390:	4013      	ands	r3, r2
 8003392:	2202      	movs	r2, #2
 8003394:	409a      	lsls	r2, r3
 8003396:	0013      	movs	r3, r2
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	d02e      	beq.n	80033fc <HAL_DMA_IRQHandler+0xec>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2202      	movs	r2, #2
 80033a2:	4013      	ands	r3, r2
 80033a4:	d02a      	beq.n	80033fc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2220      	movs	r2, #32
 80033ae:	4013      	ands	r3, r2
 80033b0:	d10b      	bne.n	80033ca <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	210a      	movs	r1, #10
 80033be:	438a      	bics	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2225      	movs	r2, #37	; 0x25
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_DMA_IRQHandler+0x160>)
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	221c      	movs	r2, #28
 80033d4:	4013      	ands	r3, r2
 80033d6:	2202      	movs	r2, #2
 80033d8:	409a      	lsls	r2, r3
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <HAL_DMA_IRQHandler+0x160>)
 80033dc:	430a      	orrs	r2, r1
 80033de:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03a      	beq.n	8003466 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	0010      	movs	r0, r2
 80033f8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80033fa:	e034      	b.n	8003466 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	221c      	movs	r2, #28
 8003402:	4013      	ands	r3, r2
 8003404:	2208      	movs	r2, #8
 8003406:	409a      	lsls	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	d02b      	beq.n	8003468 <HAL_DMA_IRQHandler+0x158>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2208      	movs	r2, #8
 8003414:	4013      	ands	r3, r2
 8003416:	d027      	beq.n	8003468 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	210e      	movs	r1, #14
 8003424:	438a      	bics	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_DMA_IRQHandler+0x160>)
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	221c      	movs	r2, #28
 8003432:	4013      	ands	r3, r2
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_DMA_IRQHandler+0x160>)
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2225      	movs	r2, #37	; 0x25
 8003448:	2101      	movs	r1, #1
 800344a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	0010      	movs	r0, r2
 8003464:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46c0      	nop			; (mov r8, r8)
}
 800346a:	46bd      	mov	sp, r7
 800346c:	b004      	add	sp, #16
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40020000 	.word	0x40020000

08003474 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003484:	4694      	mov	ip, r2
 8003486:	4463      	add	r3, ip
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	001a      	movs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	001a      	movs	r2, r3
 8003496:	23ff      	movs	r3, #255	; 0xff
 8003498:	4013      	ands	r3, r2
 800349a:	3b08      	subs	r3, #8
 800349c:	2114      	movs	r1, #20
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fc fe2e 	bl	8000100 <__udivsi3>
 80034a4:	0003      	movs	r3, r0
 80034a6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80034ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	221f      	movs	r2, #31
 80034b2:	4013      	ands	r3, r2
 80034b4:	2201      	movs	r2, #1
 80034b6:	409a      	lsls	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b004      	add	sp, #16
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	10008200 	.word	0x10008200
 80034c8:	40020880 	.word	0x40020880

080034cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	223f      	movs	r2, #63	; 0x3f
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a0a      	ldr	r2, [pc, #40]	; (800350c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034e2:	4694      	mov	ip, r2
 80034e4:	4463      	add	r3, ip
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	001a      	movs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	4013      	ands	r3, r2
 80034fc:	2201      	movs	r2, #1
 80034fe:	409a      	lsls	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b004      	add	sp, #16
 800350a:	bd80      	pop	{r7, pc}
 800350c:	1000823f 	.word	0x1000823f
 8003510:	40020940 	.word	0x40020940

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003522:	e147      	b.n	80037b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4091      	lsls	r1, r2
 800352e:	000a      	movs	r2, r1
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d100      	bne.n	800353c <HAL_GPIO_Init+0x28>
 800353a:	e138      	b.n	80037ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2203      	movs	r2, #3
 8003542:	4013      	ands	r3, r2
 8003544:	2b01      	cmp	r3, #1
 8003546:	d005      	beq.n	8003554 <HAL_GPIO_Init+0x40>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	4013      	ands	r3, r2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d130      	bne.n	80035b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	409a      	lsls	r2, r3
 8003562:	0013      	movs	r3, r2
 8003564:	43da      	mvns	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	0013      	movs	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358a:	2201      	movs	r2, #1
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
 8003590:	0013      	movs	r3, r2
 8003592:	43da      	mvns	r2, r3
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	091b      	lsrs	r3, r3, #4
 80035a0:	2201      	movs	r2, #1
 80035a2:	401a      	ands	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2203      	movs	r2, #3
 80035bc:	4013      	ands	r3, r2
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d017      	beq.n	80035f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	43da      	mvns	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d123      	bne.n	8003646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	58d3      	ldr	r3, [r2, r3]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2207      	movs	r2, #7
 8003610:	4013      	ands	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	409a      	lsls	r2, r3
 8003618:	0013      	movs	r3, r2
 800361a:	43da      	mvns	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2107      	movs	r1, #7
 800362a:	400b      	ands	r3, r1
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	409a      	lsls	r2, r3
 8003630:	0013      	movs	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	43da      	mvns	r2, r3
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2203      	movs	r2, #3
 8003664:	401a      	ands	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	0013      	movs	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	23c0      	movs	r3, #192	; 0xc0
 8003680:	029b      	lsls	r3, r3, #10
 8003682:	4013      	ands	r3, r2
 8003684:	d100      	bne.n	8003688 <HAL_GPIO_Init+0x174>
 8003686:	e092      	b.n	80037ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	089b      	lsrs	r3, r3, #2
 800368e:	3318      	adds	r3, #24
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	589b      	ldr	r3, [r3, r2]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2203      	movs	r2, #3
 800369a:	4013      	ands	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	220f      	movs	r2, #15
 80036a0:	409a      	lsls	r2, r3
 80036a2:	0013      	movs	r3, r2
 80036a4:	43da      	mvns	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	23a0      	movs	r3, #160	; 0xa0
 80036b0:	05db      	lsls	r3, r3, #23
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d013      	beq.n	80036de <HAL_GPIO_Init+0x1ca>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a45      	ldr	r2, [pc, #276]	; (80037d0 <HAL_GPIO_Init+0x2bc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00d      	beq.n	80036da <HAL_GPIO_Init+0x1c6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a44      	ldr	r2, [pc, #272]	; (80037d4 <HAL_GPIO_Init+0x2c0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <HAL_GPIO_Init+0x1c2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a43      	ldr	r2, [pc, #268]	; (80037d8 <HAL_GPIO_Init+0x2c4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_GPIO_Init+0x1be>
 80036ce:	2303      	movs	r3, #3
 80036d0:	e006      	b.n	80036e0 <HAL_GPIO_Init+0x1cc>
 80036d2:	2305      	movs	r3, #5
 80036d4:	e004      	b.n	80036e0 <HAL_GPIO_Init+0x1cc>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e002      	b.n	80036e0 <HAL_GPIO_Init+0x1cc>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_GPIO_Init+0x1cc>
 80036de:	2300      	movs	r3, #0
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	2103      	movs	r1, #3
 80036e4:	400a      	ands	r2, r1
 80036e6:	00d2      	lsls	r2, r2, #3
 80036e8:	4093      	lsls	r3, r2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036f0:	4936      	ldr	r1, [pc, #216]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3318      	adds	r3, #24
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036fe:	4a33      	ldr	r2, [pc, #204]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	58d3      	ldr	r3, [r2, r3]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43da      	mvns	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	025b      	lsls	r3, r3, #9
 8003718:	4013      	ands	r3, r2
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003724:	4929      	ldr	r1, [pc, #164]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800372c:	4a27      	ldr	r2, [pc, #156]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 800372e:	2384      	movs	r3, #132	; 0x84
 8003730:	58d3      	ldr	r3, [r2, r3]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43da      	mvns	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	029b      	lsls	r3, r3, #10
 8003746:	4013      	ands	r3, r2
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003752:	491e      	ldr	r1, [pc, #120]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 8003754:	2284      	movs	r2, #132	; 0x84
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800375a:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43da      	mvns	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	035b      	lsls	r3, r3, #13
 8003772:	4013      	ands	r3, r2
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43da      	mvns	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	039b      	lsls	r3, r3, #14
 800379c:	4013      	ands	r3, r2
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_GPIO_Init+0x2b8>)
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	40da      	lsrs	r2, r3
 80037bc:	1e13      	subs	r3, r2, #0
 80037be:	d000      	beq.n	80037c2 <HAL_GPIO_Init+0x2ae>
 80037c0:	e6b0      	b.n	8003524 <HAL_GPIO_Init+0x10>
  }
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b006      	add	sp, #24
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021800 	.word	0x40021800
 80037d0:	50000400 	.word	0x50000400
 80037d4:	50000800 	.word	0x50000800
 80037d8:	50000c00 	.word	0x50000c00

080037dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	0008      	movs	r0, r1
 80037e6:	0011      	movs	r1, r2
 80037e8:	1cbb      	adds	r3, r7, #2
 80037ea:	1c02      	adds	r2, r0, #0
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	1c7b      	adds	r3, r7, #1
 80037f0:	1c0a      	adds	r2, r1, #0
 80037f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f4:	1c7b      	adds	r3, r7, #1
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fc:	1cbb      	adds	r3, r7, #2
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003804:	e003      	b.n	800380e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003806:	1cbb      	adds	r3, r7, #2
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b002      	add	sp, #8
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	000a      	movs	r2, r1
 8003820:	1cbb      	adds	r3, r7, #2
 8003822:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800382a:	1cbb      	adds	r3, r7, #2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	041a      	lsls	r2, r3, #16
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	1cb9      	adds	r1, r7, #2
 800383a:	8809      	ldrh	r1, [r1, #0]
 800383c:	400b      	ands	r3, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	619a      	str	r2, [r3, #24]
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b004      	add	sp, #16
 800384a:	bd80      	pop	{r7, pc}

0800384c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	23e0      	movs	r3, #224	; 0xe0
 8003856:	01db      	lsls	r3, r3, #7
 8003858:	4013      	ands	r3, r2
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021000 	.word	0x40021000

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800386a:	4b3c      	ldr	r3, [pc, #240]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2238      	movs	r2, #56	; 0x38
 8003870:	4013      	ands	r3, r2
 8003872:	d10f      	bne.n	8003894 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003874:	4b39      	ldr	r3, [pc, #228]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0adb      	lsrs	r3, r3, #11
 800387a:	2207      	movs	r2, #7
 800387c:	4013      	ands	r3, r2
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	0013      	movs	r3, r2
 8003884:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	4835      	ldr	r0, [pc, #212]	; (8003960 <HAL_RCC_GetSysClockFreq+0xfc>)
 800388a:	f7fc fc39 	bl	8000100 <__udivsi3>
 800388e:	0003      	movs	r3, r0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e05d      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2238      	movs	r2, #56	; 0x38
 800389a:	4013      	ands	r3, r2
 800389c:	2b08      	cmp	r3, #8
 800389e:	d102      	bne.n	80038a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCC_GetSysClockFreq+0x100>)
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e054      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a6:	4b2d      	ldr	r3, [pc, #180]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2238      	movs	r2, #56	; 0x38
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d138      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038b2:	4b2a      	ldr	r3, [pc, #168]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2203      	movs	r2, #3
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	2207      	movs	r2, #7
 80038c4:	4013      	ands	r3, r2
 80038c6:	3301      	adds	r3, #1
 80038c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d10d      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	4824      	ldr	r0, [pc, #144]	; (8003964 <HAL_RCC_GetSysClockFreq+0x100>)
 80038d4:	f7fc fc14 	bl	8000100 <__udivsi3>
 80038d8:	0003      	movs	r3, r0
 80038da:	0019      	movs	r1, r3
 80038dc:	4b1f      	ldr	r3, [pc, #124]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	227f      	movs	r2, #127	; 0x7f
 80038e4:	4013      	ands	r3, r2
 80038e6:	434b      	muls	r3, r1
 80038e8:	617b      	str	r3, [r7, #20]
        break;
 80038ea:	e00d      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	481c      	ldr	r0, [pc, #112]	; (8003960 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038f0:	f7fc fc06 	bl	8000100 <__udivsi3>
 80038f4:	0003      	movs	r3, r0
 80038f6:	0019      	movs	r1, r3
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	0a1b      	lsrs	r3, r3, #8
 80038fe:	227f      	movs	r2, #127	; 0x7f
 8003900:	4013      	ands	r3, r2
 8003902:	434b      	muls	r3, r1
 8003904:	617b      	str	r3, [r7, #20]
        break;
 8003906:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0f5b      	lsrs	r3, r3, #29
 800390e:	2207      	movs	r2, #7
 8003910:	4013      	ands	r3, r2
 8003912:	3301      	adds	r3, #1
 8003914:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	6978      	ldr	r0, [r7, #20]
 800391a:	f7fc fbf1 	bl	8000100 <__udivsi3>
 800391e:	0003      	movs	r3, r0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	e015      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003924:	4b0d      	ldr	r3, [pc, #52]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2238      	movs	r2, #56	; 0x38
 800392a:	4013      	ands	r3, r2
 800392c:	2b20      	cmp	r3, #32
 800392e:	d103      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	e00b      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_RCC_GetSysClockFreq+0xf8>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2238      	movs	r2, #56	; 0x38
 800393e:	4013      	ands	r3, r2
 8003940:	2b18      	cmp	r3, #24
 8003942:	d103      	bne.n	800394c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003944:	23fa      	movs	r3, #250	; 0xfa
 8003946:	01db      	lsls	r3, r3, #7
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	e001      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003950:	693b      	ldr	r3, [r7, #16]
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b006      	add	sp, #24
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	40021000 	.word	0x40021000
 8003960:	00f42400 	.word	0x00f42400
 8003964:	007a1200 	.word	0x007a1200

08003968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800396c:	4b02      	ldr	r3, [pc, #8]	; (8003978 <HAL_RCC_GetHCLKFreq+0x10>)
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	20000004 	.word	0x20000004

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003980:	f7ff fff2 	bl	8003968 <HAL_RCC_GetHCLKFreq>
 8003984:	0004      	movs	r4, r0
 8003986:	f7ff ff61 	bl	800384c <LL_RCC_GetAPB1Prescaler>
 800398a:	0003      	movs	r3, r0
 800398c:	0b1a      	lsrs	r2, r3, #12
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	58d3      	ldr	r3, [r2, r3]
 8003994:	221f      	movs	r2, #31
 8003996:	4013      	ands	r3, r2
 8003998:	40dc      	lsrs	r4, r3
 800399a:	0023      	movs	r3, r4
}
 800399c:	0018      	movs	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	bdb0      	pop	{r4, r5, r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	080083bc 	.word	0x080083bc

080039a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039b0:	2313      	movs	r3, #19
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039b8:	2312      	movs	r3, #18
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	029b      	lsls	r3, r3, #10
 80039c8:	4013      	ands	r3, r2
 80039ca:	d100      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80039cc:	e0a3      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2011      	movs	r0, #17
 80039d0:	183b      	adds	r3, r7, r0
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d6:	4b86      	ldr	r3, [pc, #536]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	055b      	lsls	r3, r3, #21
 80039de:	4013      	ands	r3, r2
 80039e0:	d110      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e2:	4b83      	ldr	r3, [pc, #524]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e6:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	0549      	lsls	r1, r1, #21
 80039ec:	430a      	orrs	r2, r1
 80039ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80039f0:	4b7f      	ldr	r3, [pc, #508]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	055b      	lsls	r3, r3, #21
 80039f8:	4013      	ands	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fe:	183b      	adds	r3, r7, r0
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a04:	4b7b      	ldr	r3, [pc, #492]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	0049      	lsls	r1, r1, #1
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a12:	f7ff fa05 	bl	8002e20 <HAL_GetTick>
 8003a16:	0003      	movs	r3, r0
 8003a18:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1c:	f7ff fa00 	bl	8002e20 <HAL_GetTick>
 8003a20:	0002      	movs	r2, r0
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d904      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a2a:	2313      	movs	r3, #19
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2203      	movs	r2, #3
 8003a30:	701a      	strb	r2, [r3, #0]
        break;
 8003a32:	e005      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d0ed      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a40:	2313      	movs	r3, #19
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d154      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a4a:	4b69      	ldr	r3, [pc, #420]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a4e:	23c0      	movs	r3, #192	; 0xc0
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4013      	ands	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d019      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d014      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	4a63      	ldr	r2, [pc, #396]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a70:	4b5f      	ldr	r3, [pc, #380]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a74:	4b5e      	ldr	r3, [pc, #376]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	0249      	lsls	r1, r1, #9
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a82:	4b5b      	ldr	r3, [pc, #364]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a84:	495d      	ldr	r1, [pc, #372]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a86:	400a      	ands	r2, r1
 8003a88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2201      	movs	r2, #1
 8003a94:	4013      	ands	r3, r2
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7ff f9c2 	bl	8002e20 <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aa0:	e00c      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7ff f9bd 	bl	8002e20 <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d904      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003ab2:	2313      	movs	r3, #19
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	701a      	strb	r2, [r3, #0]
            break;
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d0ed      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003ac6:	2313      	movs	r3, #19
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad0:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	4a48      	ldr	r2, [pc, #288]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	0019      	movs	r1, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	4b44      	ldr	r3, [pc, #272]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ae4:	e00c      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ae6:	2312      	movs	r3, #18
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	2213      	movs	r2, #19
 8003aec:	18ba      	adds	r2, r7, r2
 8003aee:	7812      	ldrb	r2, [r2, #0]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e005      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	2312      	movs	r3, #18
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2213      	movs	r2, #19
 8003afa:	18ba      	adds	r2, r7, r2
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b00:	2311      	movs	r3, #17
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b10:	493c      	ldr	r1, [pc, #240]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b20:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	2203      	movs	r2, #3
 8003b26:	4393      	bics	r3, r2
 8003b28:	0019      	movs	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	220c      	movs	r2, #12
 8003b44:	4393      	bics	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2220      	movs	r2, #32
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d009      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	01db      	lsls	r3, r3, #7
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d015      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	0899      	lsrs	r1, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	05db      	lsls	r3, r3, #23
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ba0:	2180      	movs	r1, #128	; 0x80
 8003ba2:	0249      	lsls	r1, r1, #9
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d016      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	2380      	movs	r3, #128	; 0x80
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	0249      	lsls	r1, r1, #9
 8003bde:	430a      	orrs	r2, r1
 8003be0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003be2:	2312      	movs	r3, #18
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	781b      	ldrb	r3, [r3, #0]
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b006      	add	sp, #24
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	fffffcff 	.word	0xfffffcff
 8003bfc:	fffeffff 	.word	0xfffeffff
 8003c00:	00001388 	.word	0x00001388
 8003c04:	efffffff 	.word	0xefffffff
 8003c08:	ffffcfff 	.word	0xffffcfff
 8003c0c:	ffff3fff 	.word	0xffff3fff

08003c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e04a      	b.n	8003cb8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	223d      	movs	r2, #61	; 0x3d
 8003c26:	5c9b      	ldrb	r3, [r3, r2]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	223c      	movs	r2, #60	; 0x3c
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f7fe fe83 	bl	8002944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	223d      	movs	r2, #61	; 0x3d
 8003c42:	2102      	movs	r1, #2
 8003c44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	0019      	movs	r1, r3
 8003c50:	0010      	movs	r0, r2
 8003c52:	f000 fa0f 	bl	8004074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2248      	movs	r2, #72	; 0x48
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	223e      	movs	r2, #62	; 0x3e
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	223f      	movs	r2, #63	; 0x3f
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2240      	movs	r2, #64	; 0x40
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2241      	movs	r2, #65	; 0x41
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2242      	movs	r2, #66	; 0x42
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2243      	movs	r2, #67	; 0x43
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2244      	movs	r2, #68	; 0x44
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2245      	movs	r2, #69	; 0x45
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2246      	movs	r2, #70	; 0x46
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2247      	movs	r2, #71	; 0x47
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	223d      	movs	r2, #61	; 0x3d
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d108      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x22>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	223e      	movs	r2, #62	; 0x3e
 8003cd4:	5c9b      	ldrb	r3, [r3, r2]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	1e5a      	subs	r2, r3, #1
 8003cdc:	4193      	sbcs	r3, r2
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	e037      	b.n	8003d52 <HAL_TIM_PWM_Start+0x92>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d108      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x3a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	223f      	movs	r2, #63	; 0x3f
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	1e5a      	subs	r2, r3, #1
 8003cf4:	4193      	sbcs	r3, r2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e02b      	b.n	8003d52 <HAL_TIM_PWM_Start+0x92>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d108      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x52>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2240      	movs	r2, #64	; 0x40
 8003d04:	5c9b      	ldrb	r3, [r3, r2]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	4193      	sbcs	r3, r2
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e01f      	b.n	8003d52 <HAL_TIM_PWM_Start+0x92>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	d108      	bne.n	8003d2a <HAL_TIM_PWM_Start+0x6a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2241      	movs	r2, #65	; 0x41
 8003d1c:	5c9b      	ldrb	r3, [r3, r2]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	4193      	sbcs	r3, r2
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e013      	b.n	8003d52 <HAL_TIM_PWM_Start+0x92>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d108      	bne.n	8003d42 <HAL_TIM_PWM_Start+0x82>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2242      	movs	r2, #66	; 0x42
 8003d34:	5c9b      	ldrb	r3, [r3, r2]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	1e5a      	subs	r2, r3, #1
 8003d3c:	4193      	sbcs	r3, r2
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	e007      	b.n	8003d52 <HAL_TIM_PWM_Start+0x92>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2243      	movs	r2, #67	; 0x43
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	4193      	sbcs	r3, r2
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e085      	b.n	8003e66 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_PWM_Start+0xaa>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	223e      	movs	r2, #62	; 0x3e
 8003d64:	2102      	movs	r1, #2
 8003d66:	5499      	strb	r1, [r3, r2]
 8003d68:	e023      	b.n	8003db2 <HAL_TIM_PWM_Start+0xf2>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_PWM_Start+0xba>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	223f      	movs	r2, #63	; 0x3f
 8003d74:	2102      	movs	r1, #2
 8003d76:	5499      	strb	r1, [r3, r2]
 8003d78:	e01b      	b.n	8003db2 <HAL_TIM_PWM_Start+0xf2>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_PWM_Start+0xca>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	2102      	movs	r1, #2
 8003d86:	5499      	strb	r1, [r3, r2]
 8003d88:	e013      	b.n	8003db2 <HAL_TIM_PWM_Start+0xf2>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d104      	bne.n	8003d9a <HAL_TIM_PWM_Start+0xda>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2241      	movs	r2, #65	; 0x41
 8003d94:	2102      	movs	r1, #2
 8003d96:	5499      	strb	r1, [r3, r2]
 8003d98:	e00b      	b.n	8003db2 <HAL_TIM_PWM_Start+0xf2>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_PWM_Start+0xea>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2242      	movs	r2, #66	; 0x42
 8003da4:	2102      	movs	r1, #2
 8003da6:	5499      	strb	r1, [r3, r2]
 8003da8:	e003      	b.n	8003db2 <HAL_TIM_PWM_Start+0xf2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2243      	movs	r2, #67	; 0x43
 8003dae:	2102      	movs	r1, #2
 8003db0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6839      	ldr	r1, [r7, #0]
 8003db8:	2201      	movs	r2, #1
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fc94 	bl	80046e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <HAL_TIM_PWM_Start+0x1b0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_TIM_PWM_Start+0x128>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <HAL_TIM_PWM_Start+0x1b4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_TIM_PWM_Start+0x128>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <HAL_TIM_PWM_Start+0x1b8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIM_PWM_Start+0x128>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a26      	ldr	r2, [pc, #152]	; (8003e7c <HAL_TIM_PWM_Start+0x1bc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d101      	bne.n	8003dec <HAL_TIM_PWM_Start+0x12c>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_TIM_PWM_Start+0x12e>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	0209      	lsls	r1, r1, #8
 8003e00:	430a      	orrs	r2, r1
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a19      	ldr	r2, [pc, #100]	; (8003e70 <HAL_TIM_PWM_Start+0x1b0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_TIM_PWM_Start+0x162>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_TIM_PWM_Start+0x1c0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_TIM_PWM_Start+0x162>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <HAL_TIM_PWM_Start+0x1b4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d116      	bne.n	8003e50 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <HAL_TIM_PWM_Start+0x1c4>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b06      	cmp	r3, #6
 8003e32:	d016      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x1a2>
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	025b      	lsls	r3, r3, #9
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d011      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4e:	e008      	b.n	8003e62 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e000      	b.n	8003e64 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e62:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800
 8003e80:	40000400 	.word	0x40000400
 8003e84:	00010007 	.word	0x00010007

08003e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	223c      	movs	r2, #60	; 0x3c
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0df      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	223c      	movs	r2, #60	; 0x3c
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b14      	cmp	r3, #20
 8003eae:	d900      	bls.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003eb0:	e0d1      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	009a      	lsls	r2, r3, #2
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	; (800406c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	0011      	movs	r1, r2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 f94a 	bl	8004160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2108      	movs	r1, #8
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2104      	movs	r1, #4
 8003ee8:	438a      	bics	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	619a      	str	r2, [r3, #24]
      break;
 8003efe:	e0ab      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	0011      	movs	r1, r2
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 f9b3 	bl	8004274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	0109      	lsls	r1, r1, #4
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4951      	ldr	r1, [pc, #324]	; (8004070 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6999      	ldr	r1, [r3, #24]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	619a      	str	r2, [r3, #24]
      break;
 8003f44:	e088      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	0011      	movs	r1, r2
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fa14 	bl	800437c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2108      	movs	r1, #8
 8003f60:	430a      	orrs	r2, r1
 8003f62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2104      	movs	r1, #4
 8003f70:	438a      	bics	r2, r1
 8003f72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69d9      	ldr	r1, [r3, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
      break;
 8003f86:	e067      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	0011      	movs	r1, r2
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 fa7b 	bl	800448c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	0109      	lsls	r1, r1, #4
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	492f      	ldr	r1, [pc, #188]	; (8004070 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69d9      	ldr	r1, [r3, #28]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	61da      	str	r2, [r3, #28]
      break;
 8003fcc:	e044      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 fac2 	bl	8004560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2108      	movs	r1, #8
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800400e:	e023      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	0011      	movs	r1, r2
 8004018:	0018      	movs	r0, r3
 800401a:	f000 fb01 	bl	8004620 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	0109      	lsls	r1, r1, #4
 800402c:	430a      	orrs	r2, r1
 800402e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	490d      	ldr	r1, [pc, #52]	; (8004070 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800403c:	400a      	ands	r2, r1
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004054:	e000      	b.n	8004058 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8004056:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	223c      	movs	r2, #60	; 0x3c
 800405c:	2100      	movs	r1, #0
 800405e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	080083dc 	.word	0x080083dc
 8004070:	fffffbff 	.word	0xfffffbff

08004074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <TIM_Base_SetConfig+0xd0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x20>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a2e      	ldr	r2, [pc, #184]	; (8004148 <TIM_Base_SetConfig+0xd4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2270      	movs	r2, #112	; 0x70
 8004098:	4393      	bics	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a26      	ldr	r2, [pc, #152]	; (8004144 <TIM_Base_SetConfig+0xd0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d013      	beq.n	80040d6 <TIM_Base_SetConfig+0x62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a25      	ldr	r2, [pc, #148]	; (8004148 <TIM_Base_SetConfig+0xd4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00f      	beq.n	80040d6 <TIM_Base_SetConfig+0x62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a24      	ldr	r2, [pc, #144]	; (800414c <TIM_Base_SetConfig+0xd8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00b      	beq.n	80040d6 <TIM_Base_SetConfig+0x62>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a23      	ldr	r2, [pc, #140]	; (8004150 <TIM_Base_SetConfig+0xdc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <TIM_Base_SetConfig+0x62>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <TIM_Base_SetConfig+0xe0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_Base_SetConfig+0x62>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <TIM_Base_SetConfig+0xe4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d108      	bne.n	80040e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <TIM_Base_SetConfig+0xe8>)
 80040da:	4013      	ands	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	4393      	bics	r3, r2
 80040ee:	001a      	movs	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <TIM_Base_SetConfig+0xd0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00b      	beq.n	800412e <TIM_Base_SetConfig+0xba>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <TIM_Base_SetConfig+0xdc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d007      	beq.n	800412e <TIM_Base_SetConfig+0xba>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <TIM_Base_SetConfig+0xe0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d003      	beq.n	800412e <TIM_Base_SetConfig+0xba>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <TIM_Base_SetConfig+0xe4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d103      	bne.n	8004136 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	615a      	str	r2, [r3, #20]
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40002000 	.word	0x40002000
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800
 800415c:	fffffcff 	.word	0xfffffcff

08004160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	2201      	movs	r2, #1
 8004170:	4393      	bics	r3, r2
 8004172:	001a      	movs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a32      	ldr	r2, [pc, #200]	; (8004258 <TIM_OC1_SetConfig+0xf8>)
 800418e:	4013      	ands	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2203      	movs	r2, #3
 8004196:	4393      	bics	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2202      	movs	r2, #2
 80041a8:	4393      	bics	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a28      	ldr	r2, [pc, #160]	; (800425c <TIM_OC1_SetConfig+0xfc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <TIM_OC1_SetConfig+0x76>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a27      	ldr	r2, [pc, #156]	; (8004260 <TIM_OC1_SetConfig+0x100>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <TIM_OC1_SetConfig+0x76>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a26      	ldr	r2, [pc, #152]	; (8004264 <TIM_OC1_SetConfig+0x104>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_OC1_SetConfig+0x76>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <TIM_OC1_SetConfig+0x108>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10c      	bne.n	80041f0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2208      	movs	r2, #8
 80041da:	4393      	bics	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2204      	movs	r2, #4
 80041ec:	4393      	bics	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a1a      	ldr	r2, [pc, #104]	; (800425c <TIM_OC1_SetConfig+0xfc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00b      	beq.n	8004210 <TIM_OC1_SetConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a19      	ldr	r2, [pc, #100]	; (8004260 <TIM_OC1_SetConfig+0x100>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_OC1_SetConfig+0xb0>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a18      	ldr	r2, [pc, #96]	; (8004264 <TIM_OC1_SetConfig+0x104>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC1_SetConfig+0xb0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <TIM_OC1_SetConfig+0x108>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d111      	bne.n	8004234 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4a16      	ldr	r2, [pc, #88]	; (800426c <TIM_OC1_SetConfig+0x10c>)
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <TIM_OC1_SetConfig+0x110>)
 800421c:	4013      	ands	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b006      	add	sp, #24
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	fffeff8f 	.word	0xfffeff8f
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800
 800426c:	fffffeff 	.word	0xfffffeff
 8004270:	fffffdff 	.word	0xfffffdff

08004274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	2210      	movs	r2, #16
 8004284:	4393      	bics	r3, r2
 8004286:	001a      	movs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a2e      	ldr	r2, [pc, #184]	; (800435c <TIM_OC2_SetConfig+0xe8>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <TIM_OC2_SetConfig+0xec>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2220      	movs	r2, #32
 80042be:	4393      	bics	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a24      	ldr	r2, [pc, #144]	; (8004364 <TIM_OC2_SetConfig+0xf0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10d      	bne.n	80042f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	4393      	bics	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2240      	movs	r2, #64	; 0x40
 80042ee:	4393      	bics	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <TIM_OC2_SetConfig+0xf0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_OC2_SetConfig+0x9e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <TIM_OC2_SetConfig+0xf4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_OC2_SetConfig+0x9e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <TIM_OC2_SetConfig+0xf8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC2_SetConfig+0x9e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <TIM_OC2_SetConfig+0xfc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4a17      	ldr	r2, [pc, #92]	; (8004374 <TIM_OC2_SetConfig+0x100>)
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <TIM_OC2_SetConfig+0x104>)
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}
 800435c:	feff8fff 	.word	0xfeff8fff
 8004360:	fffffcff 	.word	0xfffffcff
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800
 8004374:	fffffbff 	.word	0xfffffbff
 8004378:	fffff7ff 	.word	0xfffff7ff

0800437c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4a35      	ldr	r2, [pc, #212]	; (8004460 <TIM_OC3_SetConfig+0xe4>)
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a2f      	ldr	r2, [pc, #188]	; (8004464 <TIM_OC3_SetConfig+0xe8>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2203      	movs	r2, #3
 80043b0:	4393      	bics	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4a29      	ldr	r2, [pc, #164]	; (8004468 <TIM_OC3_SetConfig+0xec>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a25      	ldr	r2, [pc, #148]	; (800446c <TIM_OC3_SetConfig+0xf0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d10d      	bne.n	80043f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4a24      	ldr	r2, [pc, #144]	; (8004470 <TIM_OC3_SetConfig+0xf4>)
 80043de:	4013      	ands	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4a20      	ldr	r2, [pc, #128]	; (8004474 <TIM_OC3_SetConfig+0xf8>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <TIM_OC3_SetConfig+0xf0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_OC3_SetConfig+0x9a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <TIM_OC3_SetConfig+0xfc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_OC3_SetConfig+0x9a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <TIM_OC3_SetConfig+0x100>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_OC3_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <TIM_OC3_SetConfig+0x104>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d113      	bne.n	800443e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <TIM_OC3_SetConfig+0x108>)
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4a19      	ldr	r2, [pc, #100]	; (8004488 <TIM_OC3_SetConfig+0x10c>)
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	46c0      	nop			; (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}
 8004460:	fffffeff 	.word	0xfffffeff
 8004464:	fffeff8f 	.word	0xfffeff8f
 8004468:	fffffdff 	.word	0xfffffdff
 800446c:	40012c00 	.word	0x40012c00
 8004470:	fffff7ff 	.word	0xfffff7ff
 8004474:	fffffbff 	.word	0xfffffbff
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800
 8004484:	ffffefff 	.word	0xffffefff
 8004488:	ffffdfff 	.word	0xffffdfff

0800448c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a28      	ldr	r2, [pc, #160]	; (800453c <TIM_OC4_SetConfig+0xb0>)
 800449c:	401a      	ands	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a22      	ldr	r2, [pc, #136]	; (8004540 <TIM_OC4_SetConfig+0xb4>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <TIM_OC4_SetConfig+0xb8>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <TIM_OC4_SetConfig+0xbc>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	031b      	lsls	r3, r3, #12
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a19      	ldr	r2, [pc, #100]	; (800454c <TIM_OC4_SetConfig+0xc0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_OC4_SetConfig+0x78>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a18      	ldr	r2, [pc, #96]	; (8004550 <TIM_OC4_SetConfig+0xc4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_OC4_SetConfig+0x78>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a17      	ldr	r2, [pc, #92]	; (8004554 <TIM_OC4_SetConfig+0xc8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC4_SetConfig+0x78>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a16      	ldr	r2, [pc, #88]	; (8004558 <TIM_OC4_SetConfig+0xcc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d109      	bne.n	8004518 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <TIM_OC4_SetConfig+0xd0>)
 8004508:	4013      	ands	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	019b      	lsls	r3, r3, #6
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b006      	add	sp, #24
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	ffffefff 	.word	0xffffefff
 8004540:	feff8fff 	.word	0xfeff8fff
 8004544:	fffffcff 	.word	0xfffffcff
 8004548:	ffffdfff 	.word	0xffffdfff
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40014000 	.word	0x40014000
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800
 800455c:	ffffbfff 	.word	0xffffbfff

08004560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4a25      	ldr	r2, [pc, #148]	; (8004604 <TIM_OC5_SetConfig+0xa4>)
 8004570:	401a      	ands	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <TIM_OC5_SetConfig+0xa8>)
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <TIM_OC5_SetConfig+0xac>)
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a17      	ldr	r2, [pc, #92]	; (8004610 <TIM_OC5_SetConfig+0xb0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_OC5_SetConfig+0x6e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a16      	ldr	r2, [pc, #88]	; (8004614 <TIM_OC5_SetConfig+0xb4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_OC5_SetConfig+0x6e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <TIM_OC5_SetConfig+0xb8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC5_SetConfig+0x6e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a14      	ldr	r2, [pc, #80]	; (800461c <TIM_OC5_SetConfig+0xbc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d109      	bne.n	80045e2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <TIM_OC5_SetConfig+0xa4>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b006      	add	sp, #24
 8004602:	bd80      	pop	{r7, pc}
 8004604:	fffeffff 	.word	0xfffeffff
 8004608:	fffeff8f 	.word	0xfffeff8f
 800460c:	fffdffff 	.word	0xfffdffff
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800

08004620 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <TIM_OC6_SetConfig+0xa8>)
 8004630:	401a      	ands	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4a20      	ldr	r2, [pc, #128]	; (80046cc <TIM_OC6_SetConfig+0xac>)
 800464c:	4013      	ands	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <TIM_OC6_SetConfig+0xb0>)
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	051b      	lsls	r3, r3, #20
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <TIM_OC6_SetConfig+0xb4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00b      	beq.n	8004690 <TIM_OC6_SetConfig+0x70>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <TIM_OC6_SetConfig+0xb8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d007      	beq.n	8004690 <TIM_OC6_SetConfig+0x70>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a16      	ldr	r2, [pc, #88]	; (80046dc <TIM_OC6_SetConfig+0xbc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d003      	beq.n	8004690 <TIM_OC6_SetConfig+0x70>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <TIM_OC6_SetConfig+0xc0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <TIM_OC6_SetConfig+0xc4>)
 8004694:	4013      	ands	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	029b      	lsls	r3, r3, #10
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b006      	add	sp, #24
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	ffefffff 	.word	0xffefffff
 80046cc:	feff8fff 	.word	0xfeff8fff
 80046d0:	ffdfffff 	.word	0xffdfffff
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40014400 	.word	0x40014400
 80046e0:	40014800 	.word	0x40014800
 80046e4:	fffbffff 	.word	0xfffbffff

080046e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	221f      	movs	r2, #31
 80046f8:	4013      	ands	r3, r2
 80046fa:	2201      	movs	r2, #1
 80046fc:	409a      	lsls	r2, r3
 80046fe:	0013      	movs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	43d2      	mvns	r2, r2
 800470a:	401a      	ands	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	211f      	movs	r1, #31
 8004718:	400b      	ands	r3, r1
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4099      	lsls	r1, r3
 800471e:	000b      	movs	r3, r1
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b006      	add	sp, #24
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	223c      	movs	r2, #60	; 0x3c
 800473e:	5c9b      	ldrb	r3, [r3, r2]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e04f      	b.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223c      	movs	r2, #60	; 0x3c
 800474c:	2101      	movs	r1, #1
 800474e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	223d      	movs	r2, #61	; 0x3d
 8004754:	2102      	movs	r1, #2
 8004756:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d108      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004776:	4013      	ands	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2270      	movs	r2, #112	; 0x70
 8004788:	4393      	bics	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a11      	ldr	r2, [pc, #68]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d10c      	bne.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	4393      	bics	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	223d      	movs	r2, #61	; 0x3d
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	223c      	movs	r2, #60	; 0x3c
 80047e2:	2100      	movs	r1, #0
 80047e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b004      	add	sp, #16
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	ff0fffff 	.word	0xff0fffff
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40014000 	.word	0x40014000

08004800 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	223c      	movs	r2, #60	; 0x3c
 8004812:	5c9b      	ldrb	r3, [r3, r2]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e079      	b.n	8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	223c      	movs	r2, #60	; 0x3c
 8004820:	2101      	movs	r1, #1
 8004822:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	22ff      	movs	r2, #255	; 0xff
 8004828:	4393      	bics	r3, r2
 800482a:	001a      	movs	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a38      	ldr	r2, [pc, #224]	; (8004918 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004838:	401a      	ands	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a35      	ldr	r2, [pc, #212]	; (800491c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004846:	401a      	ands	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a33      	ldr	r2, [pc, #204]	; (8004920 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004854:	401a      	ands	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a30      	ldr	r2, [pc, #192]	; (8004924 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004862:	401a      	ands	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a2e      	ldr	r2, [pc, #184]	; (8004928 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004870:	401a      	ands	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a2b      	ldr	r2, [pc, #172]	; (800492c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800487e:	401a      	ands	r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a29      	ldr	r2, [pc, #164]	; (8004930 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800488c:	401a      	ands	r2, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d106      	bne.n	80048b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80048a6:	401a      	ands	r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d121      	bne.n	80048fe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a1f      	ldr	r2, [pc, #124]	; (800493c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80048be:	401a      	ands	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	051b      	lsls	r3, r3, #20
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80048ce:	401a      	ands	r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80048dc:	401a      	ands	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d106      	bne.n	80048fe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80048f4:	401a      	ands	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	223c      	movs	r2, #60	; 0x3c
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}
 8004918:	fffffcff 	.word	0xfffffcff
 800491c:	fffffbff 	.word	0xfffffbff
 8004920:	fffff7ff 	.word	0xfffff7ff
 8004924:	ffffefff 	.word	0xffffefff
 8004928:	ffffdfff 	.word	0xffffdfff
 800492c:	ffffbfff 	.word	0xffffbfff
 8004930:	fff0ffff 	.word	0xfff0ffff
 8004934:	40012c00 	.word	0x40012c00
 8004938:	efffffff 	.word	0xefffffff
 800493c:	ff0fffff 	.word	0xff0fffff
 8004940:	feffffff 	.word	0xfeffffff
 8004944:	fdffffff 	.word	0xfdffffff
 8004948:	dfffffff 	.word	0xdfffffff

0800494c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e046      	b.n	80049ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2284      	movs	r2, #132	; 0x84
 8004962:	589b      	ldr	r3, [r3, r2]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	2100      	movs	r1, #0
 800496e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	0018      	movs	r0, r3
 8004974:	f7fe f874 	bl	8002a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2284      	movs	r2, #132	; 0x84
 800497c:	2124      	movs	r1, #36	; 0x24
 800497e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2101      	movs	r1, #1
 800498c:	438a      	bics	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0018      	movs	r0, r3
 8004994:	f000 fc74 	bl	8005280 <UART_SetConfig>
 8004998:	0003      	movs	r3, r0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e024      	b.n	80049ec <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 fe0d 	bl	80055cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	490d      	ldr	r1, [pc, #52]	; (80049f4 <HAL_UART_Init+0xa8>)
 80049be:	400a      	ands	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	212a      	movs	r1, #42	; 0x2a
 80049ce:	438a      	bics	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2101      	movs	r1, #1
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 fea5 	bl	8005734 <UART_CheckIdleState>
 80049ea:	0003      	movs	r3, r0
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b002      	add	sp, #8
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	ffffb7ff 	.word	0xffffb7ff

080049f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	1dbb      	adds	r3, r7, #6
 8004a06:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2284      	movs	r2, #132	; 0x84
 8004a0c:	589b      	ldr	r3, [r3, r2]
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d000      	beq.n	8004a14 <HAL_UART_Transmit+0x1c>
 8004a12:	e097      	b.n	8004b44 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_UART_Transmit+0x2a>
 8004a1a:	1dbb      	adds	r3, r7, #6
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e08f      	b.n	8004b46 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	015b      	lsls	r3, r3, #5
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d109      	bne.n	8004a46 <HAL_UART_Transmit+0x4e>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d001      	beq.n	8004a46 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07f      	b.n	8004b46 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	5c9b      	ldrb	r3, [r3, r2]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Transmit+0x5c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e078      	b.n	8004b46 <HAL_UART_Transmit+0x14e>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	2101      	movs	r1, #1
 8004a5a:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	228c      	movs	r2, #140	; 0x8c
 8004a60:	2100      	movs	r1, #0
 8004a62:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2284      	movs	r2, #132	; 0x84
 8004a68:	2121      	movs	r1, #33	; 0x21
 8004a6a:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6c:	f7fe f9d8 	bl	8002e20 <HAL_GetTick>
 8004a70:	0003      	movs	r3, r0
 8004a72:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1dba      	adds	r2, r7, #6
 8004a78:	2154      	movs	r1, #84	; 0x54
 8004a7a:	8812      	ldrh	r2, [r2, #0]
 8004a7c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1dba      	adds	r2, r7, #6
 8004a82:	2156      	movs	r1, #86	; 0x56
 8004a84:	8812      	ldrh	r2, [r2, #0]
 8004a86:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d108      	bne.n	8004aa6 <HAL_UART_Transmit+0xae>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e003      	b.n	8004aae <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2280      	movs	r2, #128	; 0x80
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004ab6:	e02c      	b.n	8004b12 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	0013      	movs	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	f000 fe7f 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e039      	b.n	8004b46 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	001a      	movs	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	05d2      	lsls	r2, r2, #23
 8004ae4:	0dd2      	lsrs	r2, r2, #23
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	3302      	adds	r3, #2
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	e007      	b.n	8004b00 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2256      	movs	r2, #86	; 0x56
 8004b04:	5a9b      	ldrh	r3, [r3, r2]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b299      	uxth	r1, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2256      	movs	r2, #86	; 0x56
 8004b10:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2256      	movs	r2, #86	; 0x56
 8004b16:	5a9b      	ldrh	r3, [r3, r2]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1cc      	bne.n	8004ab8 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	0013      	movs	r3, r2
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2140      	movs	r1, #64	; 0x40
 8004b2c:	f000 fe4c 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d001      	beq.n	8004b38 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e006      	b.n	8004b46 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2284      	movs	r2, #132	; 0x84
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
  }
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b008      	add	sp, #32
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b088      	sub	sp, #32
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	1dbb      	adds	r3, r7, #6
 8004b5a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2288      	movs	r2, #136	; 0x88
 8004b60:	589b      	ldr	r3, [r3, r2]
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d150      	bne.n	8004c08 <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_UART_Receive_IT+0x26>
 8004b6c:	1dbb      	adds	r3, r7, #6
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e048      	b.n	8004c0a <HAL_UART_Receive_IT+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	015b      	lsls	r3, r3, #5
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d109      	bne.n	8004b98 <HAL_UART_Receive_IT+0x4a>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4013      	ands	r3, r2
 8004b92:	d001      	beq.n	8004b98 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e038      	b.n	8004c0a <HAL_UART_Receive_IT+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2280      	movs	r2, #128	; 0x80
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Receive_IT+0x58>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e031      	b.n	8004c0a <HAL_UART_Receive_IT+0xbc>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2280      	movs	r2, #128	; 0x80
 8004baa:	2101      	movs	r1, #1
 8004bac:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d019      	beq.n	8004bf6 <HAL_UART_Receive_IT+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc6:	613b      	str	r3, [r7, #16]
  return(result);
 8004bc8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	04c9      	lsls	r1, r1, #19
 8004be6:	430a      	orrs	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bf6:	1dbb      	adds	r3, r7, #6
 8004bf8:	881a      	ldrh	r2, [r3, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 feaa 	bl	8005958 <UART_Start_Receive_IT>
 8004c04:	0003      	movs	r3, r0
 8004c06:	e000      	b.n	8004c0a <HAL_UART_Receive_IT+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b008      	add	sp, #32
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c14:	b5b0      	push	{r4, r5, r7, lr}
 8004c16:	b0aa      	sub	sp, #168	; 0xa8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	22a4      	movs	r2, #164	; 0xa4
 8004c24:	18b9      	adds	r1, r7, r2
 8004c26:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	20a0      	movs	r0, #160	; 0xa0
 8004c30:	1839      	adds	r1, r7, r0
 8004c32:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	249c      	movs	r4, #156	; 0x9c
 8004c3c:	1939      	adds	r1, r7, r4
 8004c3e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c40:	0011      	movs	r1, r2
 8004c42:	18bb      	adds	r3, r7, r2
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4aa0      	ldr	r2, [pc, #640]	; (8004ec8 <HAL_UART_IRQHandler+0x2b4>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2298      	movs	r2, #152	; 0x98
 8004c4c:	18bd      	adds	r5, r7, r2
 8004c4e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004c50:	18bb      	adds	r3, r7, r2
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11a      	bne.n	8004c8e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c58:	187b      	adds	r3, r7, r1
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d015      	beq.n	8004c8e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c62:	183b      	adds	r3, r7, r0
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2220      	movs	r2, #32
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d105      	bne.n	8004c78 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c6c:	193b      	adds	r3, r7, r4
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	055b      	lsls	r3, r3, #21
 8004c74:	4013      	ands	r3, r2
 8004c76:	d00a      	beq.n	8004c8e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d100      	bne.n	8004c82 <HAL_UART_IRQHandler+0x6e>
 8004c80:	e2cf      	b.n	8005222 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	0010      	movs	r0, r2
 8004c8a:	4798      	blx	r3
      }
      return;
 8004c8c:	e2c9      	b.n	8005222 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c8e:	2398      	movs	r3, #152	; 0x98
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d100      	bne.n	8004c9a <HAL_UART_IRQHandler+0x86>
 8004c98:	e11e      	b.n	8004ed8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c9a:	239c      	movs	r3, #156	; 0x9c
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a8a      	ldr	r2, [pc, #552]	; (8004ecc <HAL_UART_IRQHandler+0x2b8>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d106      	bne.n	8004cb4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ca6:	23a0      	movs	r3, #160	; 0xa0
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a88      	ldr	r2, [pc, #544]	; (8004ed0 <HAL_UART_IRQHandler+0x2bc>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d100      	bne.n	8004cb4 <HAL_UART_IRQHandler+0xa0>
 8004cb2:	e111      	b.n	8004ed8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cb4:	23a4      	movs	r3, #164	; 0xa4
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d012      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xd2>
 8004cc0:	23a0      	movs	r3, #160	; 0xa0
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	228c      	movs	r2, #140	; 0x8c
 8004cda:	589b      	ldr	r3, [r3, r2]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	218c      	movs	r1, #140	; 0x8c
 8004ce4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce6:	23a4      	movs	r3, #164	; 0xa4
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2202      	movs	r2, #2
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d011      	beq.n	8004d16 <HAL_UART_IRQHandler+0x102>
 8004cf2:	239c      	movs	r3, #156	; 0x9c
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d00b      	beq.n	8004d16 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2202      	movs	r2, #2
 8004d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	228c      	movs	r2, #140	; 0x8c
 8004d0a:	589b      	ldr	r3, [r3, r2]
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	218c      	movs	r1, #140	; 0x8c
 8004d14:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d16:	23a4      	movs	r3, #164	; 0xa4
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d011      	beq.n	8004d46 <HAL_UART_IRQHandler+0x132>
 8004d22:	239c      	movs	r3, #156	; 0x9c
 8004d24:	18fb      	adds	r3, r7, r3
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2204      	movs	r2, #4
 8004d34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	228c      	movs	r2, #140	; 0x8c
 8004d3a:	589b      	ldr	r3, [r3, r2]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	218c      	movs	r1, #140	; 0x8c
 8004d44:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d46:	23a4      	movs	r3, #164	; 0xa4
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d017      	beq.n	8004d82 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d52:	23a0      	movs	r3, #160	; 0xa0
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d105      	bne.n	8004d6a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d5e:	239c      	movs	r3, #156	; 0x9c
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a59      	ldr	r2, [pc, #356]	; (8004ecc <HAL_UART_IRQHandler+0x2b8>)
 8004d66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d68:	d00b      	beq.n	8004d82 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2208      	movs	r2, #8
 8004d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	228c      	movs	r2, #140	; 0x8c
 8004d76:	589b      	ldr	r3, [r3, r2]
 8004d78:	2208      	movs	r2, #8
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	218c      	movs	r1, #140	; 0x8c
 8004d80:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d82:	23a4      	movs	r3, #164	; 0xa4
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <HAL_UART_IRQHandler+0x1a4>
 8004d90:	23a0      	movs	r3, #160	; 0xa0
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	04db      	lsls	r3, r3, #19
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d00c      	beq.n	8004db8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2280      	movs	r2, #128	; 0x80
 8004da4:	0112      	lsls	r2, r2, #4
 8004da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	228c      	movs	r2, #140	; 0x8c
 8004dac:	589b      	ldr	r3, [r3, r2]
 8004dae:	2220      	movs	r2, #32
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	218c      	movs	r1, #140	; 0x8c
 8004db6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	228c      	movs	r2, #140	; 0x8c
 8004dbc:	589b      	ldr	r3, [r3, r2]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d100      	bne.n	8004dc4 <HAL_UART_IRQHandler+0x1b0>
 8004dc2:	e230      	b.n	8005226 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004dc4:	23a4      	movs	r3, #164	; 0xa4
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d015      	beq.n	8004dfc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dd0:	23a0      	movs	r3, #160	; 0xa0
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d106      	bne.n	8004dea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ddc:	239c      	movs	r3, #156	; 0x9c
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	055b      	lsls	r3, r3, #21
 8004de6:	4013      	ands	r3, r2
 8004de8:	d008      	beq.n	8004dfc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	0010      	movs	r0, r2
 8004dfa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	228c      	movs	r2, #140	; 0x8c
 8004e00:	589b      	ldr	r3, [r3, r2]
 8004e02:	2194      	movs	r1, #148	; 0x94
 8004e04:	187a      	adds	r2, r7, r1
 8004e06:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d004      	beq.n	8004e20 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2228      	movs	r2, #40	; 0x28
 8004e1c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e1e:	d047      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fea4 	bl	8005b70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d137      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e36:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3e:	2090      	movs	r0, #144	; 0x90
 8004e40:	183a      	adds	r2, r7, r0
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	2301      	movs	r3, #1
 8004e46:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e4a:	f383 8810 	msr	PRIMASK, r3
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2140      	movs	r1, #64	; 0x40
 8004e5c:	438a      	bics	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	183b      	adds	r3, r7, r0
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e68:	f383 8810 	msr	PRIMASK, r3
}
 8004e6c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <HAL_UART_IRQHandler+0x2c0>)
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7fe f9da 	bl	800323c <HAL_DMA_Abort_IT>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d01a      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e96:	0018      	movs	r0, r3
 8004e98:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9a:	e012      	b.n	8004ec2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 f9da 	bl	8005258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea4:	e00d      	b.n	8004ec2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f000 f9d5 	bl	8005258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eae:	e008      	b.n	8004ec2 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 f9d0 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	228c      	movs	r2, #140	; 0x8c
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ec0:	e1b1      	b.n	8005226 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec2:	46c0      	nop			; (mov r8, r8)
    return;
 8004ec4:	e1af      	b.n	8005226 <HAL_UART_IRQHandler+0x612>
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	0000080f 	.word	0x0000080f
 8004ecc:	10000001 	.word	0x10000001
 8004ed0:	04000120 	.word	0x04000120
 8004ed4:	08005c3d 	.word	0x08005c3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d000      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x2ce>
 8004ee0:	e135      	b.n	800514e <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ee2:	23a4      	movs	r3, #164	; 0xa4
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	4013      	ands	r3, r2
 8004eec:	d100      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x2dc>
 8004eee:	e12e      	b.n	800514e <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ef0:	23a0      	movs	r3, #160	; 0xa0
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d100      	bne.n	8004efe <HAL_UART_IRQHandler+0x2ea>
 8004efc:	e127      	b.n	800514e <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2210      	movs	r2, #16
 8004f04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2240      	movs	r2, #64	; 0x40
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d000      	beq.n	8004f16 <HAL_UART_IRQHandler+0x302>
 8004f14:	e09e      	b.n	8005054 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	217e      	movs	r1, #126	; 0x7e
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d100      	bne.n	8004f2e <HAL_UART_IRQHandler+0x31a>
 8004f2c:	e17d      	b.n	800522a <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	225c      	movs	r2, #92	; 0x5c
 8004f32:	5a9b      	ldrh	r3, [r3, r2]
 8004f34:	187a      	adds	r2, r7, r1
 8004f36:	8812      	ldrh	r2, [r2, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d300      	bcc.n	8004f3e <HAL_UART_IRQHandler+0x32a>
 8004f3c:	e175      	b.n	800522a <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	187a      	adds	r2, r7, r1
 8004f42:	215e      	movs	r1, #94	; 0x5e
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2220      	movs	r2, #32
 8004f52:	4013      	ands	r3, r2
 8004f54:	d16f      	bne.n	8005036 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f56:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f60:	2301      	movs	r3, #1
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	49b1      	ldr	r1, [pc, #708]	; (800523c <HAL_UART_IRQHandler+0x628>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f88:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	677b      	str	r3, [r7, #116]	; 0x74
 8004f92:	2301      	movs	r3, #1
 8004f94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f98:	f383 8810 	msr	PRIMASK, r3
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	438a      	bics	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb4:	f383 8810 	msr	PRIMASK, r3
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2140      	movs	r1, #64	; 0x40
 8004fdc:	438a      	bics	r2, r1
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fe2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe6:	f383 8810 	msr	PRIMASK, r3
}
 8004fea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2288      	movs	r2, #136	; 0x88
 8004ff0:	2120      	movs	r1, #32
 8004ff2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005000:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005004:	2301      	movs	r3, #1
 8005006:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2110      	movs	r1, #16
 800501c:	438a      	bics	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005026:	f383 8810 	msr	PRIMASK, r3
}
 800502a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005030:	0018      	movs	r0, r3
 8005032:	f7fe f8a1 	bl	8003178 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	225c      	movs	r2, #92	; 0x5c
 800503a:	5a9a      	ldrh	r2, [r3, r2]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	215e      	movs	r1, #94	; 0x5e
 8005040:	5a5b      	ldrh	r3, [r3, r1]
 8005042:	b29b      	uxth	r3, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0011      	movs	r1, r2
 800504c:	0018      	movs	r0, r3
 800504e:	f000 f90b 	bl	8005268 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005052:	e0ea      	b.n	800522a <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	225c      	movs	r2, #92	; 0x5c
 8005058:	5a99      	ldrh	r1, [r3, r2]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	225e      	movs	r2, #94	; 0x5e
 800505e:	5a9b      	ldrh	r3, [r3, r2]
 8005060:	b29a      	uxth	r2, r3
 8005062:	208e      	movs	r0, #142	; 0x8e
 8005064:	183b      	adds	r3, r7, r0
 8005066:	1a8a      	subs	r2, r1, r2
 8005068:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	225e      	movs	r2, #94	; 0x5e
 800506e:	5a9b      	ldrh	r3, [r3, r2]
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d100      	bne.n	8005078 <HAL_UART_IRQHandler+0x464>
 8005076:	e0da      	b.n	800522e <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8005078:	183b      	adds	r3, r7, r0
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d100      	bne.n	8005082 <HAL_UART_IRQHandler+0x46e>
 8005080:	e0d5      	b.n	800522e <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005082:	f3ef 8310 	mrs	r3, PRIMASK
 8005086:	60fb      	str	r3, [r7, #12]
  return(result);
 8005088:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800508a:	2488      	movs	r4, #136	; 0x88
 800508c:	193a      	adds	r2, r7, r4
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	2301      	movs	r3, #1
 8005092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4966      	ldr	r1, [pc, #408]	; (8005240 <HAL_UART_IRQHandler+0x62c>)
 80050a8:	400a      	ands	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	193b      	adds	r3, r7, r4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ba:	f3ef 8310 	mrs	r3, PRIMASK
 80050be:	61bb      	str	r3, [r7, #24]
  return(result);
 80050c0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050c2:	2484      	movs	r4, #132	; 0x84
 80050c4:	193a      	adds	r2, r7, r4
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	2301      	movs	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4959      	ldr	r1, [pc, #356]	; (8005244 <HAL_UART_IRQHandler+0x630>)
 80050e0:	400a      	ands	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	193b      	adds	r3, r7, r4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2288      	movs	r2, #136	; 0x88
 80050f6:	2120      	movs	r1, #32
 80050f8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005106:	f3ef 8310 	mrs	r3, PRIMASK
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510e:	2480      	movs	r4, #128	; 0x80
 8005110:	193a      	adds	r2, r7, r4
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	2301      	movs	r3, #1
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2110      	movs	r1, #16
 800512c:	438a      	bics	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	193b      	adds	r3, r7, r4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	f383 8810 	msr	PRIMASK, r3
}
 800513c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513e:	183b      	adds	r3, r7, r0
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	0011      	movs	r1, r2
 8005146:	0018      	movs	r0, r3
 8005148:	f000 f88e 	bl	8005268 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800514c:	e06f      	b.n	800522e <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800514e:	23a4      	movs	r3, #164	; 0xa4
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	035b      	lsls	r3, r3, #13
 8005158:	4013      	ands	r3, r2
 800515a:	d010      	beq.n	800517e <HAL_UART_IRQHandler+0x56a>
 800515c:	239c      	movs	r3, #156	; 0x9c
 800515e:	18fb      	adds	r3, r7, r3
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	03db      	lsls	r3, r3, #15
 8005166:	4013      	ands	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	0352      	lsls	r2, r2, #13
 8005172:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0018      	movs	r0, r3
 8005178:	f001 f9f4 	bl	8006564 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800517c:	e05a      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800517e:	23a4      	movs	r3, #164	; 0xa4
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2280      	movs	r2, #128	; 0x80
 8005186:	4013      	ands	r3, r2
 8005188:	d016      	beq.n	80051b8 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800518a:	23a0      	movs	r3, #160	; 0xa0
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2280      	movs	r2, #128	; 0x80
 8005192:	4013      	ands	r3, r2
 8005194:	d106      	bne.n	80051a4 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005196:	239c      	movs	r3, #156	; 0x9c
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	041b      	lsls	r3, r3, #16
 80051a0:	4013      	ands	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d042      	beq.n	8005232 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	0010      	movs	r0, r2
 80051b4:	4798      	blx	r3
    }
    return;
 80051b6:	e03c      	b.n	8005232 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051b8:	23a4      	movs	r3, #164	; 0xa4
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00a      	beq.n	80051da <HAL_UART_IRQHandler+0x5c6>
 80051c4:	23a0      	movs	r3, #160	; 0xa0
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2240      	movs	r2, #64	; 0x40
 80051cc:	4013      	ands	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 fd49 	bl	8005c6a <UART_EndTransmit_IT>
    return;
 80051d8:	e02c      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051da:	23a4      	movs	r3, #164	; 0xa4
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	4013      	ands	r3, r2
 80051e6:	d00b      	beq.n	8005200 <HAL_UART_IRQHandler+0x5ec>
 80051e8:	23a0      	movs	r3, #160	; 0xa0
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	05db      	lsls	r3, r3, #23
 80051f2:	4013      	ands	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	0018      	movs	r0, r3
 80051fa:	f001 f9c3 	bl	8006584 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051fe:	e019      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005200:	23a4      	movs	r3, #164	; 0xa4
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	045b      	lsls	r3, r3, #17
 800520a:	4013      	ands	r3, r2
 800520c:	d012      	beq.n	8005234 <HAL_UART_IRQHandler+0x620>
 800520e:	23a0      	movs	r3, #160	; 0xa0
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	da0d      	bge.n	8005234 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	0018      	movs	r0, r3
 800521c:	f001 f9aa 	bl	8006574 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005220:	e008      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
      return;
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	e006      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
    return;
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	e004      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
      return;
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	e002      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
      return;
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	e000      	b.n	8005234 <HAL_UART_IRQHandler+0x620>
    return;
 8005232:	46c0      	nop			; (mov r8, r8)
  }
}
 8005234:	46bd      	mov	sp, r7
 8005236:	b02a      	add	sp, #168	; 0xa8
 8005238:	bdb0      	pop	{r4, r5, r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	fffffeff 	.word	0xfffffeff
 8005240:	fffffedf 	.word	0xfffffedf
 8005244:	effffffe 	.word	0xeffffffe

08005248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b002      	add	sp, #8
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	000a      	movs	r2, r1
 8005272:	1cbb      	adds	r3, r7, #2
 8005274:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	46bd      	mov	sp, r7
 800527a:	b002      	add	sp, #8
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005288:	231a      	movs	r3, #26
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4abd      	ldr	r2, [pc, #756]	; (80055a4 <UART_SetConfig+0x324>)
 80052b0:	4013      	ands	r3, r2
 80052b2:	0019      	movs	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4ab8      	ldr	r2, [pc, #736]	; (80055a8 <UART_SetConfig+0x328>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4aaf      	ldr	r2, [pc, #700]	; (80055ac <UART_SetConfig+0x32c>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	0019      	movs	r1, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	220f      	movs	r2, #15
 8005304:	4393      	bics	r3, r2
 8005306:	0019      	movs	r1, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4aa5      	ldr	r2, [pc, #660]	; (80055b0 <UART_SetConfig+0x330>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d127      	bne.n	800536e <UART_SetConfig+0xee>
 800531e:	4ba5      	ldr	r3, [pc, #660]	; (80055b4 <UART_SetConfig+0x334>)
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	2203      	movs	r2, #3
 8005324:	4013      	ands	r3, r2
 8005326:	2b03      	cmp	r3, #3
 8005328:	d017      	beq.n	800535a <UART_SetConfig+0xda>
 800532a:	d81b      	bhi.n	8005364 <UART_SetConfig+0xe4>
 800532c:	2b02      	cmp	r3, #2
 800532e:	d00a      	beq.n	8005346 <UART_SetConfig+0xc6>
 8005330:	d818      	bhi.n	8005364 <UART_SetConfig+0xe4>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <UART_SetConfig+0xbc>
 8005336:	2b01      	cmp	r3, #1
 8005338:	d00a      	beq.n	8005350 <UART_SetConfig+0xd0>
 800533a:	e013      	b.n	8005364 <UART_SetConfig+0xe4>
 800533c:	231b      	movs	r3, #27
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	e058      	b.n	80053f8 <UART_SetConfig+0x178>
 8005346:	231b      	movs	r3, #27
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	2202      	movs	r2, #2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e053      	b.n	80053f8 <UART_SetConfig+0x178>
 8005350:	231b      	movs	r3, #27
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2204      	movs	r2, #4
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e04e      	b.n	80053f8 <UART_SetConfig+0x178>
 800535a:	231b      	movs	r3, #27
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	2208      	movs	r2, #8
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	e049      	b.n	80053f8 <UART_SetConfig+0x178>
 8005364:	231b      	movs	r3, #27
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	2210      	movs	r2, #16
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e044      	b.n	80053f8 <UART_SetConfig+0x178>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a91      	ldr	r2, [pc, #580]	; (80055b8 <UART_SetConfig+0x338>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d127      	bne.n	80053c8 <UART_SetConfig+0x148>
 8005378:	4b8e      	ldr	r3, [pc, #568]	; (80055b4 <UART_SetConfig+0x334>)
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	220c      	movs	r2, #12
 800537e:	4013      	ands	r3, r2
 8005380:	2b0c      	cmp	r3, #12
 8005382:	d017      	beq.n	80053b4 <UART_SetConfig+0x134>
 8005384:	d81b      	bhi.n	80053be <UART_SetConfig+0x13e>
 8005386:	2b08      	cmp	r3, #8
 8005388:	d00a      	beq.n	80053a0 <UART_SetConfig+0x120>
 800538a:	d818      	bhi.n	80053be <UART_SetConfig+0x13e>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <UART_SetConfig+0x116>
 8005390:	2b04      	cmp	r3, #4
 8005392:	d00a      	beq.n	80053aa <UART_SetConfig+0x12a>
 8005394:	e013      	b.n	80053be <UART_SetConfig+0x13e>
 8005396:	231b      	movs	r3, #27
 8005398:	18fb      	adds	r3, r7, r3
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e02b      	b.n	80053f8 <UART_SetConfig+0x178>
 80053a0:	231b      	movs	r3, #27
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	2202      	movs	r2, #2
 80053a6:	701a      	strb	r2, [r3, #0]
 80053a8:	e026      	b.n	80053f8 <UART_SetConfig+0x178>
 80053aa:	231b      	movs	r3, #27
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	2204      	movs	r2, #4
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	e021      	b.n	80053f8 <UART_SetConfig+0x178>
 80053b4:	231b      	movs	r3, #27
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	2208      	movs	r2, #8
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e01c      	b.n	80053f8 <UART_SetConfig+0x178>
 80053be:	231b      	movs	r3, #27
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	2210      	movs	r2, #16
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e017      	b.n	80053f8 <UART_SetConfig+0x178>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7b      	ldr	r2, [pc, #492]	; (80055bc <UART_SetConfig+0x33c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d104      	bne.n	80053dc <UART_SetConfig+0x15c>
 80053d2:	231b      	movs	r3, #27
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e00d      	b.n	80053f8 <UART_SetConfig+0x178>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a77      	ldr	r2, [pc, #476]	; (80055c0 <UART_SetConfig+0x340>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d104      	bne.n	80053f0 <UART_SetConfig+0x170>
 80053e6:	231b      	movs	r3, #27
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e003      	b.n	80053f8 <UART_SetConfig+0x178>
 80053f0:	231b      	movs	r3, #27
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2210      	movs	r2, #16
 80053f6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	429a      	cmp	r2, r3
 8005402:	d000      	beq.n	8005406 <UART_SetConfig+0x186>
 8005404:	e066      	b.n	80054d4 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 8005406:	231b      	movs	r3, #27
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d015      	beq.n	800543c <UART_SetConfig+0x1bc>
 8005410:	dc18      	bgt.n	8005444 <UART_SetConfig+0x1c4>
 8005412:	2b04      	cmp	r3, #4
 8005414:	d00d      	beq.n	8005432 <UART_SetConfig+0x1b2>
 8005416:	dc15      	bgt.n	8005444 <UART_SetConfig+0x1c4>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <UART_SetConfig+0x1a2>
 800541c:	2b02      	cmp	r3, #2
 800541e:	d005      	beq.n	800542c <UART_SetConfig+0x1ac>
 8005420:	e010      	b.n	8005444 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005422:	f7fe faab 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8005426:	0003      	movs	r3, r0
 8005428:	617b      	str	r3, [r7, #20]
        break;
 800542a:	e012      	b.n	8005452 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800542c:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <UART_SetConfig+0x344>)
 800542e:	617b      	str	r3, [r7, #20]
        break;
 8005430:	e00f      	b.n	8005452 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005432:	f7fe fa17 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8005436:	0003      	movs	r3, r0
 8005438:	617b      	str	r3, [r7, #20]
        break;
 800543a:	e00a      	b.n	8005452 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	617b      	str	r3, [r7, #20]
        break;
 8005442:	e006      	b.n	8005452 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005448:	231a      	movs	r3, #26
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2201      	movs	r2, #1
 800544e:	701a      	strb	r2, [r3, #0]
        break;
 8005450:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d100      	bne.n	800545a <UART_SetConfig+0x1da>
 8005458:	e08e      	b.n	8005578 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545e:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <UART_SetConfig+0x348>)
 8005460:	0052      	lsls	r2, r2, #1
 8005462:	5ad3      	ldrh	r3, [r2, r3]
 8005464:	0019      	movs	r1, r3
 8005466:	6978      	ldr	r0, [r7, #20]
 8005468:	f7fa fe4a 	bl	8000100 <__udivsi3>
 800546c:	0003      	movs	r3, r0
 800546e:	005a      	lsls	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	18d2      	adds	r2, r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	0019      	movs	r1, r3
 800547e:	0010      	movs	r0, r2
 8005480:	f7fa fe3e 	bl	8000100 <__udivsi3>
 8005484:	0003      	movs	r3, r0
 8005486:	b29b      	uxth	r3, r3
 8005488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b0f      	cmp	r3, #15
 800548e:	d91c      	bls.n	80054ca <UART_SetConfig+0x24a>
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	025b      	lsls	r3, r3, #9
 8005496:	429a      	cmp	r2, r3
 8005498:	d217      	bcs.n	80054ca <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	b29a      	uxth	r2, r3
 800549e:	200e      	movs	r0, #14
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	210f      	movs	r1, #15
 80054a4:	438a      	bics	r2, r1
 80054a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2207      	movs	r2, #7
 80054b0:	4013      	ands	r3, r2
 80054b2:	b299      	uxth	r1, r3
 80054b4:	183b      	adds	r3, r7, r0
 80054b6:	183a      	adds	r2, r7, r0
 80054b8:	8812      	ldrh	r2, [r2, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	183a      	adds	r2, r7, r0
 80054c4:	8812      	ldrh	r2, [r2, #0]
 80054c6:	60da      	str	r2, [r3, #12]
 80054c8:	e056      	b.n	8005578 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 80054ca:	231a      	movs	r3, #26
 80054cc:	18fb      	adds	r3, r7, r3
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e051      	b.n	8005578 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d4:	231b      	movs	r3, #27
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d015      	beq.n	800550a <UART_SetConfig+0x28a>
 80054de:	dc18      	bgt.n	8005512 <UART_SetConfig+0x292>
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d00d      	beq.n	8005500 <UART_SetConfig+0x280>
 80054e4:	dc15      	bgt.n	8005512 <UART_SetConfig+0x292>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <UART_SetConfig+0x270>
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d005      	beq.n	80054fa <UART_SetConfig+0x27a>
 80054ee:	e010      	b.n	8005512 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7fe fa44 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80054f4:	0003      	movs	r3, r0
 80054f6:	617b      	str	r3, [r7, #20]
        break;
 80054f8:	e012      	b.n	8005520 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054fa:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <UART_SetConfig+0x344>)
 80054fc:	617b      	str	r3, [r7, #20]
        break;
 80054fe:	e00f      	b.n	8005520 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005500:	f7fe f9b0 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8005504:	0003      	movs	r3, r0
 8005506:	617b      	str	r3, [r7, #20]
        break;
 8005508:	e00a      	b.n	8005520 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	617b      	str	r3, [r7, #20]
        break;
 8005510:	e006      	b.n	8005520 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005516:	231a      	movs	r3, #26
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
        break;
 800551e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d028      	beq.n	8005578 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800552a:	4b27      	ldr	r3, [pc, #156]	; (80055c8 <UART_SetConfig+0x348>)
 800552c:	0052      	lsls	r2, r2, #1
 800552e:	5ad3      	ldrh	r3, [r2, r3]
 8005530:	0019      	movs	r1, r3
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f7fa fde4 	bl	8000100 <__udivsi3>
 8005538:	0003      	movs	r3, r0
 800553a:	001a      	movs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	18d2      	adds	r2, r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	0019      	movs	r1, r3
 800554a:	0010      	movs	r0, r2
 800554c:	f7fa fdd8 	bl	8000100 <__udivsi3>
 8005550:	0003      	movs	r3, r0
 8005552:	b29b      	uxth	r3, r3
 8005554:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b0f      	cmp	r3, #15
 800555a:	d909      	bls.n	8005570 <UART_SetConfig+0x2f0>
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	025b      	lsls	r3, r3, #9
 8005562:	429a      	cmp	r2, r3
 8005564:	d204      	bcs.n	8005570 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	e003      	b.n	8005578 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005570:	231a      	movs	r3, #26
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	226a      	movs	r2, #106	; 0x6a
 800557c:	2101      	movs	r1, #1
 800557e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2268      	movs	r2, #104	; 0x68
 8005584:	2101      	movs	r1, #1
 8005586:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005594:	231a      	movs	r3, #26
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	781b      	ldrb	r3, [r3, #0]
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b008      	add	sp, #32
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	cfff69f3 	.word	0xcfff69f3
 80055a8:	ffffcfff 	.word	0xffffcfff
 80055ac:	11fff4ff 	.word	0x11fff4ff
 80055b0:	40013800 	.word	0x40013800
 80055b4:	40021000 	.word	0x40021000
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40004800 	.word	0x40004800
 80055c0:	40004c00 	.word	0x40004c00
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	08008430 	.word	0x08008430

080055cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	2201      	movs	r2, #1
 80055da:	4013      	ands	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4a4a      	ldr	r2, [pc, #296]	; (8005710 <UART_AdvFeatureConfig+0x144>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	0019      	movs	r1, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	2202      	movs	r2, #2
 80055fc:	4013      	ands	r3, r2
 80055fe:	d00b      	beq.n	8005618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	4a43      	ldr	r2, [pc, #268]	; (8005714 <UART_AdvFeatureConfig+0x148>)
 8005608:	4013      	ands	r3, r2
 800560a:	0019      	movs	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	2204      	movs	r2, #4
 800561e:	4013      	ands	r3, r2
 8005620:	d00b      	beq.n	800563a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <UART_AdvFeatureConfig+0x14c>)
 800562a:	4013      	ands	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	2208      	movs	r2, #8
 8005640:	4013      	ands	r3, r2
 8005642:	d00b      	beq.n	800565c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4a34      	ldr	r2, [pc, #208]	; (800571c <UART_AdvFeatureConfig+0x150>)
 800564c:	4013      	ands	r3, r2
 800564e:	0019      	movs	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	2210      	movs	r2, #16
 8005662:	4013      	ands	r3, r2
 8005664:	d00b      	beq.n	800567e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a2c      	ldr	r2, [pc, #176]	; (8005720 <UART_AdvFeatureConfig+0x154>)
 800566e:	4013      	ands	r3, r2
 8005670:	0019      	movs	r1, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	2220      	movs	r2, #32
 8005684:	4013      	ands	r3, r2
 8005686:	d00b      	beq.n	80056a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4a25      	ldr	r2, [pc, #148]	; (8005724 <UART_AdvFeatureConfig+0x158>)
 8005690:	4013      	ands	r3, r2
 8005692:	0019      	movs	r1, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a4:	2240      	movs	r2, #64	; 0x40
 80056a6:	4013      	ands	r3, r2
 80056a8:	d01d      	beq.n	80056e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4a1d      	ldr	r2, [pc, #116]	; (8005728 <UART_AdvFeatureConfig+0x15c>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	0019      	movs	r1, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c6:	2380      	movs	r3, #128	; 0x80
 80056c8:	035b      	lsls	r3, r3, #13
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d10b      	bne.n	80056e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4a15      	ldr	r2, [pc, #84]	; (800572c <UART_AdvFeatureConfig+0x160>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	0019      	movs	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	2280      	movs	r2, #128	; 0x80
 80056ec:	4013      	ands	r3, r2
 80056ee:	d00b      	beq.n	8005708 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4a0e      	ldr	r2, [pc, #56]	; (8005730 <UART_AdvFeatureConfig+0x164>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	0019      	movs	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}
 8005710:	fffdffff 	.word	0xfffdffff
 8005714:	fffeffff 	.word	0xfffeffff
 8005718:	fffbffff 	.word	0xfffbffff
 800571c:	ffff7fff 	.word	0xffff7fff
 8005720:	ffffefff 	.word	0xffffefff
 8005724:	ffffdfff 	.word	0xffffdfff
 8005728:	ffefffff 	.word	0xffefffff
 800572c:	ff9fffff 	.word	0xff9fffff
 8005730:	fff7ffff 	.word	0xfff7ffff

08005734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af02      	add	r7, sp, #8
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	228c      	movs	r2, #140	; 0x8c
 8005740:	2100      	movs	r1, #0
 8005742:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005744:	f7fd fb6c 	bl	8002e20 <HAL_GetTick>
 8005748:	0003      	movs	r3, r0
 800574a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2208      	movs	r2, #8
 8005754:	4013      	ands	r3, r2
 8005756:	2b08      	cmp	r3, #8
 8005758:	d10c      	bne.n	8005774 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2280      	movs	r2, #128	; 0x80
 800575e:	0391      	lsls	r1, r2, #14
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <UART_CheckIdleState+0x90>)
 8005764:	9200      	str	r2, [sp, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	f000 f82e 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 800576c:	1e03      	subs	r3, r0, #0
 800576e:	d001      	beq.n	8005774 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e023      	b.n	80057bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2204      	movs	r2, #4
 800577c:	4013      	ands	r3, r2
 800577e:	2b04      	cmp	r3, #4
 8005780:	d10c      	bne.n	800579c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	03d1      	lsls	r1, r2, #15
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <UART_CheckIdleState+0x90>)
 800578c:	9200      	str	r2, [sp, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	f000 f81a 	bl	80057c8 <UART_WaitOnFlagUntilTimeout>
 8005794:	1e03      	subs	r3, r0, #0
 8005796:	d001      	beq.n	800579c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e00f      	b.n	80057bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2284      	movs	r2, #132	; 0x84
 80057a0:	2120      	movs	r1, #32
 80057a2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2288      	movs	r2, #136	; 0x88
 80057a8:	2120      	movs	r1, #32
 80057aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	2100      	movs	r1, #0
 80057b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b004      	add	sp, #16
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	01ffffff 	.word	0x01ffffff

080057c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b094      	sub	sp, #80	; 0x50
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d8:	e0a7      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057dc:	3301      	adds	r3, #1
 80057de:	d100      	bne.n	80057e2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80057e0:	e0a3      	b.n	800592a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fd fb1d 	bl	8002e20 <HAL_GetTick>
 80057e6:	0002      	movs	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d13f      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f8:	f3ef 8310 	mrs	r3, PRIMASK
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005800:	647b      	str	r3, [r7, #68]	; 0x44
 8005802:	2301      	movs	r3, #1
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	f383 8810 	msr	PRIMASK, r3
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	494e      	ldr	r1, [pc, #312]	; (8005954 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800581a:	400a      	ands	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005820:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582a:	f3ef 8310 	mrs	r3, PRIMASK
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005832:	643b      	str	r3, [r7, #64]	; 0x40
 8005834:	2301      	movs	r3, #1
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	f383 8810 	msr	PRIMASK, r3
}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2101      	movs	r1, #1
 800584c:	438a      	bics	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005856:	f383 8810 	msr	PRIMASK, r3
}
 800585a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2284      	movs	r2, #132	; 0x84
 8005860:	2120      	movs	r1, #32
 8005862:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2288      	movs	r2, #136	; 0x88
 8005868:	2120      	movs	r1, #32
 800586a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2280      	movs	r2, #128	; 0x80
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e069      	b.n	800594c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2204      	movs	r2, #4
 8005880:	4013      	ands	r3, r2
 8005882:	d052      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	401a      	ands	r2, r3
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	429a      	cmp	r2, r3
 8005896:	d148      	bne.n	800592a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a2:	f3ef 8310 	mrs	r3, PRIMASK
 80058a6:	613b      	str	r3, [r7, #16]
  return(result);
 80058a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4924      	ldr	r1, [pc, #144]	; (8005954 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80058c4:	400a      	ands	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f383 8810 	msr	PRIMASK, r3
}
 80058d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d4:	f3ef 8310 	mrs	r3, PRIMASK
 80058d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80058da:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80058de:	2301      	movs	r3, #1
 80058e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f383 8810 	msr	PRIMASK, r3
}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2101      	movs	r1, #1
 80058f6:	438a      	bics	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]
 80058fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	f383 8810 	msr	PRIMASK, r3
}
 8005904:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2284      	movs	r2, #132	; 0x84
 800590a:	2120      	movs	r1, #32
 800590c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2288      	movs	r2, #136	; 0x88
 8005912:	2120      	movs	r1, #32
 8005914:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	228c      	movs	r2, #140	; 0x8c
 800591a:	2120      	movs	r1, #32
 800591c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e010      	b.n	800594c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4013      	ands	r3, r2
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	425a      	negs	r2, r3
 800593a:	4153      	adcs	r3, r2
 800593c:	b2db      	uxtb	r3, r3
 800593e:	001a      	movs	r2, r3
 8005940:	1dfb      	adds	r3, r7, #7
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d100      	bne.n	800594a <UART_WaitOnFlagUntilTimeout+0x182>
 8005948:	e747      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	0018      	movs	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	b014      	add	sp, #80	; 0x50
 8005952:	bd80      	pop	{r7, pc}
 8005954:	fffffe5f 	.word	0xfffffe5f

08005958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b094      	sub	sp, #80	; 0x50
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	1dbb      	adds	r3, r7, #6
 8005964:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1dba      	adds	r2, r7, #6
 8005970:	215c      	movs	r1, #92	; 0x5c
 8005972:	8812      	ldrh	r2, [r2, #0]
 8005974:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1dba      	adds	r2, r7, #6
 800597a:	215e      	movs	r1, #94	; 0x5e
 800597c:	8812      	ldrh	r2, [r2, #0]
 800597e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	015b      	lsls	r3, r3, #5
 800598e:	429a      	cmp	r2, r3
 8005990:	d10d      	bne.n	80059ae <UART_Start_Receive_IT+0x56>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <UART_Start_Receive_IT+0x4c>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2260      	movs	r2, #96	; 0x60
 800599e:	496f      	ldr	r1, [pc, #444]	; (8005b5c <UART_Start_Receive_IT+0x204>)
 80059a0:	5299      	strh	r1, [r3, r2]
 80059a2:	e02e      	b.n	8005a02 <UART_Start_Receive_IT+0xaa>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2260      	movs	r2, #96	; 0x60
 80059a8:	21ff      	movs	r1, #255	; 0xff
 80059aa:	5299      	strh	r1, [r3, r2]
 80059ac:	e029      	b.n	8005a02 <UART_Start_Receive_IT+0xaa>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <UART_Start_Receive_IT+0x7a>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <UART_Start_Receive_IT+0x70>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2260      	movs	r2, #96	; 0x60
 80059c2:	21ff      	movs	r1, #255	; 0xff
 80059c4:	5299      	strh	r1, [r3, r2]
 80059c6:	e01c      	b.n	8005a02 <UART_Start_Receive_IT+0xaa>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2260      	movs	r2, #96	; 0x60
 80059cc:	217f      	movs	r1, #127	; 0x7f
 80059ce:	5299      	strh	r1, [r3, r2]
 80059d0:	e017      	b.n	8005a02 <UART_Start_Receive_IT+0xaa>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	055b      	lsls	r3, r3, #21
 80059da:	429a      	cmp	r2, r3
 80059dc:	d10d      	bne.n	80059fa <UART_Start_Receive_IT+0xa2>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d104      	bne.n	80059f0 <UART_Start_Receive_IT+0x98>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2260      	movs	r2, #96	; 0x60
 80059ea:	217f      	movs	r1, #127	; 0x7f
 80059ec:	5299      	strh	r1, [r3, r2]
 80059ee:	e008      	b.n	8005a02 <UART_Start_Receive_IT+0xaa>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2260      	movs	r2, #96	; 0x60
 80059f4:	213f      	movs	r1, #63	; 0x3f
 80059f6:	5299      	strh	r1, [r3, r2]
 80059f8:	e003      	b.n	8005a02 <UART_Start_Receive_IT+0xaa>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2260      	movs	r2, #96	; 0x60
 80059fe:	2100      	movs	r1, #0
 8005a00:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	228c      	movs	r2, #140	; 0x8c
 8005a06:	2100      	movs	r1, #0
 8005a08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2288      	movs	r2, #136	; 0x88
 8005a0e:	2122      	movs	r1, #34	; 0x22
 8005a10:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a12:	f3ef 8310 	mrs	r3, PRIMASK
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2101      	movs	r1, #1
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
 8005a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	f383 8810 	msr	PRIMASK, r3
}
 8005a42:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	059b      	lsls	r3, r3, #22
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d150      	bne.n	8005af2 <UART_Start_Receive_IT+0x19a>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2268      	movs	r2, #104	; 0x68
 8005a54:	5a9b      	ldrh	r3, [r3, r2]
 8005a56:	1dba      	adds	r2, r7, #6
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d349      	bcc.n	8005af2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	015b      	lsls	r3, r3, #5
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d107      	bne.n	8005a7a <UART_Start_Receive_IT+0x122>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a3a      	ldr	r2, [pc, #232]	; (8005b60 <UART_Start_Receive_IT+0x208>)
 8005a76:	671a      	str	r2, [r3, #112]	; 0x70
 8005a78:	e002      	b.n	8005a80 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a39      	ldr	r2, [pc, #228]	; (8005b64 <UART_Start_Receive_IT+0x20c>)
 8005a7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2280      	movs	r2, #128	; 0x80
 8005a84:	2100      	movs	r1, #0
 8005a86:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a88:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a8e:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a92:	2301      	movs	r3, #1
 8005a94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	f383 8810 	msr	PRIMASK, r3
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	0049      	lsls	r1, r1, #1
 8005aac:	430a      	orrs	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	f383 8810 	msr	PRIMASK, r3
}
 8005aba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005abc:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	f383 8810 	msr	PRIMASK, r3
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	0549      	lsls	r1, r1, #21
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	f383 8810 	msr	PRIMASK, r3
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	e02e      	b.n	8005b50 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	015b      	lsls	r3, r3, #5
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d107      	bne.n	8005b0e <UART_Start_Receive_IT+0x1b6>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <UART_Start_Receive_IT+0x210>)
 8005b0a:	671a      	str	r2, [r3, #112]	; 0x70
 8005b0c:	e002      	b.n	8005b14 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <UART_Start_Receive_IT+0x214>)
 8005b12:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	2100      	movs	r1, #0
 8005b1a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b20:	613b      	str	r3, [r7, #16]
  return(result);
 8005b22:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b24:	643b      	str	r3, [r7, #64]	; 0x40
 8005b26:	2301      	movs	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2190      	movs	r1, #144	; 0x90
 8005b3e:	0049      	lsls	r1, r1, #1
 8005b40:	430a      	orrs	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f383 8810 	msr	PRIMASK, r3
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	0018      	movs	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b014      	add	sp, #80	; 0x50
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	000001ff 	.word	0x000001ff
 8005b60:	08006281 	.word	0x08006281
 8005b64:	08005f9d 	.word	0x08005f9d
 8005b68:	08005e31 	.word	0x08005e31
 8005b6c:	08005cc5 	.word	0x08005cc5

08005b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08e      	sub	sp, #56	; 0x38
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b78:	f3ef 8310 	mrs	r3, PRIMASK
 8005b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
 8005b82:	2301      	movs	r3, #1
 8005b84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f383 8810 	msr	PRIMASK, r3
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4926      	ldr	r1, [pc, #152]	; (8005c34 <UART_EndRxTransfer+0xc4>)
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f383 8810 	msr	PRIMASK, r3
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005baa:	f3ef 8310 	mrs	r3, PRIMASK
 8005bae:	623b      	str	r3, [r7, #32]
  return(result);
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	f383 8810 	msr	PRIMASK, r3
}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	491b      	ldr	r1, [pc, #108]	; (8005c38 <UART_EndRxTransfer+0xc8>)
 8005bcc:	400a      	ands	r2, r1
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	f383 8810 	msr	PRIMASK, r3
}
 8005bda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d118      	bne.n	8005c16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be4:	f3ef 8310 	mrs	r3, PRIMASK
 8005be8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bee:	2301      	movs	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f383 8810 	msr	PRIMASK, r3
}
 8005bf8:	46c0      	nop			; (mov r8, r8)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2110      	movs	r1, #16
 8005c06:	438a      	bics	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f383 8810 	msr	PRIMASK, r3
}
 8005c14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2288      	movs	r2, #136	; 0x88
 8005c1a:	2120      	movs	r1, #32
 8005c1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	b00e      	add	sp, #56	; 0x38
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			; (mov r8, r8)
 8005c34:	fffffedf 	.word	0xfffffedf
 8005c38:	effffffe 	.word	0xeffffffe

08005c3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	225e      	movs	r2, #94	; 0x5e
 8005c4e:	2100      	movs	r1, #0
 8005c50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2256      	movs	r2, #86	; 0x56
 8005c56:	2100      	movs	r1, #0
 8005c58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f7ff fafb 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b004      	add	sp, #16
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c72:	f3ef 8310 	mrs	r3, PRIMASK
 8005c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f383 8810 	msr	PRIMASK, r3
}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2140      	movs	r1, #64	; 0x40
 8005c94:	438a      	bics	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ca2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2284      	movs	r2, #132	; 0x84
 8005ca8:	2120      	movs	r1, #32
 8005caa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7ff fac7 	bl	8005248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b006      	add	sp, #24
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b090      	sub	sp, #64	; 0x40
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ccc:	203e      	movs	r0, #62	; 0x3e
 8005cce:	183b      	adds	r3, r7, r0
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	2160      	movs	r1, #96	; 0x60
 8005cd4:	5a52      	ldrh	r2, [r2, r1]
 8005cd6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2288      	movs	r2, #136	; 0x88
 8005cdc:	589b      	ldr	r3, [r3, r2]
 8005cde:	2b22      	cmp	r3, #34	; 0x22
 8005ce0:	d000      	beq.n	8005ce4 <UART_RxISR_8BIT+0x20>
 8005ce2:	e097      	b.n	8005e14 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cea:	213c      	movs	r1, #60	; 0x3c
 8005cec:	187b      	adds	r3, r7, r1
 8005cee:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cf0:	187b      	adds	r3, r7, r1
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	183b      	adds	r3, r7, r0
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b2d9      	uxtb	r1, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d00:	400a      	ands	r2, r1
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	225e      	movs	r2, #94	; 0x5e
 8005d14:	5a9b      	ldrh	r3, [r3, r2]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b299      	uxth	r1, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	225e      	movs	r2, #94	; 0x5e
 8005d20:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	225e      	movs	r2, #94	; 0x5e
 8005d26:	5a9b      	ldrh	r3, [r3, r2]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d000      	beq.n	8005d30 <UART_RxISR_8BIT+0x6c>
 8005d2e:	e079      	b.n	8005e24 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d30:	f3ef 8310 	mrs	r3, PRIMASK
 8005d34:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d36:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f383 8810 	msr	PRIMASK, r3
}
 8005d44:	46c0      	nop			; (mov r8, r8)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4936      	ldr	r1, [pc, #216]	; (8005e2c <UART_RxISR_8BIT+0x168>)
 8005d52:	400a      	ands	r2, r1
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f383 8810 	msr	PRIMASK, r3
}
 8005d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d62:	f3ef 8310 	mrs	r3, PRIMASK
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	f383 8810 	msr	PRIMASK, r3
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2101      	movs	r1, #1
 8005d84:	438a      	bics	r2, r1
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	f383 8810 	msr	PRIMASK, r3
}
 8005d92:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2288      	movs	r2, #136	; 0x88
 8005d98:	2120      	movs	r1, #32
 8005d9a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d12f      	bne.n	8005e0a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db0:	f3ef 8310 	mrs	r3, PRIMASK
 8005db4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005db6:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dba:	2301      	movs	r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f383 8810 	msr	PRIMASK, r3
}
 8005dc4:	46c0      	nop			; (mov r8, r8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2110      	movs	r1, #16
 8005dd2:	438a      	bics	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f383 8810 	msr	PRIMASK, r3
}
 8005de0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	2210      	movs	r2, #16
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d103      	bne.n	8005df8 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2210      	movs	r2, #16
 8005df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	225c      	movs	r2, #92	; 0x5c
 8005dfc:	5a9a      	ldrh	r2, [r3, r2]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0011      	movs	r1, r2
 8005e02:	0018      	movs	r0, r3
 8005e04:	f7ff fa30 	bl	8005268 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e08:	e00c      	b.n	8005e24 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7fc fd5d 	bl	80028cc <HAL_UART_RxCpltCallback>
}
 8005e12:	e007      	b.n	8005e24 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2108      	movs	r1, #8
 8005e20:	430a      	orrs	r2, r1
 8005e22:	619a      	str	r2, [r3, #24]
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b010      	add	sp, #64	; 0x40
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	fffffedf 	.word	0xfffffedf

08005e30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b090      	sub	sp, #64	; 0x40
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e38:	203e      	movs	r0, #62	; 0x3e
 8005e3a:	183b      	adds	r3, r7, r0
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	2160      	movs	r1, #96	; 0x60
 8005e40:	5a52      	ldrh	r2, [r2, r1]
 8005e42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2288      	movs	r2, #136	; 0x88
 8005e48:	589b      	ldr	r3, [r3, r2]
 8005e4a:	2b22      	cmp	r3, #34	; 0x22
 8005e4c:	d000      	beq.n	8005e50 <UART_RxISR_16BIT+0x20>
 8005e4e:	e097      	b.n	8005f80 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e56:	213c      	movs	r1, #60	; 0x3c
 8005e58:	187b      	adds	r3, r7, r1
 8005e5a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e62:	187b      	adds	r3, r7, r1
 8005e64:	183a      	adds	r2, r7, r0
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	8812      	ldrh	r2, [r2, #0]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	225e      	movs	r2, #94	; 0x5e
 8005e80:	5a9b      	ldrh	r3, [r3, r2]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b299      	uxth	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	225e      	movs	r2, #94	; 0x5e
 8005e8c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	225e      	movs	r2, #94	; 0x5e
 8005e92:	5a9b      	ldrh	r3, [r3, r2]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d000      	beq.n	8005e9c <UART_RxISR_16BIT+0x6c>
 8005e9a:	e079      	b.n	8005f90 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ea2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f383 8810 	msr	PRIMASK, r3
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4936      	ldr	r1, [pc, #216]	; (8005f98 <UART_RxISR_16BIT+0x168>)
 8005ebe:	400a      	ands	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f383 8810 	msr	PRIMASK, r3
}
 8005ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ece:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed2:	623b      	str	r3, [r7, #32]
  return(result);
 8005ed4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed8:	2301      	movs	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	f383 8810 	msr	PRIMASK, r3
}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2101      	movs	r1, #1
 8005ef0:	438a      	bics	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	f383 8810 	msr	PRIMASK, r3
}
 8005efe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2288      	movs	r2, #136	; 0x88
 8005f04:	2120      	movs	r1, #32
 8005f06:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d12f      	bne.n	8005f76 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f20:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f22:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f26:	2301      	movs	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f383 8810 	msr	PRIMASK, r3
}
 8005f30:	46c0      	nop			; (mov r8, r8)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2110      	movs	r1, #16
 8005f3e:	438a      	bics	r2, r1
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f383 8810 	msr	PRIMASK, r3
}
 8005f4c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	2210      	movs	r2, #16
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d103      	bne.n	8005f64 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2210      	movs	r2, #16
 8005f62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	225c      	movs	r2, #92	; 0x5c
 8005f68:	5a9a      	ldrh	r2, [r3, r2]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	0011      	movs	r1, r2
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7ff f97a 	bl	8005268 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f74:	e00c      	b.n	8005f90 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f7fc fca7 	bl	80028cc <HAL_UART_RxCpltCallback>
}
 8005f7e:	e007      	b.n	8005f90 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2108      	movs	r1, #8
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	619a      	str	r2, [r3, #24]
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b010      	add	sp, #64	; 0x40
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	fffffedf 	.word	0xfffffedf

08005f9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b09c      	sub	sp, #112	; 0x70
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005fa4:	236a      	movs	r3, #106	; 0x6a
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	2160      	movs	r1, #96	; 0x60
 8005fac:	5a52      	ldrh	r2, [r2, r1]
 8005fae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2288      	movs	r2, #136	; 0x88
 8005fcc:	589b      	ldr	r3, [r3, r2]
 8005fce:	2b22      	cmp	r3, #34	; 0x22
 8005fd0:	d000      	beq.n	8005fd4 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005fd2:	e141      	b.n	8006258 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005fd4:	235e      	movs	r3, #94	; 0x5e
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	2168      	movs	r1, #104	; 0x68
 8005fdc:	5a52      	ldrh	r2, [r2, r1]
 8005fde:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fe0:	e0e8      	b.n	80061b4 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fe8:	215c      	movs	r1, #92	; 0x5c
 8005fea:	187b      	adds	r3, r7, r1
 8005fec:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fee:	187b      	adds	r3, r7, r1
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	236a      	movs	r3, #106	; 0x6a
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	b2d9      	uxtb	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006000:	400a      	ands	r2, r1
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	225e      	movs	r2, #94	; 0x5e
 8006014:	5a9b      	ldrh	r3, [r3, r2]
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b299      	uxth	r1, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	225e      	movs	r2, #94	; 0x5e
 8006020:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800602a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602c:	2207      	movs	r2, #7
 800602e:	4013      	ands	r3, r2
 8006030:	d049      	beq.n	80060c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006034:	2201      	movs	r2, #1
 8006036:	4013      	ands	r3, r2
 8006038:	d010      	beq.n	800605c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800603a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4013      	ands	r3, r2
 8006042:	d00b      	beq.n	800605c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2201      	movs	r2, #1
 800604a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	228c      	movs	r2, #140	; 0x8c
 8006050:	589b      	ldr	r3, [r3, r2]
 8006052:	2201      	movs	r2, #1
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	218c      	movs	r1, #140	; 0x8c
 800605a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800605c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605e:	2202      	movs	r2, #2
 8006060:	4013      	ands	r3, r2
 8006062:	d00f      	beq.n	8006084 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006066:	2201      	movs	r2, #1
 8006068:	4013      	ands	r3, r2
 800606a:	d00b      	beq.n	8006084 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2202      	movs	r2, #2
 8006072:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	228c      	movs	r2, #140	; 0x8c
 8006078:	589b      	ldr	r3, [r3, r2]
 800607a:	2204      	movs	r2, #4
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	218c      	movs	r1, #140	; 0x8c
 8006082:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006086:	2204      	movs	r2, #4
 8006088:	4013      	ands	r3, r2
 800608a:	d00f      	beq.n	80060ac <UART_RxISR_8BIT_FIFOEN+0x110>
 800608c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608e:	2201      	movs	r2, #1
 8006090:	4013      	ands	r3, r2
 8006092:	d00b      	beq.n	80060ac <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2204      	movs	r2, #4
 800609a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	228c      	movs	r2, #140	; 0x8c
 80060a0:	589b      	ldr	r3, [r3, r2]
 80060a2:	2202      	movs	r2, #2
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	218c      	movs	r1, #140	; 0x8c
 80060aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	228c      	movs	r2, #140	; 0x8c
 80060b0:	589b      	ldr	r3, [r3, r2]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7ff f8cd 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	228c      	movs	r2, #140	; 0x8c
 80060c2:	2100      	movs	r1, #0
 80060c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	225e      	movs	r2, #94	; 0x5e
 80060ca:	5a9b      	ldrh	r3, [r3, r2]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d170      	bne.n	80061b4 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d2:	f3ef 8310 	mrs	r3, PRIMASK
 80060d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060da:	65bb      	str	r3, [r7, #88]	; 0x58
 80060dc:	2301      	movs	r3, #1
 80060de:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	f383 8810 	msr	PRIMASK, r3
}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	495f      	ldr	r1, [pc, #380]	; (8006270 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fe:	f383 8810 	msr	PRIMASK, r3
}
 8006102:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006104:	f3ef 8310 	mrs	r3, PRIMASK
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800610c:	657b      	str	r3, [r7, #84]	; 0x54
 800610e:	2301      	movs	r3, #1
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006114:	f383 8810 	msr	PRIMASK, r3
}
 8006118:	46c0      	nop			; (mov r8, r8)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4953      	ldr	r1, [pc, #332]	; (8006274 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8006126:	400a      	ands	r2, r1
 8006128:	609a      	str	r2, [r3, #8]
 800612a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800612c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006130:	f383 8810 	msr	PRIMASK, r3
}
 8006134:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2288      	movs	r2, #136	; 0x88
 800613a:	2120      	movs	r1, #32
 800613c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d12f      	bne.n	80061ac <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006152:	f3ef 8310 	mrs	r3, PRIMASK
 8006156:	623b      	str	r3, [r7, #32]
  return(result);
 8006158:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615a:	653b      	str	r3, [r7, #80]	; 0x50
 800615c:	2301      	movs	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2110      	movs	r1, #16
 8006174:	438a      	bics	r2, r1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	2210      	movs	r2, #16
 800618c:	4013      	ands	r3, r2
 800618e:	2b10      	cmp	r3, #16
 8006190:	d103      	bne.n	800619a <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2210      	movs	r2, #16
 8006198:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	225c      	movs	r2, #92	; 0x5c
 800619e:	5a9a      	ldrh	r2, [r3, r2]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	0011      	movs	r1, r2
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7ff f85f 	bl	8005268 <HAL_UARTEx_RxEventCallback>
 80061aa:	e003      	b.n	80061b4 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f7fc fb8c 	bl	80028cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061b4:	235e      	movs	r3, #94	; 0x5e
 80061b6:	18fb      	adds	r3, r7, r3
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d004      	beq.n	80061c8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80061be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c0:	2220      	movs	r2, #32
 80061c2:	4013      	ands	r3, r2
 80061c4:	d000      	beq.n	80061c8 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80061c6:	e70c      	b.n	8005fe2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80061c8:	204e      	movs	r0, #78	; 0x4e
 80061ca:	183b      	adds	r3, r7, r0
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	215e      	movs	r1, #94	; 0x5e
 80061d0:	5a52      	ldrh	r2, [r2, r1]
 80061d2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80061d4:	0001      	movs	r1, r0
 80061d6:	187b      	adds	r3, r7, r1
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d044      	beq.n	8006268 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2268      	movs	r2, #104	; 0x68
 80061e2:	5a9b      	ldrh	r3, [r3, r2]
 80061e4:	187a      	adds	r2, r7, r1
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d23d      	bcs.n	8006268 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ec:	f3ef 8310 	mrs	r3, PRIMASK
 80061f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80061f2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80061f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f6:	2301      	movs	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f383 8810 	msr	PRIMASK, r3
}
 8006200:	46c0      	nop			; (mov r8, r8)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	491a      	ldr	r1, [pc, #104]	; (8006278 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800620e:	400a      	ands	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
 8006212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f383 8810 	msr	PRIMASK, r3
}
 800621c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8006222:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006224:	f3ef 8310 	mrs	r3, PRIMASK
 8006228:	617b      	str	r3, [r7, #20]
  return(result);
 800622a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800622c:	647b      	str	r3, [r7, #68]	; 0x44
 800622e:	2301      	movs	r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f383 8810 	msr	PRIMASK, r3
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2120      	movs	r1, #32
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f383 8810 	msr	PRIMASK, r3
}
 8006254:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006256:	e007      	b.n	8006268 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2108      	movs	r1, #8
 8006264:	430a      	orrs	r2, r1
 8006266:	619a      	str	r2, [r3, #24]
}
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	46bd      	mov	sp, r7
 800626c:	b01c      	add	sp, #112	; 0x70
 800626e:	bd80      	pop	{r7, pc}
 8006270:	fffffeff 	.word	0xfffffeff
 8006274:	effffffe 	.word	0xeffffffe
 8006278:	efffffff 	.word	0xefffffff
 800627c:	08005cc5 	.word	0x08005cc5

08006280 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b09e      	sub	sp, #120	; 0x78
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006288:	2372      	movs	r3, #114	; 0x72
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	2160      	movs	r1, #96	; 0x60
 8006290:	5a52      	ldrh	r2, [r2, r1]
 8006292:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2288      	movs	r2, #136	; 0x88
 80062b0:	589b      	ldr	r3, [r3, r2]
 80062b2:	2b22      	cmp	r3, #34	; 0x22
 80062b4:	d000      	beq.n	80062b8 <UART_RxISR_16BIT_FIFOEN+0x38>
 80062b6:	e141      	b.n	800653c <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80062b8:	2366      	movs	r3, #102	; 0x66
 80062ba:	18fb      	adds	r3, r7, r3
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	2168      	movs	r1, #104	; 0x68
 80062c0:	5a52      	ldrh	r2, [r2, r1]
 80062c2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062c4:	e0e8      	b.n	8006498 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062cc:	2164      	movs	r1, #100	; 0x64
 80062ce:	187b      	adds	r3, r7, r1
 80062d0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80062d8:	187b      	adds	r3, r7, r1
 80062da:	2272      	movs	r2, #114	; 0x72
 80062dc:	18ba      	adds	r2, r7, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	8812      	ldrh	r2, [r2, #0]
 80062e2:	4013      	ands	r3, r2
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ee:	1c9a      	adds	r2, r3, #2
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	225e      	movs	r2, #94	; 0x5e
 80062f8:	5a9b      	ldrh	r3, [r3, r2]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b299      	uxth	r1, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	225e      	movs	r2, #94	; 0x5e
 8006304:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800630e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006310:	2207      	movs	r2, #7
 8006312:	4013      	ands	r3, r2
 8006314:	d049      	beq.n	80063aa <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006318:	2201      	movs	r2, #1
 800631a:	4013      	ands	r3, r2
 800631c:	d010      	beq.n	8006340 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800631e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4013      	ands	r3, r2
 8006326:	d00b      	beq.n	8006340 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2201      	movs	r2, #1
 800632e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	228c      	movs	r2, #140	; 0x8c
 8006334:	589b      	ldr	r3, [r3, r2]
 8006336:	2201      	movs	r2, #1
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	218c      	movs	r1, #140	; 0x8c
 800633e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006342:	2202      	movs	r2, #2
 8006344:	4013      	ands	r3, r2
 8006346:	d00f      	beq.n	8006368 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800634a:	2201      	movs	r2, #1
 800634c:	4013      	ands	r3, r2
 800634e:	d00b      	beq.n	8006368 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2202      	movs	r2, #2
 8006356:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	228c      	movs	r2, #140	; 0x8c
 800635c:	589b      	ldr	r3, [r3, r2]
 800635e:	2204      	movs	r2, #4
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	218c      	movs	r1, #140	; 0x8c
 8006366:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636a:	2204      	movs	r2, #4
 800636c:	4013      	ands	r3, r2
 800636e:	d00f      	beq.n	8006390 <UART_RxISR_16BIT_FIFOEN+0x110>
 8006370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006372:	2201      	movs	r2, #1
 8006374:	4013      	ands	r3, r2
 8006376:	d00b      	beq.n	8006390 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2204      	movs	r2, #4
 800637e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	228c      	movs	r2, #140	; 0x8c
 8006384:	589b      	ldr	r3, [r3, r2]
 8006386:	2202      	movs	r2, #2
 8006388:	431a      	orrs	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	218c      	movs	r1, #140	; 0x8c
 800638e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	228c      	movs	r2, #140	; 0x8c
 8006394:	589b      	ldr	r3, [r3, r2]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	0018      	movs	r0, r3
 800639e:	f7fe ff5b 	bl	8005258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	228c      	movs	r2, #140	; 0x8c
 80063a6:	2100      	movs	r1, #0
 80063a8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	225e      	movs	r2, #94	; 0x5e
 80063ae:	5a9b      	ldrh	r3, [r3, r2]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d170      	bne.n	8006498 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063c0:	2301      	movs	r3, #1
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	f383 8810 	msr	PRIMASK, r3
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	495f      	ldr	r1, [pc, #380]	; (8006554 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 80063d8:	400a      	ands	r2, r1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f383 8810 	msr	PRIMASK, r3
}
 80063e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e8:	f3ef 8310 	mrs	r3, PRIMASK
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80063f2:	2301      	movs	r3, #1
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f8:	f383 8810 	msr	PRIMASK, r3
}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4953      	ldr	r1, [pc, #332]	; (8006558 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 800640a:	400a      	ands	r2, r1
 800640c:	609a      	str	r2, [r3, #8]
 800640e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006414:	f383 8810 	msr	PRIMASK, r3
}
 8006418:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2288      	movs	r2, #136	; 0x88
 800641e:	2120      	movs	r1, #32
 8006420:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d12f      	bne.n	8006490 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006436:	f3ef 8310 	mrs	r3, PRIMASK
 800643a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	657b      	str	r3, [r7, #84]	; 0x54
 8006440:	2301      	movs	r3, #1
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f383 8810 	msr	PRIMASK, r3
}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2110      	movs	r1, #16
 8006458:	438a      	bics	r2, r1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	f383 8810 	msr	PRIMASK, r3
}
 8006466:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	2210      	movs	r2, #16
 8006470:	4013      	ands	r3, r2
 8006472:	2b10      	cmp	r3, #16
 8006474:	d103      	bne.n	800647e <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2210      	movs	r2, #16
 800647c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	225c      	movs	r2, #92	; 0x5c
 8006482:	5a9a      	ldrh	r2, [r3, r2]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	0011      	movs	r1, r2
 8006488:	0018      	movs	r0, r3
 800648a:	f7fe feed 	bl	8005268 <HAL_UARTEx_RxEventCallback>
 800648e:	e003      	b.n	8006498 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	0018      	movs	r0, r3
 8006494:	f7fc fa1a 	bl	80028cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006498:	2366      	movs	r3, #102	; 0x66
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <UART_RxISR_16BIT_FIFOEN+0x22c>
 80064a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a4:	2220      	movs	r2, #32
 80064a6:	4013      	ands	r3, r2
 80064a8:	d000      	beq.n	80064ac <UART_RxISR_16BIT_FIFOEN+0x22c>
 80064aa:	e70c      	b.n	80062c6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80064ac:	2052      	movs	r0, #82	; 0x52
 80064ae:	183b      	adds	r3, r7, r0
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	215e      	movs	r1, #94	; 0x5e
 80064b4:	5a52      	ldrh	r2, [r2, r1]
 80064b6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80064b8:	0001      	movs	r1, r0
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d044      	beq.n	800654c <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2268      	movs	r2, #104	; 0x68
 80064c6:	5a9b      	ldrh	r3, [r3, r2]
 80064c8:	187a      	adds	r2, r7, r1
 80064ca:	8812      	ldrh	r2, [r2, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d23d      	bcs.n	800654c <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d0:	f3ef 8310 	mrs	r3, PRIMASK
 80064d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064da:	2301      	movs	r3, #1
 80064dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f383 8810 	msr	PRIMASK, r3
}
 80064e4:	46c0      	nop			; (mov r8, r8)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	491a      	ldr	r1, [pc, #104]	; (800655c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80064f2:	400a      	ands	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f383 8810 	msr	PRIMASK, r3
}
 8006500:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a16      	ldr	r2, [pc, #88]	; (8006560 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8006506:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006508:	f3ef 8310 	mrs	r3, PRIMASK
 800650c:	61bb      	str	r3, [r7, #24]
  return(result);
 800650e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006510:	64bb      	str	r3, [r7, #72]	; 0x48
 8006512:	2301      	movs	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f383 8810 	msr	PRIMASK, r3
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2120      	movs	r1, #32
 800652a:	430a      	orrs	r2, r1
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006530:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800653a:	e007      	b.n	800654c <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2108      	movs	r1, #8
 8006548:	430a      	orrs	r2, r1
 800654a:	619a      	str	r2, [r3, #24]
}
 800654c:	46c0      	nop			; (mov r8, r8)
 800654e:	46bd      	mov	sp, r7
 8006550:	b01e      	add	sp, #120	; 0x78
 8006552:	bd80      	pop	{r7, pc}
 8006554:	fffffeff 	.word	0xfffffeff
 8006558:	effffffe 	.word	0xeffffffe
 800655c:	efffffff 	.word	0xefffffff
 8006560:	08005e31 	.word	0x08005e31

08006564 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800656c:	46c0      	nop			; (mov r8, r8)
 800656e:	46bd      	mov	sp, r7
 8006570:	b002      	add	sp, #8
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800657c:	46c0      	nop			; (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b002      	add	sp, #8
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800658c:	46c0      	nop			; (mov r8, r8)
 800658e:	46bd      	mov	sp, r7
 8006590:	b002      	add	sp, #8
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2280      	movs	r2, #128	; 0x80
 80065a0:	5c9b      	ldrb	r3, [r3, r2]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_UARTEx_DisableFifoMode+0x16>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e027      	b.n	80065fa <HAL_UARTEx_DisableFifoMode+0x66>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2280      	movs	r2, #128	; 0x80
 80065ae:	2101      	movs	r1, #1
 80065b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2284      	movs	r2, #132	; 0x84
 80065b6:	2124      	movs	r1, #36	; 0x24
 80065b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2101      	movs	r1, #1
 80065ce:	438a      	bics	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a0b      	ldr	r2, [pc, #44]	; (8006604 <HAL_UARTEx_DisableFifoMode+0x70>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2284      	movs	r2, #132	; 0x84
 80065ec:	2120      	movs	r1, #32
 80065ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	2100      	movs	r1, #0
 80065f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	0018      	movs	r0, r3
 80065fc:	46bd      	mov	sp, r7
 80065fe:	b004      	add	sp, #16
 8006600:	bd80      	pop	{r7, pc}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	dfffffff 	.word	0xdfffffff

08006608 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2280      	movs	r2, #128	; 0x80
 8006616:	5c9b      	ldrb	r3, [r3, r2]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800661c:	2302      	movs	r3, #2
 800661e:	e02e      	b.n	800667e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2280      	movs	r2, #128	; 0x80
 8006624:	2101      	movs	r1, #1
 8006626:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2284      	movs	r2, #132	; 0x84
 800662c:	2124      	movs	r1, #36	; 0x24
 800662e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2101      	movs	r1, #1
 8006644:	438a      	bics	r2, r1
 8006646:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	08d9      	lsrs	r1, r3, #3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f000 f854 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2284      	movs	r2, #132	; 0x84
 8006670:	2120      	movs	r1, #32
 8006672:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	2100      	movs	r1, #0
 800667a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	b004      	add	sp, #16
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2280      	movs	r2, #128	; 0x80
 8006696:	5c9b      	ldrb	r3, [r3, r2]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800669c:	2302      	movs	r3, #2
 800669e:	e02f      	b.n	8006700 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2280      	movs	r2, #128	; 0x80
 80066a4:	2101      	movs	r1, #1
 80066a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2284      	movs	r2, #132	; 0x84
 80066ac:	2124      	movs	r1, #36	; 0x24
 80066ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2101      	movs	r1, #1
 80066c4:	438a      	bics	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	4a0e      	ldr	r2, [pc, #56]	; (8006708 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	0019      	movs	r1, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	0018      	movs	r0, r3
 80066e2:	f000 f813 	bl	800670c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2284      	movs	r2, #132	; 0x84
 80066f2:	2120      	movs	r1, #32
 80066f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2280      	movs	r2, #128	; 0x80
 80066fa:	2100      	movs	r1, #0
 80066fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	0018      	movs	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	b004      	add	sp, #16
 8006706:	bd80      	pop	{r7, pc}
 8006708:	f1ffffff 	.word	0xf1ffffff

0800670c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800670c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006718:	2b00      	cmp	r3, #0
 800671a:	d108      	bne.n	800672e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	226a      	movs	r2, #106	; 0x6a
 8006720:	2101      	movs	r1, #1
 8006722:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2268      	movs	r2, #104	; 0x68
 8006728:	2101      	movs	r1, #1
 800672a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800672c:	e043      	b.n	80067b6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800672e:	260f      	movs	r6, #15
 8006730:	19bb      	adds	r3, r7, r6
 8006732:	2208      	movs	r2, #8
 8006734:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006736:	200e      	movs	r0, #14
 8006738:	183b      	adds	r3, r7, r0
 800673a:	2208      	movs	r2, #8
 800673c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	0e5b      	lsrs	r3, r3, #25
 8006746:	b2da      	uxtb	r2, r3
 8006748:	240d      	movs	r4, #13
 800674a:	193b      	adds	r3, r7, r4
 800674c:	2107      	movs	r1, #7
 800674e:	400a      	ands	r2, r1
 8006750:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	0f5b      	lsrs	r3, r3, #29
 800675a:	b2da      	uxtb	r2, r3
 800675c:	250c      	movs	r5, #12
 800675e:	197b      	adds	r3, r7, r5
 8006760:	2107      	movs	r1, #7
 8006762:	400a      	ands	r2, r1
 8006764:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006766:	183b      	adds	r3, r7, r0
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	197a      	adds	r2, r7, r5
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	4914      	ldr	r1, [pc, #80]	; (80067c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006770:	5c8a      	ldrb	r2, [r1, r2]
 8006772:	435a      	muls	r2, r3
 8006774:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006776:	197b      	adds	r3, r7, r5
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <UARTEx_SetNbDataToProcess+0xb8>)
 800677c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800677e:	0019      	movs	r1, r3
 8006780:	f7f9 fd48 	bl	8000214 <__divsi3>
 8006784:	0003      	movs	r3, r0
 8006786:	b299      	uxth	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	226a      	movs	r2, #106	; 0x6a
 800678c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800678e:	19bb      	adds	r3, r7, r6
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	193a      	adds	r2, r7, r4
 8006794:	7812      	ldrb	r2, [r2, #0]
 8006796:	490a      	ldr	r1, [pc, #40]	; (80067c0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006798:	5c8a      	ldrb	r2, [r1, r2]
 800679a:	435a      	muls	r2, r3
 800679c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800679e:	193b      	adds	r3, r7, r4
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	4a08      	ldr	r2, [pc, #32]	; (80067c4 <UARTEx_SetNbDataToProcess+0xb8>)
 80067a4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067a6:	0019      	movs	r1, r3
 80067a8:	f7f9 fd34 	bl	8000214 <__divsi3>
 80067ac:	0003      	movs	r3, r0
 80067ae:	b299      	uxth	r1, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2268      	movs	r2, #104	; 0x68
 80067b4:	5299      	strh	r1, [r3, r2]
}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b005      	add	sp, #20
 80067bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067be:	46c0      	nop			; (mov r8, r8)
 80067c0:	08008448 	.word	0x08008448
 80067c4:	08008450 	.word	0x08008450

080067c8 <__errno>:
 80067c8:	4b01      	ldr	r3, [pc, #4]	; (80067d0 <__errno+0x8>)
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	4770      	bx	lr
 80067ce:	46c0      	nop			; (mov r8, r8)
 80067d0:	20000010 	.word	0x20000010

080067d4 <__libc_init_array>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	2600      	movs	r6, #0
 80067d8:	4d0c      	ldr	r5, [pc, #48]	; (800680c <__libc_init_array+0x38>)
 80067da:	4c0d      	ldr	r4, [pc, #52]	; (8006810 <__libc_init_array+0x3c>)
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	d109      	bne.n	80067f8 <__libc_init_array+0x24>
 80067e4:	2600      	movs	r6, #0
 80067e6:	f001 fd79 	bl	80082dc <_init>
 80067ea:	4d0a      	ldr	r5, [pc, #40]	; (8006814 <__libc_init_array+0x40>)
 80067ec:	4c0a      	ldr	r4, [pc, #40]	; (8006818 <__libc_init_array+0x44>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	42a6      	cmp	r6, r4
 80067f4:	d105      	bne.n	8006802 <__libc_init_array+0x2e>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	00b3      	lsls	r3, r6, #2
 80067fa:	58eb      	ldr	r3, [r5, r3]
 80067fc:	4798      	blx	r3
 80067fe:	3601      	adds	r6, #1
 8006800:	e7ee      	b.n	80067e0 <__libc_init_array+0xc>
 8006802:	00b3      	lsls	r3, r6, #2
 8006804:	58eb      	ldr	r3, [r5, r3]
 8006806:	4798      	blx	r3
 8006808:	3601      	adds	r6, #1
 800680a:	e7f2      	b.n	80067f2 <__libc_init_array+0x1e>
 800680c:	08008698 	.word	0x08008698
 8006810:	08008698 	.word	0x08008698
 8006814:	08008698 	.word	0x08008698
 8006818:	0800869c 	.word	0x0800869c

0800681c <memset>:
 800681c:	0003      	movs	r3, r0
 800681e:	1882      	adds	r2, r0, r2
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <memset+0xa>
 8006824:	4770      	bx	lr
 8006826:	7019      	strb	r1, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	e7f9      	b.n	8006820 <memset+0x4>

0800682c <_puts_r>:
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	0005      	movs	r5, r0
 8006830:	000e      	movs	r6, r1
 8006832:	2800      	cmp	r0, #0
 8006834:	d004      	beq.n	8006840 <_puts_r+0x14>
 8006836:	6983      	ldr	r3, [r0, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <_puts_r+0x14>
 800683c:	f000 fa6e 	bl	8006d1c <__sinit>
 8006840:	69ab      	ldr	r3, [r5, #24]
 8006842:	68ac      	ldr	r4, [r5, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <_puts_r+0x22>
 8006848:	0028      	movs	r0, r5
 800684a:	f000 fa67 	bl	8006d1c <__sinit>
 800684e:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <_puts_r+0xd8>)
 8006850:	429c      	cmp	r4, r3
 8006852:	d122      	bne.n	800689a <_puts_r+0x6e>
 8006854:	686c      	ldr	r4, [r5, #4]
 8006856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006858:	07db      	lsls	r3, r3, #31
 800685a:	d405      	bmi.n	8006868 <_puts_r+0x3c>
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	059b      	lsls	r3, r3, #22
 8006860:	d402      	bmi.n	8006868 <_puts_r+0x3c>
 8006862:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006864:	f000 fafb 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	071b      	lsls	r3, r3, #28
 800686c:	d502      	bpl.n	8006874 <_puts_r+0x48>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d129      	bne.n	80068c8 <_puts_r+0x9c>
 8006874:	0021      	movs	r1, r4
 8006876:	0028      	movs	r0, r5
 8006878:	f000 f8aa 	bl	80069d0 <__swsetup_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	d023      	beq.n	80068c8 <_puts_r+0x9c>
 8006880:	2501      	movs	r5, #1
 8006882:	426d      	negs	r5, r5
 8006884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006886:	07db      	lsls	r3, r3, #31
 8006888:	d405      	bmi.n	8006896 <_puts_r+0x6a>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	059b      	lsls	r3, r3, #22
 800688e:	d402      	bmi.n	8006896 <_puts_r+0x6a>
 8006890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006892:	f000 fae5 	bl	8006e60 <__retarget_lock_release_recursive>
 8006896:	0028      	movs	r0, r5
 8006898:	bd70      	pop	{r4, r5, r6, pc}
 800689a:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <_puts_r+0xdc>)
 800689c:	429c      	cmp	r4, r3
 800689e:	d101      	bne.n	80068a4 <_puts_r+0x78>
 80068a0:	68ac      	ldr	r4, [r5, #8]
 80068a2:	e7d8      	b.n	8006856 <_puts_r+0x2a>
 80068a4:	4b19      	ldr	r3, [pc, #100]	; (800690c <_puts_r+0xe0>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	d1d5      	bne.n	8006856 <_puts_r+0x2a>
 80068aa:	68ec      	ldr	r4, [r5, #12]
 80068ac:	e7d3      	b.n	8006856 <_puts_r+0x2a>
 80068ae:	3601      	adds	r6, #1
 80068b0:	60a3      	str	r3, [r4, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da04      	bge.n	80068c0 <_puts_r+0x94>
 80068b6:	69a2      	ldr	r2, [r4, #24]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	dc16      	bgt.n	80068ea <_puts_r+0xbe>
 80068bc:	290a      	cmp	r1, #10
 80068be:	d014      	beq.n	80068ea <_puts_r+0xbe>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	7019      	strb	r1, [r3, #0]
 80068c8:	68a3      	ldr	r3, [r4, #8]
 80068ca:	7831      	ldrb	r1, [r6, #0]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	2900      	cmp	r1, #0
 80068d0:	d1ed      	bne.n	80068ae <_puts_r+0x82>
 80068d2:	60a3      	str	r3, [r4, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	da0f      	bge.n	80068f8 <_puts_r+0xcc>
 80068d8:	0028      	movs	r0, r5
 80068da:	0022      	movs	r2, r4
 80068dc:	310a      	adds	r1, #10
 80068de:	f000 f821 	bl	8006924 <__swbuf_r>
 80068e2:	250a      	movs	r5, #10
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d1cd      	bne.n	8006884 <_puts_r+0x58>
 80068e8:	e7ca      	b.n	8006880 <_puts_r+0x54>
 80068ea:	0022      	movs	r2, r4
 80068ec:	0028      	movs	r0, r5
 80068ee:	f000 f819 	bl	8006924 <__swbuf_r>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d1e8      	bne.n	80068c8 <_puts_r+0x9c>
 80068f6:	e7c3      	b.n	8006880 <_puts_r+0x54>
 80068f8:	250a      	movs	r5, #10
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	6022      	str	r2, [r4, #0]
 8006900:	701d      	strb	r5, [r3, #0]
 8006902:	e7bf      	b.n	8006884 <_puts_r+0x58>
 8006904:	0800847c 	.word	0x0800847c
 8006908:	0800849c 	.word	0x0800849c
 800690c:	0800845c 	.word	0x0800845c

08006910 <puts>:
 8006910:	b510      	push	{r4, lr}
 8006912:	4b03      	ldr	r3, [pc, #12]	; (8006920 <puts+0x10>)
 8006914:	0001      	movs	r1, r0
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	f7ff ff88 	bl	800682c <_puts_r>
 800691c:	bd10      	pop	{r4, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	20000010 	.word	0x20000010

08006924 <__swbuf_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	0005      	movs	r5, r0
 8006928:	000e      	movs	r6, r1
 800692a:	0014      	movs	r4, r2
 800692c:	2800      	cmp	r0, #0
 800692e:	d004      	beq.n	800693a <__swbuf_r+0x16>
 8006930:	6983      	ldr	r3, [r0, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <__swbuf_r+0x16>
 8006936:	f000 f9f1 	bl	8006d1c <__sinit>
 800693a:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <__swbuf_r+0xa0>)
 800693c:	429c      	cmp	r4, r3
 800693e:	d12e      	bne.n	800699e <__swbuf_r+0x7a>
 8006940:	686c      	ldr	r4, [r5, #4]
 8006942:	69a3      	ldr	r3, [r4, #24]
 8006944:	60a3      	str	r3, [r4, #8]
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	071b      	lsls	r3, r3, #28
 800694a:	d532      	bpl.n	80069b2 <__swbuf_r+0x8e>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02f      	beq.n	80069b2 <__swbuf_r+0x8e>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	6922      	ldr	r2, [r4, #16]
 8006956:	b2f7      	uxtb	r7, r6
 8006958:	1a98      	subs	r0, r3, r2
 800695a:	6963      	ldr	r3, [r4, #20]
 800695c:	b2f6      	uxtb	r6, r6
 800695e:	4283      	cmp	r3, r0
 8006960:	dc05      	bgt.n	800696e <__swbuf_r+0x4a>
 8006962:	0021      	movs	r1, r4
 8006964:	0028      	movs	r0, r5
 8006966:	f000 f937 	bl	8006bd8 <_fflush_r>
 800696a:	2800      	cmp	r0, #0
 800696c:	d127      	bne.n	80069be <__swbuf_r+0x9a>
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	3001      	adds	r0, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	60a3      	str	r3, [r4, #8]
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	6022      	str	r2, [r4, #0]
 800697c:	701f      	strb	r7, [r3, #0]
 800697e:	6963      	ldr	r3, [r4, #20]
 8006980:	4283      	cmp	r3, r0
 8006982:	d004      	beq.n	800698e <__swbuf_r+0x6a>
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	07db      	lsls	r3, r3, #31
 8006988:	d507      	bpl.n	800699a <__swbuf_r+0x76>
 800698a:	2e0a      	cmp	r6, #10
 800698c:	d105      	bne.n	800699a <__swbuf_r+0x76>
 800698e:	0021      	movs	r1, r4
 8006990:	0028      	movs	r0, r5
 8006992:	f000 f921 	bl	8006bd8 <_fflush_r>
 8006996:	2800      	cmp	r0, #0
 8006998:	d111      	bne.n	80069be <__swbuf_r+0x9a>
 800699a:	0030      	movs	r0, r6
 800699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800699e:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <__swbuf_r+0xa4>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	d101      	bne.n	80069a8 <__swbuf_r+0x84>
 80069a4:	68ac      	ldr	r4, [r5, #8]
 80069a6:	e7cc      	b.n	8006942 <__swbuf_r+0x1e>
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <__swbuf_r+0xa8>)
 80069aa:	429c      	cmp	r4, r3
 80069ac:	d1c9      	bne.n	8006942 <__swbuf_r+0x1e>
 80069ae:	68ec      	ldr	r4, [r5, #12]
 80069b0:	e7c7      	b.n	8006942 <__swbuf_r+0x1e>
 80069b2:	0021      	movs	r1, r4
 80069b4:	0028      	movs	r0, r5
 80069b6:	f000 f80b 	bl	80069d0 <__swsetup_r>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d0c9      	beq.n	8006952 <__swbuf_r+0x2e>
 80069be:	2601      	movs	r6, #1
 80069c0:	4276      	negs	r6, r6
 80069c2:	e7ea      	b.n	800699a <__swbuf_r+0x76>
 80069c4:	0800847c 	.word	0x0800847c
 80069c8:	0800849c 	.word	0x0800849c
 80069cc:	0800845c 	.word	0x0800845c

080069d0 <__swsetup_r>:
 80069d0:	4b37      	ldr	r3, [pc, #220]	; (8006ab0 <__swsetup_r+0xe0>)
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	681d      	ldr	r5, [r3, #0]
 80069d6:	0006      	movs	r6, r0
 80069d8:	000c      	movs	r4, r1
 80069da:	2d00      	cmp	r5, #0
 80069dc:	d005      	beq.n	80069ea <__swsetup_r+0x1a>
 80069de:	69ab      	ldr	r3, [r5, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <__swsetup_r+0x1a>
 80069e4:	0028      	movs	r0, r5
 80069e6:	f000 f999 	bl	8006d1c <__sinit>
 80069ea:	4b32      	ldr	r3, [pc, #200]	; (8006ab4 <__swsetup_r+0xe4>)
 80069ec:	429c      	cmp	r4, r3
 80069ee:	d10f      	bne.n	8006a10 <__swsetup_r+0x40>
 80069f0:	686c      	ldr	r4, [r5, #4]
 80069f2:	230c      	movs	r3, #12
 80069f4:	5ee2      	ldrsh	r2, [r4, r3]
 80069f6:	b293      	uxth	r3, r2
 80069f8:	0711      	lsls	r1, r2, #28
 80069fa:	d42d      	bmi.n	8006a58 <__swsetup_r+0x88>
 80069fc:	06d9      	lsls	r1, r3, #27
 80069fe:	d411      	bmi.n	8006a24 <__swsetup_r+0x54>
 8006a00:	2309      	movs	r3, #9
 8006a02:	2001      	movs	r0, #1
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	3337      	adds	r3, #55	; 0x37
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	4240      	negs	r0, r0
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <__swsetup_r+0xe8>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d101      	bne.n	8006a1a <__swsetup_r+0x4a>
 8006a16:	68ac      	ldr	r4, [r5, #8]
 8006a18:	e7eb      	b.n	80069f2 <__swsetup_r+0x22>
 8006a1a:	4b28      	ldr	r3, [pc, #160]	; (8006abc <__swsetup_r+0xec>)
 8006a1c:	429c      	cmp	r4, r3
 8006a1e:	d1e8      	bne.n	80069f2 <__swsetup_r+0x22>
 8006a20:	68ec      	ldr	r4, [r5, #12]
 8006a22:	e7e6      	b.n	80069f2 <__swsetup_r+0x22>
 8006a24:	075b      	lsls	r3, r3, #29
 8006a26:	d513      	bpl.n	8006a50 <__swsetup_r+0x80>
 8006a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	d008      	beq.n	8006a40 <__swsetup_r+0x70>
 8006a2e:	0023      	movs	r3, r4
 8006a30:	3344      	adds	r3, #68	; 0x44
 8006a32:	4299      	cmp	r1, r3
 8006a34:	d002      	beq.n	8006a3c <__swsetup_r+0x6c>
 8006a36:	0030      	movs	r0, r6
 8006a38:	f000 fa80 	bl	8006f3c <_free_r>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6363      	str	r3, [r4, #52]	; 0x34
 8006a40:	2224      	movs	r2, #36	; 0x24
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	4393      	bics	r3, r2
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6063      	str	r3, [r4, #4]
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	6023      	str	r3, [r4, #0]
 8006a50:	2308      	movs	r3, #8
 8006a52:	89a2      	ldrh	r2, [r4, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10b      	bne.n	8006a76 <__swsetup_r+0xa6>
 8006a5e:	21a0      	movs	r1, #160	; 0xa0
 8006a60:	2280      	movs	r2, #128	; 0x80
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	0089      	lsls	r1, r1, #2
 8006a66:	0092      	lsls	r2, r2, #2
 8006a68:	400b      	ands	r3, r1
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <__swsetup_r+0xa6>
 8006a6e:	0021      	movs	r1, r4
 8006a70:	0030      	movs	r0, r6
 8006a72:	f000 fa1f 	bl	8006eb4 <__smakebuf_r>
 8006a76:	220c      	movs	r2, #12
 8006a78:	5ea3      	ldrsh	r3, [r4, r2]
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	001a      	movs	r2, r3
 8006a7e:	b299      	uxth	r1, r3
 8006a80:	4002      	ands	r2, r0
 8006a82:	4203      	tst	r3, r0
 8006a84:	d00f      	beq.n	8006aa6 <__swsetup_r+0xd6>
 8006a86:	2200      	movs	r2, #0
 8006a88:	60a2      	str	r2, [r4, #8]
 8006a8a:	6962      	ldr	r2, [r4, #20]
 8006a8c:	4252      	negs	r2, r2
 8006a8e:	61a2      	str	r2, [r4, #24]
 8006a90:	2000      	movs	r0, #0
 8006a92:	6922      	ldr	r2, [r4, #16]
 8006a94:	4282      	cmp	r2, r0
 8006a96:	d1ba      	bne.n	8006a0e <__swsetup_r+0x3e>
 8006a98:	060a      	lsls	r2, r1, #24
 8006a9a:	d5b8      	bpl.n	8006a0e <__swsetup_r+0x3e>
 8006a9c:	2240      	movs	r2, #64	; 0x40
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	3801      	subs	r0, #1
 8006aa4:	e7b3      	b.n	8006a0e <__swsetup_r+0x3e>
 8006aa6:	0788      	lsls	r0, r1, #30
 8006aa8:	d400      	bmi.n	8006aac <__swsetup_r+0xdc>
 8006aaa:	6962      	ldr	r2, [r4, #20]
 8006aac:	60a2      	str	r2, [r4, #8]
 8006aae:	e7ef      	b.n	8006a90 <__swsetup_r+0xc0>
 8006ab0:	20000010 	.word	0x20000010
 8006ab4:	0800847c 	.word	0x0800847c
 8006ab8:	0800849c 	.word	0x0800849c
 8006abc:	0800845c 	.word	0x0800845c

08006ac0 <__sflush_r>:
 8006ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac2:	898b      	ldrh	r3, [r1, #12]
 8006ac4:	0005      	movs	r5, r0
 8006ac6:	000c      	movs	r4, r1
 8006ac8:	071a      	lsls	r2, r3, #28
 8006aca:	d45f      	bmi.n	8006b8c <__sflush_r+0xcc>
 8006acc:	684a      	ldr	r2, [r1, #4]
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	dc04      	bgt.n	8006adc <__sflush_r+0x1c>
 8006ad2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	dc01      	bgt.n	8006adc <__sflush_r+0x1c>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006adc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006ade:	2f00      	cmp	r7, #0
 8006ae0:	d0fa      	beq.n	8006ad8 <__sflush_r+0x18>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	682e      	ldr	r6, [r5, #0]
 8006ae8:	602a      	str	r2, [r5, #0]
 8006aea:	001a      	movs	r2, r3
 8006aec:	0149      	lsls	r1, r1, #5
 8006aee:	400a      	ands	r2, r1
 8006af0:	420b      	tst	r3, r1
 8006af2:	d034      	beq.n	8006b5e <__sflush_r+0x9e>
 8006af4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	075b      	lsls	r3, r3, #29
 8006afa:	d506      	bpl.n	8006b0a <__sflush_r+0x4a>
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	1ac0      	subs	r0, r0, r3
 8006b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <__sflush_r+0x4a>
 8006b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b08:	1ac0      	subs	r0, r0, r3
 8006b0a:	0002      	movs	r2, r0
 8006b0c:	6a21      	ldr	r1, [r4, #32]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	0028      	movs	r0, r5
 8006b12:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b14:	47b8      	blx	r7
 8006b16:	89a1      	ldrh	r1, [r4, #12]
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d106      	bne.n	8006b2a <__sflush_r+0x6a>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	2b1d      	cmp	r3, #29
 8006b20:	d831      	bhi.n	8006b86 <__sflush_r+0xc6>
 8006b22:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <__sflush_r+0x114>)
 8006b24:	40da      	lsrs	r2, r3
 8006b26:	07d3      	lsls	r3, r2, #31
 8006b28:	d52d      	bpl.n	8006b86 <__sflush_r+0xc6>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	04cb      	lsls	r3, r1, #19
 8006b34:	d505      	bpl.n	8006b42 <__sflush_r+0x82>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d102      	bne.n	8006b40 <__sflush_r+0x80>
 8006b3a:	682b      	ldr	r3, [r5, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d100      	bne.n	8006b42 <__sflush_r+0x82>
 8006b40:	6560      	str	r0, [r4, #84]	; 0x54
 8006b42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b44:	602e      	str	r6, [r5, #0]
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d0c6      	beq.n	8006ad8 <__sflush_r+0x18>
 8006b4a:	0023      	movs	r3, r4
 8006b4c:	3344      	adds	r3, #68	; 0x44
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	d002      	beq.n	8006b58 <__sflush_r+0x98>
 8006b52:	0028      	movs	r0, r5
 8006b54:	f000 f9f2 	bl	8006f3c <_free_r>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	6360      	str	r0, [r4, #52]	; 0x34
 8006b5c:	e7bd      	b.n	8006ada <__sflush_r+0x1a>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	0028      	movs	r0, r5
 8006b62:	6a21      	ldr	r1, [r4, #32]
 8006b64:	47b8      	blx	r7
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	d1c5      	bne.n	8006af6 <__sflush_r+0x36>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0c2      	beq.n	8006af6 <__sflush_r+0x36>
 8006b70:	2b1d      	cmp	r3, #29
 8006b72:	d001      	beq.n	8006b78 <__sflush_r+0xb8>
 8006b74:	2b16      	cmp	r3, #22
 8006b76:	d101      	bne.n	8006b7c <__sflush_r+0xbc>
 8006b78:	602e      	str	r6, [r5, #0]
 8006b7a:	e7ad      	b.n	8006ad8 <__sflush_r+0x18>
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	89a2      	ldrh	r2, [r4, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	81a3      	strh	r3, [r4, #12]
 8006b84:	e7a9      	b.n	8006ada <__sflush_r+0x1a>
 8006b86:	2340      	movs	r3, #64	; 0x40
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	e7fa      	b.n	8006b82 <__sflush_r+0xc2>
 8006b8c:	690f      	ldr	r7, [r1, #16]
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	d0a2      	beq.n	8006ad8 <__sflush_r+0x18>
 8006b92:	680a      	ldr	r2, [r1, #0]
 8006b94:	600f      	str	r7, [r1, #0]
 8006b96:	1bd2      	subs	r2, r2, r7
 8006b98:	9201      	str	r2, [sp, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	079b      	lsls	r3, r3, #30
 8006b9e:	d100      	bne.n	8006ba2 <__sflush_r+0xe2>
 8006ba0:	694a      	ldr	r2, [r1, #20]
 8006ba2:	60a2      	str	r2, [r4, #8]
 8006ba4:	9b01      	ldr	r3, [sp, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dc00      	bgt.n	8006bac <__sflush_r+0xec>
 8006baa:	e795      	b.n	8006ad8 <__sflush_r+0x18>
 8006bac:	003a      	movs	r2, r7
 8006bae:	0028      	movs	r0, r5
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	6a21      	ldr	r1, [r4, #32]
 8006bb4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bb6:	47b0      	blx	r6
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	dc06      	bgt.n	8006bca <__sflush_r+0x10a>
 8006bbc:	2340      	movs	r3, #64	; 0x40
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	89a2      	ldrh	r2, [r4, #12]
 8006bc2:	4240      	negs	r0, r0
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	e787      	b.n	8006ada <__sflush_r+0x1a>
 8006bca:	9b01      	ldr	r3, [sp, #4]
 8006bcc:	183f      	adds	r7, r7, r0
 8006bce:	1a1b      	subs	r3, r3, r0
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	e7e7      	b.n	8006ba4 <__sflush_r+0xe4>
 8006bd4:	20400001 	.word	0x20400001

08006bd8 <_fflush_r>:
 8006bd8:	690b      	ldr	r3, [r1, #16]
 8006bda:	b570      	push	{r4, r5, r6, lr}
 8006bdc:	0005      	movs	r5, r0
 8006bde:	000c      	movs	r4, r1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <_fflush_r+0x12>
 8006be4:	2500      	movs	r5, #0
 8006be6:	0028      	movs	r0, r5
 8006be8:	bd70      	pop	{r4, r5, r6, pc}
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d004      	beq.n	8006bf8 <_fflush_r+0x20>
 8006bee:	6983      	ldr	r3, [r0, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <_fflush_r+0x20>
 8006bf4:	f000 f892 	bl	8006d1c <__sinit>
 8006bf8:	4b14      	ldr	r3, [pc, #80]	; (8006c4c <_fflush_r+0x74>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d11b      	bne.n	8006c36 <_fflush_r+0x5e>
 8006bfe:	686c      	ldr	r4, [r5, #4]
 8006c00:	220c      	movs	r2, #12
 8006c02:	5ea3      	ldrsh	r3, [r4, r2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0ed      	beq.n	8006be4 <_fflush_r+0xc>
 8006c08:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c0a:	07d2      	lsls	r2, r2, #31
 8006c0c:	d404      	bmi.n	8006c18 <_fflush_r+0x40>
 8006c0e:	059b      	lsls	r3, r3, #22
 8006c10:	d402      	bmi.n	8006c18 <_fflush_r+0x40>
 8006c12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c14:	f000 f923 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8006c18:	0028      	movs	r0, r5
 8006c1a:	0021      	movs	r1, r4
 8006c1c:	f7ff ff50 	bl	8006ac0 <__sflush_r>
 8006c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c22:	0005      	movs	r5, r0
 8006c24:	07db      	lsls	r3, r3, #31
 8006c26:	d4de      	bmi.n	8006be6 <_fflush_r+0xe>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	059b      	lsls	r3, r3, #22
 8006c2c:	d4db      	bmi.n	8006be6 <_fflush_r+0xe>
 8006c2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c30:	f000 f916 	bl	8006e60 <__retarget_lock_release_recursive>
 8006c34:	e7d7      	b.n	8006be6 <_fflush_r+0xe>
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <_fflush_r+0x78>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d101      	bne.n	8006c40 <_fflush_r+0x68>
 8006c3c:	68ac      	ldr	r4, [r5, #8]
 8006c3e:	e7df      	b.n	8006c00 <_fflush_r+0x28>
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <_fflush_r+0x7c>)
 8006c42:	429c      	cmp	r4, r3
 8006c44:	d1dc      	bne.n	8006c00 <_fflush_r+0x28>
 8006c46:	68ec      	ldr	r4, [r5, #12]
 8006c48:	e7da      	b.n	8006c00 <_fflush_r+0x28>
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	0800847c 	.word	0x0800847c
 8006c50:	0800849c 	.word	0x0800849c
 8006c54:	0800845c 	.word	0x0800845c

08006c58 <std>:
 8006c58:	2300      	movs	r3, #0
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	0004      	movs	r4, r0
 8006c5e:	6003      	str	r3, [r0, #0]
 8006c60:	6043      	str	r3, [r0, #4]
 8006c62:	6083      	str	r3, [r0, #8]
 8006c64:	8181      	strh	r1, [r0, #12]
 8006c66:	6643      	str	r3, [r0, #100]	; 0x64
 8006c68:	0019      	movs	r1, r3
 8006c6a:	81c2      	strh	r2, [r0, #14]
 8006c6c:	6103      	str	r3, [r0, #16]
 8006c6e:	6143      	str	r3, [r0, #20]
 8006c70:	6183      	str	r3, [r0, #24]
 8006c72:	2208      	movs	r2, #8
 8006c74:	305c      	adds	r0, #92	; 0x5c
 8006c76:	f7ff fdd1 	bl	800681c <memset>
 8006c7a:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <std+0x38>)
 8006c7c:	6224      	str	r4, [r4, #32]
 8006c7e:	6263      	str	r3, [r4, #36]	; 0x24
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <std+0x3c>)
 8006c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <std+0x40>)
 8006c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <std+0x44>)
 8006c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	08007125 	.word	0x08007125
 8006c94:	0800714d 	.word	0x0800714d
 8006c98:	08007185 	.word	0x08007185
 8006c9c:	080071b1 	.word	0x080071b1

08006ca0 <_cleanup_r>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	4902      	ldr	r1, [pc, #8]	; (8006cac <_cleanup_r+0xc>)
 8006ca4:	f000 f8ba 	bl	8006e1c <_fwalk_reent>
 8006ca8:	bd10      	pop	{r4, pc}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	08006bd9 	.word	0x08006bd9

08006cb0 <__sfmoreglue>:
 8006cb0:	b570      	push	{r4, r5, r6, lr}
 8006cb2:	2568      	movs	r5, #104	; 0x68
 8006cb4:	1e4a      	subs	r2, r1, #1
 8006cb6:	4355      	muls	r5, r2
 8006cb8:	000e      	movs	r6, r1
 8006cba:	0029      	movs	r1, r5
 8006cbc:	3174      	adds	r1, #116	; 0x74
 8006cbe:	f000 f9a9 	bl	8007014 <_malloc_r>
 8006cc2:	1e04      	subs	r4, r0, #0
 8006cc4:	d008      	beq.n	8006cd8 <__sfmoreglue+0x28>
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	002a      	movs	r2, r5
 8006cca:	6001      	str	r1, [r0, #0]
 8006ccc:	6046      	str	r6, [r0, #4]
 8006cce:	300c      	adds	r0, #12
 8006cd0:	60a0      	str	r0, [r4, #8]
 8006cd2:	3268      	adds	r2, #104	; 0x68
 8006cd4:	f7ff fda2 	bl	800681c <memset>
 8006cd8:	0020      	movs	r0, r4
 8006cda:	bd70      	pop	{r4, r5, r6, pc}

08006cdc <__sfp_lock_acquire>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	4802      	ldr	r0, [pc, #8]	; (8006ce8 <__sfp_lock_acquire+0xc>)
 8006ce0:	f000 f8bd 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	200001e9 	.word	0x200001e9

08006cec <__sfp_lock_release>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4802      	ldr	r0, [pc, #8]	; (8006cf8 <__sfp_lock_release+0xc>)
 8006cf0:	f000 f8b6 	bl	8006e60 <__retarget_lock_release_recursive>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	200001e9 	.word	0x200001e9

08006cfc <__sinit_lock_acquire>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	4802      	ldr	r0, [pc, #8]	; (8006d08 <__sinit_lock_acquire+0xc>)
 8006d00:	f000 f8ad 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	200001ea 	.word	0x200001ea

08006d0c <__sinit_lock_release>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	4802      	ldr	r0, [pc, #8]	; (8006d18 <__sinit_lock_release+0xc>)
 8006d10:	f000 f8a6 	bl	8006e60 <__retarget_lock_release_recursive>
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	200001ea 	.word	0x200001ea

08006d1c <__sinit>:
 8006d1c:	b513      	push	{r0, r1, r4, lr}
 8006d1e:	0004      	movs	r4, r0
 8006d20:	f7ff ffec 	bl	8006cfc <__sinit_lock_acquire>
 8006d24:	69a3      	ldr	r3, [r4, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <__sinit+0x14>
 8006d2a:	f7ff ffef 	bl	8006d0c <__sinit_lock_release>
 8006d2e:	bd13      	pop	{r0, r1, r4, pc}
 8006d30:	64a3      	str	r3, [r4, #72]	; 0x48
 8006d32:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006d34:	6523      	str	r3, [r4, #80]	; 0x50
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <__sinit+0x68>)
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <__sinit+0x6c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d3e:	9301      	str	r3, [sp, #4]
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	d101      	bne.n	8006d48 <__sinit+0x2c>
 8006d44:	2301      	movs	r3, #1
 8006d46:	61a3      	str	r3, [r4, #24]
 8006d48:	0020      	movs	r0, r4
 8006d4a:	f000 f81f 	bl	8006d8c <__sfp>
 8006d4e:	6060      	str	r0, [r4, #4]
 8006d50:	0020      	movs	r0, r4
 8006d52:	f000 f81b 	bl	8006d8c <__sfp>
 8006d56:	60a0      	str	r0, [r4, #8]
 8006d58:	0020      	movs	r0, r4
 8006d5a:	f000 f817 	bl	8006d8c <__sfp>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2104      	movs	r1, #4
 8006d62:	60e0      	str	r0, [r4, #12]
 8006d64:	6860      	ldr	r0, [r4, #4]
 8006d66:	f7ff ff77 	bl	8006c58 <std>
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	2109      	movs	r1, #9
 8006d6e:	68a0      	ldr	r0, [r4, #8]
 8006d70:	f7ff ff72 	bl	8006c58 <std>
 8006d74:	2202      	movs	r2, #2
 8006d76:	2112      	movs	r1, #18
 8006d78:	68e0      	ldr	r0, [r4, #12]
 8006d7a:	f7ff ff6d 	bl	8006c58 <std>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	61a3      	str	r3, [r4, #24]
 8006d82:	e7d2      	b.n	8006d2a <__sinit+0xe>
 8006d84:	08008458 	.word	0x08008458
 8006d88:	08006ca1 	.word	0x08006ca1

08006d8c <__sfp>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	0007      	movs	r7, r0
 8006d90:	f7ff ffa4 	bl	8006cdc <__sfp_lock_acquire>
 8006d94:	4b1f      	ldr	r3, [pc, #124]	; (8006e14 <__sfp+0x88>)
 8006d96:	681e      	ldr	r6, [r3, #0]
 8006d98:	69b3      	ldr	r3, [r6, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <__sfp+0x18>
 8006d9e:	0030      	movs	r0, r6
 8006da0:	f7ff ffbc 	bl	8006d1c <__sinit>
 8006da4:	3648      	adds	r6, #72	; 0x48
 8006da6:	68b4      	ldr	r4, [r6, #8]
 8006da8:	6873      	ldr	r3, [r6, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	d504      	bpl.n	8006db8 <__sfp+0x2c>
 8006dae:	6833      	ldr	r3, [r6, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d022      	beq.n	8006dfa <__sfp+0x6e>
 8006db4:	6836      	ldr	r6, [r6, #0]
 8006db6:	e7f6      	b.n	8006da6 <__sfp+0x1a>
 8006db8:	220c      	movs	r2, #12
 8006dba:	5ea5      	ldrsh	r5, [r4, r2]
 8006dbc:	2d00      	cmp	r5, #0
 8006dbe:	d11a      	bne.n	8006df6 <__sfp+0x6a>
 8006dc0:	0020      	movs	r0, r4
 8006dc2:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <__sfp+0x8c>)
 8006dc4:	3058      	adds	r0, #88	; 0x58
 8006dc6:	60e3      	str	r3, [r4, #12]
 8006dc8:	6665      	str	r5, [r4, #100]	; 0x64
 8006dca:	f000 f847 	bl	8006e5c <__retarget_lock_init_recursive>
 8006dce:	f7ff ff8d 	bl	8006cec <__sfp_lock_release>
 8006dd2:	0020      	movs	r0, r4
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	0029      	movs	r1, r5
 8006dd8:	6025      	str	r5, [r4, #0]
 8006dda:	60a5      	str	r5, [r4, #8]
 8006ddc:	6065      	str	r5, [r4, #4]
 8006dde:	6125      	str	r5, [r4, #16]
 8006de0:	6165      	str	r5, [r4, #20]
 8006de2:	61a5      	str	r5, [r4, #24]
 8006de4:	305c      	adds	r0, #92	; 0x5c
 8006de6:	f7ff fd19 	bl	800681c <memset>
 8006dea:	6365      	str	r5, [r4, #52]	; 0x34
 8006dec:	63a5      	str	r5, [r4, #56]	; 0x38
 8006dee:	64a5      	str	r5, [r4, #72]	; 0x48
 8006df0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006df2:	0020      	movs	r0, r4
 8006df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df6:	3468      	adds	r4, #104	; 0x68
 8006df8:	e7d7      	b.n	8006daa <__sfp+0x1e>
 8006dfa:	2104      	movs	r1, #4
 8006dfc:	0038      	movs	r0, r7
 8006dfe:	f7ff ff57 	bl	8006cb0 <__sfmoreglue>
 8006e02:	1e04      	subs	r4, r0, #0
 8006e04:	6030      	str	r0, [r6, #0]
 8006e06:	d1d5      	bne.n	8006db4 <__sfp+0x28>
 8006e08:	f7ff ff70 	bl	8006cec <__sfp_lock_release>
 8006e0c:	230c      	movs	r3, #12
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	e7ef      	b.n	8006df2 <__sfp+0x66>
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	08008458 	.word	0x08008458
 8006e18:	ffff0001 	.word	0xffff0001

08006e1c <_fwalk_reent>:
 8006e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e1e:	0004      	movs	r4, r0
 8006e20:	0006      	movs	r6, r0
 8006e22:	2700      	movs	r7, #0
 8006e24:	9101      	str	r1, [sp, #4]
 8006e26:	3448      	adds	r4, #72	; 0x48
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	68a5      	ldr	r5, [r4, #8]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	9b00      	ldr	r3, [sp, #0]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	d504      	bpl.n	8006e40 <_fwalk_reent+0x24>
 8006e36:	6824      	ldr	r4, [r4, #0]
 8006e38:	2c00      	cmp	r4, #0
 8006e3a:	d1f5      	bne.n	8006e28 <_fwalk_reent+0xc>
 8006e3c:	0038      	movs	r0, r7
 8006e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e40:	89ab      	ldrh	r3, [r5, #12]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d908      	bls.n	8006e58 <_fwalk_reent+0x3c>
 8006e46:	220e      	movs	r2, #14
 8006e48:	5eab      	ldrsh	r3, [r5, r2]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	d004      	beq.n	8006e58 <_fwalk_reent+0x3c>
 8006e4e:	0029      	movs	r1, r5
 8006e50:	0030      	movs	r0, r6
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	4798      	blx	r3
 8006e56:	4307      	orrs	r7, r0
 8006e58:	3568      	adds	r5, #104	; 0x68
 8006e5a:	e7e8      	b.n	8006e2e <_fwalk_reent+0x12>

08006e5c <__retarget_lock_init_recursive>:
 8006e5c:	4770      	bx	lr

08006e5e <__retarget_lock_acquire_recursive>:
 8006e5e:	4770      	bx	lr

08006e60 <__retarget_lock_release_recursive>:
 8006e60:	4770      	bx	lr
	...

08006e64 <__swhatbuf_r>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	000e      	movs	r6, r1
 8006e68:	001d      	movs	r5, r3
 8006e6a:	230e      	movs	r3, #14
 8006e6c:	5ec9      	ldrsh	r1, [r1, r3]
 8006e6e:	0014      	movs	r4, r2
 8006e70:	b096      	sub	sp, #88	; 0x58
 8006e72:	2900      	cmp	r1, #0
 8006e74:	da08      	bge.n	8006e88 <__swhatbuf_r+0x24>
 8006e76:	220c      	movs	r2, #12
 8006e78:	5eb3      	ldrsh	r3, [r6, r2]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	602a      	str	r2, [r5, #0]
 8006e7e:	061b      	lsls	r3, r3, #24
 8006e80:	d411      	bmi.n	8006ea6 <__swhatbuf_r+0x42>
 8006e82:	2380      	movs	r3, #128	; 0x80
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	e00f      	b.n	8006ea8 <__swhatbuf_r+0x44>
 8006e88:	466a      	mov	r2, sp
 8006e8a:	f000 f9bd 	bl	8007208 <_fstat_r>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	dbf1      	blt.n	8006e76 <__swhatbuf_r+0x12>
 8006e92:	23f0      	movs	r3, #240	; 0xf0
 8006e94:	9901      	ldr	r1, [sp, #4]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	4019      	ands	r1, r3
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <__swhatbuf_r+0x4c>)
 8006e9c:	18c9      	adds	r1, r1, r3
 8006e9e:	424b      	negs	r3, r1
 8006ea0:	4159      	adcs	r1, r3
 8006ea2:	6029      	str	r1, [r5, #0]
 8006ea4:	e7ed      	b.n	8006e82 <__swhatbuf_r+0x1e>
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	b016      	add	sp, #88	; 0x58
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	ffffe000 	.word	0xffffe000

08006eb4 <__smakebuf_r>:
 8006eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb6:	2602      	movs	r6, #2
 8006eb8:	898b      	ldrh	r3, [r1, #12]
 8006eba:	0005      	movs	r5, r0
 8006ebc:	000c      	movs	r4, r1
 8006ebe:	4233      	tst	r3, r6
 8006ec0:	d006      	beq.n	8006ed0 <__smakebuf_r+0x1c>
 8006ec2:	0023      	movs	r3, r4
 8006ec4:	3347      	adds	r3, #71	; 0x47
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	2301      	movs	r3, #1
 8006ecc:	6163      	str	r3, [r4, #20]
 8006ece:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006ed0:	466a      	mov	r2, sp
 8006ed2:	ab01      	add	r3, sp, #4
 8006ed4:	f7ff ffc6 	bl	8006e64 <__swhatbuf_r>
 8006ed8:	9900      	ldr	r1, [sp, #0]
 8006eda:	0007      	movs	r7, r0
 8006edc:	0028      	movs	r0, r5
 8006ede:	f000 f899 	bl	8007014 <_malloc_r>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d108      	bne.n	8006ef8 <__smakebuf_r+0x44>
 8006ee6:	220c      	movs	r2, #12
 8006ee8:	5ea3      	ldrsh	r3, [r4, r2]
 8006eea:	059a      	lsls	r2, r3, #22
 8006eec:	d4ef      	bmi.n	8006ece <__smakebuf_r+0x1a>
 8006eee:	2203      	movs	r2, #3
 8006ef0:	4393      	bics	r3, r2
 8006ef2:	431e      	orrs	r6, r3
 8006ef4:	81a6      	strh	r6, [r4, #12]
 8006ef6:	e7e4      	b.n	8006ec2 <__smakebuf_r+0xe>
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <__smakebuf_r+0x84>)
 8006efa:	62ab      	str	r3, [r5, #40]	; 0x28
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	89a2      	ldrh	r2, [r4, #12]
 8006f00:	6020      	str	r0, [r4, #0]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	9b00      	ldr	r3, [sp, #0]
 8006f08:	6120      	str	r0, [r4, #16]
 8006f0a:	6163      	str	r3, [r4, #20]
 8006f0c:	9b01      	ldr	r3, [sp, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00d      	beq.n	8006f2e <__smakebuf_r+0x7a>
 8006f12:	0028      	movs	r0, r5
 8006f14:	230e      	movs	r3, #14
 8006f16:	5ee1      	ldrsh	r1, [r4, r3]
 8006f18:	f000 f988 	bl	800722c <_isatty_r>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d006      	beq.n	8006f2e <__smakebuf_r+0x7a>
 8006f20:	2203      	movs	r2, #3
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	4393      	bics	r3, r2
 8006f26:	001a      	movs	r2, r3
 8006f28:	2301      	movs	r3, #1
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	89a0      	ldrh	r0, [r4, #12]
 8006f30:	4307      	orrs	r7, r0
 8006f32:	81a7      	strh	r7, [r4, #12]
 8006f34:	e7cb      	b.n	8006ece <__smakebuf_r+0x1a>
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	08006ca1 	.word	0x08006ca1

08006f3c <_free_r>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	0005      	movs	r5, r0
 8006f40:	2900      	cmp	r1, #0
 8006f42:	d010      	beq.n	8006f66 <_free_r+0x2a>
 8006f44:	1f0c      	subs	r4, r1, #4
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da00      	bge.n	8006f4e <_free_r+0x12>
 8006f4c:	18e4      	adds	r4, r4, r3
 8006f4e:	0028      	movs	r0, r5
 8006f50:	f000 f992 	bl	8007278 <__malloc_lock>
 8006f54:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <_free_r+0x90>)
 8006f56:	6813      	ldr	r3, [r2, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d105      	bne.n	8006f68 <_free_r+0x2c>
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	6014      	str	r4, [r2, #0]
 8006f60:	0028      	movs	r0, r5
 8006f62:	f000 f991 	bl	8007288 <__malloc_unlock>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d908      	bls.n	8006f7e <_free_r+0x42>
 8006f6c:	6821      	ldr	r1, [r4, #0]
 8006f6e:	1860      	adds	r0, r4, r1
 8006f70:	4283      	cmp	r3, r0
 8006f72:	d1f3      	bne.n	8006f5c <_free_r+0x20>
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	1841      	adds	r1, r0, r1
 8006f7a:	6021      	str	r1, [r4, #0]
 8006f7c:	e7ee      	b.n	8006f5c <_free_r+0x20>
 8006f7e:	001a      	movs	r2, r3
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <_free_r+0x4e>
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	d9f9      	bls.n	8006f7e <_free_r+0x42>
 8006f8a:	6811      	ldr	r1, [r2, #0]
 8006f8c:	1850      	adds	r0, r2, r1
 8006f8e:	42a0      	cmp	r0, r4
 8006f90:	d10b      	bne.n	8006faa <_free_r+0x6e>
 8006f92:	6820      	ldr	r0, [r4, #0]
 8006f94:	1809      	adds	r1, r1, r0
 8006f96:	1850      	adds	r0, r2, r1
 8006f98:	6011      	str	r1, [r2, #0]
 8006f9a:	4283      	cmp	r3, r0
 8006f9c:	d1e0      	bne.n	8006f60 <_free_r+0x24>
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	1841      	adds	r1, r0, r1
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	6053      	str	r3, [r2, #4]
 8006fa8:	e7da      	b.n	8006f60 <_free_r+0x24>
 8006faa:	42a0      	cmp	r0, r4
 8006fac:	d902      	bls.n	8006fb4 <_free_r+0x78>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	e7d5      	b.n	8006f60 <_free_r+0x24>
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	1860      	adds	r0, r4, r1
 8006fb8:	4283      	cmp	r3, r0
 8006fba:	d103      	bne.n	8006fc4 <_free_r+0x88>
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	1841      	adds	r1, r0, r1
 8006fc2:	6021      	str	r1, [r4, #0]
 8006fc4:	6063      	str	r3, [r4, #4]
 8006fc6:	6054      	str	r4, [r2, #4]
 8006fc8:	e7ca      	b.n	8006f60 <_free_r+0x24>
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	200001ec 	.word	0x200001ec

08006fd0 <sbrk_aligned>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4e0f      	ldr	r6, [pc, #60]	; (8007010 <sbrk_aligned+0x40>)
 8006fd4:	000d      	movs	r5, r1
 8006fd6:	6831      	ldr	r1, [r6, #0]
 8006fd8:	0004      	movs	r4, r0
 8006fda:	2900      	cmp	r1, #0
 8006fdc:	d102      	bne.n	8006fe4 <sbrk_aligned+0x14>
 8006fde:	f000 f88f 	bl	8007100 <_sbrk_r>
 8006fe2:	6030      	str	r0, [r6, #0]
 8006fe4:	0029      	movs	r1, r5
 8006fe6:	0020      	movs	r0, r4
 8006fe8:	f000 f88a 	bl	8007100 <_sbrk_r>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d00a      	beq.n	8007006 <sbrk_aligned+0x36>
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	1cc5      	adds	r5, r0, #3
 8006ff4:	439d      	bics	r5, r3
 8006ff6:	42a8      	cmp	r0, r5
 8006ff8:	d007      	beq.n	800700a <sbrk_aligned+0x3a>
 8006ffa:	1a29      	subs	r1, r5, r0
 8006ffc:	0020      	movs	r0, r4
 8006ffe:	f000 f87f 	bl	8007100 <_sbrk_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d101      	bne.n	800700a <sbrk_aligned+0x3a>
 8007006:	2501      	movs	r5, #1
 8007008:	426d      	negs	r5, r5
 800700a:	0028      	movs	r0, r5
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	200001f0 	.word	0x200001f0

08007014 <_malloc_r>:
 8007014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007016:	2203      	movs	r2, #3
 8007018:	1ccb      	adds	r3, r1, #3
 800701a:	4393      	bics	r3, r2
 800701c:	3308      	adds	r3, #8
 800701e:	0006      	movs	r6, r0
 8007020:	001f      	movs	r7, r3
 8007022:	2b0c      	cmp	r3, #12
 8007024:	d232      	bcs.n	800708c <_malloc_r+0x78>
 8007026:	270c      	movs	r7, #12
 8007028:	42b9      	cmp	r1, r7
 800702a:	d831      	bhi.n	8007090 <_malloc_r+0x7c>
 800702c:	0030      	movs	r0, r6
 800702e:	f000 f923 	bl	8007278 <__malloc_lock>
 8007032:	4d32      	ldr	r5, [pc, #200]	; (80070fc <_malloc_r+0xe8>)
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	001c      	movs	r4, r3
 8007038:	2c00      	cmp	r4, #0
 800703a:	d12e      	bne.n	800709a <_malloc_r+0x86>
 800703c:	0039      	movs	r1, r7
 800703e:	0030      	movs	r0, r6
 8007040:	f7ff ffc6 	bl	8006fd0 <sbrk_aligned>
 8007044:	0004      	movs	r4, r0
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	d11e      	bne.n	8007088 <_malloc_r+0x74>
 800704a:	682c      	ldr	r4, [r5, #0]
 800704c:	0025      	movs	r5, r4
 800704e:	2d00      	cmp	r5, #0
 8007050:	d14a      	bne.n	80070e8 <_malloc_r+0xd4>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	0029      	movs	r1, r5
 8007056:	18e3      	adds	r3, r4, r3
 8007058:	0030      	movs	r0, r6
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	f000 f850 	bl	8007100 <_sbrk_r>
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	4283      	cmp	r3, r0
 8007064:	d143      	bne.n	80070ee <_malloc_r+0xda>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	3703      	adds	r7, #3
 800706a:	1aff      	subs	r7, r7, r3
 800706c:	2303      	movs	r3, #3
 800706e:	439f      	bics	r7, r3
 8007070:	3708      	adds	r7, #8
 8007072:	2f0c      	cmp	r7, #12
 8007074:	d200      	bcs.n	8007078 <_malloc_r+0x64>
 8007076:	270c      	movs	r7, #12
 8007078:	0039      	movs	r1, r7
 800707a:	0030      	movs	r0, r6
 800707c:	f7ff ffa8 	bl	8006fd0 <sbrk_aligned>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d034      	beq.n	80070ee <_malloc_r+0xda>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	19df      	adds	r7, r3, r7
 8007088:	6027      	str	r7, [r4, #0]
 800708a:	e013      	b.n	80070b4 <_malloc_r+0xa0>
 800708c:	2b00      	cmp	r3, #0
 800708e:	dacb      	bge.n	8007028 <_malloc_r+0x14>
 8007090:	230c      	movs	r3, #12
 8007092:	2500      	movs	r5, #0
 8007094:	6033      	str	r3, [r6, #0]
 8007096:	0028      	movs	r0, r5
 8007098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	1bd1      	subs	r1, r2, r7
 800709e:	d420      	bmi.n	80070e2 <_malloc_r+0xce>
 80070a0:	290b      	cmp	r1, #11
 80070a2:	d917      	bls.n	80070d4 <_malloc_r+0xc0>
 80070a4:	19e2      	adds	r2, r4, r7
 80070a6:	6027      	str	r7, [r4, #0]
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d111      	bne.n	80070d0 <_malloc_r+0xbc>
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	6011      	str	r1, [r2, #0]
 80070b2:	6053      	str	r3, [r2, #4]
 80070b4:	0030      	movs	r0, r6
 80070b6:	0025      	movs	r5, r4
 80070b8:	f000 f8e6 	bl	8007288 <__malloc_unlock>
 80070bc:	2207      	movs	r2, #7
 80070be:	350b      	adds	r5, #11
 80070c0:	1d23      	adds	r3, r4, #4
 80070c2:	4395      	bics	r5, r2
 80070c4:	1aea      	subs	r2, r5, r3
 80070c6:	429d      	cmp	r5, r3
 80070c8:	d0e5      	beq.n	8007096 <_malloc_r+0x82>
 80070ca:	1b5b      	subs	r3, r3, r5
 80070cc:	50a3      	str	r3, [r4, r2]
 80070ce:	e7e2      	b.n	8007096 <_malloc_r+0x82>
 80070d0:	605a      	str	r2, [r3, #4]
 80070d2:	e7ec      	b.n	80070ae <_malloc_r+0x9a>
 80070d4:	6862      	ldr	r2, [r4, #4]
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	d101      	bne.n	80070de <_malloc_r+0xca>
 80070da:	602a      	str	r2, [r5, #0]
 80070dc:	e7ea      	b.n	80070b4 <_malloc_r+0xa0>
 80070de:	605a      	str	r2, [r3, #4]
 80070e0:	e7e8      	b.n	80070b4 <_malloc_r+0xa0>
 80070e2:	0023      	movs	r3, r4
 80070e4:	6864      	ldr	r4, [r4, #4]
 80070e6:	e7a7      	b.n	8007038 <_malloc_r+0x24>
 80070e8:	002c      	movs	r4, r5
 80070ea:	686d      	ldr	r5, [r5, #4]
 80070ec:	e7af      	b.n	800704e <_malloc_r+0x3a>
 80070ee:	230c      	movs	r3, #12
 80070f0:	0030      	movs	r0, r6
 80070f2:	6033      	str	r3, [r6, #0]
 80070f4:	f000 f8c8 	bl	8007288 <__malloc_unlock>
 80070f8:	e7cd      	b.n	8007096 <_malloc_r+0x82>
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	200001ec 	.word	0x200001ec

08007100 <_sbrk_r>:
 8007100:	2300      	movs	r3, #0
 8007102:	b570      	push	{r4, r5, r6, lr}
 8007104:	4d06      	ldr	r5, [pc, #24]	; (8007120 <_sbrk_r+0x20>)
 8007106:	0004      	movs	r4, r0
 8007108:	0008      	movs	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fb fda6 	bl	8002c5c <_sbrk>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d103      	bne.n	800711c <_sbrk_r+0x1c>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d000      	beq.n	800711c <_sbrk_r+0x1c>
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	bd70      	pop	{r4, r5, r6, pc}
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	200001f4 	.word	0x200001f4

08007124 <__sread>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	000c      	movs	r4, r1
 8007128:	250e      	movs	r5, #14
 800712a:	5f49      	ldrsh	r1, [r1, r5]
 800712c:	f000 f8b4 	bl	8007298 <_read_r>
 8007130:	2800      	cmp	r0, #0
 8007132:	db03      	blt.n	800713c <__sread+0x18>
 8007134:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007136:	181b      	adds	r3, r3, r0
 8007138:	6563      	str	r3, [r4, #84]	; 0x54
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	4a02      	ldr	r2, [pc, #8]	; (8007148 <__sread+0x24>)
 8007140:	4013      	ands	r3, r2
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	e7f9      	b.n	800713a <__sread+0x16>
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	ffffefff 	.word	0xffffefff

0800714c <__swrite>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	001f      	movs	r7, r3
 8007150:	898b      	ldrh	r3, [r1, #12]
 8007152:	0005      	movs	r5, r0
 8007154:	000c      	movs	r4, r1
 8007156:	0016      	movs	r6, r2
 8007158:	05db      	lsls	r3, r3, #23
 800715a:	d505      	bpl.n	8007168 <__swrite+0x1c>
 800715c:	230e      	movs	r3, #14
 800715e:	5ec9      	ldrsh	r1, [r1, r3]
 8007160:	2200      	movs	r2, #0
 8007162:	2302      	movs	r3, #2
 8007164:	f000 f874 	bl	8007250 <_lseek_r>
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	4a05      	ldr	r2, [pc, #20]	; (8007180 <__swrite+0x34>)
 800716c:	0028      	movs	r0, r5
 800716e:	4013      	ands	r3, r2
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	0032      	movs	r2, r6
 8007174:	230e      	movs	r3, #14
 8007176:	5ee1      	ldrsh	r1, [r4, r3]
 8007178:	003b      	movs	r3, r7
 800717a:	f000 f81f 	bl	80071bc <_write_r>
 800717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007180:	ffffefff 	.word	0xffffefff

08007184 <__sseek>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	000c      	movs	r4, r1
 8007188:	250e      	movs	r5, #14
 800718a:	5f49      	ldrsh	r1, [r1, r5]
 800718c:	f000 f860 	bl	8007250 <_lseek_r>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	1c42      	adds	r2, r0, #1
 8007194:	d103      	bne.n	800719e <__sseek+0x1a>
 8007196:	4a05      	ldr	r2, [pc, #20]	; (80071ac <__sseek+0x28>)
 8007198:	4013      	ands	r3, r2
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	bd70      	pop	{r4, r5, r6, pc}
 800719e:	2280      	movs	r2, #128	; 0x80
 80071a0:	0152      	lsls	r2, r2, #5
 80071a2:	4313      	orrs	r3, r2
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	6560      	str	r0, [r4, #84]	; 0x54
 80071a8:	e7f8      	b.n	800719c <__sseek+0x18>
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	ffffefff 	.word	0xffffefff

080071b0 <__sclose>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	230e      	movs	r3, #14
 80071b4:	5ec9      	ldrsh	r1, [r1, r3]
 80071b6:	f000 f815 	bl	80071e4 <_close_r>
 80071ba:	bd10      	pop	{r4, pc}

080071bc <_write_r>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	0004      	movs	r4, r0
 80071c0:	0008      	movs	r0, r1
 80071c2:	0011      	movs	r1, r2
 80071c4:	001a      	movs	r2, r3
 80071c6:	2300      	movs	r3, #0
 80071c8:	4d05      	ldr	r5, [pc, #20]	; (80071e0 <_write_r+0x24>)
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	f7fb fcfd 	bl	8002bca <_write>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d103      	bne.n	80071dc <_write_r+0x20>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d000      	beq.n	80071dc <_write_r+0x20>
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	46c0      	nop			; (mov r8, r8)
 80071e0:	200001f4 	.word	0x200001f4

080071e4 <_close_r>:
 80071e4:	2300      	movs	r3, #0
 80071e6:	b570      	push	{r4, r5, r6, lr}
 80071e8:	4d06      	ldr	r5, [pc, #24]	; (8007204 <_close_r+0x20>)
 80071ea:	0004      	movs	r4, r0
 80071ec:	0008      	movs	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f7fb fd07 	bl	8002c02 <_close>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d103      	bne.n	8007200 <_close_r+0x1c>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d000      	beq.n	8007200 <_close_r+0x1c>
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	bd70      	pop	{r4, r5, r6, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	200001f4 	.word	0x200001f4

08007208 <_fstat_r>:
 8007208:	2300      	movs	r3, #0
 800720a:	b570      	push	{r4, r5, r6, lr}
 800720c:	4d06      	ldr	r5, [pc, #24]	; (8007228 <_fstat_r+0x20>)
 800720e:	0004      	movs	r4, r0
 8007210:	0008      	movs	r0, r1
 8007212:	0011      	movs	r1, r2
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	f7fb fcfe 	bl	8002c16 <_fstat>
 800721a:	1c43      	adds	r3, r0, #1
 800721c:	d103      	bne.n	8007226 <_fstat_r+0x1e>
 800721e:	682b      	ldr	r3, [r5, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d000      	beq.n	8007226 <_fstat_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd70      	pop	{r4, r5, r6, pc}
 8007228:	200001f4 	.word	0x200001f4

0800722c <_isatty_r>:
 800722c:	2300      	movs	r3, #0
 800722e:	b570      	push	{r4, r5, r6, lr}
 8007230:	4d06      	ldr	r5, [pc, #24]	; (800724c <_isatty_r+0x20>)
 8007232:	0004      	movs	r4, r0
 8007234:	0008      	movs	r0, r1
 8007236:	602b      	str	r3, [r5, #0]
 8007238:	f7fb fcfb 	bl	8002c32 <_isatty>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d103      	bne.n	8007248 <_isatty_r+0x1c>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d000      	beq.n	8007248 <_isatty_r+0x1c>
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	bd70      	pop	{r4, r5, r6, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	200001f4 	.word	0x200001f4

08007250 <_lseek_r>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	0004      	movs	r4, r0
 8007254:	0008      	movs	r0, r1
 8007256:	0011      	movs	r1, r2
 8007258:	001a      	movs	r2, r3
 800725a:	2300      	movs	r3, #0
 800725c:	4d05      	ldr	r5, [pc, #20]	; (8007274 <_lseek_r+0x24>)
 800725e:	602b      	str	r3, [r5, #0]
 8007260:	f7fb fcf0 	bl	8002c44 <_lseek>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d103      	bne.n	8007270 <_lseek_r+0x20>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d000      	beq.n	8007270 <_lseek_r+0x20>
 800726e:	6023      	str	r3, [r4, #0]
 8007270:	bd70      	pop	{r4, r5, r6, pc}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	200001f4 	.word	0x200001f4

08007278 <__malloc_lock>:
 8007278:	b510      	push	{r4, lr}
 800727a:	4802      	ldr	r0, [pc, #8]	; (8007284 <__malloc_lock+0xc>)
 800727c:	f7ff fdef 	bl	8006e5e <__retarget_lock_acquire_recursive>
 8007280:	bd10      	pop	{r4, pc}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	200001e8 	.word	0x200001e8

08007288 <__malloc_unlock>:
 8007288:	b510      	push	{r4, lr}
 800728a:	4802      	ldr	r0, [pc, #8]	; (8007294 <__malloc_unlock+0xc>)
 800728c:	f7ff fde8 	bl	8006e60 <__retarget_lock_release_recursive>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	200001e8 	.word	0x200001e8

08007298 <_read_r>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	0004      	movs	r4, r0
 800729c:	0008      	movs	r0, r1
 800729e:	0011      	movs	r1, r2
 80072a0:	001a      	movs	r2, r3
 80072a2:	2300      	movs	r3, #0
 80072a4:	4d05      	ldr	r5, [pc, #20]	; (80072bc <_read_r+0x24>)
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7fb fc72 	bl	8002b90 <_read>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d103      	bne.n	80072b8 <_read_r+0x20>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d000      	beq.n	80072b8 <_read_r+0x20>
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	200001f4 	.word	0x200001f4

080072c0 <sin>:
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	4a20      	ldr	r2, [pc, #128]	; (8007344 <sin+0x84>)
 80072c4:	004b      	lsls	r3, r1, #1
 80072c6:	b087      	sub	sp, #28
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	4293      	cmp	r3, r2
 80072cc:	dc06      	bgt.n	80072dc <sin+0x1c>
 80072ce:	2300      	movs	r3, #0
 80072d0:	2200      	movs	r2, #0
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	f000 fe53 	bl	8007f80 <__kernel_sin>
 80072da:	e006      	b.n	80072ea <sin+0x2a>
 80072dc:	4a1a      	ldr	r2, [pc, #104]	; (8007348 <sin+0x88>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	dd05      	ble.n	80072ee <sin+0x2e>
 80072e2:	0002      	movs	r2, r0
 80072e4:	000b      	movs	r3, r1
 80072e6:	f7fa fb71 	bl	80019cc <__aeabi_dsub>
 80072ea:	b007      	add	sp, #28
 80072ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ee:	aa02      	add	r2, sp, #8
 80072f0:	f000 f82c 	bl	800734c <__ieee754_rem_pio2>
 80072f4:	9c04      	ldr	r4, [sp, #16]
 80072f6:	9d05      	ldr	r5, [sp, #20]
 80072f8:	2303      	movs	r3, #3
 80072fa:	4003      	ands	r3, r0
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d00a      	beq.n	8007316 <sin+0x56>
 8007300:	9802      	ldr	r0, [sp, #8]
 8007302:	9903      	ldr	r1, [sp, #12]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d00d      	beq.n	8007324 <sin+0x64>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d115      	bne.n	8007338 <sin+0x78>
 800730c:	3301      	adds	r3, #1
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	0022      	movs	r2, r4
 8007312:	002b      	movs	r3, r5
 8007314:	e7df      	b.n	80072d6 <sin+0x16>
 8007316:	0022      	movs	r2, r4
 8007318:	9802      	ldr	r0, [sp, #8]
 800731a:	9903      	ldr	r1, [sp, #12]
 800731c:	002b      	movs	r3, r5
 800731e:	f000 fa05 	bl	800772c <__kernel_cos>
 8007322:	e7e2      	b.n	80072ea <sin+0x2a>
 8007324:	2301      	movs	r3, #1
 8007326:	0022      	movs	r2, r4
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	002b      	movs	r3, r5
 800732c:	f000 fe28 	bl	8007f80 <__kernel_sin>
 8007330:	2380      	movs	r3, #128	; 0x80
 8007332:	061b      	lsls	r3, r3, #24
 8007334:	18c9      	adds	r1, r1, r3
 8007336:	e7d8      	b.n	80072ea <sin+0x2a>
 8007338:	0022      	movs	r2, r4
 800733a:	002b      	movs	r3, r5
 800733c:	f000 f9f6 	bl	800772c <__kernel_cos>
 8007340:	e7f6      	b.n	8007330 <sin+0x70>
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	3fe921fb 	.word	0x3fe921fb
 8007348:	7fefffff 	.word	0x7fefffff

0800734c <__ieee754_rem_pio2>:
 800734c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800734e:	004b      	lsls	r3, r1, #1
 8007350:	b091      	sub	sp, #68	; 0x44
 8007352:	085b      	lsrs	r3, r3, #1
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	0017      	movs	r7, r2
 8007358:	4bb6      	ldr	r3, [pc, #728]	; (8007634 <__ieee754_rem_pio2+0x2e8>)
 800735a:	9a02      	ldr	r2, [sp, #8]
 800735c:	0004      	movs	r4, r0
 800735e:	000d      	movs	r5, r1
 8007360:	9109      	str	r1, [sp, #36]	; 0x24
 8007362:	429a      	cmp	r2, r3
 8007364:	dc09      	bgt.n	800737a <__ieee754_rem_pio2+0x2e>
 8007366:	0002      	movs	r2, r0
 8007368:	000b      	movs	r3, r1
 800736a:	603a      	str	r2, [r7, #0]
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	2300      	movs	r3, #0
 8007372:	60ba      	str	r2, [r7, #8]
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	2600      	movs	r6, #0
 8007378:	e025      	b.n	80073c6 <__ieee754_rem_pio2+0x7a>
 800737a:	4baf      	ldr	r3, [pc, #700]	; (8007638 <__ieee754_rem_pio2+0x2ec>)
 800737c:	9a02      	ldr	r2, [sp, #8]
 800737e:	429a      	cmp	r2, r3
 8007380:	dd00      	ble.n	8007384 <__ieee754_rem_pio2+0x38>
 8007382:	e06e      	b.n	8007462 <__ieee754_rem_pio2+0x116>
 8007384:	4ead      	ldr	r6, [pc, #692]	; (800763c <__ieee754_rem_pio2+0x2f0>)
 8007386:	4aae      	ldr	r2, [pc, #696]	; (8007640 <__ieee754_rem_pio2+0x2f4>)
 8007388:	2d00      	cmp	r5, #0
 800738a:	dd35      	ble.n	80073f8 <__ieee754_rem_pio2+0xac>
 800738c:	0020      	movs	r0, r4
 800738e:	0029      	movs	r1, r5
 8007390:	4baa      	ldr	r3, [pc, #680]	; (800763c <__ieee754_rem_pio2+0x2f0>)
 8007392:	f7fa fb1b 	bl	80019cc <__aeabi_dsub>
 8007396:	9b02      	ldr	r3, [sp, #8]
 8007398:	0004      	movs	r4, r0
 800739a:	000d      	movs	r5, r1
 800739c:	42b3      	cmp	r3, r6
 800739e:	d015      	beq.n	80073cc <__ieee754_rem_pio2+0x80>
 80073a0:	4aa8      	ldr	r2, [pc, #672]	; (8007644 <__ieee754_rem_pio2+0x2f8>)
 80073a2:	4ba9      	ldr	r3, [pc, #676]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 80073a4:	f7fa fb12 	bl	80019cc <__aeabi_dsub>
 80073a8:	0002      	movs	r2, r0
 80073aa:	000b      	movs	r3, r1
 80073ac:	0020      	movs	r0, r4
 80073ae:	603a      	str	r2, [r7, #0]
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	0029      	movs	r1, r5
 80073b4:	f7fa fb0a 	bl	80019cc <__aeabi_dsub>
 80073b8:	4aa2      	ldr	r2, [pc, #648]	; (8007644 <__ieee754_rem_pio2+0x2f8>)
 80073ba:	4ba3      	ldr	r3, [pc, #652]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 80073bc:	f7fa fb06 	bl	80019cc <__aeabi_dsub>
 80073c0:	2601      	movs	r6, #1
 80073c2:	60b8      	str	r0, [r7, #8]
 80073c4:	60f9      	str	r1, [r7, #12]
 80073c6:	0030      	movs	r0, r6
 80073c8:	b011      	add	sp, #68	; 0x44
 80073ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073cc:	22d3      	movs	r2, #211	; 0xd3
 80073ce:	4b9e      	ldr	r3, [pc, #632]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 80073d0:	0552      	lsls	r2, r2, #21
 80073d2:	f7fa fafb 	bl	80019cc <__aeabi_dsub>
 80073d6:	4a9d      	ldr	r2, [pc, #628]	; (800764c <__ieee754_rem_pio2+0x300>)
 80073d8:	4b9d      	ldr	r3, [pc, #628]	; (8007650 <__ieee754_rem_pio2+0x304>)
 80073da:	0004      	movs	r4, r0
 80073dc:	000d      	movs	r5, r1
 80073de:	f7fa faf5 	bl	80019cc <__aeabi_dsub>
 80073e2:	0002      	movs	r2, r0
 80073e4:	000b      	movs	r3, r1
 80073e6:	0020      	movs	r0, r4
 80073e8:	603a      	str	r2, [r7, #0]
 80073ea:	607b      	str	r3, [r7, #4]
 80073ec:	0029      	movs	r1, r5
 80073ee:	f7fa faed 	bl	80019cc <__aeabi_dsub>
 80073f2:	4a96      	ldr	r2, [pc, #600]	; (800764c <__ieee754_rem_pio2+0x300>)
 80073f4:	4b96      	ldr	r3, [pc, #600]	; (8007650 <__ieee754_rem_pio2+0x304>)
 80073f6:	e7e1      	b.n	80073bc <__ieee754_rem_pio2+0x70>
 80073f8:	0020      	movs	r0, r4
 80073fa:	0029      	movs	r1, r5
 80073fc:	4b8f      	ldr	r3, [pc, #572]	; (800763c <__ieee754_rem_pio2+0x2f0>)
 80073fe:	f7f9 f93b 	bl	8000678 <__aeabi_dadd>
 8007402:	9b02      	ldr	r3, [sp, #8]
 8007404:	0004      	movs	r4, r0
 8007406:	000d      	movs	r5, r1
 8007408:	42b3      	cmp	r3, r6
 800740a:	d014      	beq.n	8007436 <__ieee754_rem_pio2+0xea>
 800740c:	4a8d      	ldr	r2, [pc, #564]	; (8007644 <__ieee754_rem_pio2+0x2f8>)
 800740e:	4b8e      	ldr	r3, [pc, #568]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 8007410:	f7f9 f932 	bl	8000678 <__aeabi_dadd>
 8007414:	0002      	movs	r2, r0
 8007416:	000b      	movs	r3, r1
 8007418:	0020      	movs	r0, r4
 800741a:	603a      	str	r2, [r7, #0]
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	0029      	movs	r1, r5
 8007420:	f7fa fad4 	bl	80019cc <__aeabi_dsub>
 8007424:	4a87      	ldr	r2, [pc, #540]	; (8007644 <__ieee754_rem_pio2+0x2f8>)
 8007426:	4b88      	ldr	r3, [pc, #544]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 8007428:	f7f9 f926 	bl	8000678 <__aeabi_dadd>
 800742c:	2601      	movs	r6, #1
 800742e:	60b8      	str	r0, [r7, #8]
 8007430:	60f9      	str	r1, [r7, #12]
 8007432:	4276      	negs	r6, r6
 8007434:	e7c7      	b.n	80073c6 <__ieee754_rem_pio2+0x7a>
 8007436:	22d3      	movs	r2, #211	; 0xd3
 8007438:	4b83      	ldr	r3, [pc, #524]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 800743a:	0552      	lsls	r2, r2, #21
 800743c:	f7f9 f91c 	bl	8000678 <__aeabi_dadd>
 8007440:	4a82      	ldr	r2, [pc, #520]	; (800764c <__ieee754_rem_pio2+0x300>)
 8007442:	4b83      	ldr	r3, [pc, #524]	; (8007650 <__ieee754_rem_pio2+0x304>)
 8007444:	0004      	movs	r4, r0
 8007446:	000d      	movs	r5, r1
 8007448:	f7f9 f916 	bl	8000678 <__aeabi_dadd>
 800744c:	0002      	movs	r2, r0
 800744e:	000b      	movs	r3, r1
 8007450:	0020      	movs	r0, r4
 8007452:	603a      	str	r2, [r7, #0]
 8007454:	607b      	str	r3, [r7, #4]
 8007456:	0029      	movs	r1, r5
 8007458:	f7fa fab8 	bl	80019cc <__aeabi_dsub>
 800745c:	4a7b      	ldr	r2, [pc, #492]	; (800764c <__ieee754_rem_pio2+0x300>)
 800745e:	4b7c      	ldr	r3, [pc, #496]	; (8007650 <__ieee754_rem_pio2+0x304>)
 8007460:	e7e2      	b.n	8007428 <__ieee754_rem_pio2+0xdc>
 8007462:	4b7c      	ldr	r3, [pc, #496]	; (8007654 <__ieee754_rem_pio2+0x308>)
 8007464:	9a02      	ldr	r2, [sp, #8]
 8007466:	429a      	cmp	r2, r3
 8007468:	dd00      	ble.n	800746c <__ieee754_rem_pio2+0x120>
 800746a:	e0d3      	b.n	8007614 <__ieee754_rem_pio2+0x2c8>
 800746c:	0020      	movs	r0, r4
 800746e:	0029      	movs	r1, r5
 8007470:	f000 fe32 	bl	80080d8 <fabs>
 8007474:	4a78      	ldr	r2, [pc, #480]	; (8007658 <__ieee754_rem_pio2+0x30c>)
 8007476:	4b79      	ldr	r3, [pc, #484]	; (800765c <__ieee754_rem_pio2+0x310>)
 8007478:	0004      	movs	r4, r0
 800747a:	000d      	movs	r5, r1
 800747c:	f7fa f83a 	bl	80014f4 <__aeabi_dmul>
 8007480:	2200      	movs	r2, #0
 8007482:	4b77      	ldr	r3, [pc, #476]	; (8007660 <__ieee754_rem_pio2+0x314>)
 8007484:	f7f9 f8f8 	bl	8000678 <__aeabi_dadd>
 8007488:	f7fa fe32 	bl	80020f0 <__aeabi_d2iz>
 800748c:	0006      	movs	r6, r0
 800748e:	f7fa fe65 	bl	800215c <__aeabi_i2d>
 8007492:	4a6b      	ldr	r2, [pc, #428]	; (8007640 <__ieee754_rem_pio2+0x2f4>)
 8007494:	4b69      	ldr	r3, [pc, #420]	; (800763c <__ieee754_rem_pio2+0x2f0>)
 8007496:	9006      	str	r0, [sp, #24]
 8007498:	9107      	str	r1, [sp, #28]
 800749a:	f7fa f82b 	bl	80014f4 <__aeabi_dmul>
 800749e:	0002      	movs	r2, r0
 80074a0:	000b      	movs	r3, r1
 80074a2:	0020      	movs	r0, r4
 80074a4:	0029      	movs	r1, r5
 80074a6:	f7fa fa91 	bl	80019cc <__aeabi_dsub>
 80074aa:	4a66      	ldr	r2, [pc, #408]	; (8007644 <__ieee754_rem_pio2+0x2f8>)
 80074ac:	9004      	str	r0, [sp, #16]
 80074ae:	9105      	str	r1, [sp, #20]
 80074b0:	9806      	ldr	r0, [sp, #24]
 80074b2:	9907      	ldr	r1, [sp, #28]
 80074b4:	4b64      	ldr	r3, [pc, #400]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 80074b6:	f7fa f81d 	bl	80014f4 <__aeabi_dmul>
 80074ba:	0004      	movs	r4, r0
 80074bc:	000d      	movs	r5, r1
 80074be:	2e1f      	cmp	r6, #31
 80074c0:	dc0f      	bgt.n	80074e2 <__ieee754_rem_pio2+0x196>
 80074c2:	4a68      	ldr	r2, [pc, #416]	; (8007664 <__ieee754_rem_pio2+0x318>)
 80074c4:	1e73      	subs	r3, r6, #1
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	589b      	ldr	r3, [r3, r2]
 80074ca:	9a02      	ldr	r2, [sp, #8]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d008      	beq.n	80074e2 <__ieee754_rem_pio2+0x196>
 80074d0:	9804      	ldr	r0, [sp, #16]
 80074d2:	9905      	ldr	r1, [sp, #20]
 80074d4:	0022      	movs	r2, r4
 80074d6:	002b      	movs	r3, r5
 80074d8:	f7fa fa78 	bl	80019cc <__aeabi_dsub>
 80074dc:	6038      	str	r0, [r7, #0]
 80074de:	6079      	str	r1, [r7, #4]
 80074e0:	e012      	b.n	8007508 <__ieee754_rem_pio2+0x1bc>
 80074e2:	0022      	movs	r2, r4
 80074e4:	9804      	ldr	r0, [sp, #16]
 80074e6:	9905      	ldr	r1, [sp, #20]
 80074e8:	002b      	movs	r3, r5
 80074ea:	f7fa fa6f 	bl	80019cc <__aeabi_dsub>
 80074ee:	9b02      	ldr	r3, [sp, #8]
 80074f0:	151b      	asrs	r3, r3, #20
 80074f2:	9308      	str	r3, [sp, #32]
 80074f4:	9a08      	ldr	r2, [sp, #32]
 80074f6:	004b      	lsls	r3, r1, #1
 80074f8:	0d5b      	lsrs	r3, r3, #21
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	dc21      	bgt.n	8007544 <__ieee754_rem_pio2+0x1f8>
 8007500:	0002      	movs	r2, r0
 8007502:	000b      	movs	r3, r1
 8007504:	603a      	str	r2, [r7, #0]
 8007506:	607b      	str	r3, [r7, #4]
 8007508:	9804      	ldr	r0, [sp, #16]
 800750a:	9905      	ldr	r1, [sp, #20]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	f7fa fa5a 	bl	80019cc <__aeabi_dsub>
 8007518:	0022      	movs	r2, r4
 800751a:	002b      	movs	r3, r5
 800751c:	f7fa fa56 	bl	80019cc <__aeabi_dsub>
 8007520:	000b      	movs	r3, r1
 8007522:	0002      	movs	r2, r0
 8007524:	60ba      	str	r2, [r7, #8]
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752a:	2b00      	cmp	r3, #0
 800752c:	db00      	blt.n	8007530 <__ieee754_rem_pio2+0x1e4>
 800752e:	e74a      	b.n	80073c6 <__ieee754_rem_pio2+0x7a>
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	061b      	lsls	r3, r3, #24
 8007534:	469c      	mov	ip, r3
 8007536:	9c02      	ldr	r4, [sp, #8]
 8007538:	18c9      	adds	r1, r1, r3
 800753a:	4464      	add	r4, ip
 800753c:	607c      	str	r4, [r7, #4]
 800753e:	60b8      	str	r0, [r7, #8]
 8007540:	60f9      	str	r1, [r7, #12]
 8007542:	e776      	b.n	8007432 <__ieee754_rem_pio2+0xe6>
 8007544:	22d3      	movs	r2, #211	; 0xd3
 8007546:	9806      	ldr	r0, [sp, #24]
 8007548:	9907      	ldr	r1, [sp, #28]
 800754a:	4b3f      	ldr	r3, [pc, #252]	; (8007648 <__ieee754_rem_pio2+0x2fc>)
 800754c:	0552      	lsls	r2, r2, #21
 800754e:	f7f9 ffd1 	bl	80014f4 <__aeabi_dmul>
 8007552:	0004      	movs	r4, r0
 8007554:	000d      	movs	r5, r1
 8007556:	0002      	movs	r2, r0
 8007558:	000b      	movs	r3, r1
 800755a:	9804      	ldr	r0, [sp, #16]
 800755c:	9905      	ldr	r1, [sp, #20]
 800755e:	f7fa fa35 	bl	80019cc <__aeabi_dsub>
 8007562:	0002      	movs	r2, r0
 8007564:	000b      	movs	r3, r1
 8007566:	9002      	str	r0, [sp, #8]
 8007568:	9103      	str	r1, [sp, #12]
 800756a:	9804      	ldr	r0, [sp, #16]
 800756c:	9905      	ldr	r1, [sp, #20]
 800756e:	f7fa fa2d 	bl	80019cc <__aeabi_dsub>
 8007572:	0022      	movs	r2, r4
 8007574:	002b      	movs	r3, r5
 8007576:	f7fa fa29 	bl	80019cc <__aeabi_dsub>
 800757a:	0004      	movs	r4, r0
 800757c:	000d      	movs	r5, r1
 800757e:	9806      	ldr	r0, [sp, #24]
 8007580:	9907      	ldr	r1, [sp, #28]
 8007582:	4a32      	ldr	r2, [pc, #200]	; (800764c <__ieee754_rem_pio2+0x300>)
 8007584:	4b32      	ldr	r3, [pc, #200]	; (8007650 <__ieee754_rem_pio2+0x304>)
 8007586:	f7f9 ffb5 	bl	80014f4 <__aeabi_dmul>
 800758a:	0022      	movs	r2, r4
 800758c:	002b      	movs	r3, r5
 800758e:	f7fa fa1d 	bl	80019cc <__aeabi_dsub>
 8007592:	0002      	movs	r2, r0
 8007594:	000b      	movs	r3, r1
 8007596:	0004      	movs	r4, r0
 8007598:	000d      	movs	r5, r1
 800759a:	9802      	ldr	r0, [sp, #8]
 800759c:	9903      	ldr	r1, [sp, #12]
 800759e:	f7fa fa15 	bl	80019cc <__aeabi_dsub>
 80075a2:	9a08      	ldr	r2, [sp, #32]
 80075a4:	004b      	lsls	r3, r1, #1
 80075a6:	0d5b      	lsrs	r3, r3, #21
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b31      	cmp	r3, #49	; 0x31
 80075ac:	dc08      	bgt.n	80075c0 <__ieee754_rem_pio2+0x274>
 80075ae:	0002      	movs	r2, r0
 80075b0:	000b      	movs	r3, r1
 80075b2:	603a      	str	r2, [r7, #0]
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	9a02      	ldr	r2, [sp, #8]
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	9204      	str	r2, [sp, #16]
 80075bc:	9305      	str	r3, [sp, #20]
 80075be:	e7a3      	b.n	8007508 <__ieee754_rem_pio2+0x1bc>
 80075c0:	22b8      	movs	r2, #184	; 0xb8
 80075c2:	9806      	ldr	r0, [sp, #24]
 80075c4:	9907      	ldr	r1, [sp, #28]
 80075c6:	4b22      	ldr	r3, [pc, #136]	; (8007650 <__ieee754_rem_pio2+0x304>)
 80075c8:	0592      	lsls	r2, r2, #22
 80075ca:	f7f9 ff93 	bl	80014f4 <__aeabi_dmul>
 80075ce:	0004      	movs	r4, r0
 80075d0:	000d      	movs	r5, r1
 80075d2:	0002      	movs	r2, r0
 80075d4:	000b      	movs	r3, r1
 80075d6:	9802      	ldr	r0, [sp, #8]
 80075d8:	9903      	ldr	r1, [sp, #12]
 80075da:	f7fa f9f7 	bl	80019cc <__aeabi_dsub>
 80075de:	0002      	movs	r2, r0
 80075e0:	000b      	movs	r3, r1
 80075e2:	9004      	str	r0, [sp, #16]
 80075e4:	9105      	str	r1, [sp, #20]
 80075e6:	9802      	ldr	r0, [sp, #8]
 80075e8:	9903      	ldr	r1, [sp, #12]
 80075ea:	f7fa f9ef 	bl	80019cc <__aeabi_dsub>
 80075ee:	0022      	movs	r2, r4
 80075f0:	002b      	movs	r3, r5
 80075f2:	f7fa f9eb 	bl	80019cc <__aeabi_dsub>
 80075f6:	0004      	movs	r4, r0
 80075f8:	000d      	movs	r5, r1
 80075fa:	9806      	ldr	r0, [sp, #24]
 80075fc:	9907      	ldr	r1, [sp, #28]
 80075fe:	4a1a      	ldr	r2, [pc, #104]	; (8007668 <__ieee754_rem_pio2+0x31c>)
 8007600:	4b1a      	ldr	r3, [pc, #104]	; (800766c <__ieee754_rem_pio2+0x320>)
 8007602:	f7f9 ff77 	bl	80014f4 <__aeabi_dmul>
 8007606:	0022      	movs	r2, r4
 8007608:	002b      	movs	r3, r5
 800760a:	f7fa f9df 	bl	80019cc <__aeabi_dsub>
 800760e:	0004      	movs	r4, r0
 8007610:	000d      	movs	r5, r1
 8007612:	e75d      	b.n	80074d0 <__ieee754_rem_pio2+0x184>
 8007614:	4b16      	ldr	r3, [pc, #88]	; (8007670 <__ieee754_rem_pio2+0x324>)
 8007616:	9a02      	ldr	r2, [sp, #8]
 8007618:	429a      	cmp	r2, r3
 800761a:	dd2b      	ble.n	8007674 <__ieee754_rem_pio2+0x328>
 800761c:	0022      	movs	r2, r4
 800761e:	002b      	movs	r3, r5
 8007620:	0020      	movs	r0, r4
 8007622:	0029      	movs	r1, r5
 8007624:	f7fa f9d2 	bl	80019cc <__aeabi_dsub>
 8007628:	60b8      	str	r0, [r7, #8]
 800762a:	60f9      	str	r1, [r7, #12]
 800762c:	6038      	str	r0, [r7, #0]
 800762e:	6079      	str	r1, [r7, #4]
 8007630:	e6a1      	b.n	8007376 <__ieee754_rem_pio2+0x2a>
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	3fe921fb 	.word	0x3fe921fb
 8007638:	4002d97b 	.word	0x4002d97b
 800763c:	3ff921fb 	.word	0x3ff921fb
 8007640:	54400000 	.word	0x54400000
 8007644:	1a626331 	.word	0x1a626331
 8007648:	3dd0b461 	.word	0x3dd0b461
 800764c:	2e037073 	.word	0x2e037073
 8007650:	3ba3198a 	.word	0x3ba3198a
 8007654:	413921fb 	.word	0x413921fb
 8007658:	6dc9c883 	.word	0x6dc9c883
 800765c:	3fe45f30 	.word	0x3fe45f30
 8007660:	3fe00000 	.word	0x3fe00000
 8007664:	080084bc 	.word	0x080084bc
 8007668:	252049c1 	.word	0x252049c1
 800766c:	397b839a 	.word	0x397b839a
 8007670:	7fefffff 	.word	0x7fefffff
 8007674:	9a02      	ldr	r2, [sp, #8]
 8007676:	0020      	movs	r0, r4
 8007678:	1516      	asrs	r6, r2, #20
 800767a:	4a29      	ldr	r2, [pc, #164]	; (8007720 <__ieee754_rem_pio2+0x3d4>)
 800767c:	18b6      	adds	r6, r6, r2
 800767e:	9a02      	ldr	r2, [sp, #8]
 8007680:	0533      	lsls	r3, r6, #20
 8007682:	1ad5      	subs	r5, r2, r3
 8007684:	0029      	movs	r1, r5
 8007686:	f7fa fd33 	bl	80020f0 <__aeabi_d2iz>
 800768a:	f7fa fd67 	bl	800215c <__aeabi_i2d>
 800768e:	0002      	movs	r2, r0
 8007690:	000b      	movs	r3, r1
 8007692:	0020      	movs	r0, r4
 8007694:	0029      	movs	r1, r5
 8007696:	920a      	str	r2, [sp, #40]	; 0x28
 8007698:	930b      	str	r3, [sp, #44]	; 0x2c
 800769a:	f7fa f997 	bl	80019cc <__aeabi_dsub>
 800769e:	2200      	movs	r2, #0
 80076a0:	4b20      	ldr	r3, [pc, #128]	; (8007724 <__ieee754_rem_pio2+0x3d8>)
 80076a2:	f7f9 ff27 	bl	80014f4 <__aeabi_dmul>
 80076a6:	000d      	movs	r5, r1
 80076a8:	0004      	movs	r4, r0
 80076aa:	f7fa fd21 	bl	80020f0 <__aeabi_d2iz>
 80076ae:	f7fa fd55 	bl	800215c <__aeabi_i2d>
 80076b2:	0002      	movs	r2, r0
 80076b4:	000b      	movs	r3, r1
 80076b6:	0020      	movs	r0, r4
 80076b8:	0029      	movs	r1, r5
 80076ba:	920c      	str	r2, [sp, #48]	; 0x30
 80076bc:	930d      	str	r3, [sp, #52]	; 0x34
 80076be:	f7fa f985 	bl	80019cc <__aeabi_dsub>
 80076c2:	2200      	movs	r2, #0
 80076c4:	4b17      	ldr	r3, [pc, #92]	; (8007724 <__ieee754_rem_pio2+0x3d8>)
 80076c6:	f7f9 ff15 	bl	80014f4 <__aeabi_dmul>
 80076ca:	2503      	movs	r5, #3
 80076cc:	900e      	str	r0, [sp, #56]	; 0x38
 80076ce:	910f      	str	r1, [sp, #60]	; 0x3c
 80076d0:	ac0a      	add	r4, sp, #40	; 0x28
 80076d2:	2200      	movs	r2, #0
 80076d4:	6920      	ldr	r0, [r4, #16]
 80076d6:	6961      	ldr	r1, [r4, #20]
 80076d8:	2300      	movs	r3, #0
 80076da:	9502      	str	r5, [sp, #8]
 80076dc:	3c08      	subs	r4, #8
 80076de:	3d01      	subs	r5, #1
 80076e0:	f7f8 fe94 	bl	800040c <__aeabi_dcmpeq>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d1f4      	bne.n	80076d2 <__ieee754_rem_pio2+0x386>
 80076e8:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <__ieee754_rem_pio2+0x3dc>)
 80076ea:	0032      	movs	r2, r6
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	2302      	movs	r3, #2
 80076f0:	0039      	movs	r1, r7
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	a80a      	add	r0, sp, #40	; 0x28
 80076f6:	9b02      	ldr	r3, [sp, #8]
 80076f8:	f000 f8d8 	bl	80078ac <__kernel_rem_pio2>
 80076fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fe:	0006      	movs	r6, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	db00      	blt.n	8007706 <__ieee754_rem_pio2+0x3ba>
 8007704:	e65f      	b.n	80073c6 <__ieee754_rem_pio2+0x7a>
 8007706:	2180      	movs	r1, #128	; 0x80
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	0609      	lsls	r1, r1, #24
 800770e:	1843      	adds	r3, r0, r1
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	603a      	str	r2, [r7, #0]
 8007714:	607b      	str	r3, [r7, #4]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	1843      	adds	r3, r0, r1
 800771a:	60ba      	str	r2, [r7, #8]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	e688      	b.n	8007432 <__ieee754_rem_pio2+0xe6>
 8007720:	fffffbea 	.word	0xfffffbea
 8007724:	41700000 	.word	0x41700000
 8007728:	0800853c 	.word	0x0800853c

0800772c <__kernel_cos>:
 800772c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800772e:	b087      	sub	sp, #28
 8007730:	9204      	str	r2, [sp, #16]
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	004b      	lsls	r3, r1, #1
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	23f9      	movs	r3, #249	; 0xf9
 800773c:	9a00      	ldr	r2, [sp, #0]
 800773e:	0007      	movs	r7, r0
 8007740:	000e      	movs	r6, r1
 8007742:	059b      	lsls	r3, r3, #22
 8007744:	429a      	cmp	r2, r3
 8007746:	da04      	bge.n	8007752 <__kernel_cos+0x26>
 8007748:	f7fa fcd2 	bl	80020f0 <__aeabi_d2iz>
 800774c:	2800      	cmp	r0, #0
 800774e:	d100      	bne.n	8007752 <__kernel_cos+0x26>
 8007750:	e084      	b.n	800785c <__kernel_cos+0x130>
 8007752:	003a      	movs	r2, r7
 8007754:	0033      	movs	r3, r6
 8007756:	0038      	movs	r0, r7
 8007758:	0031      	movs	r1, r6
 800775a:	f7f9 fecb 	bl	80014f4 <__aeabi_dmul>
 800775e:	2200      	movs	r2, #0
 8007760:	4b40      	ldr	r3, [pc, #256]	; (8007864 <__kernel_cos+0x138>)
 8007762:	0004      	movs	r4, r0
 8007764:	000d      	movs	r5, r1
 8007766:	f7f9 fec5 	bl	80014f4 <__aeabi_dmul>
 800776a:	4a3f      	ldr	r2, [pc, #252]	; (8007868 <__kernel_cos+0x13c>)
 800776c:	9002      	str	r0, [sp, #8]
 800776e:	9103      	str	r1, [sp, #12]
 8007770:	4b3e      	ldr	r3, [pc, #248]	; (800786c <__kernel_cos+0x140>)
 8007772:	0020      	movs	r0, r4
 8007774:	0029      	movs	r1, r5
 8007776:	f7f9 febd 	bl	80014f4 <__aeabi_dmul>
 800777a:	4a3d      	ldr	r2, [pc, #244]	; (8007870 <__kernel_cos+0x144>)
 800777c:	4b3d      	ldr	r3, [pc, #244]	; (8007874 <__kernel_cos+0x148>)
 800777e:	f7f8 ff7b 	bl	8000678 <__aeabi_dadd>
 8007782:	0022      	movs	r2, r4
 8007784:	002b      	movs	r3, r5
 8007786:	f7f9 feb5 	bl	80014f4 <__aeabi_dmul>
 800778a:	4a3b      	ldr	r2, [pc, #236]	; (8007878 <__kernel_cos+0x14c>)
 800778c:	4b3b      	ldr	r3, [pc, #236]	; (800787c <__kernel_cos+0x150>)
 800778e:	f7fa f91d 	bl	80019cc <__aeabi_dsub>
 8007792:	0022      	movs	r2, r4
 8007794:	002b      	movs	r3, r5
 8007796:	f7f9 fead 	bl	80014f4 <__aeabi_dmul>
 800779a:	4a39      	ldr	r2, [pc, #228]	; (8007880 <__kernel_cos+0x154>)
 800779c:	4b39      	ldr	r3, [pc, #228]	; (8007884 <__kernel_cos+0x158>)
 800779e:	f7f8 ff6b 	bl	8000678 <__aeabi_dadd>
 80077a2:	0022      	movs	r2, r4
 80077a4:	002b      	movs	r3, r5
 80077a6:	f7f9 fea5 	bl	80014f4 <__aeabi_dmul>
 80077aa:	4a37      	ldr	r2, [pc, #220]	; (8007888 <__kernel_cos+0x15c>)
 80077ac:	4b37      	ldr	r3, [pc, #220]	; (800788c <__kernel_cos+0x160>)
 80077ae:	f7fa f90d 	bl	80019cc <__aeabi_dsub>
 80077b2:	0022      	movs	r2, r4
 80077b4:	002b      	movs	r3, r5
 80077b6:	f7f9 fe9d 	bl	80014f4 <__aeabi_dmul>
 80077ba:	4a35      	ldr	r2, [pc, #212]	; (8007890 <__kernel_cos+0x164>)
 80077bc:	4b35      	ldr	r3, [pc, #212]	; (8007894 <__kernel_cos+0x168>)
 80077be:	f7f8 ff5b 	bl	8000678 <__aeabi_dadd>
 80077c2:	0022      	movs	r2, r4
 80077c4:	002b      	movs	r3, r5
 80077c6:	f7f9 fe95 	bl	80014f4 <__aeabi_dmul>
 80077ca:	0022      	movs	r2, r4
 80077cc:	002b      	movs	r3, r5
 80077ce:	f7f9 fe91 	bl	80014f4 <__aeabi_dmul>
 80077d2:	9a04      	ldr	r2, [sp, #16]
 80077d4:	9b05      	ldr	r3, [sp, #20]
 80077d6:	0004      	movs	r4, r0
 80077d8:	000d      	movs	r5, r1
 80077da:	0038      	movs	r0, r7
 80077dc:	0031      	movs	r1, r6
 80077de:	f7f9 fe89 	bl	80014f4 <__aeabi_dmul>
 80077e2:	0002      	movs	r2, r0
 80077e4:	000b      	movs	r3, r1
 80077e6:	0020      	movs	r0, r4
 80077e8:	0029      	movs	r1, r5
 80077ea:	f7fa f8ef 	bl	80019cc <__aeabi_dsub>
 80077ee:	4b2a      	ldr	r3, [pc, #168]	; (8007898 <__kernel_cos+0x16c>)
 80077f0:	9a00      	ldr	r2, [sp, #0]
 80077f2:	0004      	movs	r4, r0
 80077f4:	000d      	movs	r5, r1
 80077f6:	429a      	cmp	r2, r3
 80077f8:	dc0d      	bgt.n	8007816 <__kernel_cos+0xea>
 80077fa:	0002      	movs	r2, r0
 80077fc:	000b      	movs	r3, r1
 80077fe:	9802      	ldr	r0, [sp, #8]
 8007800:	9903      	ldr	r1, [sp, #12]
 8007802:	f7fa f8e3 	bl	80019cc <__aeabi_dsub>
 8007806:	0002      	movs	r2, r0
 8007808:	2000      	movs	r0, #0
 800780a:	000b      	movs	r3, r1
 800780c:	4923      	ldr	r1, [pc, #140]	; (800789c <__kernel_cos+0x170>)
 800780e:	f7fa f8dd 	bl	80019cc <__aeabi_dsub>
 8007812:	b007      	add	sp, #28
 8007814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007816:	4b22      	ldr	r3, [pc, #136]	; (80078a0 <__kernel_cos+0x174>)
 8007818:	9a00      	ldr	r2, [sp, #0]
 800781a:	2600      	movs	r6, #0
 800781c:	429a      	cmp	r2, r3
 800781e:	dc1b      	bgt.n	8007858 <__kernel_cos+0x12c>
 8007820:	0013      	movs	r3, r2
 8007822:	4a20      	ldr	r2, [pc, #128]	; (80078a4 <__kernel_cos+0x178>)
 8007824:	4694      	mov	ip, r2
 8007826:	4463      	add	r3, ip
 8007828:	001f      	movs	r7, r3
 800782a:	0032      	movs	r2, r6
 800782c:	003b      	movs	r3, r7
 800782e:	2000      	movs	r0, #0
 8007830:	491a      	ldr	r1, [pc, #104]	; (800789c <__kernel_cos+0x170>)
 8007832:	f7fa f8cb 	bl	80019cc <__aeabi_dsub>
 8007836:	0032      	movs	r2, r6
 8007838:	003b      	movs	r3, r7
 800783a:	9000      	str	r0, [sp, #0]
 800783c:	9101      	str	r1, [sp, #4]
 800783e:	9802      	ldr	r0, [sp, #8]
 8007840:	9903      	ldr	r1, [sp, #12]
 8007842:	f7fa f8c3 	bl	80019cc <__aeabi_dsub>
 8007846:	0022      	movs	r2, r4
 8007848:	002b      	movs	r3, r5
 800784a:	f7fa f8bf 	bl	80019cc <__aeabi_dsub>
 800784e:	0002      	movs	r2, r0
 8007850:	000b      	movs	r3, r1
 8007852:	9800      	ldr	r0, [sp, #0]
 8007854:	9901      	ldr	r1, [sp, #4]
 8007856:	e7da      	b.n	800780e <__kernel_cos+0xe2>
 8007858:	4f13      	ldr	r7, [pc, #76]	; (80078a8 <__kernel_cos+0x17c>)
 800785a:	e7e6      	b.n	800782a <__kernel_cos+0xfe>
 800785c:	2000      	movs	r0, #0
 800785e:	490f      	ldr	r1, [pc, #60]	; (800789c <__kernel_cos+0x170>)
 8007860:	e7d7      	b.n	8007812 <__kernel_cos+0xe6>
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	3fe00000 	.word	0x3fe00000
 8007868:	be8838d4 	.word	0xbe8838d4
 800786c:	bda8fae9 	.word	0xbda8fae9
 8007870:	bdb4b1c4 	.word	0xbdb4b1c4
 8007874:	3e21ee9e 	.word	0x3e21ee9e
 8007878:	809c52ad 	.word	0x809c52ad
 800787c:	3e927e4f 	.word	0x3e927e4f
 8007880:	19cb1590 	.word	0x19cb1590
 8007884:	3efa01a0 	.word	0x3efa01a0
 8007888:	16c15177 	.word	0x16c15177
 800788c:	3f56c16c 	.word	0x3f56c16c
 8007890:	5555554c 	.word	0x5555554c
 8007894:	3fa55555 	.word	0x3fa55555
 8007898:	3fd33332 	.word	0x3fd33332
 800789c:	3ff00000 	.word	0x3ff00000
 80078a0:	3fe90000 	.word	0x3fe90000
 80078a4:	ffe00000 	.word	0xffe00000
 80078a8:	3fd20000 	.word	0x3fd20000

080078ac <__kernel_rem_pio2>:
 80078ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ae:	4ccb      	ldr	r4, [pc, #812]	; (8007bdc <__kernel_rem_pio2+0x330>)
 80078b0:	44a5      	add	sp, r4
 80078b2:	930d      	str	r3, [sp, #52]	; 0x34
 80078b4:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80078b6:	0014      	movs	r4, r2
 80078b8:	009a      	lsls	r2, r3, #2
 80078ba:	4bc9      	ldr	r3, [pc, #804]	; (8007be0 <__kernel_rem_pio2+0x334>)
 80078bc:	900e      	str	r0, [sp, #56]	; 0x38
 80078be:	58d3      	ldr	r3, [r2, r3]
 80078c0:	9107      	str	r1, [sp, #28]
 80078c2:	930a      	str	r3, [sp, #40]	; 0x28
 80078c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078c6:	3b01      	subs	r3, #1
 80078c8:	930c      	str	r3, [sp, #48]	; 0x30
 80078ca:	2300      	movs	r3, #0
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	0023      	movs	r3, r4
 80078d0:	3314      	adds	r3, #20
 80078d2:	db04      	blt.n	80078de <__kernel_rem_pio2+0x32>
 80078d4:	2118      	movs	r1, #24
 80078d6:	1ee0      	subs	r0, r4, #3
 80078d8:	f7f8 fc9c 	bl	8000214 <__divsi3>
 80078dc:	9000      	str	r0, [sp, #0]
 80078de:	2218      	movs	r2, #24
 80078e0:	9b00      	ldr	r3, [sp, #0]
 80078e2:	4252      	negs	r2, r2
 80078e4:	3301      	adds	r3, #1
 80078e6:	435a      	muls	r2, r3
 80078e8:	1913      	adds	r3, r2, r4
 80078ea:	9302      	str	r3, [sp, #8]
 80078ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	ae26      	add	r6, sp, #152	; 0x98
 80078f2:	1a9d      	subs	r5, r3, r2
 80078f4:	002c      	movs	r4, r5
 80078f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f8:	189f      	adds	r7, r3, r2
 80078fa:	1b63      	subs	r3, r4, r5
 80078fc:	429f      	cmp	r7, r3
 80078fe:	da0f      	bge.n	8007920 <__kernel_rem_pio2+0x74>
 8007900:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007902:	af76      	add	r7, sp, #472	; 0x1d8
 8007904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007908:	1af3      	subs	r3, r6, r3
 800790a:	429a      	cmp	r2, r3
 800790c:	db30      	blt.n	8007970 <__kernel_rem_pio2+0xc4>
 800790e:	ab26      	add	r3, sp, #152	; 0x98
 8007910:	00f4      	lsls	r4, r6, #3
 8007912:	2200      	movs	r2, #0
 8007914:	18e4      	adds	r4, r4, r3
 8007916:	2300      	movs	r3, #0
 8007918:	2500      	movs	r5, #0
 800791a:	9204      	str	r2, [sp, #16]
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	e01e      	b.n	800795e <__kernel_rem_pio2+0xb2>
 8007920:	2c00      	cmp	r4, #0
 8007922:	db07      	blt.n	8007934 <__kernel_rem_pio2+0x88>
 8007924:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8007926:	00a3      	lsls	r3, r4, #2
 8007928:	58d0      	ldr	r0, [r2, r3]
 800792a:	f7fa fc17 	bl	800215c <__aeabi_i2d>
 800792e:	c603      	stmia	r6!, {r0, r1}
 8007930:	3401      	adds	r4, #1
 8007932:	e7e2      	b.n	80078fa <__kernel_rem_pio2+0x4e>
 8007934:	2000      	movs	r0, #0
 8007936:	2100      	movs	r1, #0
 8007938:	e7f9      	b.n	800792e <__kernel_rem_pio2+0x82>
 800793a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793c:	00e9      	lsls	r1, r5, #3
 800793e:	1859      	adds	r1, r3, r1
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	6849      	ldr	r1, [r1, #4]
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	6863      	ldr	r3, [r4, #4]
 8007948:	f7f9 fdd4 	bl	80014f4 <__aeabi_dmul>
 800794c:	0002      	movs	r2, r0
 800794e:	000b      	movs	r3, r1
 8007950:	9804      	ldr	r0, [sp, #16]
 8007952:	9905      	ldr	r1, [sp, #20]
 8007954:	f7f8 fe90 	bl	8000678 <__aeabi_dadd>
 8007958:	9004      	str	r0, [sp, #16]
 800795a:	9105      	str	r1, [sp, #20]
 800795c:	3501      	adds	r5, #1
 800795e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007960:	3c08      	subs	r4, #8
 8007962:	429d      	cmp	r5, r3
 8007964:	dde9      	ble.n	800793a <__kernel_rem_pio2+0x8e>
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	9c05      	ldr	r4, [sp, #20]
 800796a:	3601      	adds	r6, #1
 800796c:	c718      	stmia	r7!, {r3, r4}
 800796e:	e7c9      	b.n	8007904 <__kernel_rem_pio2+0x58>
 8007970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007972:	aa12      	add	r2, sp, #72	; 0x48
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	189b      	adds	r3, r3, r2
 8007978:	9310      	str	r3, [sp, #64]	; 0x40
 800797a:	9b00      	ldr	r3, [sp, #0]
 800797c:	0098      	lsls	r0, r3, #2
 800797e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007980:	181b      	adds	r3, r3, r0
 8007982:	930f      	str	r3, [sp, #60]	; 0x3c
 8007984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007986:	9304      	str	r3, [sp, #16]
 8007988:	9b04      	ldr	r3, [sp, #16]
 800798a:	aa76      	add	r2, sp, #472	; 0x1d8
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	18d3      	adds	r3, r2, r3
 8007990:	681c      	ldr	r4, [r3, #0]
 8007992:	685d      	ldr	r5, [r3, #4]
 8007994:	ab12      	add	r3, sp, #72	; 0x48
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	9309      	str	r3, [sp, #36]	; 0x24
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	9211      	str	r2, [sp, #68]	; 0x44
 800799e:	9308      	str	r3, [sp, #32]
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dc74      	bgt.n	8007a90 <__kernel_rem_pio2+0x1e4>
 80079a6:	0020      	movs	r0, r4
 80079a8:	0029      	movs	r1, r5
 80079aa:	9a02      	ldr	r2, [sp, #8]
 80079ac:	f000 fc22 	bl	80081f4 <scalbn>
 80079b0:	23ff      	movs	r3, #255	; 0xff
 80079b2:	2200      	movs	r2, #0
 80079b4:	059b      	lsls	r3, r3, #22
 80079b6:	0004      	movs	r4, r0
 80079b8:	000d      	movs	r5, r1
 80079ba:	f7f9 fd9b 	bl	80014f4 <__aeabi_dmul>
 80079be:	f000 fb8f 	bl	80080e0 <floor>
 80079c2:	2200      	movs	r2, #0
 80079c4:	4b87      	ldr	r3, [pc, #540]	; (8007be4 <__kernel_rem_pio2+0x338>)
 80079c6:	f7f9 fd95 	bl	80014f4 <__aeabi_dmul>
 80079ca:	0002      	movs	r2, r0
 80079cc:	000b      	movs	r3, r1
 80079ce:	0020      	movs	r0, r4
 80079d0:	0029      	movs	r1, r5
 80079d2:	f7f9 fffb 	bl	80019cc <__aeabi_dsub>
 80079d6:	000d      	movs	r5, r1
 80079d8:	0004      	movs	r4, r0
 80079da:	f7fa fb89 	bl	80020f0 <__aeabi_d2iz>
 80079de:	9009      	str	r0, [sp, #36]	; 0x24
 80079e0:	f7fa fbbc 	bl	800215c <__aeabi_i2d>
 80079e4:	000b      	movs	r3, r1
 80079e6:	0002      	movs	r2, r0
 80079e8:	0029      	movs	r1, r5
 80079ea:	0020      	movs	r0, r4
 80079ec:	f7f9 ffee 	bl	80019cc <__aeabi_dsub>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	0006      	movs	r6, r0
 80079f4:	000f      	movs	r7, r1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dd74      	ble.n	8007ae4 <__kernel_rem_pio2+0x238>
 80079fa:	2118      	movs	r1, #24
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	aa12      	add	r2, sp, #72	; 0x48
 8007a00:	3b01      	subs	r3, #1
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	589a      	ldr	r2, [r3, r2]
 8007a06:	9802      	ldr	r0, [sp, #8]
 8007a08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007a0a:	1a09      	subs	r1, r1, r0
 8007a0c:	0010      	movs	r0, r2
 8007a0e:	4108      	asrs	r0, r1
 8007a10:	1824      	adds	r4, r4, r0
 8007a12:	4088      	lsls	r0, r1
 8007a14:	a912      	add	r1, sp, #72	; 0x48
 8007a16:	1a12      	subs	r2, r2, r0
 8007a18:	505a      	str	r2, [r3, r1]
 8007a1a:	2317      	movs	r3, #23
 8007a1c:	9902      	ldr	r1, [sp, #8]
 8007a1e:	9409      	str	r4, [sp, #36]	; 0x24
 8007a20:	1a5b      	subs	r3, r3, r1
 8007a22:	411a      	asrs	r2, r3
 8007a24:	9208      	str	r2, [sp, #32]
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dd6d      	ble.n	8007b08 <__kernel_rem_pio2+0x25c>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a30:	2080      	movs	r0, #128	; 0x80
 8007a32:	3301      	adds	r3, #1
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	4b6c      	ldr	r3, [pc, #432]	; (8007be8 <__kernel_rem_pio2+0x33c>)
 8007a38:	0014      	movs	r4, r2
 8007a3a:	469c      	mov	ip, r3
 8007a3c:	2501      	movs	r5, #1
 8007a3e:	0440      	lsls	r0, r0, #17
 8007a40:	9b04      	ldr	r3, [sp, #16]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	dd00      	ble.n	8007a48 <__kernel_rem_pio2+0x19c>
 8007a46:	e099      	b.n	8007b7c <__kernel_rem_pio2+0x2d0>
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dd05      	ble.n	8007a5a <__kernel_rem_pio2+0x1ae>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d100      	bne.n	8007a54 <__kernel_rem_pio2+0x1a8>
 8007a52:	e0a9      	b.n	8007ba8 <__kernel_rem_pio2+0x2fc>
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d100      	bne.n	8007a5a <__kernel_rem_pio2+0x1ae>
 8007a58:	e0b1      	b.n	8007bbe <__kernel_rem_pio2+0x312>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d153      	bne.n	8007b08 <__kernel_rem_pio2+0x25c>
 8007a60:	0032      	movs	r2, r6
 8007a62:	003b      	movs	r3, r7
 8007a64:	2000      	movs	r0, #0
 8007a66:	4961      	ldr	r1, [pc, #388]	; (8007bec <__kernel_rem_pio2+0x340>)
 8007a68:	f7f9 ffb0 	bl	80019cc <__aeabi_dsub>
 8007a6c:	0006      	movs	r6, r0
 8007a6e:	000f      	movs	r7, r1
 8007a70:	2c00      	cmp	r4, #0
 8007a72:	d049      	beq.n	8007b08 <__kernel_rem_pio2+0x25c>
 8007a74:	9a02      	ldr	r2, [sp, #8]
 8007a76:	2000      	movs	r0, #0
 8007a78:	495c      	ldr	r1, [pc, #368]	; (8007bec <__kernel_rem_pio2+0x340>)
 8007a7a:	f000 fbbb 	bl	80081f4 <scalbn>
 8007a7e:	0002      	movs	r2, r0
 8007a80:	000b      	movs	r3, r1
 8007a82:	0030      	movs	r0, r6
 8007a84:	0039      	movs	r1, r7
 8007a86:	f7f9 ffa1 	bl	80019cc <__aeabi_dsub>
 8007a8a:	0006      	movs	r6, r0
 8007a8c:	000f      	movs	r7, r1
 8007a8e:	e03b      	b.n	8007b08 <__kernel_rem_pio2+0x25c>
 8007a90:	2200      	movs	r2, #0
 8007a92:	4b57      	ldr	r3, [pc, #348]	; (8007bf0 <__kernel_rem_pio2+0x344>)
 8007a94:	0020      	movs	r0, r4
 8007a96:	0029      	movs	r1, r5
 8007a98:	f7f9 fd2c 	bl	80014f4 <__aeabi_dmul>
 8007a9c:	f7fa fb28 	bl	80020f0 <__aeabi_d2iz>
 8007aa0:	f7fa fb5c 	bl	800215c <__aeabi_i2d>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <__kernel_rem_pio2+0x348>)
 8007aa8:	0006      	movs	r6, r0
 8007aaa:	000f      	movs	r7, r1
 8007aac:	f7f9 fd22 	bl	80014f4 <__aeabi_dmul>
 8007ab0:	0002      	movs	r2, r0
 8007ab2:	000b      	movs	r3, r1
 8007ab4:	0020      	movs	r0, r4
 8007ab6:	0029      	movs	r1, r5
 8007ab8:	f7f9 ff88 	bl	80019cc <__aeabi_dsub>
 8007abc:	f7fa fb18 	bl	80020f0 <__aeabi_d2iz>
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ac4:	c301      	stmia	r3!, {r0}
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	0030      	movs	r0, r6
 8007acc:	3b01      	subs	r3, #1
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	00db      	lsls	r3, r3, #3
 8007ad2:	18d3      	adds	r3, r2, r3
 8007ad4:	0039      	movs	r1, r7
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f7f8 fdcd 	bl	8000678 <__aeabi_dadd>
 8007ade:	0004      	movs	r4, r0
 8007ae0:	000d      	movs	r5, r1
 8007ae2:	e75d      	b.n	80079a0 <__kernel_rem_pio2+0xf4>
 8007ae4:	9b02      	ldr	r3, [sp, #8]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d107      	bne.n	8007afa <__kernel_rem_pio2+0x24e>
 8007aea:	9b04      	ldr	r3, [sp, #16]
 8007aec:	aa12      	add	r2, sp, #72	; 0x48
 8007aee:	3b01      	subs	r3, #1
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	5898      	ldr	r0, [r3, r2]
 8007af4:	15c3      	asrs	r3, r0, #23
 8007af6:	9308      	str	r3, [sp, #32]
 8007af8:	e795      	b.n	8007a26 <__kernel_rem_pio2+0x17a>
 8007afa:	2200      	movs	r2, #0
 8007afc:	4b3e      	ldr	r3, [pc, #248]	; (8007bf8 <__kernel_rem_pio2+0x34c>)
 8007afe:	f7f8 fca9 	bl	8000454 <__aeabi_dcmpge>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d137      	bne.n	8007b76 <__kernel_rem_pio2+0x2ca>
 8007b06:	9008      	str	r0, [sp, #32]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	0030      	movs	r0, r6
 8007b0e:	0039      	movs	r1, r7
 8007b10:	f7f8 fc7c 	bl	800040c <__aeabi_dcmpeq>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d100      	bne.n	8007b1a <__kernel_rem_pio2+0x26e>
 8007b18:	e0b9      	b.n	8007c8e <__kernel_rem_pio2+0x3e2>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	9b04      	ldr	r3, [sp, #16]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b24:	428b      	cmp	r3, r1
 8007b26:	da53      	bge.n	8007bd0 <__kernel_rem_pio2+0x324>
 8007b28:	2a00      	cmp	r2, #0
 8007b2a:	d100      	bne.n	8007b2e <__kernel_rem_pio2+0x282>
 8007b2c:	e095      	b.n	8007c5a <__kernel_rem_pio2+0x3ae>
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	aa12      	add	r2, sp, #72	; 0x48
 8007b32:	3b18      	subs	r3, #24
 8007b34:	9302      	str	r3, [sp, #8]
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	589b      	ldr	r3, [r3, r2]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d100      	bne.n	8007b42 <__kernel_rem_pio2+0x296>
 8007b40:	e0a1      	b.n	8007c86 <__kernel_rem_pio2+0x3da>
 8007b42:	2000      	movs	r0, #0
 8007b44:	9a02      	ldr	r2, [sp, #8]
 8007b46:	4929      	ldr	r1, [pc, #164]	; (8007bec <__kernel_rem_pio2+0x340>)
 8007b48:	f000 fb54 	bl	80081f4 <scalbn>
 8007b4c:	0006      	movs	r6, r0
 8007b4e:	000f      	movs	r7, r1
 8007b50:	9c00      	ldr	r4, [sp, #0]
 8007b52:	2c00      	cmp	r4, #0
 8007b54:	db00      	blt.n	8007b58 <__kernel_rem_pio2+0x2ac>
 8007b56:	e0d9      	b.n	8007d0c <__kernel_rem_pio2+0x460>
 8007b58:	9c00      	ldr	r4, [sp, #0]
 8007b5a:	2c00      	cmp	r4, #0
 8007b5c:	da00      	bge.n	8007b60 <__kernel_rem_pio2+0x2b4>
 8007b5e:	e10c      	b.n	8007d7a <__kernel_rem_pio2+0x4ce>
 8007b60:	ab76      	add	r3, sp, #472	; 0x1d8
 8007b62:	00e6      	lsls	r6, r4, #3
 8007b64:	2200      	movs	r2, #0
 8007b66:	18f6      	adds	r6, r6, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9202      	str	r2, [sp, #8]
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	2500      	movs	r5, #0
 8007b72:	1b1f      	subs	r7, r3, r4
 8007b74:	e0f3      	b.n	8007d5e <__kernel_rem_pio2+0x4b2>
 8007b76:	2302      	movs	r3, #2
 8007b78:	9308      	str	r3, [sp, #32]
 8007b7a:	e757      	b.n	8007a2c <__kernel_rem_pio2+0x180>
 8007b7c:	9b00      	ldr	r3, [sp, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2c00      	cmp	r4, #0
 8007b82:	d10b      	bne.n	8007b9c <__kernel_rem_pio2+0x2f0>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <__kernel_rem_pio2+0x2e4>
 8007b88:	9c00      	ldr	r4, [sp, #0]
 8007b8a:	1ac3      	subs	r3, r0, r3
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	002b      	movs	r3, r5
 8007b90:	9c00      	ldr	r4, [sp, #0]
 8007b92:	3201      	adds	r2, #1
 8007b94:	3404      	adds	r4, #4
 8007b96:	9400      	str	r4, [sp, #0]
 8007b98:	001c      	movs	r4, r3
 8007b9a:	e751      	b.n	8007a40 <__kernel_rem_pio2+0x194>
 8007b9c:	4661      	mov	r1, ip
 8007b9e:	1acb      	subs	r3, r1, r3
 8007ba0:	9900      	ldr	r1, [sp, #0]
 8007ba2:	600b      	str	r3, [r1, #0]
 8007ba4:	0023      	movs	r3, r4
 8007ba6:	e7f3      	b.n	8007b90 <__kernel_rem_pio2+0x2e4>
 8007ba8:	9b04      	ldr	r3, [sp, #16]
 8007baa:	aa12      	add	r2, sp, #72	; 0x48
 8007bac:	3b01      	subs	r3, #1
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	589a      	ldr	r2, [r3, r2]
 8007bb2:	9200      	str	r2, [sp, #0]
 8007bb4:	0252      	lsls	r2, r2, #9
 8007bb6:	0a52      	lsrs	r2, r2, #9
 8007bb8:	a912      	add	r1, sp, #72	; 0x48
 8007bba:	505a      	str	r2, [r3, r1]
 8007bbc:	e74d      	b.n	8007a5a <__kernel_rem_pio2+0x1ae>
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	aa12      	add	r2, sp, #72	; 0x48
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	589a      	ldr	r2, [r3, r2]
 8007bc8:	9200      	str	r2, [sp, #0]
 8007bca:	0292      	lsls	r2, r2, #10
 8007bcc:	0a92      	lsrs	r2, r2, #10
 8007bce:	e7f3      	b.n	8007bb8 <__kernel_rem_pio2+0x30c>
 8007bd0:	0099      	lsls	r1, r3, #2
 8007bd2:	a812      	add	r0, sp, #72	; 0x48
 8007bd4:	5809      	ldr	r1, [r1, r0]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	e7a2      	b.n	8007b22 <__kernel_rem_pio2+0x276>
 8007bdc:	fffffd84 	.word	0xfffffd84
 8007be0:	08008688 	.word	0x08008688
 8007be4:	40200000 	.word	0x40200000
 8007be8:	00ffffff 	.word	0x00ffffff
 8007bec:	3ff00000 	.word	0x3ff00000
 8007bf0:	3e700000 	.word	0x3e700000
 8007bf4:	41700000 	.word	0x41700000
 8007bf8:	3fe00000 	.word	0x3fe00000
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007c00:	009a      	lsls	r2, r3, #2
 8007c02:	4252      	negs	r2, r2
 8007c04:	588a      	ldr	r2, [r1, r2]
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	d0f8      	beq.n	8007bfc <__kernel_rem_pio2+0x350>
 8007c0a:	9a04      	ldr	r2, [sp, #16]
 8007c0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c0e:	1c57      	adds	r7, r2, #1
 8007c10:	1854      	adds	r4, r2, r1
 8007c12:	00e4      	lsls	r4, r4, #3
 8007c14:	aa26      	add	r2, sp, #152	; 0x98
 8007c16:	1914      	adds	r4, r2, r4
 8007c18:	9a04      	ldr	r2, [sp, #16]
 8007c1a:	18d3      	adds	r3, r2, r3
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	42bb      	cmp	r3, r7
 8007c22:	da00      	bge.n	8007c26 <__kernel_rem_pio2+0x37a>
 8007c24:	e6b0      	b.n	8007988 <__kernel_rem_pio2+0xdc>
 8007c26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c28:	00bb      	lsls	r3, r7, #2
 8007c2a:	58d0      	ldr	r0, [r2, r3]
 8007c2c:	f7fa fa96 	bl	800215c <__aeabi_i2d>
 8007c30:	2200      	movs	r2, #0
 8007c32:	2300      	movs	r3, #0
 8007c34:	0026      	movs	r6, r4
 8007c36:	2500      	movs	r5, #0
 8007c38:	6020      	str	r0, [r4, #0]
 8007c3a:	6061      	str	r1, [r4, #4]
 8007c3c:	9200      	str	r2, [sp, #0]
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c42:	429d      	cmp	r5, r3
 8007c44:	dd0b      	ble.n	8007c5e <__kernel_rem_pio2+0x3b2>
 8007c46:	00fb      	lsls	r3, r7, #3
 8007c48:	aa76      	add	r2, sp, #472	; 0x1d8
 8007c4a:	18d3      	adds	r3, r2, r3
 8007c4c:	3701      	adds	r7, #1
 8007c4e:	9900      	ldr	r1, [sp, #0]
 8007c50:	9a01      	ldr	r2, [sp, #4]
 8007c52:	3408      	adds	r4, #8
 8007c54:	6019      	str	r1, [r3, #0]
 8007c56:	605a      	str	r2, [r3, #4]
 8007c58:	e7e1      	b.n	8007c1e <__kernel_rem_pio2+0x372>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e7cf      	b.n	8007bfe <__kernel_rem_pio2+0x352>
 8007c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c60:	00e9      	lsls	r1, r5, #3
 8007c62:	1859      	adds	r1, r3, r1
 8007c64:	6808      	ldr	r0, [r1, #0]
 8007c66:	6849      	ldr	r1, [r1, #4]
 8007c68:	6832      	ldr	r2, [r6, #0]
 8007c6a:	6873      	ldr	r3, [r6, #4]
 8007c6c:	f7f9 fc42 	bl	80014f4 <__aeabi_dmul>
 8007c70:	0002      	movs	r2, r0
 8007c72:	000b      	movs	r3, r1
 8007c74:	9800      	ldr	r0, [sp, #0]
 8007c76:	9901      	ldr	r1, [sp, #4]
 8007c78:	f7f8 fcfe 	bl	8000678 <__aeabi_dadd>
 8007c7c:	3501      	adds	r5, #1
 8007c7e:	9000      	str	r0, [sp, #0]
 8007c80:	9101      	str	r1, [sp, #4]
 8007c82:	3e08      	subs	r6, #8
 8007c84:	e7dc      	b.n	8007c40 <__kernel_rem_pio2+0x394>
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	e74f      	b.n	8007b2e <__kernel_rem_pio2+0x282>
 8007c8e:	9b02      	ldr	r3, [sp, #8]
 8007c90:	0030      	movs	r0, r6
 8007c92:	425a      	negs	r2, r3
 8007c94:	0039      	movs	r1, r7
 8007c96:	f000 faad 	bl	80081f4 <scalbn>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4bb5      	ldr	r3, [pc, #724]	; (8007f74 <__kernel_rem_pio2+0x6c8>)
 8007c9e:	0004      	movs	r4, r0
 8007ca0:	000d      	movs	r5, r1
 8007ca2:	f7f8 fbd7 	bl	8000454 <__aeabi_dcmpge>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d025      	beq.n	8007cf6 <__kernel_rem_pio2+0x44a>
 8007caa:	2200      	movs	r2, #0
 8007cac:	4bb2      	ldr	r3, [pc, #712]	; (8007f78 <__kernel_rem_pio2+0x6cc>)
 8007cae:	0020      	movs	r0, r4
 8007cb0:	0029      	movs	r1, r5
 8007cb2:	f7f9 fc1f 	bl	80014f4 <__aeabi_dmul>
 8007cb6:	f7fa fa1b 	bl	80020f0 <__aeabi_d2iz>
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	0006      	movs	r6, r0
 8007cbe:	009f      	lsls	r7, r3, #2
 8007cc0:	f7fa fa4c 	bl	800215c <__aeabi_i2d>
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4bab      	ldr	r3, [pc, #684]	; (8007f74 <__kernel_rem_pio2+0x6c8>)
 8007cc8:	f7f9 fc14 	bl	80014f4 <__aeabi_dmul>
 8007ccc:	0002      	movs	r2, r0
 8007cce:	000b      	movs	r3, r1
 8007cd0:	0020      	movs	r0, r4
 8007cd2:	0029      	movs	r1, r5
 8007cd4:	f7f9 fe7a 	bl	80019cc <__aeabi_dsub>
 8007cd8:	f7fa fa0a 	bl	80020f0 <__aeabi_d2iz>
 8007cdc:	ab12      	add	r3, sp, #72	; 0x48
 8007cde:	51d8      	str	r0, [r3, r7]
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	aa12      	add	r2, sp, #72	; 0x48
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	3318      	adds	r3, #24
 8007cec:	9302      	str	r3, [sp, #8]
 8007cee:	9b00      	ldr	r3, [sp, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	509e      	str	r6, [r3, r2]
 8007cf4:	e725      	b.n	8007b42 <__kernel_rem_pio2+0x296>
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	0020      	movs	r0, r4
 8007cfa:	0029      	movs	r1, r5
 8007cfc:	009e      	lsls	r6, r3, #2
 8007cfe:	f7fa f9f7 	bl	80020f0 <__aeabi_d2iz>
 8007d02:	ab12      	add	r3, sp, #72	; 0x48
 8007d04:	5198      	str	r0, [r3, r6]
 8007d06:	9b04      	ldr	r3, [sp, #16]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	e71a      	b.n	8007b42 <__kernel_rem_pio2+0x296>
 8007d0c:	00e5      	lsls	r5, r4, #3
 8007d0e:	ab76      	add	r3, sp, #472	; 0x1d8
 8007d10:	aa12      	add	r2, sp, #72	; 0x48
 8007d12:	195d      	adds	r5, r3, r5
 8007d14:	00a3      	lsls	r3, r4, #2
 8007d16:	5898      	ldr	r0, [r3, r2]
 8007d18:	f7fa fa20 	bl	800215c <__aeabi_i2d>
 8007d1c:	0032      	movs	r2, r6
 8007d1e:	003b      	movs	r3, r7
 8007d20:	f7f9 fbe8 	bl	80014f4 <__aeabi_dmul>
 8007d24:	2200      	movs	r2, #0
 8007d26:	6028      	str	r0, [r5, #0]
 8007d28:	6069      	str	r1, [r5, #4]
 8007d2a:	4b93      	ldr	r3, [pc, #588]	; (8007f78 <__kernel_rem_pio2+0x6cc>)
 8007d2c:	0030      	movs	r0, r6
 8007d2e:	0039      	movs	r1, r7
 8007d30:	f7f9 fbe0 	bl	80014f4 <__aeabi_dmul>
 8007d34:	3c01      	subs	r4, #1
 8007d36:	0006      	movs	r6, r0
 8007d38:	000f      	movs	r7, r1
 8007d3a:	e70a      	b.n	8007b52 <__kernel_rem_pio2+0x2a6>
 8007d3c:	4b8f      	ldr	r3, [pc, #572]	; (8007f7c <__kernel_rem_pio2+0x6d0>)
 8007d3e:	00e9      	lsls	r1, r5, #3
 8007d40:	1859      	adds	r1, r3, r1
 8007d42:	6808      	ldr	r0, [r1, #0]
 8007d44:	6849      	ldr	r1, [r1, #4]
 8007d46:	ce0c      	ldmia	r6!, {r2, r3}
 8007d48:	f7f9 fbd4 	bl	80014f4 <__aeabi_dmul>
 8007d4c:	0002      	movs	r2, r0
 8007d4e:	000b      	movs	r3, r1
 8007d50:	9802      	ldr	r0, [sp, #8]
 8007d52:	9903      	ldr	r1, [sp, #12]
 8007d54:	f7f8 fc90 	bl	8000678 <__aeabi_dadd>
 8007d58:	9002      	str	r0, [sp, #8]
 8007d5a:	9103      	str	r1, [sp, #12]
 8007d5c:	3501      	adds	r5, #1
 8007d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d60:	429d      	cmp	r5, r3
 8007d62:	dc01      	bgt.n	8007d68 <__kernel_rem_pio2+0x4bc>
 8007d64:	42bd      	cmp	r5, r7
 8007d66:	dde9      	ble.n	8007d3c <__kernel_rem_pio2+0x490>
 8007d68:	ab4e      	add	r3, sp, #312	; 0x138
 8007d6a:	00ff      	lsls	r7, r7, #3
 8007d6c:	19df      	adds	r7, r3, r7
 8007d6e:	3c01      	subs	r4, #1
 8007d70:	9a02      	ldr	r2, [sp, #8]
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	603a      	str	r2, [r7, #0]
 8007d76:	607b      	str	r3, [r7, #4]
 8007d78:	e6ef      	b.n	8007b5a <__kernel_rem_pio2+0x2ae>
 8007d7a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	dc0e      	bgt.n	8007d9e <__kernel_rem_pio2+0x4f2>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dd00      	ble.n	8007d86 <__kernel_rem_pio2+0x4da>
 8007d84:	e08c      	b.n	8007ea0 <__kernel_rem_pio2+0x5f4>
 8007d86:	2500      	movs	r5, #0
 8007d88:	002c      	movs	r4, r5
 8007d8a:	42ab      	cmp	r3, r5
 8007d8c:	d046      	beq.n	8007e1c <__kernel_rem_pio2+0x570>
 8007d8e:	2007      	movs	r0, #7
 8007d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d92:	4003      	ands	r3, r0
 8007d94:	0018      	movs	r0, r3
 8007d96:	239f      	movs	r3, #159	; 0x9f
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	449d      	add	sp, r3
 8007d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d1f4      	bne.n	8007d8e <__kernel_rem_pio2+0x4e2>
 8007da4:	9b00      	ldr	r3, [sp, #0]
 8007da6:	00dc      	lsls	r4, r3, #3
 8007da8:	ab4e      	add	r3, sp, #312	; 0x138
 8007daa:	191c      	adds	r4, r3, r4
 8007dac:	0025      	movs	r5, r4
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	9302      	str	r3, [sp, #8]
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	3d08      	subs	r5, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd00      	ble.n	8007dbc <__kernel_rem_pio2+0x510>
 8007dba:	e07f      	b.n	8007ebc <__kernel_rem_pio2+0x610>
 8007dbc:	9d00      	ldr	r5, [sp, #0]
 8007dbe:	3c08      	subs	r4, #8
 8007dc0:	2d01      	cmp	r5, #1
 8007dc2:	dd00      	ble.n	8007dc6 <__kernel_rem_pio2+0x51a>
 8007dc4:	e09c      	b.n	8007f00 <__kernel_rem_pio2+0x654>
 8007dc6:	2400      	movs	r4, #0
 8007dc8:	0021      	movs	r1, r4
 8007dca:	9b00      	ldr	r3, [sp, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	dd00      	ble.n	8007dd2 <__kernel_rem_pio2+0x526>
 8007dd0:	e0b4      	b.n	8007f3c <__kernel_rem_pio2+0x690>
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8007dd6:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8007dd8:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8007dda:	9851      	ldr	r0, [sp, #324]	; 0x144
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d000      	beq.n	8007de2 <__kernel_rem_pio2+0x536>
 8007de0:	e0ba      	b.n	8007f58 <__kernel_rem_pio2+0x6ac>
 8007de2:	0033      	movs	r3, r6
 8007de4:	003a      	movs	r2, r7
 8007de6:	9e07      	ldr	r6, [sp, #28]
 8007de8:	6032      	str	r2, [r6, #0]
 8007dea:	6073      	str	r3, [r6, #4]
 8007dec:	002a      	movs	r2, r5
 8007dee:	0003      	movs	r3, r0
 8007df0:	60b2      	str	r2, [r6, #8]
 8007df2:	60f3      	str	r3, [r6, #12]
 8007df4:	0022      	movs	r2, r4
 8007df6:	000b      	movs	r3, r1
 8007df8:	6132      	str	r2, [r6, #16]
 8007dfa:	6173      	str	r3, [r6, #20]
 8007dfc:	e7c7      	b.n	8007d8e <__kernel_rem_pio2+0x4e2>
 8007dfe:	9b00      	ldr	r3, [sp, #0]
 8007e00:	aa4e      	add	r2, sp, #312	; 0x138
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	18d3      	adds	r3, r2, r3
 8007e06:	0028      	movs	r0, r5
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	0021      	movs	r1, r4
 8007e0e:	f7f8 fc33 	bl	8000678 <__aeabi_dadd>
 8007e12:	0005      	movs	r5, r0
 8007e14:	000c      	movs	r4, r1
 8007e16:	9b00      	ldr	r3, [sp, #0]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	9b00      	ldr	r3, [sp, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	daed      	bge.n	8007dfe <__kernel_rem_pio2+0x552>
 8007e22:	9b08      	ldr	r3, [sp, #32]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <__kernel_rem_pio2+0x582>
 8007e28:	2380      	movs	r3, #128	; 0x80
 8007e2a:	061b      	lsls	r3, r3, #24
 8007e2c:	18e4      	adds	r4, r4, r3
 8007e2e:	002a      	movs	r2, r5
 8007e30:	0023      	movs	r3, r4
 8007e32:	9907      	ldr	r1, [sp, #28]
 8007e34:	600a      	str	r2, [r1, #0]
 8007e36:	604b      	str	r3, [r1, #4]
 8007e38:	e7a9      	b.n	8007d8e <__kernel_rem_pio2+0x4e2>
 8007e3a:	00e3      	lsls	r3, r4, #3
 8007e3c:	aa4e      	add	r2, sp, #312	; 0x138
 8007e3e:	18d3      	adds	r3, r2, r3
 8007e40:	0030      	movs	r0, r6
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	0029      	movs	r1, r5
 8007e48:	f7f8 fc16 	bl	8000678 <__aeabi_dadd>
 8007e4c:	0006      	movs	r6, r0
 8007e4e:	000d      	movs	r5, r1
 8007e50:	3c01      	subs	r4, #1
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	daf1      	bge.n	8007e3a <__kernel_rem_pio2+0x58e>
 8007e56:	9b08      	ldr	r3, [sp, #32]
 8007e58:	0029      	movs	r1, r5
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <__kernel_rem_pio2+0x5b8>
 8007e5e:	2380      	movs	r3, #128	; 0x80
 8007e60:	061b      	lsls	r3, r3, #24
 8007e62:	18e9      	adds	r1, r5, r3
 8007e64:	0032      	movs	r2, r6
 8007e66:	000b      	movs	r3, r1
 8007e68:	9907      	ldr	r1, [sp, #28]
 8007e6a:	2401      	movs	r4, #1
 8007e6c:	600a      	str	r2, [r1, #0]
 8007e6e:	604b      	str	r3, [r1, #4]
 8007e70:	984e      	ldr	r0, [sp, #312]	; 0x138
 8007e72:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8007e74:	002b      	movs	r3, r5
 8007e76:	f7f9 fda9 	bl	80019cc <__aeabi_dsub>
 8007e7a:	0007      	movs	r7, r0
 8007e7c:	000e      	movs	r6, r1
 8007e7e:	ad4e      	add	r5, sp, #312	; 0x138
 8007e80:	9b00      	ldr	r3, [sp, #0]
 8007e82:	3508      	adds	r5, #8
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	da0f      	bge.n	8007ea8 <__kernel_rem_pio2+0x5fc>
 8007e88:	9b08      	ldr	r3, [sp, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <__kernel_rem_pio2+0x5e8>
 8007e8e:	2380      	movs	r3, #128	; 0x80
 8007e90:	061b      	lsls	r3, r3, #24
 8007e92:	18f6      	adds	r6, r6, r3
 8007e94:	003a      	movs	r2, r7
 8007e96:	0033      	movs	r3, r6
 8007e98:	9907      	ldr	r1, [sp, #28]
 8007e9a:	608a      	str	r2, [r1, #8]
 8007e9c:	60cb      	str	r3, [r1, #12]
 8007e9e:	e776      	b.n	8007d8e <__kernel_rem_pio2+0x4e2>
 8007ea0:	2600      	movs	r6, #0
 8007ea2:	9c00      	ldr	r4, [sp, #0]
 8007ea4:	0035      	movs	r5, r6
 8007ea6:	e7d4      	b.n	8007e52 <__kernel_rem_pio2+0x5a6>
 8007ea8:	0038      	movs	r0, r7
 8007eaa:	682a      	ldr	r2, [r5, #0]
 8007eac:	686b      	ldr	r3, [r5, #4]
 8007eae:	0031      	movs	r1, r6
 8007eb0:	f7f8 fbe2 	bl	8000678 <__aeabi_dadd>
 8007eb4:	3401      	adds	r4, #1
 8007eb6:	0007      	movs	r7, r0
 8007eb8:	000e      	movs	r6, r1
 8007eba:	e7e1      	b.n	8007e80 <__kernel_rem_pio2+0x5d4>
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	68ae      	ldr	r6, [r5, #8]
 8007ec0:	68ef      	ldr	r7, [r5, #12]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	9302      	str	r3, [sp, #8]
 8007ec6:	682a      	ldr	r2, [r5, #0]
 8007ec8:	686b      	ldr	r3, [r5, #4]
 8007eca:	9204      	str	r2, [sp, #16]
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	9804      	ldr	r0, [sp, #16]
 8007ed0:	9905      	ldr	r1, [sp, #20]
 8007ed2:	0032      	movs	r2, r6
 8007ed4:	003b      	movs	r3, r7
 8007ed6:	f7f8 fbcf 	bl	8000678 <__aeabi_dadd>
 8007eda:	0002      	movs	r2, r0
 8007edc:	000b      	movs	r3, r1
 8007ede:	900a      	str	r0, [sp, #40]	; 0x28
 8007ee0:	910b      	str	r1, [sp, #44]	; 0x2c
 8007ee2:	9804      	ldr	r0, [sp, #16]
 8007ee4:	9905      	ldr	r1, [sp, #20]
 8007ee6:	f7f9 fd71 	bl	80019cc <__aeabi_dsub>
 8007eea:	0032      	movs	r2, r6
 8007eec:	003b      	movs	r3, r7
 8007eee:	f7f8 fbc3 	bl	8000678 <__aeabi_dadd>
 8007ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef6:	60a8      	str	r0, [r5, #8]
 8007ef8:	60e9      	str	r1, [r5, #12]
 8007efa:	602a      	str	r2, [r5, #0]
 8007efc:	606b      	str	r3, [r5, #4]
 8007efe:	e758      	b.n	8007db2 <__kernel_rem_pio2+0x506>
 8007f00:	6826      	ldr	r6, [r4, #0]
 8007f02:	6867      	ldr	r7, [r4, #4]
 8007f04:	68a2      	ldr	r2, [r4, #8]
 8007f06:	68e3      	ldr	r3, [r4, #12]
 8007f08:	0030      	movs	r0, r6
 8007f0a:	0039      	movs	r1, r7
 8007f0c:	9202      	str	r2, [sp, #8]
 8007f0e:	9303      	str	r3, [sp, #12]
 8007f10:	f7f8 fbb2 	bl	8000678 <__aeabi_dadd>
 8007f14:	0002      	movs	r2, r0
 8007f16:	000b      	movs	r3, r1
 8007f18:	9004      	str	r0, [sp, #16]
 8007f1a:	9105      	str	r1, [sp, #20]
 8007f1c:	0030      	movs	r0, r6
 8007f1e:	0039      	movs	r1, r7
 8007f20:	f7f9 fd54 	bl	80019cc <__aeabi_dsub>
 8007f24:	9a02      	ldr	r2, [sp, #8]
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	f7f8 fba6 	bl	8000678 <__aeabi_dadd>
 8007f2c:	9a04      	ldr	r2, [sp, #16]
 8007f2e:	9b05      	ldr	r3, [sp, #20]
 8007f30:	60a0      	str	r0, [r4, #8]
 8007f32:	60e1      	str	r1, [r4, #12]
 8007f34:	6022      	str	r2, [r4, #0]
 8007f36:	6063      	str	r3, [r4, #4]
 8007f38:	3d01      	subs	r5, #1
 8007f3a:	e740      	b.n	8007dbe <__kernel_rem_pio2+0x512>
 8007f3c:	9b00      	ldr	r3, [sp, #0]
 8007f3e:	aa4e      	add	r2, sp, #312	; 0x138
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	18d3      	adds	r3, r2, r3
 8007f44:	0020      	movs	r0, r4
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f7f8 fb95 	bl	8000678 <__aeabi_dadd>
 8007f4e:	9b00      	ldr	r3, [sp, #0]
 8007f50:	0004      	movs	r4, r0
 8007f52:	3b01      	subs	r3, #1
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	e738      	b.n	8007dca <__kernel_rem_pio2+0x51e>
 8007f58:	9b07      	ldr	r3, [sp, #28]
 8007f5a:	9a07      	ldr	r2, [sp, #28]
 8007f5c:	601f      	str	r7, [r3, #0]
 8007f5e:	2380      	movs	r3, #128	; 0x80
 8007f60:	061b      	lsls	r3, r3, #24
 8007f62:	18f6      	adds	r6, r6, r3
 8007f64:	18c0      	adds	r0, r0, r3
 8007f66:	18c9      	adds	r1, r1, r3
 8007f68:	6056      	str	r6, [r2, #4]
 8007f6a:	6095      	str	r5, [r2, #8]
 8007f6c:	60d0      	str	r0, [r2, #12]
 8007f6e:	6114      	str	r4, [r2, #16]
 8007f70:	6151      	str	r1, [r2, #20]
 8007f72:	e70c      	b.n	8007d8e <__kernel_rem_pio2+0x4e2>
 8007f74:	41700000 	.word	0x41700000
 8007f78:	3e700000 	.word	0x3e700000
 8007f7c:	08008648 	.word	0x08008648

08007f80 <__kernel_sin>:
 8007f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f82:	b089      	sub	sp, #36	; 0x24
 8007f84:	9202      	str	r2, [sp, #8]
 8007f86:	9303      	str	r3, [sp, #12]
 8007f88:	22f9      	movs	r2, #249	; 0xf9
 8007f8a:	004b      	lsls	r3, r1, #1
 8007f8c:	0007      	movs	r7, r0
 8007f8e:	000e      	movs	r6, r1
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	0592      	lsls	r2, r2, #22
 8007f94:	4293      	cmp	r3, r2
 8007f96:	da03      	bge.n	8007fa0 <__kernel_sin+0x20>
 8007f98:	f7fa f8aa 	bl	80020f0 <__aeabi_d2iz>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d04c      	beq.n	800803a <__kernel_sin+0xba>
 8007fa0:	003a      	movs	r2, r7
 8007fa2:	0033      	movs	r3, r6
 8007fa4:	0038      	movs	r0, r7
 8007fa6:	0031      	movs	r1, r6
 8007fa8:	f7f9 faa4 	bl	80014f4 <__aeabi_dmul>
 8007fac:	0004      	movs	r4, r0
 8007fae:	000d      	movs	r5, r1
 8007fb0:	0002      	movs	r2, r0
 8007fb2:	000b      	movs	r3, r1
 8007fb4:	0038      	movs	r0, r7
 8007fb6:	0031      	movs	r1, r6
 8007fb8:	f7f9 fa9c 	bl	80014f4 <__aeabi_dmul>
 8007fbc:	4a39      	ldr	r2, [pc, #228]	; (80080a4 <__kernel_sin+0x124>)
 8007fbe:	9000      	str	r0, [sp, #0]
 8007fc0:	9101      	str	r1, [sp, #4]
 8007fc2:	4b39      	ldr	r3, [pc, #228]	; (80080a8 <__kernel_sin+0x128>)
 8007fc4:	0020      	movs	r0, r4
 8007fc6:	0029      	movs	r1, r5
 8007fc8:	f7f9 fa94 	bl	80014f4 <__aeabi_dmul>
 8007fcc:	4a37      	ldr	r2, [pc, #220]	; (80080ac <__kernel_sin+0x12c>)
 8007fce:	4b38      	ldr	r3, [pc, #224]	; (80080b0 <__kernel_sin+0x130>)
 8007fd0:	f7f9 fcfc 	bl	80019cc <__aeabi_dsub>
 8007fd4:	0022      	movs	r2, r4
 8007fd6:	002b      	movs	r3, r5
 8007fd8:	f7f9 fa8c 	bl	80014f4 <__aeabi_dmul>
 8007fdc:	4a35      	ldr	r2, [pc, #212]	; (80080b4 <__kernel_sin+0x134>)
 8007fde:	4b36      	ldr	r3, [pc, #216]	; (80080b8 <__kernel_sin+0x138>)
 8007fe0:	f7f8 fb4a 	bl	8000678 <__aeabi_dadd>
 8007fe4:	0022      	movs	r2, r4
 8007fe6:	002b      	movs	r3, r5
 8007fe8:	f7f9 fa84 	bl	80014f4 <__aeabi_dmul>
 8007fec:	4a33      	ldr	r2, [pc, #204]	; (80080bc <__kernel_sin+0x13c>)
 8007fee:	4b34      	ldr	r3, [pc, #208]	; (80080c0 <__kernel_sin+0x140>)
 8007ff0:	f7f9 fcec 	bl	80019cc <__aeabi_dsub>
 8007ff4:	0022      	movs	r2, r4
 8007ff6:	002b      	movs	r3, r5
 8007ff8:	f7f9 fa7c 	bl	80014f4 <__aeabi_dmul>
 8007ffc:	4b31      	ldr	r3, [pc, #196]	; (80080c4 <__kernel_sin+0x144>)
 8007ffe:	4a32      	ldr	r2, [pc, #200]	; (80080c8 <__kernel_sin+0x148>)
 8008000:	f7f8 fb3a 	bl	8000678 <__aeabi_dadd>
 8008004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008006:	9004      	str	r0, [sp, #16]
 8008008:	9105      	str	r1, [sp, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d119      	bne.n	8008042 <__kernel_sin+0xc2>
 800800e:	0002      	movs	r2, r0
 8008010:	000b      	movs	r3, r1
 8008012:	0020      	movs	r0, r4
 8008014:	0029      	movs	r1, r5
 8008016:	f7f9 fa6d 	bl	80014f4 <__aeabi_dmul>
 800801a:	4a2c      	ldr	r2, [pc, #176]	; (80080cc <__kernel_sin+0x14c>)
 800801c:	4b2c      	ldr	r3, [pc, #176]	; (80080d0 <__kernel_sin+0x150>)
 800801e:	f7f9 fcd5 	bl	80019cc <__aeabi_dsub>
 8008022:	9a00      	ldr	r2, [sp, #0]
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	f7f9 fa65 	bl	80014f4 <__aeabi_dmul>
 800802a:	0002      	movs	r2, r0
 800802c:	000b      	movs	r3, r1
 800802e:	0038      	movs	r0, r7
 8008030:	0031      	movs	r1, r6
 8008032:	f7f8 fb21 	bl	8000678 <__aeabi_dadd>
 8008036:	0007      	movs	r7, r0
 8008038:	000e      	movs	r6, r1
 800803a:	0038      	movs	r0, r7
 800803c:	0031      	movs	r1, r6
 800803e:	b009      	add	sp, #36	; 0x24
 8008040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008042:	2200      	movs	r2, #0
 8008044:	9802      	ldr	r0, [sp, #8]
 8008046:	9903      	ldr	r1, [sp, #12]
 8008048:	4b22      	ldr	r3, [pc, #136]	; (80080d4 <__kernel_sin+0x154>)
 800804a:	f7f9 fa53 	bl	80014f4 <__aeabi_dmul>
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	9b05      	ldr	r3, [sp, #20]
 8008052:	9006      	str	r0, [sp, #24]
 8008054:	9107      	str	r1, [sp, #28]
 8008056:	9800      	ldr	r0, [sp, #0]
 8008058:	9901      	ldr	r1, [sp, #4]
 800805a:	f7f9 fa4b 	bl	80014f4 <__aeabi_dmul>
 800805e:	0002      	movs	r2, r0
 8008060:	000b      	movs	r3, r1
 8008062:	9806      	ldr	r0, [sp, #24]
 8008064:	9907      	ldr	r1, [sp, #28]
 8008066:	f7f9 fcb1 	bl	80019cc <__aeabi_dsub>
 800806a:	0022      	movs	r2, r4
 800806c:	002b      	movs	r3, r5
 800806e:	f7f9 fa41 	bl	80014f4 <__aeabi_dmul>
 8008072:	9a02      	ldr	r2, [sp, #8]
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	f7f9 fca9 	bl	80019cc <__aeabi_dsub>
 800807a:	4a14      	ldr	r2, [pc, #80]	; (80080cc <__kernel_sin+0x14c>)
 800807c:	0004      	movs	r4, r0
 800807e:	000d      	movs	r5, r1
 8008080:	9800      	ldr	r0, [sp, #0]
 8008082:	9901      	ldr	r1, [sp, #4]
 8008084:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <__kernel_sin+0x150>)
 8008086:	f7f9 fa35 	bl	80014f4 <__aeabi_dmul>
 800808a:	0002      	movs	r2, r0
 800808c:	000b      	movs	r3, r1
 800808e:	0020      	movs	r0, r4
 8008090:	0029      	movs	r1, r5
 8008092:	f7f8 faf1 	bl	8000678 <__aeabi_dadd>
 8008096:	0002      	movs	r2, r0
 8008098:	000b      	movs	r3, r1
 800809a:	0038      	movs	r0, r7
 800809c:	0031      	movs	r1, r6
 800809e:	f7f9 fc95 	bl	80019cc <__aeabi_dsub>
 80080a2:	e7c8      	b.n	8008036 <__kernel_sin+0xb6>
 80080a4:	5acfd57c 	.word	0x5acfd57c
 80080a8:	3de5d93a 	.word	0x3de5d93a
 80080ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80080b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80080b4:	57b1fe7d 	.word	0x57b1fe7d
 80080b8:	3ec71de3 	.word	0x3ec71de3
 80080bc:	19c161d5 	.word	0x19c161d5
 80080c0:	3f2a01a0 	.word	0x3f2a01a0
 80080c4:	3f811111 	.word	0x3f811111
 80080c8:	1110f8a6 	.word	0x1110f8a6
 80080cc:	55555549 	.word	0x55555549
 80080d0:	3fc55555 	.word	0x3fc55555
 80080d4:	3fe00000 	.word	0x3fe00000

080080d8 <fabs>:
 80080d8:	004b      	lsls	r3, r1, #1
 80080da:	0859      	lsrs	r1, r3, #1
 80080dc:	4770      	bx	lr
	...

080080e0 <floor>:
 80080e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e2:	004b      	lsls	r3, r1, #1
 80080e4:	4a3d      	ldr	r2, [pc, #244]	; (80081dc <floor+0xfc>)
 80080e6:	0d5b      	lsrs	r3, r3, #21
 80080e8:	189f      	adds	r7, r3, r2
 80080ea:	4684      	mov	ip, r0
 80080ec:	000e      	movs	r6, r1
 80080ee:	000d      	movs	r5, r1
 80080f0:	0004      	movs	r4, r0
 80080f2:	9001      	str	r0, [sp, #4]
 80080f4:	2f13      	cmp	r7, #19
 80080f6:	dc34      	bgt.n	8008162 <floor+0x82>
 80080f8:	2f00      	cmp	r7, #0
 80080fa:	da16      	bge.n	800812a <floor+0x4a>
 80080fc:	4a38      	ldr	r2, [pc, #224]	; (80081e0 <floor+0x100>)
 80080fe:	4b39      	ldr	r3, [pc, #228]	; (80081e4 <floor+0x104>)
 8008100:	4660      	mov	r0, ip
 8008102:	0031      	movs	r1, r6
 8008104:	f7f8 fab8 	bl	8000678 <__aeabi_dadd>
 8008108:	2200      	movs	r2, #0
 800810a:	2300      	movs	r3, #0
 800810c:	f7f8 f998 	bl	8000440 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	d007      	beq.n	8008124 <floor+0x44>
 8008114:	2e00      	cmp	r6, #0
 8008116:	da5d      	bge.n	80081d4 <floor+0xf4>
 8008118:	0073      	lsls	r3, r6, #1
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	431c      	orrs	r4, r3
 800811e:	d001      	beq.n	8008124 <floor+0x44>
 8008120:	2400      	movs	r4, #0
 8008122:	4d31      	ldr	r5, [pc, #196]	; (80081e8 <floor+0x108>)
 8008124:	46a4      	mov	ip, r4
 8008126:	002e      	movs	r6, r5
 8008128:	e029      	b.n	800817e <floor+0x9e>
 800812a:	4b30      	ldr	r3, [pc, #192]	; (80081ec <floor+0x10c>)
 800812c:	413b      	asrs	r3, r7
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	400b      	ands	r3, r1
 8008132:	4303      	orrs	r3, r0
 8008134:	d023      	beq.n	800817e <floor+0x9e>
 8008136:	4a2a      	ldr	r2, [pc, #168]	; (80081e0 <floor+0x100>)
 8008138:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <floor+0x104>)
 800813a:	4660      	mov	r0, ip
 800813c:	0031      	movs	r1, r6
 800813e:	f7f8 fa9b 	bl	8000678 <__aeabi_dadd>
 8008142:	2200      	movs	r2, #0
 8008144:	2300      	movs	r3, #0
 8008146:	f7f8 f97b 	bl	8000440 <__aeabi_dcmpgt>
 800814a:	2800      	cmp	r0, #0
 800814c:	d0ea      	beq.n	8008124 <floor+0x44>
 800814e:	2e00      	cmp	r6, #0
 8008150:	da03      	bge.n	800815a <floor+0x7a>
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	035b      	lsls	r3, r3, #13
 8008156:	413b      	asrs	r3, r7
 8008158:	18f5      	adds	r5, r6, r3
 800815a:	9b00      	ldr	r3, [sp, #0]
 800815c:	2400      	movs	r4, #0
 800815e:	439d      	bics	r5, r3
 8008160:	e7e0      	b.n	8008124 <floor+0x44>
 8008162:	2f33      	cmp	r7, #51	; 0x33
 8008164:	dd0f      	ble.n	8008186 <floor+0xa6>
 8008166:	2380      	movs	r3, #128	; 0x80
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	429f      	cmp	r7, r3
 800816c:	d107      	bne.n	800817e <floor+0x9e>
 800816e:	0002      	movs	r2, r0
 8008170:	000b      	movs	r3, r1
 8008172:	4660      	mov	r0, ip
 8008174:	0031      	movs	r1, r6
 8008176:	f7f8 fa7f 	bl	8000678 <__aeabi_dadd>
 800817a:	4684      	mov	ip, r0
 800817c:	000e      	movs	r6, r1
 800817e:	4660      	mov	r0, ip
 8008180:	0031      	movs	r1, r6
 8008182:	b003      	add	sp, #12
 8008184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008186:	4a1a      	ldr	r2, [pc, #104]	; (80081f0 <floor+0x110>)
 8008188:	189b      	adds	r3, r3, r2
 800818a:	2201      	movs	r2, #1
 800818c:	4252      	negs	r2, r2
 800818e:	40da      	lsrs	r2, r3
 8008190:	9200      	str	r2, [sp, #0]
 8008192:	4210      	tst	r0, r2
 8008194:	d0f3      	beq.n	800817e <floor+0x9e>
 8008196:	4a12      	ldr	r2, [pc, #72]	; (80081e0 <floor+0x100>)
 8008198:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <floor+0x104>)
 800819a:	4660      	mov	r0, ip
 800819c:	0031      	movs	r1, r6
 800819e:	f7f8 fa6b 	bl	8000678 <__aeabi_dadd>
 80081a2:	2200      	movs	r2, #0
 80081a4:	2300      	movs	r3, #0
 80081a6:	f7f8 f94b 	bl	8000440 <__aeabi_dcmpgt>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d0ba      	beq.n	8008124 <floor+0x44>
 80081ae:	2e00      	cmp	r6, #0
 80081b0:	da02      	bge.n	80081b8 <floor+0xd8>
 80081b2:	2f14      	cmp	r7, #20
 80081b4:	d103      	bne.n	80081be <floor+0xde>
 80081b6:	3501      	adds	r5, #1
 80081b8:	9b00      	ldr	r3, [sp, #0]
 80081ba:	439c      	bics	r4, r3
 80081bc:	e7b2      	b.n	8008124 <floor+0x44>
 80081be:	2334      	movs	r3, #52	; 0x34
 80081c0:	1bdf      	subs	r7, r3, r7
 80081c2:	3b33      	subs	r3, #51	; 0x33
 80081c4:	40bb      	lsls	r3, r7
 80081c6:	18e4      	adds	r4, r4, r3
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	429c      	cmp	r4, r3
 80081cc:	419b      	sbcs	r3, r3
 80081ce:	425b      	negs	r3, r3
 80081d0:	18f5      	adds	r5, r6, r3
 80081d2:	e7f1      	b.n	80081b8 <floor+0xd8>
 80081d4:	2400      	movs	r4, #0
 80081d6:	0025      	movs	r5, r4
 80081d8:	e7a4      	b.n	8008124 <floor+0x44>
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	fffffc01 	.word	0xfffffc01
 80081e0:	8800759c 	.word	0x8800759c
 80081e4:	7e37e43c 	.word	0x7e37e43c
 80081e8:	bff00000 	.word	0xbff00000
 80081ec:	000fffff 	.word	0x000fffff
 80081f0:	fffffbed 	.word	0xfffffbed

080081f4 <scalbn>:
 80081f4:	004b      	lsls	r3, r1, #1
 80081f6:	b570      	push	{r4, r5, r6, lr}
 80081f8:	0d5b      	lsrs	r3, r3, #21
 80081fa:	0014      	movs	r4, r2
 80081fc:	000a      	movs	r2, r1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10d      	bne.n	800821e <scalbn+0x2a>
 8008202:	004b      	lsls	r3, r1, #1
 8008204:	085b      	lsrs	r3, r3, #1
 8008206:	4303      	orrs	r3, r0
 8008208:	d010      	beq.n	800822c <scalbn+0x38>
 800820a:	4b27      	ldr	r3, [pc, #156]	; (80082a8 <scalbn+0xb4>)
 800820c:	2200      	movs	r2, #0
 800820e:	f7f9 f971 	bl	80014f4 <__aeabi_dmul>
 8008212:	4b26      	ldr	r3, [pc, #152]	; (80082ac <scalbn+0xb8>)
 8008214:	429c      	cmp	r4, r3
 8008216:	da0a      	bge.n	800822e <scalbn+0x3a>
 8008218:	4a25      	ldr	r2, [pc, #148]	; (80082b0 <scalbn+0xbc>)
 800821a:	4b26      	ldr	r3, [pc, #152]	; (80082b4 <scalbn+0xc0>)
 800821c:	e019      	b.n	8008252 <scalbn+0x5e>
 800821e:	4d26      	ldr	r5, [pc, #152]	; (80082b8 <scalbn+0xc4>)
 8008220:	42ab      	cmp	r3, r5
 8008222:	d108      	bne.n	8008236 <scalbn+0x42>
 8008224:	0002      	movs	r2, r0
 8008226:	000b      	movs	r3, r1
 8008228:	f7f8 fa26 	bl	8000678 <__aeabi_dadd>
 800822c:	bd70      	pop	{r4, r5, r6, pc}
 800822e:	000a      	movs	r2, r1
 8008230:	004b      	lsls	r3, r1, #1
 8008232:	0d5b      	lsrs	r3, r3, #21
 8008234:	3b36      	subs	r3, #54	; 0x36
 8008236:	4d21      	ldr	r5, [pc, #132]	; (80082bc <scalbn+0xc8>)
 8008238:	18e3      	adds	r3, r4, r3
 800823a:	42ab      	cmp	r3, r5
 800823c:	dd0c      	ble.n	8008258 <scalbn+0x64>
 800823e:	4c20      	ldr	r4, [pc, #128]	; (80082c0 <scalbn+0xcc>)
 8008240:	4d20      	ldr	r5, [pc, #128]	; (80082c4 <scalbn+0xd0>)
 8008242:	2900      	cmp	r1, #0
 8008244:	da01      	bge.n	800824a <scalbn+0x56>
 8008246:	4c1e      	ldr	r4, [pc, #120]	; (80082c0 <scalbn+0xcc>)
 8008248:	4d1f      	ldr	r5, [pc, #124]	; (80082c8 <scalbn+0xd4>)
 800824a:	0020      	movs	r0, r4
 800824c:	0029      	movs	r1, r5
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <scalbn+0xcc>)
 8008250:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <scalbn+0xd0>)
 8008252:	f7f9 f94f 	bl	80014f4 <__aeabi_dmul>
 8008256:	e7e9      	b.n	800822c <scalbn+0x38>
 8008258:	2b00      	cmp	r3, #0
 800825a:	dd05      	ble.n	8008268 <scalbn+0x74>
 800825c:	4c1b      	ldr	r4, [pc, #108]	; (80082cc <scalbn+0xd8>)
 800825e:	051b      	lsls	r3, r3, #20
 8008260:	4022      	ands	r2, r4
 8008262:	431a      	orrs	r2, r3
 8008264:	0011      	movs	r1, r2
 8008266:	e7e1      	b.n	800822c <scalbn+0x38>
 8008268:	001d      	movs	r5, r3
 800826a:	3535      	adds	r5, #53	; 0x35
 800826c:	da13      	bge.n	8008296 <scalbn+0xa2>
 800826e:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <scalbn+0xdc>)
 8008270:	0fcb      	lsrs	r3, r1, #31
 8008272:	4294      	cmp	r4, r2
 8008274:	dd08      	ble.n	8008288 <scalbn+0x94>
 8008276:	4812      	ldr	r0, [pc, #72]	; (80082c0 <scalbn+0xcc>)
 8008278:	4912      	ldr	r1, [pc, #72]	; (80082c4 <scalbn+0xd0>)
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <scalbn+0x8e>
 800827e:	4810      	ldr	r0, [pc, #64]	; (80082c0 <scalbn+0xcc>)
 8008280:	4911      	ldr	r1, [pc, #68]	; (80082c8 <scalbn+0xd4>)
 8008282:	4a0f      	ldr	r2, [pc, #60]	; (80082c0 <scalbn+0xcc>)
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <scalbn+0xd0>)
 8008286:	e7e4      	b.n	8008252 <scalbn+0x5e>
 8008288:	4809      	ldr	r0, [pc, #36]	; (80082b0 <scalbn+0xbc>)
 800828a:	490a      	ldr	r1, [pc, #40]	; (80082b4 <scalbn+0xc0>)
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0c3      	beq.n	8008218 <scalbn+0x24>
 8008290:	4807      	ldr	r0, [pc, #28]	; (80082b0 <scalbn+0xbc>)
 8008292:	4910      	ldr	r1, [pc, #64]	; (80082d4 <scalbn+0xe0>)
 8008294:	e7c0      	b.n	8008218 <scalbn+0x24>
 8008296:	4c0d      	ldr	r4, [pc, #52]	; (80082cc <scalbn+0xd8>)
 8008298:	3336      	adds	r3, #54	; 0x36
 800829a:	4022      	ands	r2, r4
 800829c:	051b      	lsls	r3, r3, #20
 800829e:	4313      	orrs	r3, r2
 80082a0:	0019      	movs	r1, r3
 80082a2:	2200      	movs	r2, #0
 80082a4:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <scalbn+0xe4>)
 80082a6:	e7d4      	b.n	8008252 <scalbn+0x5e>
 80082a8:	43500000 	.word	0x43500000
 80082ac:	ffff3cb0 	.word	0xffff3cb0
 80082b0:	c2f8f359 	.word	0xc2f8f359
 80082b4:	01a56e1f 	.word	0x01a56e1f
 80082b8:	000007ff 	.word	0x000007ff
 80082bc:	000007fe 	.word	0x000007fe
 80082c0:	8800759c 	.word	0x8800759c
 80082c4:	7e37e43c 	.word	0x7e37e43c
 80082c8:	fe37e43c 	.word	0xfe37e43c
 80082cc:	800fffff 	.word	0x800fffff
 80082d0:	0000c350 	.word	0x0000c350
 80082d4:	81a56e1f 	.word	0x81a56e1f
 80082d8:	3c900000 	.word	0x3c900000

080082dc <_init>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr

080082e8 <_fini>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr
