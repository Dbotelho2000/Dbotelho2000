
TIMER_PWM_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08005ca0  08005ca0  00015ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f90  08005f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f90  08005f90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f90  08005f90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  2000000c  08005fa4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08005fa4  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fbf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c10  00000000  00000000  00029ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153d2  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf0f  00000000  00000000  00042492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e35  00000000  00000000  0004f3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d61d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002978  00000000  00000000  000d6228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005c88 	.word	0x08005c88

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005c88 	.word	0x08005c88

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 ff2b 	bl	8001258 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fe7b 	bl	8001108 <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 ff1d 	bl	8001258 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff13 	bl	8001258 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fea3 	bl	800118c <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fe99 	bl	800118c <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_d2uiz>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2200      	movs	r2, #0
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <__aeabi_d2uiz+0x38>)
 800046e:	0004      	movs	r4, r0
 8000470:	000d      	movs	r5, r1
 8000472:	f7ff ffef 	bl	8000454 <__aeabi_dcmpge>
 8000476:	2800      	cmp	r0, #0
 8000478:	d104      	bne.n	8000484 <__aeabi_d2uiz+0x1c>
 800047a:	0020      	movs	r0, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f001 fd4d 	bl	8001f1c <__aeabi_d2iz>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <__aeabi_d2uiz+0x38>)
 8000486:	2200      	movs	r2, #0
 8000488:	0020      	movs	r0, r4
 800048a:	0029      	movs	r1, r5
 800048c:	f001 f9b4 	bl	80017f8 <__aeabi_dsub>
 8000490:	f001 fd44 	bl	8001f1c <__aeabi_d2iz>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	061b      	lsls	r3, r3, #24
 8000498:	469c      	mov	ip, r3
 800049a:	4460      	add	r0, ip
 800049c:	e7f1      	b.n	8000482 <__aeabi_d2uiz+0x1a>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	41e00000 	.word	0x41e00000

080004a4 <__aeabi_dadd>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	464f      	mov	r7, r9
 80004a8:	4646      	mov	r6, r8
 80004aa:	46d6      	mov	lr, sl
 80004ac:	000d      	movs	r5, r1
 80004ae:	0004      	movs	r4, r0
 80004b0:	b5c0      	push	{r6, r7, lr}
 80004b2:	001f      	movs	r7, r3
 80004b4:	0011      	movs	r1, r2
 80004b6:	0328      	lsls	r0, r5, #12
 80004b8:	0f62      	lsrs	r2, r4, #29
 80004ba:	0a40      	lsrs	r0, r0, #9
 80004bc:	4310      	orrs	r0, r2
 80004be:	007a      	lsls	r2, r7, #1
 80004c0:	0d52      	lsrs	r2, r2, #21
 80004c2:	00e3      	lsls	r3, r4, #3
 80004c4:	033c      	lsls	r4, r7, #12
 80004c6:	4691      	mov	r9, r2
 80004c8:	0a64      	lsrs	r4, r4, #9
 80004ca:	0ffa      	lsrs	r2, r7, #31
 80004cc:	0f4f      	lsrs	r7, r1, #29
 80004ce:	006e      	lsls	r6, r5, #1
 80004d0:	4327      	orrs	r7, r4
 80004d2:	4692      	mov	sl, r2
 80004d4:	46b8      	mov	r8, r7
 80004d6:	0d76      	lsrs	r6, r6, #21
 80004d8:	0fed      	lsrs	r5, r5, #31
 80004da:	00c9      	lsls	r1, r1, #3
 80004dc:	4295      	cmp	r5, r2
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0x3e>
 80004e0:	e099      	b.n	8000616 <__aeabi_dadd+0x172>
 80004e2:	464c      	mov	r4, r9
 80004e4:	1b34      	subs	r4, r6, r4
 80004e6:	46a4      	mov	ip, r4
 80004e8:	2c00      	cmp	r4, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x4a>
 80004ec:	e07c      	b.n	80005e8 <__aeabi_dadd+0x144>
 80004ee:	464a      	mov	r2, r9
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x52>
 80004f4:	e0b8      	b.n	8000668 <__aeabi_dadd+0x1c4>
 80004f6:	4ac5      	ldr	r2, [pc, #788]	; (800080c <__aeabi_dadd+0x368>)
 80004f8:	4296      	cmp	r6, r2
 80004fa:	d100      	bne.n	80004fe <__aeabi_dadd+0x5a>
 80004fc:	e11c      	b.n	8000738 <__aeabi_dadd+0x294>
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	003c      	movs	r4, r7
 8000502:	0412      	lsls	r2, r2, #16
 8000504:	4314      	orrs	r4, r2
 8000506:	46a0      	mov	r8, r4
 8000508:	4662      	mov	r2, ip
 800050a:	2a38      	cmp	r2, #56	; 0x38
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0x6c>
 800050e:	e161      	b.n	80007d4 <__aeabi_dadd+0x330>
 8000510:	2a1f      	cmp	r2, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x72>
 8000514:	e1cc      	b.n	80008b0 <__aeabi_dadd+0x40c>
 8000516:	4664      	mov	r4, ip
 8000518:	2220      	movs	r2, #32
 800051a:	1b12      	subs	r2, r2, r4
 800051c:	4644      	mov	r4, r8
 800051e:	4094      	lsls	r4, r2
 8000520:	000f      	movs	r7, r1
 8000522:	46a1      	mov	r9, r4
 8000524:	4664      	mov	r4, ip
 8000526:	4091      	lsls	r1, r2
 8000528:	40e7      	lsrs	r7, r4
 800052a:	464c      	mov	r4, r9
 800052c:	1e4a      	subs	r2, r1, #1
 800052e:	4191      	sbcs	r1, r2
 8000530:	433c      	orrs	r4, r7
 8000532:	4642      	mov	r2, r8
 8000534:	4321      	orrs	r1, r4
 8000536:	4664      	mov	r4, ip
 8000538:	40e2      	lsrs	r2, r4
 800053a:	1a80      	subs	r0, r0, r2
 800053c:	1a5c      	subs	r4, r3, r1
 800053e:	42a3      	cmp	r3, r4
 8000540:	419b      	sbcs	r3, r3
 8000542:	425f      	negs	r7, r3
 8000544:	1bc7      	subs	r7, r0, r7
 8000546:	023b      	lsls	r3, r7, #8
 8000548:	d400      	bmi.n	800054c <__aeabi_dadd+0xa8>
 800054a:	e0d0      	b.n	80006ee <__aeabi_dadd+0x24a>
 800054c:	027f      	lsls	r7, r7, #9
 800054e:	0a7f      	lsrs	r7, r7, #9
 8000550:	2f00      	cmp	r7, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xb2>
 8000554:	e0ff      	b.n	8000756 <__aeabi_dadd+0x2b2>
 8000556:	0038      	movs	r0, r7
 8000558:	f001 fd46 	bl	8001fe8 <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2320      	movs	r3, #32
 8000562:	0022      	movs	r2, r4
 8000564:	1a5b      	subs	r3, r3, r1
 8000566:	408f      	lsls	r7, r1
 8000568:	40da      	lsrs	r2, r3
 800056a:	408c      	lsls	r4, r1
 800056c:	4317      	orrs	r7, r2
 800056e:	42b1      	cmp	r1, r6
 8000570:	da00      	bge.n	8000574 <__aeabi_dadd+0xd0>
 8000572:	e0ff      	b.n	8000774 <__aeabi_dadd+0x2d0>
 8000574:	1b89      	subs	r1, r1, r6
 8000576:	1c4b      	adds	r3, r1, #1
 8000578:	2b1f      	cmp	r3, #31
 800057a:	dd00      	ble.n	800057e <__aeabi_dadd+0xda>
 800057c:	e0a8      	b.n	80006d0 <__aeabi_dadd+0x22c>
 800057e:	2220      	movs	r2, #32
 8000580:	0039      	movs	r1, r7
 8000582:	1ad2      	subs	r2, r2, r3
 8000584:	0020      	movs	r0, r4
 8000586:	4094      	lsls	r4, r2
 8000588:	4091      	lsls	r1, r2
 800058a:	40d8      	lsrs	r0, r3
 800058c:	1e62      	subs	r2, r4, #1
 800058e:	4194      	sbcs	r4, r2
 8000590:	40df      	lsrs	r7, r3
 8000592:	2600      	movs	r6, #0
 8000594:	4301      	orrs	r1, r0
 8000596:	430c      	orrs	r4, r1
 8000598:	0763      	lsls	r3, r4, #29
 800059a:	d009      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 800059c:	230f      	movs	r3, #15
 800059e:	4023      	ands	r3, r4
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d005      	beq.n	80005b0 <__aeabi_dadd+0x10c>
 80005a4:	1d23      	adds	r3, r4, #4
 80005a6:	42a3      	cmp	r3, r4
 80005a8:	41a4      	sbcs	r4, r4
 80005aa:	4264      	negs	r4, r4
 80005ac:	193f      	adds	r7, r7, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	023b      	lsls	r3, r7, #8
 80005b2:	d400      	bmi.n	80005b6 <__aeabi_dadd+0x112>
 80005b4:	e09e      	b.n	80006f4 <__aeabi_dadd+0x250>
 80005b6:	4b95      	ldr	r3, [pc, #596]	; (800080c <__aeabi_dadd+0x368>)
 80005b8:	3601      	adds	r6, #1
 80005ba:	429e      	cmp	r6, r3
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dadd+0x11c>
 80005be:	e0b7      	b.n	8000730 <__aeabi_dadd+0x28c>
 80005c0:	4a93      	ldr	r2, [pc, #588]	; (8000810 <__aeabi_dadd+0x36c>)
 80005c2:	08e4      	lsrs	r4, r4, #3
 80005c4:	4017      	ands	r7, r2
 80005c6:	077b      	lsls	r3, r7, #29
 80005c8:	0571      	lsls	r1, r6, #21
 80005ca:	027f      	lsls	r7, r7, #9
 80005cc:	4323      	orrs	r3, r4
 80005ce:	0b3f      	lsrs	r7, r7, #12
 80005d0:	0d4a      	lsrs	r2, r1, #21
 80005d2:	0512      	lsls	r2, r2, #20
 80005d4:	433a      	orrs	r2, r7
 80005d6:	07ed      	lsls	r5, r5, #31
 80005d8:	432a      	orrs	r2, r5
 80005da:	0018      	movs	r0, r3
 80005dc:	0011      	movs	r1, r2
 80005de:	bce0      	pop	{r5, r6, r7}
 80005e0:	46ba      	mov	sl, r7
 80005e2:	46b1      	mov	r9, r6
 80005e4:	46a8      	mov	r8, r5
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d04b      	beq.n	8000684 <__aeabi_dadd+0x1e0>
 80005ec:	464c      	mov	r4, r9
 80005ee:	1ba4      	subs	r4, r4, r6
 80005f0:	46a4      	mov	ip, r4
 80005f2:	2e00      	cmp	r6, #0
 80005f4:	d000      	beq.n	80005f8 <__aeabi_dadd+0x154>
 80005f6:	e123      	b.n	8000840 <__aeabi_dadd+0x39c>
 80005f8:	0004      	movs	r4, r0
 80005fa:	431c      	orrs	r4, r3
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x15c>
 80005fe:	e1af      	b.n	8000960 <__aeabi_dadd+0x4bc>
 8000600:	4662      	mov	r2, ip
 8000602:	1e54      	subs	r4, r2, #1
 8000604:	2a01      	cmp	r2, #1
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x166>
 8000608:	e215      	b.n	8000a36 <__aeabi_dadd+0x592>
 800060a:	4d80      	ldr	r5, [pc, #512]	; (800080c <__aeabi_dadd+0x368>)
 800060c:	45ac      	cmp	ip, r5
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16e>
 8000610:	e1c8      	b.n	80009a4 <__aeabi_dadd+0x500>
 8000612:	46a4      	mov	ip, r4
 8000614:	e11b      	b.n	800084e <__aeabi_dadd+0x3aa>
 8000616:	464a      	mov	r2, r9
 8000618:	1ab2      	subs	r2, r6, r2
 800061a:	4694      	mov	ip, r2
 800061c:	2a00      	cmp	r2, #0
 800061e:	dc00      	bgt.n	8000622 <__aeabi_dadd+0x17e>
 8000620:	e0ac      	b.n	800077c <__aeabi_dadd+0x2d8>
 8000622:	464a      	mov	r2, r9
 8000624:	2a00      	cmp	r2, #0
 8000626:	d043      	beq.n	80006b0 <__aeabi_dadd+0x20c>
 8000628:	4a78      	ldr	r2, [pc, #480]	; (800080c <__aeabi_dadd+0x368>)
 800062a:	4296      	cmp	r6, r2
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x18c>
 800062e:	e1af      	b.n	8000990 <__aeabi_dadd+0x4ec>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	003c      	movs	r4, r7
 8000634:	0412      	lsls	r2, r2, #16
 8000636:	4314      	orrs	r4, r2
 8000638:	46a0      	mov	r8, r4
 800063a:	4662      	mov	r2, ip
 800063c:	2a38      	cmp	r2, #56	; 0x38
 800063e:	dc67      	bgt.n	8000710 <__aeabi_dadd+0x26c>
 8000640:	2a1f      	cmp	r2, #31
 8000642:	dc00      	bgt.n	8000646 <__aeabi_dadd+0x1a2>
 8000644:	e15f      	b.n	8000906 <__aeabi_dadd+0x462>
 8000646:	4647      	mov	r7, r8
 8000648:	3a20      	subs	r2, #32
 800064a:	40d7      	lsrs	r7, r2
 800064c:	4662      	mov	r2, ip
 800064e:	2a20      	cmp	r2, #32
 8000650:	d005      	beq.n	800065e <__aeabi_dadd+0x1ba>
 8000652:	4664      	mov	r4, ip
 8000654:	2240      	movs	r2, #64	; 0x40
 8000656:	1b12      	subs	r2, r2, r4
 8000658:	4644      	mov	r4, r8
 800065a:	4094      	lsls	r4, r2
 800065c:	4321      	orrs	r1, r4
 800065e:	1e4a      	subs	r2, r1, #1
 8000660:	4191      	sbcs	r1, r2
 8000662:	000c      	movs	r4, r1
 8000664:	433c      	orrs	r4, r7
 8000666:	e057      	b.n	8000718 <__aeabi_dadd+0x274>
 8000668:	003a      	movs	r2, r7
 800066a:	430a      	orrs	r2, r1
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x1cc>
 800066e:	e105      	b.n	800087c <__aeabi_dadd+0x3d8>
 8000670:	0022      	movs	r2, r4
 8000672:	3a01      	subs	r2, #1
 8000674:	2c01      	cmp	r4, #1
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d6>
 8000678:	e182      	b.n	8000980 <__aeabi_dadd+0x4dc>
 800067a:	4c64      	ldr	r4, [pc, #400]	; (800080c <__aeabi_dadd+0x368>)
 800067c:	45a4      	cmp	ip, r4
 800067e:	d05b      	beq.n	8000738 <__aeabi_dadd+0x294>
 8000680:	4694      	mov	ip, r2
 8000682:	e741      	b.n	8000508 <__aeabi_dadd+0x64>
 8000684:	4c63      	ldr	r4, [pc, #396]	; (8000814 <__aeabi_dadd+0x370>)
 8000686:	1c77      	adds	r7, r6, #1
 8000688:	4227      	tst	r7, r4
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1ea>
 800068c:	e0c4      	b.n	8000818 <__aeabi_dadd+0x374>
 800068e:	0004      	movs	r4, r0
 8000690:	431c      	orrs	r4, r3
 8000692:	2e00      	cmp	r6, #0
 8000694:	d000      	beq.n	8000698 <__aeabi_dadd+0x1f4>
 8000696:	e169      	b.n	800096c <__aeabi_dadd+0x4c8>
 8000698:	2c00      	cmp	r4, #0
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x1fa>
 800069c:	e1bf      	b.n	8000a1e <__aeabi_dadd+0x57a>
 800069e:	4644      	mov	r4, r8
 80006a0:	430c      	orrs	r4, r1
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dadd+0x202>
 80006a4:	e1d0      	b.n	8000a48 <__aeabi_dadd+0x5a4>
 80006a6:	0742      	lsls	r2, r0, #29
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	08c0      	lsrs	r0, r0, #3
 80006ae:	e029      	b.n	8000704 <__aeabi_dadd+0x260>
 80006b0:	003a      	movs	r2, r7
 80006b2:	430a      	orrs	r2, r1
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x214>
 80006b6:	e170      	b.n	800099a <__aeabi_dadd+0x4f6>
 80006b8:	4662      	mov	r2, ip
 80006ba:	4664      	mov	r4, ip
 80006bc:	3a01      	subs	r2, #1
 80006be:	2c01      	cmp	r4, #1
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x220>
 80006c2:	e0e0      	b.n	8000886 <__aeabi_dadd+0x3e2>
 80006c4:	4c51      	ldr	r4, [pc, #324]	; (800080c <__aeabi_dadd+0x368>)
 80006c6:	45a4      	cmp	ip, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x228>
 80006ca:	e161      	b.n	8000990 <__aeabi_dadd+0x4ec>
 80006cc:	4694      	mov	ip, r2
 80006ce:	e7b4      	b.n	800063a <__aeabi_dadd+0x196>
 80006d0:	003a      	movs	r2, r7
 80006d2:	391f      	subs	r1, #31
 80006d4:	40ca      	lsrs	r2, r1
 80006d6:	0011      	movs	r1, r2
 80006d8:	2b20      	cmp	r3, #32
 80006da:	d003      	beq.n	80006e4 <__aeabi_dadd+0x240>
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	409f      	lsls	r7, r3
 80006e2:	433c      	orrs	r4, r7
 80006e4:	1e63      	subs	r3, r4, #1
 80006e6:	419c      	sbcs	r4, r3
 80006e8:	2700      	movs	r7, #0
 80006ea:	2600      	movs	r6, #0
 80006ec:	430c      	orrs	r4, r1
 80006ee:	0763      	lsls	r3, r4, #29
 80006f0:	d000      	beq.n	80006f4 <__aeabi_dadd+0x250>
 80006f2:	e753      	b.n	800059c <__aeabi_dadd+0xf8>
 80006f4:	46b4      	mov	ip, r6
 80006f6:	08e4      	lsrs	r4, r4, #3
 80006f8:	077b      	lsls	r3, r7, #29
 80006fa:	4323      	orrs	r3, r4
 80006fc:	08f8      	lsrs	r0, r7, #3
 80006fe:	4a43      	ldr	r2, [pc, #268]	; (800080c <__aeabi_dadd+0x368>)
 8000700:	4594      	cmp	ip, r2
 8000702:	d01d      	beq.n	8000740 <__aeabi_dadd+0x29c>
 8000704:	4662      	mov	r2, ip
 8000706:	0307      	lsls	r7, r0, #12
 8000708:	0552      	lsls	r2, r2, #21
 800070a:	0b3f      	lsrs	r7, r7, #12
 800070c:	0d52      	lsrs	r2, r2, #21
 800070e:	e760      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000710:	4644      	mov	r4, r8
 8000712:	430c      	orrs	r4, r1
 8000714:	1e62      	subs	r2, r4, #1
 8000716:	4194      	sbcs	r4, r2
 8000718:	18e4      	adds	r4, r4, r3
 800071a:	429c      	cmp	r4, r3
 800071c:	419b      	sbcs	r3, r3
 800071e:	425f      	negs	r7, r3
 8000720:	183f      	adds	r7, r7, r0
 8000722:	023b      	lsls	r3, r7, #8
 8000724:	d5e3      	bpl.n	80006ee <__aeabi_dadd+0x24a>
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <__aeabi_dadd+0x368>)
 8000728:	3601      	adds	r6, #1
 800072a:	429e      	cmp	r6, r3
 800072c:	d000      	beq.n	8000730 <__aeabi_dadd+0x28c>
 800072e:	e0b5      	b.n	800089c <__aeabi_dadd+0x3f8>
 8000730:	0032      	movs	r2, r6
 8000732:	2700      	movs	r7, #0
 8000734:	2300      	movs	r3, #0
 8000736:	e74c      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000738:	0742      	lsls	r2, r0, #29
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	4313      	orrs	r3, r2
 800073e:	08c0      	lsrs	r0, r0, #3
 8000740:	001a      	movs	r2, r3
 8000742:	4302      	orrs	r2, r0
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x2a4>
 8000746:	e1e1      	b.n	8000b0c <__aeabi_dadd+0x668>
 8000748:	2780      	movs	r7, #128	; 0x80
 800074a:	033f      	lsls	r7, r7, #12
 800074c:	4307      	orrs	r7, r0
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4a2e      	ldr	r2, [pc, #184]	; (800080c <__aeabi_dadd+0x368>)
 8000752:	0b3f      	lsrs	r7, r7, #12
 8000754:	e73d      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000756:	0020      	movs	r0, r4
 8000758:	f001 fc46 	bl	8001fe8 <__clzsi2>
 800075c:	0001      	movs	r1, r0
 800075e:	3118      	adds	r1, #24
 8000760:	291f      	cmp	r1, #31
 8000762:	dc00      	bgt.n	8000766 <__aeabi_dadd+0x2c2>
 8000764:	e6fc      	b.n	8000560 <__aeabi_dadd+0xbc>
 8000766:	3808      	subs	r0, #8
 8000768:	4084      	lsls	r4, r0
 800076a:	0027      	movs	r7, r4
 800076c:	2400      	movs	r4, #0
 800076e:	42b1      	cmp	r1, r6
 8000770:	db00      	blt.n	8000774 <__aeabi_dadd+0x2d0>
 8000772:	e6ff      	b.n	8000574 <__aeabi_dadd+0xd0>
 8000774:	4a26      	ldr	r2, [pc, #152]	; (8000810 <__aeabi_dadd+0x36c>)
 8000776:	1a76      	subs	r6, r6, r1
 8000778:	4017      	ands	r7, r2
 800077a:	e70d      	b.n	8000598 <__aeabi_dadd+0xf4>
 800077c:	2a00      	cmp	r2, #0
 800077e:	d02f      	beq.n	80007e0 <__aeabi_dadd+0x33c>
 8000780:	464a      	mov	r2, r9
 8000782:	1b92      	subs	r2, r2, r6
 8000784:	4694      	mov	ip, r2
 8000786:	2e00      	cmp	r6, #0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x2e8>
 800078a:	e0ad      	b.n	80008e8 <__aeabi_dadd+0x444>
 800078c:	4a1f      	ldr	r2, [pc, #124]	; (800080c <__aeabi_dadd+0x368>)
 800078e:	4591      	cmp	r9, r2
 8000790:	d100      	bne.n	8000794 <__aeabi_dadd+0x2f0>
 8000792:	e10f      	b.n	80009b4 <__aeabi_dadd+0x510>
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0412      	lsls	r2, r2, #16
 8000798:	4310      	orrs	r0, r2
 800079a:	4662      	mov	r2, ip
 800079c:	2a38      	cmp	r2, #56	; 0x38
 800079e:	dd00      	ble.n	80007a2 <__aeabi_dadd+0x2fe>
 80007a0:	e10f      	b.n	80009c2 <__aeabi_dadd+0x51e>
 80007a2:	2a1f      	cmp	r2, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0x304>
 80007a6:	e180      	b.n	8000aaa <__aeabi_dadd+0x606>
 80007a8:	4664      	mov	r4, ip
 80007aa:	2220      	movs	r2, #32
 80007ac:	001e      	movs	r6, r3
 80007ae:	1b12      	subs	r2, r2, r4
 80007b0:	4667      	mov	r7, ip
 80007b2:	0004      	movs	r4, r0
 80007b4:	4093      	lsls	r3, r2
 80007b6:	4094      	lsls	r4, r2
 80007b8:	40fe      	lsrs	r6, r7
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	4193      	sbcs	r3, r2
 80007be:	40f8      	lsrs	r0, r7
 80007c0:	4334      	orrs	r4, r6
 80007c2:	431c      	orrs	r4, r3
 80007c4:	4480      	add	r8, r0
 80007c6:	1864      	adds	r4, r4, r1
 80007c8:	428c      	cmp	r4, r1
 80007ca:	41bf      	sbcs	r7, r7
 80007cc:	427f      	negs	r7, r7
 80007ce:	464e      	mov	r6, r9
 80007d0:	4447      	add	r7, r8
 80007d2:	e7a6      	b.n	8000722 <__aeabi_dadd+0x27e>
 80007d4:	4642      	mov	r2, r8
 80007d6:	430a      	orrs	r2, r1
 80007d8:	0011      	movs	r1, r2
 80007da:	1e4a      	subs	r2, r1, #1
 80007dc:	4191      	sbcs	r1, r2
 80007de:	e6ad      	b.n	800053c <__aeabi_dadd+0x98>
 80007e0:	4c0c      	ldr	r4, [pc, #48]	; (8000814 <__aeabi_dadd+0x370>)
 80007e2:	1c72      	adds	r2, r6, #1
 80007e4:	4222      	tst	r2, r4
 80007e6:	d000      	beq.n	80007ea <__aeabi_dadd+0x346>
 80007e8:	e0a1      	b.n	800092e <__aeabi_dadd+0x48a>
 80007ea:	0002      	movs	r2, r0
 80007ec:	431a      	orrs	r2, r3
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d000      	beq.n	80007f4 <__aeabi_dadd+0x350>
 80007f2:	e0fa      	b.n	80009ea <__aeabi_dadd+0x546>
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_dadd+0x356>
 80007f8:	e145      	b.n	8000a86 <__aeabi_dadd+0x5e2>
 80007fa:	003a      	movs	r2, r7
 80007fc:	430a      	orrs	r2, r1
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x35e>
 8000800:	e146      	b.n	8000a90 <__aeabi_dadd+0x5ec>
 8000802:	0742      	lsls	r2, r0, #29
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	4313      	orrs	r3, r2
 8000808:	08c0      	lsrs	r0, r0, #3
 800080a:	e77b      	b.n	8000704 <__aeabi_dadd+0x260>
 800080c:	000007ff 	.word	0x000007ff
 8000810:	ff7fffff 	.word	0xff7fffff
 8000814:	000007fe 	.word	0x000007fe
 8000818:	4647      	mov	r7, r8
 800081a:	1a5c      	subs	r4, r3, r1
 800081c:	1bc2      	subs	r2, r0, r7
 800081e:	42a3      	cmp	r3, r4
 8000820:	41bf      	sbcs	r7, r7
 8000822:	427f      	negs	r7, r7
 8000824:	46b9      	mov	r9, r7
 8000826:	0017      	movs	r7, r2
 8000828:	464a      	mov	r2, r9
 800082a:	1abf      	subs	r7, r7, r2
 800082c:	023a      	lsls	r2, r7, #8
 800082e:	d500      	bpl.n	8000832 <__aeabi_dadd+0x38e>
 8000830:	e08d      	b.n	800094e <__aeabi_dadd+0x4aa>
 8000832:	0023      	movs	r3, r4
 8000834:	433b      	orrs	r3, r7
 8000836:	d000      	beq.n	800083a <__aeabi_dadd+0x396>
 8000838:	e68a      	b.n	8000550 <__aeabi_dadd+0xac>
 800083a:	2000      	movs	r0, #0
 800083c:	2500      	movs	r5, #0
 800083e:	e761      	b.n	8000704 <__aeabi_dadd+0x260>
 8000840:	4cb4      	ldr	r4, [pc, #720]	; (8000b14 <__aeabi_dadd+0x670>)
 8000842:	45a1      	cmp	r9, r4
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x3a4>
 8000846:	e0ad      	b.n	80009a4 <__aeabi_dadd+0x500>
 8000848:	2480      	movs	r4, #128	; 0x80
 800084a:	0424      	lsls	r4, r4, #16
 800084c:	4320      	orrs	r0, r4
 800084e:	4664      	mov	r4, ip
 8000850:	2c38      	cmp	r4, #56	; 0x38
 8000852:	dc3d      	bgt.n	80008d0 <__aeabi_dadd+0x42c>
 8000854:	4662      	mov	r2, ip
 8000856:	2c1f      	cmp	r4, #31
 8000858:	dd00      	ble.n	800085c <__aeabi_dadd+0x3b8>
 800085a:	e0b7      	b.n	80009cc <__aeabi_dadd+0x528>
 800085c:	2520      	movs	r5, #32
 800085e:	001e      	movs	r6, r3
 8000860:	1b2d      	subs	r5, r5, r4
 8000862:	0004      	movs	r4, r0
 8000864:	40ab      	lsls	r3, r5
 8000866:	40ac      	lsls	r4, r5
 8000868:	40d6      	lsrs	r6, r2
 800086a:	40d0      	lsrs	r0, r2
 800086c:	4642      	mov	r2, r8
 800086e:	1e5d      	subs	r5, r3, #1
 8000870:	41ab      	sbcs	r3, r5
 8000872:	4334      	orrs	r4, r6
 8000874:	1a12      	subs	r2, r2, r0
 8000876:	4690      	mov	r8, r2
 8000878:	4323      	orrs	r3, r4
 800087a:	e02c      	b.n	80008d6 <__aeabi_dadd+0x432>
 800087c:	0742      	lsls	r2, r0, #29
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	4313      	orrs	r3, r2
 8000882:	08c0      	lsrs	r0, r0, #3
 8000884:	e73b      	b.n	80006fe <__aeabi_dadd+0x25a>
 8000886:	185c      	adds	r4, r3, r1
 8000888:	429c      	cmp	r4, r3
 800088a:	419b      	sbcs	r3, r3
 800088c:	4440      	add	r0, r8
 800088e:	425b      	negs	r3, r3
 8000890:	18c7      	adds	r7, r0, r3
 8000892:	2601      	movs	r6, #1
 8000894:	023b      	lsls	r3, r7, #8
 8000896:	d400      	bmi.n	800089a <__aeabi_dadd+0x3f6>
 8000898:	e729      	b.n	80006ee <__aeabi_dadd+0x24a>
 800089a:	2602      	movs	r6, #2
 800089c:	4a9e      	ldr	r2, [pc, #632]	; (8000b18 <__aeabi_dadd+0x674>)
 800089e:	0863      	lsrs	r3, r4, #1
 80008a0:	4017      	ands	r7, r2
 80008a2:	2201      	movs	r2, #1
 80008a4:	4014      	ands	r4, r2
 80008a6:	431c      	orrs	r4, r3
 80008a8:	07fb      	lsls	r3, r7, #31
 80008aa:	431c      	orrs	r4, r3
 80008ac:	087f      	lsrs	r7, r7, #1
 80008ae:	e673      	b.n	8000598 <__aeabi_dadd+0xf4>
 80008b0:	4644      	mov	r4, r8
 80008b2:	3a20      	subs	r2, #32
 80008b4:	40d4      	lsrs	r4, r2
 80008b6:	4662      	mov	r2, ip
 80008b8:	2a20      	cmp	r2, #32
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x424>
 80008bc:	4667      	mov	r7, ip
 80008be:	2240      	movs	r2, #64	; 0x40
 80008c0:	1bd2      	subs	r2, r2, r7
 80008c2:	4647      	mov	r7, r8
 80008c4:	4097      	lsls	r7, r2
 80008c6:	4339      	orrs	r1, r7
 80008c8:	1e4a      	subs	r2, r1, #1
 80008ca:	4191      	sbcs	r1, r2
 80008cc:	4321      	orrs	r1, r4
 80008ce:	e635      	b.n	800053c <__aeabi_dadd+0x98>
 80008d0:	4303      	orrs	r3, r0
 80008d2:	1e58      	subs	r0, r3, #1
 80008d4:	4183      	sbcs	r3, r0
 80008d6:	1acc      	subs	r4, r1, r3
 80008d8:	42a1      	cmp	r1, r4
 80008da:	41bf      	sbcs	r7, r7
 80008dc:	4643      	mov	r3, r8
 80008de:	427f      	negs	r7, r7
 80008e0:	4655      	mov	r5, sl
 80008e2:	464e      	mov	r6, r9
 80008e4:	1bdf      	subs	r7, r3, r7
 80008e6:	e62e      	b.n	8000546 <__aeabi_dadd+0xa2>
 80008e8:	0002      	movs	r2, r0
 80008ea:	431a      	orrs	r2, r3
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x44c>
 80008ee:	e0bd      	b.n	8000a6c <__aeabi_dadd+0x5c8>
 80008f0:	4662      	mov	r2, ip
 80008f2:	4664      	mov	r4, ip
 80008f4:	3a01      	subs	r2, #1
 80008f6:	2c01      	cmp	r4, #1
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x458>
 80008fa:	e0e5      	b.n	8000ac8 <__aeabi_dadd+0x624>
 80008fc:	4c85      	ldr	r4, [pc, #532]	; (8000b14 <__aeabi_dadd+0x670>)
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d058      	beq.n	80009b4 <__aeabi_dadd+0x510>
 8000902:	4694      	mov	ip, r2
 8000904:	e749      	b.n	800079a <__aeabi_dadd+0x2f6>
 8000906:	4664      	mov	r4, ip
 8000908:	2220      	movs	r2, #32
 800090a:	1b12      	subs	r2, r2, r4
 800090c:	4644      	mov	r4, r8
 800090e:	4094      	lsls	r4, r2
 8000910:	000f      	movs	r7, r1
 8000912:	46a1      	mov	r9, r4
 8000914:	4664      	mov	r4, ip
 8000916:	4091      	lsls	r1, r2
 8000918:	40e7      	lsrs	r7, r4
 800091a:	464c      	mov	r4, r9
 800091c:	1e4a      	subs	r2, r1, #1
 800091e:	4191      	sbcs	r1, r2
 8000920:	433c      	orrs	r4, r7
 8000922:	4642      	mov	r2, r8
 8000924:	430c      	orrs	r4, r1
 8000926:	4661      	mov	r1, ip
 8000928:	40ca      	lsrs	r2, r1
 800092a:	1880      	adds	r0, r0, r2
 800092c:	e6f4      	b.n	8000718 <__aeabi_dadd+0x274>
 800092e:	4c79      	ldr	r4, [pc, #484]	; (8000b14 <__aeabi_dadd+0x670>)
 8000930:	42a2      	cmp	r2, r4
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x492>
 8000934:	e6fd      	b.n	8000732 <__aeabi_dadd+0x28e>
 8000936:	1859      	adds	r1, r3, r1
 8000938:	4299      	cmp	r1, r3
 800093a:	419b      	sbcs	r3, r3
 800093c:	4440      	add	r0, r8
 800093e:	425f      	negs	r7, r3
 8000940:	19c7      	adds	r7, r0, r7
 8000942:	07fc      	lsls	r4, r7, #31
 8000944:	0849      	lsrs	r1, r1, #1
 8000946:	0016      	movs	r6, r2
 8000948:	430c      	orrs	r4, r1
 800094a:	087f      	lsrs	r7, r7, #1
 800094c:	e6cf      	b.n	80006ee <__aeabi_dadd+0x24a>
 800094e:	1acc      	subs	r4, r1, r3
 8000950:	42a1      	cmp	r1, r4
 8000952:	41bf      	sbcs	r7, r7
 8000954:	4643      	mov	r3, r8
 8000956:	427f      	negs	r7, r7
 8000958:	1a18      	subs	r0, r3, r0
 800095a:	4655      	mov	r5, sl
 800095c:	1bc7      	subs	r7, r0, r7
 800095e:	e5f7      	b.n	8000550 <__aeabi_dadd+0xac>
 8000960:	08c9      	lsrs	r1, r1, #3
 8000962:	077b      	lsls	r3, r7, #29
 8000964:	4655      	mov	r5, sl
 8000966:	430b      	orrs	r3, r1
 8000968:	08f8      	lsrs	r0, r7, #3
 800096a:	e6c8      	b.n	80006fe <__aeabi_dadd+0x25a>
 800096c:	2c00      	cmp	r4, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x4ce>
 8000970:	e081      	b.n	8000a76 <__aeabi_dadd+0x5d2>
 8000972:	4643      	mov	r3, r8
 8000974:	430b      	orrs	r3, r1
 8000976:	d115      	bne.n	80009a4 <__aeabi_dadd+0x500>
 8000978:	2080      	movs	r0, #128	; 0x80
 800097a:	2500      	movs	r5, #0
 800097c:	0300      	lsls	r0, r0, #12
 800097e:	e6e3      	b.n	8000748 <__aeabi_dadd+0x2a4>
 8000980:	1a5c      	subs	r4, r3, r1
 8000982:	42a3      	cmp	r3, r4
 8000984:	419b      	sbcs	r3, r3
 8000986:	1bc7      	subs	r7, r0, r7
 8000988:	425b      	negs	r3, r3
 800098a:	2601      	movs	r6, #1
 800098c:	1aff      	subs	r7, r7, r3
 800098e:	e5da      	b.n	8000546 <__aeabi_dadd+0xa2>
 8000990:	0742      	lsls	r2, r0, #29
 8000992:	08db      	lsrs	r3, r3, #3
 8000994:	4313      	orrs	r3, r2
 8000996:	08c0      	lsrs	r0, r0, #3
 8000998:	e6d2      	b.n	8000740 <__aeabi_dadd+0x29c>
 800099a:	0742      	lsls	r2, r0, #29
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	4313      	orrs	r3, r2
 80009a0:	08c0      	lsrs	r0, r0, #3
 80009a2:	e6ac      	b.n	80006fe <__aeabi_dadd+0x25a>
 80009a4:	4643      	mov	r3, r8
 80009a6:	4642      	mov	r2, r8
 80009a8:	08c9      	lsrs	r1, r1, #3
 80009aa:	075b      	lsls	r3, r3, #29
 80009ac:	4655      	mov	r5, sl
 80009ae:	430b      	orrs	r3, r1
 80009b0:	08d0      	lsrs	r0, r2, #3
 80009b2:	e6c5      	b.n	8000740 <__aeabi_dadd+0x29c>
 80009b4:	4643      	mov	r3, r8
 80009b6:	4642      	mov	r2, r8
 80009b8:	075b      	lsls	r3, r3, #29
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	430b      	orrs	r3, r1
 80009be:	08d0      	lsrs	r0, r2, #3
 80009c0:	e6be      	b.n	8000740 <__aeabi_dadd+0x29c>
 80009c2:	4303      	orrs	r3, r0
 80009c4:	001c      	movs	r4, r3
 80009c6:	1e63      	subs	r3, r4, #1
 80009c8:	419c      	sbcs	r4, r3
 80009ca:	e6fc      	b.n	80007c6 <__aeabi_dadd+0x322>
 80009cc:	0002      	movs	r2, r0
 80009ce:	3c20      	subs	r4, #32
 80009d0:	40e2      	lsrs	r2, r4
 80009d2:	0014      	movs	r4, r2
 80009d4:	4662      	mov	r2, ip
 80009d6:	2a20      	cmp	r2, #32
 80009d8:	d003      	beq.n	80009e2 <__aeabi_dadd+0x53e>
 80009da:	2540      	movs	r5, #64	; 0x40
 80009dc:	1aad      	subs	r5, r5, r2
 80009de:	40a8      	lsls	r0, r5
 80009e0:	4303      	orrs	r3, r0
 80009e2:	1e58      	subs	r0, r3, #1
 80009e4:	4183      	sbcs	r3, r0
 80009e6:	4323      	orrs	r3, r4
 80009e8:	e775      	b.n	80008d6 <__aeabi_dadd+0x432>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d0e2      	beq.n	80009b4 <__aeabi_dadd+0x510>
 80009ee:	003a      	movs	r2, r7
 80009f0:	430a      	orrs	r2, r1
 80009f2:	d0cd      	beq.n	8000990 <__aeabi_dadd+0x4ec>
 80009f4:	0742      	lsls	r2, r0, #29
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	08c0      	lsrs	r0, r0, #3
 80009fe:	0312      	lsls	r2, r2, #12
 8000a00:	4210      	tst	r0, r2
 8000a02:	d006      	beq.n	8000a12 <__aeabi_dadd+0x56e>
 8000a04:	08fc      	lsrs	r4, r7, #3
 8000a06:	4214      	tst	r4, r2
 8000a08:	d103      	bne.n	8000a12 <__aeabi_dadd+0x56e>
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	08cb      	lsrs	r3, r1, #3
 8000a0e:	077a      	lsls	r2, r7, #29
 8000a10:	4313      	orrs	r3, r2
 8000a12:	0f5a      	lsrs	r2, r3, #29
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	0752      	lsls	r2, r2, #29
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	e690      	b.n	8000740 <__aeabi_dadd+0x29c>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	430b      	orrs	r3, r1
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x582>
 8000a24:	e709      	b.n	800083a <__aeabi_dadd+0x396>
 8000a26:	4643      	mov	r3, r8
 8000a28:	4642      	mov	r2, r8
 8000a2a:	08c9      	lsrs	r1, r1, #3
 8000a2c:	075b      	lsls	r3, r3, #29
 8000a2e:	4655      	mov	r5, sl
 8000a30:	430b      	orrs	r3, r1
 8000a32:	08d0      	lsrs	r0, r2, #3
 8000a34:	e666      	b.n	8000704 <__aeabi_dadd+0x260>
 8000a36:	1acc      	subs	r4, r1, r3
 8000a38:	42a1      	cmp	r1, r4
 8000a3a:	4189      	sbcs	r1, r1
 8000a3c:	1a3f      	subs	r7, r7, r0
 8000a3e:	4249      	negs	r1, r1
 8000a40:	4655      	mov	r5, sl
 8000a42:	2601      	movs	r6, #1
 8000a44:	1a7f      	subs	r7, r7, r1
 8000a46:	e57e      	b.n	8000546 <__aeabi_dadd+0xa2>
 8000a48:	4642      	mov	r2, r8
 8000a4a:	1a5c      	subs	r4, r3, r1
 8000a4c:	1a87      	subs	r7, r0, r2
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	4192      	sbcs	r2, r2
 8000a52:	4252      	negs	r2, r2
 8000a54:	1abf      	subs	r7, r7, r2
 8000a56:	023a      	lsls	r2, r7, #8
 8000a58:	d53d      	bpl.n	8000ad6 <__aeabi_dadd+0x632>
 8000a5a:	1acc      	subs	r4, r1, r3
 8000a5c:	42a1      	cmp	r1, r4
 8000a5e:	4189      	sbcs	r1, r1
 8000a60:	4643      	mov	r3, r8
 8000a62:	4249      	negs	r1, r1
 8000a64:	1a1f      	subs	r7, r3, r0
 8000a66:	4655      	mov	r5, sl
 8000a68:	1a7f      	subs	r7, r7, r1
 8000a6a:	e595      	b.n	8000598 <__aeabi_dadd+0xf4>
 8000a6c:	077b      	lsls	r3, r7, #29
 8000a6e:	08c9      	lsrs	r1, r1, #3
 8000a70:	430b      	orrs	r3, r1
 8000a72:	08f8      	lsrs	r0, r7, #3
 8000a74:	e643      	b.n	80006fe <__aeabi_dadd+0x25a>
 8000a76:	4644      	mov	r4, r8
 8000a78:	08db      	lsrs	r3, r3, #3
 8000a7a:	430c      	orrs	r4, r1
 8000a7c:	d130      	bne.n	8000ae0 <__aeabi_dadd+0x63c>
 8000a7e:	0742      	lsls	r2, r0, #29
 8000a80:	4313      	orrs	r3, r2
 8000a82:	08c0      	lsrs	r0, r0, #3
 8000a84:	e65c      	b.n	8000740 <__aeabi_dadd+0x29c>
 8000a86:	077b      	lsls	r3, r7, #29
 8000a88:	08c9      	lsrs	r1, r1, #3
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	08f8      	lsrs	r0, r7, #3
 8000a8e:	e639      	b.n	8000704 <__aeabi_dadd+0x260>
 8000a90:	185c      	adds	r4, r3, r1
 8000a92:	429c      	cmp	r4, r3
 8000a94:	419b      	sbcs	r3, r3
 8000a96:	4440      	add	r0, r8
 8000a98:	425b      	negs	r3, r3
 8000a9a:	18c7      	adds	r7, r0, r3
 8000a9c:	023b      	lsls	r3, r7, #8
 8000a9e:	d400      	bmi.n	8000aa2 <__aeabi_dadd+0x5fe>
 8000aa0:	e625      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <__aeabi_dadd+0x674>)
 8000aa4:	2601      	movs	r6, #1
 8000aa6:	401f      	ands	r7, r3
 8000aa8:	e621      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000aaa:	0004      	movs	r4, r0
 8000aac:	3a20      	subs	r2, #32
 8000aae:	40d4      	lsrs	r4, r2
 8000ab0:	4662      	mov	r2, ip
 8000ab2:	2a20      	cmp	r2, #32
 8000ab4:	d004      	beq.n	8000ac0 <__aeabi_dadd+0x61c>
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	4666      	mov	r6, ip
 8000aba:	1b92      	subs	r2, r2, r6
 8000abc:	4090      	lsls	r0, r2
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	4193      	sbcs	r3, r2
 8000ac4:	431c      	orrs	r4, r3
 8000ac6:	e67e      	b.n	80007c6 <__aeabi_dadd+0x322>
 8000ac8:	185c      	adds	r4, r3, r1
 8000aca:	428c      	cmp	r4, r1
 8000acc:	4189      	sbcs	r1, r1
 8000ace:	4440      	add	r0, r8
 8000ad0:	4249      	negs	r1, r1
 8000ad2:	1847      	adds	r7, r0, r1
 8000ad4:	e6dd      	b.n	8000892 <__aeabi_dadd+0x3ee>
 8000ad6:	0023      	movs	r3, r4
 8000ad8:	433b      	orrs	r3, r7
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x63a>
 8000adc:	e6ad      	b.n	800083a <__aeabi_dadd+0x396>
 8000ade:	e606      	b.n	80006ee <__aeabi_dadd+0x24a>
 8000ae0:	0744      	lsls	r4, r0, #29
 8000ae2:	4323      	orrs	r3, r4
 8000ae4:	2480      	movs	r4, #128	; 0x80
 8000ae6:	08c0      	lsrs	r0, r0, #3
 8000ae8:	0324      	lsls	r4, r4, #12
 8000aea:	4220      	tst	r0, r4
 8000aec:	d008      	beq.n	8000b00 <__aeabi_dadd+0x65c>
 8000aee:	4642      	mov	r2, r8
 8000af0:	08d6      	lsrs	r6, r2, #3
 8000af2:	4226      	tst	r6, r4
 8000af4:	d104      	bne.n	8000b00 <__aeabi_dadd+0x65c>
 8000af6:	4655      	mov	r5, sl
 8000af8:	0030      	movs	r0, r6
 8000afa:	08cb      	lsrs	r3, r1, #3
 8000afc:	0751      	lsls	r1, r2, #29
 8000afe:	430b      	orrs	r3, r1
 8000b00:	0f5a      	lsrs	r2, r3, #29
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	08db      	lsrs	r3, r3, #3
 8000b06:	0752      	lsls	r2, r2, #29
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	e619      	b.n	8000740 <__aeabi_dadd+0x29c>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	4a01      	ldr	r2, [pc, #4]	; (8000b14 <__aeabi_dadd+0x670>)
 8000b10:	001f      	movs	r7, r3
 8000b12:	e55e      	b.n	80005d2 <__aeabi_dadd+0x12e>
 8000b14:	000007ff 	.word	0x000007ff
 8000b18:	ff7fffff 	.word	0xff7fffff

08000b1c <__aeabi_ddiv>:
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	4657      	mov	r7, sl
 8000b20:	464e      	mov	r6, r9
 8000b22:	4645      	mov	r5, r8
 8000b24:	46de      	mov	lr, fp
 8000b26:	b5e0      	push	{r5, r6, r7, lr}
 8000b28:	4681      	mov	r9, r0
 8000b2a:	0005      	movs	r5, r0
 8000b2c:	030c      	lsls	r4, r1, #12
 8000b2e:	0048      	lsls	r0, r1, #1
 8000b30:	4692      	mov	sl, r2
 8000b32:	001f      	movs	r7, r3
 8000b34:	b085      	sub	sp, #20
 8000b36:	0b24      	lsrs	r4, r4, #12
 8000b38:	0d40      	lsrs	r0, r0, #21
 8000b3a:	0fce      	lsrs	r6, r1, #31
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x26>
 8000b40:	e156      	b.n	8000df0 <__aeabi_ddiv+0x2d4>
 8000b42:	4bd4      	ldr	r3, [pc, #848]	; (8000e94 <__aeabi_ddiv+0x378>)
 8000b44:	4298      	cmp	r0, r3
 8000b46:	d100      	bne.n	8000b4a <__aeabi_ddiv+0x2e>
 8000b48:	e172      	b.n	8000e30 <__aeabi_ddiv+0x314>
 8000b4a:	0f6b      	lsrs	r3, r5, #29
 8000b4c:	00e4      	lsls	r4, r4, #3
 8000b4e:	431c      	orrs	r4, r3
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	041b      	lsls	r3, r3, #16
 8000b54:	4323      	orrs	r3, r4
 8000b56:	4698      	mov	r8, r3
 8000b58:	4bcf      	ldr	r3, [pc, #828]	; (8000e98 <__aeabi_ddiv+0x37c>)
 8000b5a:	00ed      	lsls	r5, r5, #3
 8000b5c:	469b      	mov	fp, r3
 8000b5e:	2300      	movs	r3, #0
 8000b60:	4699      	mov	r9, r3
 8000b62:	4483      	add	fp, r0
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	033c      	lsls	r4, r7, #12
 8000b68:	007b      	lsls	r3, r7, #1
 8000b6a:	4650      	mov	r0, sl
 8000b6c:	0b24      	lsrs	r4, r4, #12
 8000b6e:	0d5b      	lsrs	r3, r3, #21
 8000b70:	0fff      	lsrs	r7, r7, #31
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_ddiv+0x5c>
 8000b76:	e11f      	b.n	8000db8 <__aeabi_ddiv+0x29c>
 8000b78:	4ac6      	ldr	r2, [pc, #792]	; (8000e94 <__aeabi_ddiv+0x378>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_ddiv+0x64>
 8000b7e:	e162      	b.n	8000e46 <__aeabi_ddiv+0x32a>
 8000b80:	49c5      	ldr	r1, [pc, #788]	; (8000e98 <__aeabi_ddiv+0x37c>)
 8000b82:	0f42      	lsrs	r2, r0, #29
 8000b84:	468c      	mov	ip, r1
 8000b86:	00e4      	lsls	r4, r4, #3
 8000b88:	4659      	mov	r1, fp
 8000b8a:	4314      	orrs	r4, r2
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	4463      	add	r3, ip
 8000b90:	0412      	lsls	r2, r2, #16
 8000b92:	1acb      	subs	r3, r1, r3
 8000b94:	4314      	orrs	r4, r2
 8000b96:	469b      	mov	fp, r3
 8000b98:	00c2      	lsls	r2, r0, #3
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	407b      	eors	r3, r7
 8000ba0:	469a      	mov	sl, r3
 8000ba2:	464b      	mov	r3, r9
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d827      	bhi.n	8000bf8 <__aeabi_ddiv+0xdc>
 8000ba8:	49bc      	ldr	r1, [pc, #752]	; (8000e9c <__aeabi_ddiv+0x380>)
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	58cb      	ldr	r3, [r1, r3]
 8000bae:	469f      	mov	pc, r3
 8000bb0:	46b2      	mov	sl, r6
 8000bb2:	9b00      	ldr	r3, [sp, #0]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d016      	beq.n	8000be6 <__aeabi_ddiv+0xca>
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d100      	bne.n	8000bbe <__aeabi_ddiv+0xa2>
 8000bbc:	e28e      	b.n	80010dc <__aeabi_ddiv+0x5c0>
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_ddiv+0xa8>
 8000bc2:	e0d9      	b.n	8000d78 <__aeabi_ddiv+0x25c>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	2500      	movs	r5, #0
 8000bca:	4652      	mov	r2, sl
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	07d2      	lsls	r2, r2, #31
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	0028      	movs	r0, r5
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	b005      	add	sp, #20
 8000bda:	bcf0      	pop	{r4, r5, r6, r7}
 8000bdc:	46bb      	mov	fp, r7
 8000bde:	46b2      	mov	sl, r6
 8000be0:	46a9      	mov	r9, r5
 8000be2:	46a0      	mov	r8, r4
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	2400      	movs	r4, #0
 8000be8:	2500      	movs	r5, #0
 8000bea:	4baa      	ldr	r3, [pc, #680]	; (8000e94 <__aeabi_ddiv+0x378>)
 8000bec:	e7ed      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000bee:	46ba      	mov	sl, r7
 8000bf0:	46a0      	mov	r8, r4
 8000bf2:	0015      	movs	r5, r2
 8000bf4:	9000      	str	r0, [sp, #0]
 8000bf6:	e7dc      	b.n	8000bb2 <__aeabi_ddiv+0x96>
 8000bf8:	4544      	cmp	r4, r8
 8000bfa:	d200      	bcs.n	8000bfe <__aeabi_ddiv+0xe2>
 8000bfc:	e1c7      	b.n	8000f8e <__aeabi_ddiv+0x472>
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_ddiv+0xe6>
 8000c00:	e1c2      	b.n	8000f88 <__aeabi_ddiv+0x46c>
 8000c02:	2301      	movs	r3, #1
 8000c04:	425b      	negs	r3, r3
 8000c06:	469c      	mov	ip, r3
 8000c08:	002e      	movs	r6, r5
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	2500      	movs	r5, #0
 8000c0e:	44e3      	add	fp, ip
 8000c10:	0223      	lsls	r3, r4, #8
 8000c12:	0e14      	lsrs	r4, r2, #24
 8000c14:	431c      	orrs	r4, r3
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	4699      	mov	r9, r3
 8000c1a:	0423      	lsls	r3, r4, #16
 8000c1c:	0c1f      	lsrs	r7, r3, #16
 8000c1e:	0212      	lsls	r2, r2, #8
 8000c20:	4649      	mov	r1, r9
 8000c22:	9200      	str	r2, [sp, #0]
 8000c24:	9701      	str	r7, [sp, #4]
 8000c26:	f7ff faf1 	bl	800020c <__aeabi_uidivmod>
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	437a      	muls	r2, r7
 8000c2e:	040b      	lsls	r3, r1, #16
 8000c30:	0c31      	lsrs	r1, r6, #16
 8000c32:	4680      	mov	r8, r0
 8000c34:	4319      	orrs	r1, r3
 8000c36:	428a      	cmp	r2, r1
 8000c38:	d907      	bls.n	8000c4a <__aeabi_ddiv+0x12e>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	469c      	mov	ip, r3
 8000c40:	1909      	adds	r1, r1, r4
 8000c42:	44e0      	add	r8, ip
 8000c44:	428c      	cmp	r4, r1
 8000c46:	d800      	bhi.n	8000c4a <__aeabi_ddiv+0x12e>
 8000c48:	e207      	b.n	800105a <__aeabi_ddiv+0x53e>
 8000c4a:	1a88      	subs	r0, r1, r2
 8000c4c:	4649      	mov	r1, r9
 8000c4e:	f7ff fadd 	bl	800020c <__aeabi_uidivmod>
 8000c52:	0409      	lsls	r1, r1, #16
 8000c54:	468c      	mov	ip, r1
 8000c56:	0431      	lsls	r1, r6, #16
 8000c58:	4666      	mov	r6, ip
 8000c5a:	9a01      	ldr	r2, [sp, #4]
 8000c5c:	0c09      	lsrs	r1, r1, #16
 8000c5e:	4342      	muls	r2, r0
 8000c60:	0003      	movs	r3, r0
 8000c62:	4331      	orrs	r1, r6
 8000c64:	428a      	cmp	r2, r1
 8000c66:	d904      	bls.n	8000c72 <__aeabi_ddiv+0x156>
 8000c68:	1909      	adds	r1, r1, r4
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	428c      	cmp	r4, r1
 8000c6e:	d800      	bhi.n	8000c72 <__aeabi_ddiv+0x156>
 8000c70:	e1ed      	b.n	800104e <__aeabi_ddiv+0x532>
 8000c72:	1a88      	subs	r0, r1, r2
 8000c74:	4642      	mov	r2, r8
 8000c76:	0412      	lsls	r2, r2, #16
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	4641      	mov	r1, r8
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	040e      	lsls	r6, r1, #16
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	001f      	movs	r7, r3
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	9b00      	ldr	r3, [sp, #0]
 8000c8a:	0c36      	lsrs	r6, r6, #16
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	0c19      	lsrs	r1, r3, #16
 8000c90:	000b      	movs	r3, r1
 8000c92:	4373      	muls	r3, r6
 8000c94:	0c12      	lsrs	r2, r2, #16
 8000c96:	437e      	muls	r6, r7
 8000c98:	9103      	str	r1, [sp, #12]
 8000c9a:	4351      	muls	r1, r2
 8000c9c:	437a      	muls	r2, r7
 8000c9e:	0c1f      	lsrs	r7, r3, #16
 8000ca0:	46bc      	mov	ip, r7
 8000ca2:	1876      	adds	r6, r6, r1
 8000ca4:	4466      	add	r6, ip
 8000ca6:	42b1      	cmp	r1, r6
 8000ca8:	d903      	bls.n	8000cb2 <__aeabi_ddiv+0x196>
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0249      	lsls	r1, r1, #9
 8000cae:	468c      	mov	ip, r1
 8000cb0:	4462      	add	r2, ip
 8000cb2:	0c31      	lsrs	r1, r6, #16
 8000cb4:	188a      	adds	r2, r1, r2
 8000cb6:	0431      	lsls	r1, r6, #16
 8000cb8:	041e      	lsls	r6, r3, #16
 8000cba:	0c36      	lsrs	r6, r6, #16
 8000cbc:	198e      	adds	r6, r1, r6
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d302      	bcc.n	8000cc8 <__aeabi_ddiv+0x1ac>
 8000cc2:	d112      	bne.n	8000cea <__aeabi_ddiv+0x1ce>
 8000cc4:	42b5      	cmp	r5, r6
 8000cc6:	d210      	bcs.n	8000cea <__aeabi_ddiv+0x1ce>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	1e59      	subs	r1, r3, #1
 8000ccc:	9b00      	ldr	r3, [sp, #0]
 8000cce:	469c      	mov	ip, r3
 8000cd0:	4465      	add	r5, ip
 8000cd2:	001f      	movs	r7, r3
 8000cd4:	429d      	cmp	r5, r3
 8000cd6:	419b      	sbcs	r3, r3
 8000cd8:	425b      	negs	r3, r3
 8000cda:	191b      	adds	r3, r3, r4
 8000cdc:	18c0      	adds	r0, r0, r3
 8000cde:	4284      	cmp	r4, r0
 8000ce0:	d200      	bcs.n	8000ce4 <__aeabi_ddiv+0x1c8>
 8000ce2:	e1a0      	b.n	8001026 <__aeabi_ddiv+0x50a>
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_ddiv+0x1cc>
 8000ce6:	e19b      	b.n	8001020 <__aeabi_ddiv+0x504>
 8000ce8:	4688      	mov	r8, r1
 8000cea:	1bae      	subs	r6, r5, r6
 8000cec:	42b5      	cmp	r5, r6
 8000cee:	41ad      	sbcs	r5, r5
 8000cf0:	1a80      	subs	r0, r0, r2
 8000cf2:	426d      	negs	r5, r5
 8000cf4:	1b40      	subs	r0, r0, r5
 8000cf6:	4284      	cmp	r4, r0
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_ddiv+0x1e0>
 8000cfa:	e1d5      	b.n	80010a8 <__aeabi_ddiv+0x58c>
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	f7ff fa85 	bl	800020c <__aeabi_uidivmod>
 8000d02:	9a01      	ldr	r2, [sp, #4]
 8000d04:	040b      	lsls	r3, r1, #16
 8000d06:	4342      	muls	r2, r0
 8000d08:	0c31      	lsrs	r1, r6, #16
 8000d0a:	0005      	movs	r5, r0
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	428a      	cmp	r2, r1
 8000d10:	d900      	bls.n	8000d14 <__aeabi_ddiv+0x1f8>
 8000d12:	e16c      	b.n	8000fee <__aeabi_ddiv+0x4d2>
 8000d14:	1a88      	subs	r0, r1, r2
 8000d16:	4649      	mov	r1, r9
 8000d18:	f7ff fa78 	bl	800020c <__aeabi_uidivmod>
 8000d1c:	9a01      	ldr	r2, [sp, #4]
 8000d1e:	0436      	lsls	r6, r6, #16
 8000d20:	4342      	muls	r2, r0
 8000d22:	0409      	lsls	r1, r1, #16
 8000d24:	0c36      	lsrs	r6, r6, #16
 8000d26:	0003      	movs	r3, r0
 8000d28:	430e      	orrs	r6, r1
 8000d2a:	42b2      	cmp	r2, r6
 8000d2c:	d900      	bls.n	8000d30 <__aeabi_ddiv+0x214>
 8000d2e:	e153      	b.n	8000fd8 <__aeabi_ddiv+0x4bc>
 8000d30:	9803      	ldr	r0, [sp, #12]
 8000d32:	1ab6      	subs	r6, r6, r2
 8000d34:	0002      	movs	r2, r0
 8000d36:	042d      	lsls	r5, r5, #16
 8000d38:	431d      	orrs	r5, r3
 8000d3a:	9f02      	ldr	r7, [sp, #8]
 8000d3c:	042b      	lsls	r3, r5, #16
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	435a      	muls	r2, r3
 8000d42:	437b      	muls	r3, r7
 8000d44:	469c      	mov	ip, r3
 8000d46:	0c29      	lsrs	r1, r5, #16
 8000d48:	4348      	muls	r0, r1
 8000d4a:	0c13      	lsrs	r3, r2, #16
 8000d4c:	4484      	add	ip, r0
 8000d4e:	4463      	add	r3, ip
 8000d50:	4379      	muls	r1, r7
 8000d52:	4298      	cmp	r0, r3
 8000d54:	d903      	bls.n	8000d5e <__aeabi_ddiv+0x242>
 8000d56:	2080      	movs	r0, #128	; 0x80
 8000d58:	0240      	lsls	r0, r0, #9
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	4461      	add	r1, ip
 8000d5e:	0c18      	lsrs	r0, r3, #16
 8000d60:	0412      	lsls	r2, r2, #16
 8000d62:	041b      	lsls	r3, r3, #16
 8000d64:	0c12      	lsrs	r2, r2, #16
 8000d66:	1841      	adds	r1, r0, r1
 8000d68:	189b      	adds	r3, r3, r2
 8000d6a:	428e      	cmp	r6, r1
 8000d6c:	d200      	bcs.n	8000d70 <__aeabi_ddiv+0x254>
 8000d6e:	e0ff      	b.n	8000f70 <__aeabi_ddiv+0x454>
 8000d70:	d100      	bne.n	8000d74 <__aeabi_ddiv+0x258>
 8000d72:	e0fa      	b.n	8000f6a <__aeabi_ddiv+0x44e>
 8000d74:	2301      	movs	r3, #1
 8000d76:	431d      	orrs	r5, r3
 8000d78:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <__aeabi_ddiv+0x384>)
 8000d7a:	445a      	add	r2, fp
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	dc00      	bgt.n	8000d82 <__aeabi_ddiv+0x266>
 8000d80:	e0aa      	b.n	8000ed8 <__aeabi_ddiv+0x3bc>
 8000d82:	076b      	lsls	r3, r5, #29
 8000d84:	d000      	beq.n	8000d88 <__aeabi_ddiv+0x26c>
 8000d86:	e13d      	b.n	8001004 <__aeabi_ddiv+0x4e8>
 8000d88:	08ed      	lsrs	r5, r5, #3
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	01db      	lsls	r3, r3, #7
 8000d8e:	d506      	bpl.n	8000d9e <__aeabi_ddiv+0x282>
 8000d90:	4642      	mov	r2, r8
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <__aeabi_ddiv+0x388>)
 8000d94:	401a      	ands	r2, r3
 8000d96:	4690      	mov	r8, r2
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	00d2      	lsls	r2, r2, #3
 8000d9c:	445a      	add	r2, fp
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <__aeabi_ddiv+0x38c>)
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_ddiv+0x28a>
 8000da4:	e71f      	b.n	8000be6 <__aeabi_ddiv+0xca>
 8000da6:	4643      	mov	r3, r8
 8000da8:	075b      	lsls	r3, r3, #29
 8000daa:	431d      	orrs	r5, r3
 8000dac:	4643      	mov	r3, r8
 8000dae:	0552      	lsls	r2, r2, #21
 8000db0:	025c      	lsls	r4, r3, #9
 8000db2:	0b24      	lsrs	r4, r4, #12
 8000db4:	0d53      	lsrs	r3, r2, #21
 8000db6:	e708      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000db8:	4652      	mov	r2, sl
 8000dba:	4322      	orrs	r2, r4
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_ddiv+0x2a4>
 8000dbe:	e07b      	b.n	8000eb8 <__aeabi_ddiv+0x39c>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x2aa>
 8000dc4:	e0fa      	b.n	8000fbc <__aeabi_ddiv+0x4a0>
 8000dc6:	0020      	movs	r0, r4
 8000dc8:	f001 f90e 	bl	8001fe8 <__clzsi2>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	3a0b      	subs	r2, #11
 8000dd0:	231d      	movs	r3, #29
 8000dd2:	0001      	movs	r1, r0
 8000dd4:	1a9b      	subs	r3, r3, r2
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	3908      	subs	r1, #8
 8000dda:	40da      	lsrs	r2, r3
 8000ddc:	408c      	lsls	r4, r1
 8000dde:	4314      	orrs	r4, r2
 8000de0:	4652      	mov	r2, sl
 8000de2:	408a      	lsls	r2, r1
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <__aeabi_ddiv+0x390>)
 8000de6:	4458      	add	r0, fp
 8000de8:	469b      	mov	fp, r3
 8000dea:	4483      	add	fp, r0
 8000dec:	2000      	movs	r0, #0
 8000dee:	e6d5      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000df0:	464b      	mov	r3, r9
 8000df2:	4323      	orrs	r3, r4
 8000df4:	4698      	mov	r8, r3
 8000df6:	d044      	beq.n	8000e82 <__aeabi_ddiv+0x366>
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_ddiv+0x2e2>
 8000dfc:	e0ce      	b.n	8000f9c <__aeabi_ddiv+0x480>
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f001 f8f2 	bl	8001fe8 <__clzsi2>
 8000e04:	0001      	movs	r1, r0
 8000e06:	0002      	movs	r2, r0
 8000e08:	390b      	subs	r1, #11
 8000e0a:	231d      	movs	r3, #29
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	4649      	mov	r1, r9
 8000e10:	0010      	movs	r0, r2
 8000e12:	40d9      	lsrs	r1, r3
 8000e14:	3808      	subs	r0, #8
 8000e16:	4084      	lsls	r4, r0
 8000e18:	000b      	movs	r3, r1
 8000e1a:	464d      	mov	r5, r9
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	4698      	mov	r8, r3
 8000e20:	4085      	lsls	r5, r0
 8000e22:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <__aeabi_ddiv+0x394>)
 8000e24:	1a83      	subs	r3, r0, r2
 8000e26:	469b      	mov	fp, r3
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4699      	mov	r9, r3
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	e69a      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e30:	464b      	mov	r3, r9
 8000e32:	4323      	orrs	r3, r4
 8000e34:	4698      	mov	r8, r3
 8000e36:	d11d      	bne.n	8000e74 <__aeabi_ddiv+0x358>
 8000e38:	2308      	movs	r3, #8
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	3b06      	subs	r3, #6
 8000e3e:	2500      	movs	r5, #0
 8000e40:	4683      	mov	fp, r0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	e68f      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e46:	4652      	mov	r2, sl
 8000e48:	4322      	orrs	r2, r4
 8000e4a:	d109      	bne.n	8000e60 <__aeabi_ddiv+0x344>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	4649      	mov	r1, r9
 8000e50:	4319      	orrs	r1, r3
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <__aeabi_ddiv+0x398>)
 8000e54:	4689      	mov	r9, r1
 8000e56:	469c      	mov	ip, r3
 8000e58:	2400      	movs	r4, #0
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	44e3      	add	fp, ip
 8000e5e:	e69d      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000e60:	2303      	movs	r3, #3
 8000e62:	464a      	mov	r2, r9
 8000e64:	431a      	orrs	r2, r3
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <__aeabi_ddiv+0x398>)
 8000e68:	4691      	mov	r9, r2
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	4652      	mov	r2, sl
 8000e6e:	2003      	movs	r0, #3
 8000e70:	44e3      	add	fp, ip
 8000e72:	e693      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000e74:	230c      	movs	r3, #12
 8000e76:	4699      	mov	r9, r3
 8000e78:	3b09      	subs	r3, #9
 8000e7a:	46a0      	mov	r8, r4
 8000e7c:	4683      	mov	fp, r0
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	e671      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e82:	2304      	movs	r3, #4
 8000e84:	4699      	mov	r9, r3
 8000e86:	2300      	movs	r3, #0
 8000e88:	469b      	mov	fp, r3
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	e669      	b.n	8000b66 <__aeabi_ddiv+0x4a>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	000007ff 	.word	0x000007ff
 8000e98:	fffffc01 	.word	0xfffffc01
 8000e9c:	08005ca0 	.word	0x08005ca0
 8000ea0:	000003ff 	.word	0x000003ff
 8000ea4:	feffffff 	.word	0xfeffffff
 8000ea8:	000007fe 	.word	0x000007fe
 8000eac:	000003f3 	.word	0x000003f3
 8000eb0:	fffffc0d 	.word	0xfffffc0d
 8000eb4:	fffff801 	.word	0xfffff801
 8000eb8:	4649      	mov	r1, r9
 8000eba:	2301      	movs	r3, #1
 8000ebc:	4319      	orrs	r1, r3
 8000ebe:	4689      	mov	r9, r1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e66a      	b.n	8000b9c <__aeabi_ddiv+0x80>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2480      	movs	r4, #128	; 0x80
 8000eca:	469a      	mov	sl, r3
 8000ecc:	2500      	movs	r5, #0
 8000ece:	4b8a      	ldr	r3, [pc, #552]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 8000ed0:	0324      	lsls	r4, r4, #12
 8000ed2:	e67a      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000ed4:	2501      	movs	r5, #1
 8000ed6:	426d      	negs	r5, r5
 8000ed8:	2301      	movs	r3, #1
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	2b38      	cmp	r3, #56	; 0x38
 8000ede:	dd00      	ble.n	8000ee2 <__aeabi_ddiv+0x3c6>
 8000ee0:	e670      	b.n	8000bc4 <__aeabi_ddiv+0xa8>
 8000ee2:	2b1f      	cmp	r3, #31
 8000ee4:	dc00      	bgt.n	8000ee8 <__aeabi_ddiv+0x3cc>
 8000ee6:	e0bf      	b.n	8001068 <__aeabi_ddiv+0x54c>
 8000ee8:	211f      	movs	r1, #31
 8000eea:	4249      	negs	r1, r1
 8000eec:	1a8a      	subs	r2, r1, r2
 8000eee:	4641      	mov	r1, r8
 8000ef0:	40d1      	lsrs	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	2b20      	cmp	r3, #32
 8000ef6:	d004      	beq.n	8000f02 <__aeabi_ddiv+0x3e6>
 8000ef8:	4641      	mov	r1, r8
 8000efa:	4b80      	ldr	r3, [pc, #512]	; (80010fc <__aeabi_ddiv+0x5e0>)
 8000efc:	445b      	add	r3, fp
 8000efe:	4099      	lsls	r1, r3
 8000f00:	430d      	orrs	r5, r1
 8000f02:	1e6b      	subs	r3, r5, #1
 8000f04:	419d      	sbcs	r5, r3
 8000f06:	2307      	movs	r3, #7
 8000f08:	432a      	orrs	r2, r5
 8000f0a:	001d      	movs	r5, r3
 8000f0c:	2400      	movs	r4, #0
 8000f0e:	4015      	ands	r5, r2
 8000f10:	4213      	tst	r3, r2
 8000f12:	d100      	bne.n	8000f16 <__aeabi_ddiv+0x3fa>
 8000f14:	e0d4      	b.n	80010c0 <__aeabi_ddiv+0x5a4>
 8000f16:	210f      	movs	r1, #15
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4011      	ands	r1, r2
 8000f1c:	2904      	cmp	r1, #4
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0x406>
 8000f20:	e0cb      	b.n	80010ba <__aeabi_ddiv+0x59e>
 8000f22:	1d11      	adds	r1, r2, #4
 8000f24:	4291      	cmp	r1, r2
 8000f26:	4192      	sbcs	r2, r2
 8000f28:	4252      	negs	r2, r2
 8000f2a:	189b      	adds	r3, r3, r2
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	0219      	lsls	r1, r3, #8
 8000f30:	d400      	bmi.n	8000f34 <__aeabi_ddiv+0x418>
 8000f32:	e0c2      	b.n	80010ba <__aeabi_ddiv+0x59e>
 8000f34:	2301      	movs	r3, #1
 8000f36:	2400      	movs	r4, #0
 8000f38:	2500      	movs	r5, #0
 8000f3a:	e646      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	4641      	mov	r1, r8
 8000f40:	031b      	lsls	r3, r3, #12
 8000f42:	4219      	tst	r1, r3
 8000f44:	d008      	beq.n	8000f58 <__aeabi_ddiv+0x43c>
 8000f46:	421c      	tst	r4, r3
 8000f48:	d106      	bne.n	8000f58 <__aeabi_ddiv+0x43c>
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	0324      	lsls	r4, r4, #12
 8000f4e:	46ba      	mov	sl, r7
 8000f50:	0015      	movs	r5, r2
 8000f52:	4b69      	ldr	r3, [pc, #420]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 8000f54:	0b24      	lsrs	r4, r4, #12
 8000f56:	e638      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000f58:	2480      	movs	r4, #128	; 0x80
 8000f5a:	4643      	mov	r3, r8
 8000f5c:	0324      	lsls	r4, r4, #12
 8000f5e:	431c      	orrs	r4, r3
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	46b2      	mov	sl, r6
 8000f64:	4b64      	ldr	r3, [pc, #400]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 8000f66:	0b24      	lsrs	r4, r4, #12
 8000f68:	e62f      	b.n	8000bca <__aeabi_ddiv+0xae>
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x454>
 8000f6e:	e703      	b.n	8000d78 <__aeabi_ddiv+0x25c>
 8000f70:	19a6      	adds	r6, r4, r6
 8000f72:	1e68      	subs	r0, r5, #1
 8000f74:	42a6      	cmp	r6, r4
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x45e>
 8000f78:	e08d      	b.n	8001096 <__aeabi_ddiv+0x57a>
 8000f7a:	428e      	cmp	r6, r1
 8000f7c:	d200      	bcs.n	8000f80 <__aeabi_ddiv+0x464>
 8000f7e:	e0a3      	b.n	80010c8 <__aeabi_ddiv+0x5ac>
 8000f80:	d100      	bne.n	8000f84 <__aeabi_ddiv+0x468>
 8000f82:	e0b3      	b.n	80010ec <__aeabi_ddiv+0x5d0>
 8000f84:	0005      	movs	r5, r0
 8000f86:	e6f5      	b.n	8000d74 <__aeabi_ddiv+0x258>
 8000f88:	42aa      	cmp	r2, r5
 8000f8a:	d900      	bls.n	8000f8e <__aeabi_ddiv+0x472>
 8000f8c:	e639      	b.n	8000c02 <__aeabi_ddiv+0xe6>
 8000f8e:	4643      	mov	r3, r8
 8000f90:	07de      	lsls	r6, r3, #31
 8000f92:	0858      	lsrs	r0, r3, #1
 8000f94:	086b      	lsrs	r3, r5, #1
 8000f96:	431e      	orrs	r6, r3
 8000f98:	07ed      	lsls	r5, r5, #31
 8000f9a:	e639      	b.n	8000c10 <__aeabi_ddiv+0xf4>
 8000f9c:	4648      	mov	r0, r9
 8000f9e:	f001 f823 	bl	8001fe8 <__clzsi2>
 8000fa2:	0001      	movs	r1, r0
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3115      	adds	r1, #21
 8000fa8:	3220      	adds	r2, #32
 8000faa:	291c      	cmp	r1, #28
 8000fac:	dc00      	bgt.n	8000fb0 <__aeabi_ddiv+0x494>
 8000fae:	e72c      	b.n	8000e0a <__aeabi_ddiv+0x2ee>
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	3808      	subs	r0, #8
 8000fb4:	4083      	lsls	r3, r0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	4698      	mov	r8, r3
 8000fba:	e732      	b.n	8000e22 <__aeabi_ddiv+0x306>
 8000fbc:	f001 f814 	bl	8001fe8 <__clzsi2>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	3215      	adds	r2, #21
 8000fc6:	3020      	adds	r0, #32
 8000fc8:	2a1c      	cmp	r2, #28
 8000fca:	dc00      	bgt.n	8000fce <__aeabi_ddiv+0x4b2>
 8000fcc:	e700      	b.n	8000dd0 <__aeabi_ddiv+0x2b4>
 8000fce:	4654      	mov	r4, sl
 8000fd0:	3b08      	subs	r3, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	409c      	lsls	r4, r3
 8000fd6:	e705      	b.n	8000de4 <__aeabi_ddiv+0x2c8>
 8000fd8:	1936      	adds	r6, r6, r4
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	42b4      	cmp	r4, r6
 8000fde:	d900      	bls.n	8000fe2 <__aeabi_ddiv+0x4c6>
 8000fe0:	e6a6      	b.n	8000d30 <__aeabi_ddiv+0x214>
 8000fe2:	42b2      	cmp	r2, r6
 8000fe4:	d800      	bhi.n	8000fe8 <__aeabi_ddiv+0x4cc>
 8000fe6:	e6a3      	b.n	8000d30 <__aeabi_ddiv+0x214>
 8000fe8:	1e83      	subs	r3, r0, #2
 8000fea:	1936      	adds	r6, r6, r4
 8000fec:	e6a0      	b.n	8000d30 <__aeabi_ddiv+0x214>
 8000fee:	1909      	adds	r1, r1, r4
 8000ff0:	3d01      	subs	r5, #1
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	d900      	bls.n	8000ff8 <__aeabi_ddiv+0x4dc>
 8000ff6:	e68d      	b.n	8000d14 <__aeabi_ddiv+0x1f8>
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d800      	bhi.n	8000ffe <__aeabi_ddiv+0x4e2>
 8000ffc:	e68a      	b.n	8000d14 <__aeabi_ddiv+0x1f8>
 8000ffe:	1e85      	subs	r5, r0, #2
 8001000:	1909      	adds	r1, r1, r4
 8001002:	e687      	b.n	8000d14 <__aeabi_ddiv+0x1f8>
 8001004:	230f      	movs	r3, #15
 8001006:	402b      	ands	r3, r5
 8001008:	2b04      	cmp	r3, #4
 800100a:	d100      	bne.n	800100e <__aeabi_ddiv+0x4f2>
 800100c:	e6bc      	b.n	8000d88 <__aeabi_ddiv+0x26c>
 800100e:	2305      	movs	r3, #5
 8001010:	425b      	negs	r3, r3
 8001012:	42ab      	cmp	r3, r5
 8001014:	419b      	sbcs	r3, r3
 8001016:	3504      	adds	r5, #4
 8001018:	425b      	negs	r3, r3
 800101a:	08ed      	lsrs	r5, r5, #3
 800101c:	4498      	add	r8, r3
 800101e:	e6b4      	b.n	8000d8a <__aeabi_ddiv+0x26e>
 8001020:	42af      	cmp	r7, r5
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x50a>
 8001024:	e660      	b.n	8000ce8 <__aeabi_ddiv+0x1cc>
 8001026:	4282      	cmp	r2, r0
 8001028:	d804      	bhi.n	8001034 <__aeabi_ddiv+0x518>
 800102a:	d000      	beq.n	800102e <__aeabi_ddiv+0x512>
 800102c:	e65c      	b.n	8000ce8 <__aeabi_ddiv+0x1cc>
 800102e:	42ae      	cmp	r6, r5
 8001030:	d800      	bhi.n	8001034 <__aeabi_ddiv+0x518>
 8001032:	e659      	b.n	8000ce8 <__aeabi_ddiv+0x1cc>
 8001034:	2302      	movs	r3, #2
 8001036:	425b      	negs	r3, r3
 8001038:	469c      	mov	ip, r3
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	44e0      	add	r8, ip
 800103e:	469c      	mov	ip, r3
 8001040:	4465      	add	r5, ip
 8001042:	429d      	cmp	r5, r3
 8001044:	419b      	sbcs	r3, r3
 8001046:	425b      	negs	r3, r3
 8001048:	191b      	adds	r3, r3, r4
 800104a:	18c0      	adds	r0, r0, r3
 800104c:	e64d      	b.n	8000cea <__aeabi_ddiv+0x1ce>
 800104e:	428a      	cmp	r2, r1
 8001050:	d800      	bhi.n	8001054 <__aeabi_ddiv+0x538>
 8001052:	e60e      	b.n	8000c72 <__aeabi_ddiv+0x156>
 8001054:	1e83      	subs	r3, r0, #2
 8001056:	1909      	adds	r1, r1, r4
 8001058:	e60b      	b.n	8000c72 <__aeabi_ddiv+0x156>
 800105a:	428a      	cmp	r2, r1
 800105c:	d800      	bhi.n	8001060 <__aeabi_ddiv+0x544>
 800105e:	e5f4      	b.n	8000c4a <__aeabi_ddiv+0x12e>
 8001060:	1e83      	subs	r3, r0, #2
 8001062:	4698      	mov	r8, r3
 8001064:	1909      	adds	r1, r1, r4
 8001066:	e5f0      	b.n	8000c4a <__aeabi_ddiv+0x12e>
 8001068:	4925      	ldr	r1, [pc, #148]	; (8001100 <__aeabi_ddiv+0x5e4>)
 800106a:	0028      	movs	r0, r5
 800106c:	4459      	add	r1, fp
 800106e:	408d      	lsls	r5, r1
 8001070:	4642      	mov	r2, r8
 8001072:	408a      	lsls	r2, r1
 8001074:	1e69      	subs	r1, r5, #1
 8001076:	418d      	sbcs	r5, r1
 8001078:	4641      	mov	r1, r8
 800107a:	40d8      	lsrs	r0, r3
 800107c:	40d9      	lsrs	r1, r3
 800107e:	4302      	orrs	r2, r0
 8001080:	432a      	orrs	r2, r5
 8001082:	000b      	movs	r3, r1
 8001084:	0751      	lsls	r1, r2, #29
 8001086:	d100      	bne.n	800108a <__aeabi_ddiv+0x56e>
 8001088:	e751      	b.n	8000f2e <__aeabi_ddiv+0x412>
 800108a:	210f      	movs	r1, #15
 800108c:	4011      	ands	r1, r2
 800108e:	2904      	cmp	r1, #4
 8001090:	d000      	beq.n	8001094 <__aeabi_ddiv+0x578>
 8001092:	e746      	b.n	8000f22 <__aeabi_ddiv+0x406>
 8001094:	e74b      	b.n	8000f2e <__aeabi_ddiv+0x412>
 8001096:	0005      	movs	r5, r0
 8001098:	428e      	cmp	r6, r1
 800109a:	d000      	beq.n	800109e <__aeabi_ddiv+0x582>
 800109c:	e66a      	b.n	8000d74 <__aeabi_ddiv+0x258>
 800109e:	9a00      	ldr	r2, [sp, #0]
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d000      	beq.n	80010a6 <__aeabi_ddiv+0x58a>
 80010a4:	e666      	b.n	8000d74 <__aeabi_ddiv+0x258>
 80010a6:	e667      	b.n	8000d78 <__aeabi_ddiv+0x25c>
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <__aeabi_ddiv+0x5e8>)
 80010aa:	445a      	add	r2, fp
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	dc00      	bgt.n	80010b2 <__aeabi_ddiv+0x596>
 80010b0:	e710      	b.n	8000ed4 <__aeabi_ddiv+0x3b8>
 80010b2:	2301      	movs	r3, #1
 80010b4:	2500      	movs	r5, #0
 80010b6:	4498      	add	r8, r3
 80010b8:	e667      	b.n	8000d8a <__aeabi_ddiv+0x26e>
 80010ba:	075d      	lsls	r5, r3, #29
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	0b1c      	lsrs	r4, r3, #12
 80010c0:	08d2      	lsrs	r2, r2, #3
 80010c2:	2300      	movs	r3, #0
 80010c4:	4315      	orrs	r5, r2
 80010c6:	e580      	b.n	8000bca <__aeabi_ddiv+0xae>
 80010c8:	9800      	ldr	r0, [sp, #0]
 80010ca:	3d02      	subs	r5, #2
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	4282      	cmp	r2, r0
 80010d0:	41bf      	sbcs	r7, r7
 80010d2:	427f      	negs	r7, r7
 80010d4:	193c      	adds	r4, r7, r4
 80010d6:	1936      	adds	r6, r6, r4
 80010d8:	9200      	str	r2, [sp, #0]
 80010da:	e7dd      	b.n	8001098 <__aeabi_ddiv+0x57c>
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	4643      	mov	r3, r8
 80010e0:	0324      	lsls	r4, r4, #12
 80010e2:	431c      	orrs	r4, r3
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__aeabi_ddiv+0x5dc>)
 80010e8:	0b24      	lsrs	r4, r4, #12
 80010ea:	e56e      	b.n	8000bca <__aeabi_ddiv+0xae>
 80010ec:	9a00      	ldr	r2, [sp, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3ea      	bcc.n	80010c8 <__aeabi_ddiv+0x5ac>
 80010f2:	0005      	movs	r5, r0
 80010f4:	e7d3      	b.n	800109e <__aeabi_ddiv+0x582>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	000007ff 	.word	0x000007ff
 80010fc:	0000043e 	.word	0x0000043e
 8001100:	0000041e 	.word	0x0000041e
 8001104:	000003ff 	.word	0x000003ff

08001108 <__eqdf2>:
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	464e      	mov	r6, r9
 800110c:	4645      	mov	r5, r8
 800110e:	46de      	mov	lr, fp
 8001110:	4657      	mov	r7, sl
 8001112:	4690      	mov	r8, r2
 8001114:	b5e0      	push	{r5, r6, r7, lr}
 8001116:	0017      	movs	r7, r2
 8001118:	031a      	lsls	r2, r3, #12
 800111a:	0b12      	lsrs	r2, r2, #12
 800111c:	0005      	movs	r5, r0
 800111e:	4684      	mov	ip, r0
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <__eqdf2+0x80>)
 8001122:	030e      	lsls	r6, r1, #12
 8001124:	004c      	lsls	r4, r1, #1
 8001126:	4691      	mov	r9, r2
 8001128:	005a      	lsls	r2, r3, #1
 800112a:	0fdb      	lsrs	r3, r3, #31
 800112c:	469b      	mov	fp, r3
 800112e:	0b36      	lsrs	r6, r6, #12
 8001130:	0d64      	lsrs	r4, r4, #21
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	0d52      	lsrs	r2, r2, #21
 8001136:	4284      	cmp	r4, r0
 8001138:	d019      	beq.n	800116e <__eqdf2+0x66>
 800113a:	4282      	cmp	r2, r0
 800113c:	d010      	beq.n	8001160 <__eqdf2+0x58>
 800113e:	2001      	movs	r0, #1
 8001140:	4294      	cmp	r4, r2
 8001142:	d10e      	bne.n	8001162 <__eqdf2+0x5a>
 8001144:	454e      	cmp	r6, r9
 8001146:	d10c      	bne.n	8001162 <__eqdf2+0x5a>
 8001148:	2001      	movs	r0, #1
 800114a:	45c4      	cmp	ip, r8
 800114c:	d109      	bne.n	8001162 <__eqdf2+0x5a>
 800114e:	4559      	cmp	r1, fp
 8001150:	d017      	beq.n	8001182 <__eqdf2+0x7a>
 8001152:	2c00      	cmp	r4, #0
 8001154:	d105      	bne.n	8001162 <__eqdf2+0x5a>
 8001156:	0030      	movs	r0, r6
 8001158:	4328      	orrs	r0, r5
 800115a:	1e43      	subs	r3, r0, #1
 800115c:	4198      	sbcs	r0, r3
 800115e:	e000      	b.n	8001162 <__eqdf2+0x5a>
 8001160:	2001      	movs	r0, #1
 8001162:	bcf0      	pop	{r4, r5, r6, r7}
 8001164:	46bb      	mov	fp, r7
 8001166:	46b2      	mov	sl, r6
 8001168:	46a9      	mov	r9, r5
 800116a:	46a0      	mov	r8, r4
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116e:	0033      	movs	r3, r6
 8001170:	2001      	movs	r0, #1
 8001172:	432b      	orrs	r3, r5
 8001174:	d1f5      	bne.n	8001162 <__eqdf2+0x5a>
 8001176:	42a2      	cmp	r2, r4
 8001178:	d1f3      	bne.n	8001162 <__eqdf2+0x5a>
 800117a:	464b      	mov	r3, r9
 800117c:	433b      	orrs	r3, r7
 800117e:	d1f0      	bne.n	8001162 <__eqdf2+0x5a>
 8001180:	e7e2      	b.n	8001148 <__eqdf2+0x40>
 8001182:	2000      	movs	r0, #0
 8001184:	e7ed      	b.n	8001162 <__eqdf2+0x5a>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	000007ff 	.word	0x000007ff

0800118c <__gedf2>:
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	4647      	mov	r7, r8
 8001190:	46ce      	mov	lr, r9
 8001192:	0004      	movs	r4, r0
 8001194:	0018      	movs	r0, r3
 8001196:	0016      	movs	r6, r2
 8001198:	031b      	lsls	r3, r3, #12
 800119a:	0b1b      	lsrs	r3, r3, #12
 800119c:	4d2d      	ldr	r5, [pc, #180]	; (8001254 <__gedf2+0xc8>)
 800119e:	004a      	lsls	r2, r1, #1
 80011a0:	4699      	mov	r9, r3
 80011a2:	b580      	push	{r7, lr}
 80011a4:	0043      	lsls	r3, r0, #1
 80011a6:	030f      	lsls	r7, r1, #12
 80011a8:	46a4      	mov	ip, r4
 80011aa:	46b0      	mov	r8, r6
 80011ac:	0b3f      	lsrs	r7, r7, #12
 80011ae:	0d52      	lsrs	r2, r2, #21
 80011b0:	0fc9      	lsrs	r1, r1, #31
 80011b2:	0d5b      	lsrs	r3, r3, #21
 80011b4:	0fc0      	lsrs	r0, r0, #31
 80011b6:	42aa      	cmp	r2, r5
 80011b8:	d021      	beq.n	80011fe <__gedf2+0x72>
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	d013      	beq.n	80011e6 <__gedf2+0x5a>
 80011be:	2a00      	cmp	r2, #0
 80011c0:	d122      	bne.n	8001208 <__gedf2+0x7c>
 80011c2:	433c      	orrs	r4, r7
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <__gedf2+0x42>
 80011c8:	464d      	mov	r5, r9
 80011ca:	432e      	orrs	r6, r5
 80011cc:	d022      	beq.n	8001214 <__gedf2+0x88>
 80011ce:	2c00      	cmp	r4, #0
 80011d0:	d010      	beq.n	80011f4 <__gedf2+0x68>
 80011d2:	4281      	cmp	r1, r0
 80011d4:	d022      	beq.n	800121c <__gedf2+0x90>
 80011d6:	2002      	movs	r0, #2
 80011d8:	3901      	subs	r1, #1
 80011da:	4008      	ands	r0, r1
 80011dc:	3801      	subs	r0, #1
 80011de:	bcc0      	pop	{r6, r7}
 80011e0:	46b9      	mov	r9, r7
 80011e2:	46b0      	mov	r8, r6
 80011e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e6:	464d      	mov	r5, r9
 80011e8:	432e      	orrs	r6, r5
 80011ea:	d129      	bne.n	8001240 <__gedf2+0xb4>
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	d1f0      	bne.n	80011d2 <__gedf2+0x46>
 80011f0:	433c      	orrs	r4, r7
 80011f2:	d1ee      	bne.n	80011d2 <__gedf2+0x46>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d1f2      	bne.n	80011de <__gedf2+0x52>
 80011f8:	2001      	movs	r0, #1
 80011fa:	4240      	negs	r0, r0
 80011fc:	e7ef      	b.n	80011de <__gedf2+0x52>
 80011fe:	003d      	movs	r5, r7
 8001200:	4325      	orrs	r5, r4
 8001202:	d11d      	bne.n	8001240 <__gedf2+0xb4>
 8001204:	4293      	cmp	r3, r2
 8001206:	d0ee      	beq.n	80011e6 <__gedf2+0x5a>
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e2      	bne.n	80011d2 <__gedf2+0x46>
 800120c:	464c      	mov	r4, r9
 800120e:	4326      	orrs	r6, r4
 8001210:	d1df      	bne.n	80011d2 <__gedf2+0x46>
 8001212:	e7e0      	b.n	80011d6 <__gedf2+0x4a>
 8001214:	2000      	movs	r0, #0
 8001216:	2c00      	cmp	r4, #0
 8001218:	d0e1      	beq.n	80011de <__gedf2+0x52>
 800121a:	e7dc      	b.n	80011d6 <__gedf2+0x4a>
 800121c:	429a      	cmp	r2, r3
 800121e:	dc0a      	bgt.n	8001236 <__gedf2+0xaa>
 8001220:	dbe8      	blt.n	80011f4 <__gedf2+0x68>
 8001222:	454f      	cmp	r7, r9
 8001224:	d8d7      	bhi.n	80011d6 <__gedf2+0x4a>
 8001226:	d00e      	beq.n	8001246 <__gedf2+0xba>
 8001228:	2000      	movs	r0, #0
 800122a:	454f      	cmp	r7, r9
 800122c:	d2d7      	bcs.n	80011de <__gedf2+0x52>
 800122e:	2900      	cmp	r1, #0
 8001230:	d0e2      	beq.n	80011f8 <__gedf2+0x6c>
 8001232:	0008      	movs	r0, r1
 8001234:	e7d3      	b.n	80011de <__gedf2+0x52>
 8001236:	4243      	negs	r3, r0
 8001238:	4158      	adcs	r0, r3
 800123a:	0040      	lsls	r0, r0, #1
 800123c:	3801      	subs	r0, #1
 800123e:	e7ce      	b.n	80011de <__gedf2+0x52>
 8001240:	2002      	movs	r0, #2
 8001242:	4240      	negs	r0, r0
 8001244:	e7cb      	b.n	80011de <__gedf2+0x52>
 8001246:	45c4      	cmp	ip, r8
 8001248:	d8c5      	bhi.n	80011d6 <__gedf2+0x4a>
 800124a:	2000      	movs	r0, #0
 800124c:	45c4      	cmp	ip, r8
 800124e:	d2c6      	bcs.n	80011de <__gedf2+0x52>
 8001250:	e7ed      	b.n	800122e <__gedf2+0xa2>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	000007ff 	.word	0x000007ff

08001258 <__ledf2>:
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	4647      	mov	r7, r8
 800125c:	46ce      	mov	lr, r9
 800125e:	0004      	movs	r4, r0
 8001260:	0018      	movs	r0, r3
 8001262:	0016      	movs	r6, r2
 8001264:	031b      	lsls	r3, r3, #12
 8001266:	0b1b      	lsrs	r3, r3, #12
 8001268:	4d2c      	ldr	r5, [pc, #176]	; (800131c <__ledf2+0xc4>)
 800126a:	004a      	lsls	r2, r1, #1
 800126c:	4699      	mov	r9, r3
 800126e:	b580      	push	{r7, lr}
 8001270:	0043      	lsls	r3, r0, #1
 8001272:	030f      	lsls	r7, r1, #12
 8001274:	46a4      	mov	ip, r4
 8001276:	46b0      	mov	r8, r6
 8001278:	0b3f      	lsrs	r7, r7, #12
 800127a:	0d52      	lsrs	r2, r2, #21
 800127c:	0fc9      	lsrs	r1, r1, #31
 800127e:	0d5b      	lsrs	r3, r3, #21
 8001280:	0fc0      	lsrs	r0, r0, #31
 8001282:	42aa      	cmp	r2, r5
 8001284:	d00d      	beq.n	80012a2 <__ledf2+0x4a>
 8001286:	42ab      	cmp	r3, r5
 8001288:	d010      	beq.n	80012ac <__ledf2+0x54>
 800128a:	2a00      	cmp	r2, #0
 800128c:	d127      	bne.n	80012de <__ledf2+0x86>
 800128e:	433c      	orrs	r4, r7
 8001290:	2b00      	cmp	r3, #0
 8001292:	d111      	bne.n	80012b8 <__ledf2+0x60>
 8001294:	464d      	mov	r5, r9
 8001296:	432e      	orrs	r6, r5
 8001298:	d10e      	bne.n	80012b8 <__ledf2+0x60>
 800129a:	2000      	movs	r0, #0
 800129c:	2c00      	cmp	r4, #0
 800129e:	d015      	beq.n	80012cc <__ledf2+0x74>
 80012a0:	e00e      	b.n	80012c0 <__ledf2+0x68>
 80012a2:	003d      	movs	r5, r7
 80012a4:	4325      	orrs	r5, r4
 80012a6:	d110      	bne.n	80012ca <__ledf2+0x72>
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d118      	bne.n	80012de <__ledf2+0x86>
 80012ac:	464d      	mov	r5, r9
 80012ae:	432e      	orrs	r6, r5
 80012b0:	d10b      	bne.n	80012ca <__ledf2+0x72>
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d102      	bne.n	80012bc <__ledf2+0x64>
 80012b6:	433c      	orrs	r4, r7
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	d00b      	beq.n	80012d4 <__ledf2+0x7c>
 80012bc:	4281      	cmp	r1, r0
 80012be:	d014      	beq.n	80012ea <__ledf2+0x92>
 80012c0:	2002      	movs	r0, #2
 80012c2:	3901      	subs	r1, #1
 80012c4:	4008      	ands	r0, r1
 80012c6:	3801      	subs	r0, #1
 80012c8:	e000      	b.n	80012cc <__ledf2+0x74>
 80012ca:	2002      	movs	r0, #2
 80012cc:	bcc0      	pop	{r6, r7}
 80012ce:	46b9      	mov	r9, r7
 80012d0:	46b0      	mov	r8, r6
 80012d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d1f9      	bne.n	80012cc <__ledf2+0x74>
 80012d8:	2001      	movs	r0, #1
 80012da:	4240      	negs	r0, r0
 80012dc:	e7f6      	b.n	80012cc <__ledf2+0x74>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ec      	bne.n	80012bc <__ledf2+0x64>
 80012e2:	464c      	mov	r4, r9
 80012e4:	4326      	orrs	r6, r4
 80012e6:	d1e9      	bne.n	80012bc <__ledf2+0x64>
 80012e8:	e7ea      	b.n	80012c0 <__ledf2+0x68>
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dd04      	ble.n	80012f8 <__ledf2+0xa0>
 80012ee:	4243      	negs	r3, r0
 80012f0:	4158      	adcs	r0, r3
 80012f2:	0040      	lsls	r0, r0, #1
 80012f4:	3801      	subs	r0, #1
 80012f6:	e7e9      	b.n	80012cc <__ledf2+0x74>
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbeb      	blt.n	80012d4 <__ledf2+0x7c>
 80012fc:	454f      	cmp	r7, r9
 80012fe:	d8df      	bhi.n	80012c0 <__ledf2+0x68>
 8001300:	d006      	beq.n	8001310 <__ledf2+0xb8>
 8001302:	2000      	movs	r0, #0
 8001304:	454f      	cmp	r7, r9
 8001306:	d2e1      	bcs.n	80012cc <__ledf2+0x74>
 8001308:	2900      	cmp	r1, #0
 800130a:	d0e5      	beq.n	80012d8 <__ledf2+0x80>
 800130c:	0008      	movs	r0, r1
 800130e:	e7dd      	b.n	80012cc <__ledf2+0x74>
 8001310:	45c4      	cmp	ip, r8
 8001312:	d8d5      	bhi.n	80012c0 <__ledf2+0x68>
 8001314:	2000      	movs	r0, #0
 8001316:	45c4      	cmp	ip, r8
 8001318:	d2d8      	bcs.n	80012cc <__ledf2+0x74>
 800131a:	e7f5      	b.n	8001308 <__ledf2+0xb0>
 800131c:	000007ff 	.word	0x000007ff

08001320 <__aeabi_dmul>:
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	4657      	mov	r7, sl
 8001324:	464e      	mov	r6, r9
 8001326:	4645      	mov	r5, r8
 8001328:	46de      	mov	lr, fp
 800132a:	b5e0      	push	{r5, r6, r7, lr}
 800132c:	4698      	mov	r8, r3
 800132e:	030c      	lsls	r4, r1, #12
 8001330:	004b      	lsls	r3, r1, #1
 8001332:	0006      	movs	r6, r0
 8001334:	4692      	mov	sl, r2
 8001336:	b087      	sub	sp, #28
 8001338:	0b24      	lsrs	r4, r4, #12
 800133a:	0d5b      	lsrs	r3, r3, #21
 800133c:	0fcf      	lsrs	r7, r1, #31
 800133e:	2b00      	cmp	r3, #0
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x24>
 8001342:	e15c      	b.n	80015fe <__aeabi_dmul+0x2de>
 8001344:	4ad9      	ldr	r2, [pc, #868]	; (80016ac <__aeabi_dmul+0x38c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d100      	bne.n	800134c <__aeabi_dmul+0x2c>
 800134a:	e175      	b.n	8001638 <__aeabi_dmul+0x318>
 800134c:	0f42      	lsrs	r2, r0, #29
 800134e:	00e4      	lsls	r4, r4, #3
 8001350:	4314      	orrs	r4, r2
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	0412      	lsls	r2, r2, #16
 8001356:	4314      	orrs	r4, r2
 8001358:	4ad5      	ldr	r2, [pc, #852]	; (80016b0 <__aeabi_dmul+0x390>)
 800135a:	00c5      	lsls	r5, r0, #3
 800135c:	4694      	mov	ip, r2
 800135e:	4463      	add	r3, ip
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	4699      	mov	r9, r3
 8001366:	469b      	mov	fp, r3
 8001368:	4643      	mov	r3, r8
 800136a:	4642      	mov	r2, r8
 800136c:	031e      	lsls	r6, r3, #12
 800136e:	0fd2      	lsrs	r2, r2, #31
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4650      	mov	r0, sl
 8001374:	4690      	mov	r8, r2
 8001376:	0b36      	lsrs	r6, r6, #12
 8001378:	0d5b      	lsrs	r3, r3, #21
 800137a:	d100      	bne.n	800137e <__aeabi_dmul+0x5e>
 800137c:	e120      	b.n	80015c0 <__aeabi_dmul+0x2a0>
 800137e:	4acb      	ldr	r2, [pc, #812]	; (80016ac <__aeabi_dmul+0x38c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d100      	bne.n	8001386 <__aeabi_dmul+0x66>
 8001384:	e162      	b.n	800164c <__aeabi_dmul+0x32c>
 8001386:	49ca      	ldr	r1, [pc, #808]	; (80016b0 <__aeabi_dmul+0x390>)
 8001388:	0f42      	lsrs	r2, r0, #29
 800138a:	468c      	mov	ip, r1
 800138c:	9900      	ldr	r1, [sp, #0]
 800138e:	4463      	add	r3, ip
 8001390:	00f6      	lsls	r6, r6, #3
 8001392:	468c      	mov	ip, r1
 8001394:	4316      	orrs	r6, r2
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	449c      	add	ip, r3
 800139a:	0412      	lsls	r2, r2, #16
 800139c:	4663      	mov	r3, ip
 800139e:	4316      	orrs	r6, r2
 80013a0:	00c2      	lsls	r2, r0, #3
 80013a2:	2000      	movs	r0, #0
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	9900      	ldr	r1, [sp, #0]
 80013a8:	4643      	mov	r3, r8
 80013aa:	3101      	adds	r1, #1
 80013ac:	468c      	mov	ip, r1
 80013ae:	4649      	mov	r1, r9
 80013b0:	407b      	eors	r3, r7
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	290f      	cmp	r1, #15
 80013b6:	d826      	bhi.n	8001406 <__aeabi_dmul+0xe6>
 80013b8:	4bbe      	ldr	r3, [pc, #760]	; (80016b4 <__aeabi_dmul+0x394>)
 80013ba:	0089      	lsls	r1, r1, #2
 80013bc:	5859      	ldr	r1, [r3, r1]
 80013be:	468f      	mov	pc, r1
 80013c0:	4643      	mov	r3, r8
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	0034      	movs	r4, r6
 80013c6:	0015      	movs	r5, r2
 80013c8:	4683      	mov	fp, r0
 80013ca:	465b      	mov	r3, fp
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d016      	beq.n	80013fe <__aeabi_dmul+0xde>
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dmul+0xb6>
 80013d4:	e203      	b.n	80017de <__aeabi_dmul+0x4be>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d000      	beq.n	80013dc <__aeabi_dmul+0xbc>
 80013da:	e0cd      	b.n	8001578 <__aeabi_dmul+0x258>
 80013dc:	2200      	movs	r2, #0
 80013de:	2400      	movs	r4, #0
 80013e0:	2500      	movs	r5, #0
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	0512      	lsls	r2, r2, #20
 80013e6:	4322      	orrs	r2, r4
 80013e8:	07db      	lsls	r3, r3, #31
 80013ea:	431a      	orrs	r2, r3
 80013ec:	0028      	movs	r0, r5
 80013ee:	0011      	movs	r1, r2
 80013f0:	b007      	add	sp, #28
 80013f2:	bcf0      	pop	{r4, r5, r6, r7}
 80013f4:	46bb      	mov	fp, r7
 80013f6:	46b2      	mov	sl, r6
 80013f8:	46a9      	mov	r9, r5
 80013fa:	46a0      	mov	r8, r4
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	2400      	movs	r4, #0
 8001400:	2500      	movs	r5, #0
 8001402:	4aaa      	ldr	r2, [pc, #680]	; (80016ac <__aeabi_dmul+0x38c>)
 8001404:	e7ed      	b.n	80013e2 <__aeabi_dmul+0xc2>
 8001406:	0c28      	lsrs	r0, r5, #16
 8001408:	042d      	lsls	r5, r5, #16
 800140a:	0c2d      	lsrs	r5, r5, #16
 800140c:	002b      	movs	r3, r5
 800140e:	0c11      	lsrs	r1, r2, #16
 8001410:	0412      	lsls	r2, r2, #16
 8001412:	0c12      	lsrs	r2, r2, #16
 8001414:	4353      	muls	r3, r2
 8001416:	4698      	mov	r8, r3
 8001418:	0013      	movs	r3, r2
 800141a:	002f      	movs	r7, r5
 800141c:	4343      	muls	r3, r0
 800141e:	4699      	mov	r9, r3
 8001420:	434f      	muls	r7, r1
 8001422:	444f      	add	r7, r9
 8001424:	46bb      	mov	fp, r7
 8001426:	4647      	mov	r7, r8
 8001428:	000b      	movs	r3, r1
 800142a:	0c3f      	lsrs	r7, r7, #16
 800142c:	46ba      	mov	sl, r7
 800142e:	4343      	muls	r3, r0
 8001430:	44da      	add	sl, fp
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	45d1      	cmp	r9, sl
 8001436:	d904      	bls.n	8001442 <__aeabi_dmul+0x122>
 8001438:	2780      	movs	r7, #128	; 0x80
 800143a:	027f      	lsls	r7, r7, #9
 800143c:	46b9      	mov	r9, r7
 800143e:	444b      	add	r3, r9
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	4653      	mov	r3, sl
 8001444:	0c1b      	lsrs	r3, r3, #16
 8001446:	469b      	mov	fp, r3
 8001448:	4653      	mov	r3, sl
 800144a:	041f      	lsls	r7, r3, #16
 800144c:	4643      	mov	r3, r8
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	4698      	mov	r8, r3
 8001454:	003b      	movs	r3, r7
 8001456:	4443      	add	r3, r8
 8001458:	9304      	str	r3, [sp, #16]
 800145a:	0c33      	lsrs	r3, r6, #16
 800145c:	0436      	lsls	r6, r6, #16
 800145e:	0c36      	lsrs	r6, r6, #16
 8001460:	4698      	mov	r8, r3
 8001462:	0033      	movs	r3, r6
 8001464:	4343      	muls	r3, r0
 8001466:	4699      	mov	r9, r3
 8001468:	4643      	mov	r3, r8
 800146a:	4343      	muls	r3, r0
 800146c:	002f      	movs	r7, r5
 800146e:	469a      	mov	sl, r3
 8001470:	4643      	mov	r3, r8
 8001472:	4377      	muls	r7, r6
 8001474:	435d      	muls	r5, r3
 8001476:	0c38      	lsrs	r0, r7, #16
 8001478:	444d      	add	r5, r9
 800147a:	1945      	adds	r5, r0, r5
 800147c:	45a9      	cmp	r9, r5
 800147e:	d903      	bls.n	8001488 <__aeabi_dmul+0x168>
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	025b      	lsls	r3, r3, #9
 8001484:	4699      	mov	r9, r3
 8001486:	44ca      	add	sl, r9
 8001488:	043f      	lsls	r7, r7, #16
 800148a:	0c28      	lsrs	r0, r5, #16
 800148c:	0c3f      	lsrs	r7, r7, #16
 800148e:	042d      	lsls	r5, r5, #16
 8001490:	19ed      	adds	r5, r5, r7
 8001492:	0c27      	lsrs	r7, r4, #16
 8001494:	0424      	lsls	r4, r4, #16
 8001496:	0c24      	lsrs	r4, r4, #16
 8001498:	0003      	movs	r3, r0
 800149a:	0020      	movs	r0, r4
 800149c:	4350      	muls	r0, r2
 800149e:	437a      	muls	r2, r7
 80014a0:	4691      	mov	r9, r2
 80014a2:	003a      	movs	r2, r7
 80014a4:	4453      	add	r3, sl
 80014a6:	9305      	str	r3, [sp, #20]
 80014a8:	0c03      	lsrs	r3, r0, #16
 80014aa:	469a      	mov	sl, r3
 80014ac:	434a      	muls	r2, r1
 80014ae:	4361      	muls	r1, r4
 80014b0:	4449      	add	r1, r9
 80014b2:	4451      	add	r1, sl
 80014b4:	44ab      	add	fp, r5
 80014b6:	4589      	cmp	r9, r1
 80014b8:	d903      	bls.n	80014c2 <__aeabi_dmul+0x1a2>
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	4699      	mov	r9, r3
 80014c0:	444a      	add	r2, r9
 80014c2:	0400      	lsls	r0, r0, #16
 80014c4:	0c0b      	lsrs	r3, r1, #16
 80014c6:	0c00      	lsrs	r0, r0, #16
 80014c8:	0409      	lsls	r1, r1, #16
 80014ca:	1809      	adds	r1, r1, r0
 80014cc:	0020      	movs	r0, r4
 80014ce:	4699      	mov	r9, r3
 80014d0:	4643      	mov	r3, r8
 80014d2:	4370      	muls	r0, r6
 80014d4:	435c      	muls	r4, r3
 80014d6:	437e      	muls	r6, r7
 80014d8:	435f      	muls	r7, r3
 80014da:	0c03      	lsrs	r3, r0, #16
 80014dc:	4698      	mov	r8, r3
 80014de:	19a4      	adds	r4, r4, r6
 80014e0:	4444      	add	r4, r8
 80014e2:	444a      	add	r2, r9
 80014e4:	9703      	str	r7, [sp, #12]
 80014e6:	42a6      	cmp	r6, r4
 80014e8:	d904      	bls.n	80014f4 <__aeabi_dmul+0x1d4>
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	025b      	lsls	r3, r3, #9
 80014ee:	4698      	mov	r8, r3
 80014f0:	4447      	add	r7, r8
 80014f2:	9703      	str	r7, [sp, #12]
 80014f4:	0423      	lsls	r3, r4, #16
 80014f6:	9e02      	ldr	r6, [sp, #8]
 80014f8:	469a      	mov	sl, r3
 80014fa:	9b05      	ldr	r3, [sp, #20]
 80014fc:	445e      	add	r6, fp
 80014fe:	4698      	mov	r8, r3
 8001500:	42ae      	cmp	r6, r5
 8001502:	41ad      	sbcs	r5, r5
 8001504:	1876      	adds	r6, r6, r1
 8001506:	428e      	cmp	r6, r1
 8001508:	4189      	sbcs	r1, r1
 800150a:	0400      	lsls	r0, r0, #16
 800150c:	0c00      	lsrs	r0, r0, #16
 800150e:	4450      	add	r0, sl
 8001510:	4440      	add	r0, r8
 8001512:	426d      	negs	r5, r5
 8001514:	1947      	adds	r7, r0, r5
 8001516:	46b8      	mov	r8, r7
 8001518:	4693      	mov	fp, r2
 800151a:	4249      	negs	r1, r1
 800151c:	4689      	mov	r9, r1
 800151e:	44c3      	add	fp, r8
 8001520:	44d9      	add	r9, fp
 8001522:	4298      	cmp	r0, r3
 8001524:	4180      	sbcs	r0, r0
 8001526:	45a8      	cmp	r8, r5
 8001528:	41ad      	sbcs	r5, r5
 800152a:	4593      	cmp	fp, r2
 800152c:	4192      	sbcs	r2, r2
 800152e:	4589      	cmp	r9, r1
 8001530:	4189      	sbcs	r1, r1
 8001532:	426d      	negs	r5, r5
 8001534:	4240      	negs	r0, r0
 8001536:	4328      	orrs	r0, r5
 8001538:	0c24      	lsrs	r4, r4, #16
 800153a:	4252      	negs	r2, r2
 800153c:	4249      	negs	r1, r1
 800153e:	430a      	orrs	r2, r1
 8001540:	9b03      	ldr	r3, [sp, #12]
 8001542:	1900      	adds	r0, r0, r4
 8001544:	1880      	adds	r0, r0, r2
 8001546:	18c7      	adds	r7, r0, r3
 8001548:	464b      	mov	r3, r9
 800154a:	0ddc      	lsrs	r4, r3, #23
 800154c:	9b04      	ldr	r3, [sp, #16]
 800154e:	0275      	lsls	r5, r6, #9
 8001550:	431d      	orrs	r5, r3
 8001552:	1e6a      	subs	r2, r5, #1
 8001554:	4195      	sbcs	r5, r2
 8001556:	464b      	mov	r3, r9
 8001558:	0df6      	lsrs	r6, r6, #23
 800155a:	027f      	lsls	r7, r7, #9
 800155c:	4335      	orrs	r5, r6
 800155e:	025a      	lsls	r2, r3, #9
 8001560:	433c      	orrs	r4, r7
 8001562:	4315      	orrs	r5, r2
 8001564:	01fb      	lsls	r3, r7, #7
 8001566:	d400      	bmi.n	800156a <__aeabi_dmul+0x24a>
 8001568:	e11c      	b.n	80017a4 <__aeabi_dmul+0x484>
 800156a:	2101      	movs	r1, #1
 800156c:	086a      	lsrs	r2, r5, #1
 800156e:	400d      	ands	r5, r1
 8001570:	4315      	orrs	r5, r2
 8001572:	07e2      	lsls	r2, r4, #31
 8001574:	4315      	orrs	r5, r2
 8001576:	0864      	lsrs	r4, r4, #1
 8001578:	494f      	ldr	r1, [pc, #316]	; (80016b8 <__aeabi_dmul+0x398>)
 800157a:	4461      	add	r1, ip
 800157c:	2900      	cmp	r1, #0
 800157e:	dc00      	bgt.n	8001582 <__aeabi_dmul+0x262>
 8001580:	e0b0      	b.n	80016e4 <__aeabi_dmul+0x3c4>
 8001582:	076b      	lsls	r3, r5, #29
 8001584:	d009      	beq.n	800159a <__aeabi_dmul+0x27a>
 8001586:	220f      	movs	r2, #15
 8001588:	402a      	ands	r2, r5
 800158a:	2a04      	cmp	r2, #4
 800158c:	d005      	beq.n	800159a <__aeabi_dmul+0x27a>
 800158e:	1d2a      	adds	r2, r5, #4
 8001590:	42aa      	cmp	r2, r5
 8001592:	41ad      	sbcs	r5, r5
 8001594:	426d      	negs	r5, r5
 8001596:	1964      	adds	r4, r4, r5
 8001598:	0015      	movs	r5, r2
 800159a:	01e3      	lsls	r3, r4, #7
 800159c:	d504      	bpl.n	80015a8 <__aeabi_dmul+0x288>
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	4a46      	ldr	r2, [pc, #280]	; (80016bc <__aeabi_dmul+0x39c>)
 80015a2:	00c9      	lsls	r1, r1, #3
 80015a4:	4014      	ands	r4, r2
 80015a6:	4461      	add	r1, ip
 80015a8:	4a45      	ldr	r2, [pc, #276]	; (80016c0 <__aeabi_dmul+0x3a0>)
 80015aa:	4291      	cmp	r1, r2
 80015ac:	dd00      	ble.n	80015b0 <__aeabi_dmul+0x290>
 80015ae:	e726      	b.n	80013fe <__aeabi_dmul+0xde>
 80015b0:	0762      	lsls	r2, r4, #29
 80015b2:	08ed      	lsrs	r5, r5, #3
 80015b4:	0264      	lsls	r4, r4, #9
 80015b6:	0549      	lsls	r1, r1, #21
 80015b8:	4315      	orrs	r5, r2
 80015ba:	0b24      	lsrs	r4, r4, #12
 80015bc:	0d4a      	lsrs	r2, r1, #21
 80015be:	e710      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80015c0:	4652      	mov	r2, sl
 80015c2:	4332      	orrs	r2, r6
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dmul+0x2a8>
 80015c6:	e07f      	b.n	80016c8 <__aeabi_dmul+0x3a8>
 80015c8:	2e00      	cmp	r6, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dmul+0x2ae>
 80015cc:	e0dc      	b.n	8001788 <__aeabi_dmul+0x468>
 80015ce:	0030      	movs	r0, r6
 80015d0:	f000 fd0a 	bl	8001fe8 <__clzsi2>
 80015d4:	0002      	movs	r2, r0
 80015d6:	3a0b      	subs	r2, #11
 80015d8:	231d      	movs	r3, #29
 80015da:	0001      	movs	r1, r0
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	4652      	mov	r2, sl
 80015e0:	3908      	subs	r1, #8
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	408e      	lsls	r6, r1
 80015e6:	4316      	orrs	r6, r2
 80015e8:	4652      	mov	r2, sl
 80015ea:	408a      	lsls	r2, r1
 80015ec:	9b00      	ldr	r3, [sp, #0]
 80015ee:	4935      	ldr	r1, [pc, #212]	; (80016c4 <__aeabi_dmul+0x3a4>)
 80015f0:	1a18      	subs	r0, r3, r0
 80015f2:	0003      	movs	r3, r0
 80015f4:	468c      	mov	ip, r1
 80015f6:	4463      	add	r3, ip
 80015f8:	2000      	movs	r0, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	e6d3      	b.n	80013a6 <__aeabi_dmul+0x86>
 80015fe:	0025      	movs	r5, r4
 8001600:	4305      	orrs	r5, r0
 8001602:	d04a      	beq.n	800169a <__aeabi_dmul+0x37a>
 8001604:	2c00      	cmp	r4, #0
 8001606:	d100      	bne.n	800160a <__aeabi_dmul+0x2ea>
 8001608:	e0b0      	b.n	800176c <__aeabi_dmul+0x44c>
 800160a:	0020      	movs	r0, r4
 800160c:	f000 fcec 	bl	8001fe8 <__clzsi2>
 8001610:	0001      	movs	r1, r0
 8001612:	0002      	movs	r2, r0
 8001614:	390b      	subs	r1, #11
 8001616:	231d      	movs	r3, #29
 8001618:	0010      	movs	r0, r2
 800161a:	1a5b      	subs	r3, r3, r1
 800161c:	0031      	movs	r1, r6
 800161e:	0035      	movs	r5, r6
 8001620:	3808      	subs	r0, #8
 8001622:	4084      	lsls	r4, r0
 8001624:	40d9      	lsrs	r1, r3
 8001626:	4085      	lsls	r5, r0
 8001628:	430c      	orrs	r4, r1
 800162a:	4826      	ldr	r0, [pc, #152]	; (80016c4 <__aeabi_dmul+0x3a4>)
 800162c:	1a83      	subs	r3, r0, r2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2300      	movs	r3, #0
 8001632:	4699      	mov	r9, r3
 8001634:	469b      	mov	fp, r3
 8001636:	e697      	b.n	8001368 <__aeabi_dmul+0x48>
 8001638:	0005      	movs	r5, r0
 800163a:	4325      	orrs	r5, r4
 800163c:	d126      	bne.n	800168c <__aeabi_dmul+0x36c>
 800163e:	2208      	movs	r2, #8
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2302      	movs	r3, #2
 8001644:	2400      	movs	r4, #0
 8001646:	4691      	mov	r9, r2
 8001648:	469b      	mov	fp, r3
 800164a:	e68d      	b.n	8001368 <__aeabi_dmul+0x48>
 800164c:	4652      	mov	r2, sl
 800164e:	9b00      	ldr	r3, [sp, #0]
 8001650:	4332      	orrs	r2, r6
 8001652:	d110      	bne.n	8001676 <__aeabi_dmul+0x356>
 8001654:	4915      	ldr	r1, [pc, #84]	; (80016ac <__aeabi_dmul+0x38c>)
 8001656:	2600      	movs	r6, #0
 8001658:	468c      	mov	ip, r1
 800165a:	4463      	add	r3, ip
 800165c:	4649      	mov	r1, r9
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2302      	movs	r3, #2
 8001662:	4319      	orrs	r1, r3
 8001664:	4689      	mov	r9, r1
 8001666:	2002      	movs	r0, #2
 8001668:	e69d      	b.n	80013a6 <__aeabi_dmul+0x86>
 800166a:	465b      	mov	r3, fp
 800166c:	9701      	str	r7, [sp, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d000      	beq.n	8001674 <__aeabi_dmul+0x354>
 8001672:	e6ad      	b.n	80013d0 <__aeabi_dmul+0xb0>
 8001674:	e6c3      	b.n	80013fe <__aeabi_dmul+0xde>
 8001676:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <__aeabi_dmul+0x38c>)
 8001678:	2003      	movs	r0, #3
 800167a:	4694      	mov	ip, r2
 800167c:	4463      	add	r3, ip
 800167e:	464a      	mov	r2, r9
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2303      	movs	r3, #3
 8001684:	431a      	orrs	r2, r3
 8001686:	4691      	mov	r9, r2
 8001688:	4652      	mov	r2, sl
 800168a:	e68c      	b.n	80013a6 <__aeabi_dmul+0x86>
 800168c:	220c      	movs	r2, #12
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2303      	movs	r3, #3
 8001692:	0005      	movs	r5, r0
 8001694:	4691      	mov	r9, r2
 8001696:	469b      	mov	fp, r3
 8001698:	e666      	b.n	8001368 <__aeabi_dmul+0x48>
 800169a:	2304      	movs	r3, #4
 800169c:	4699      	mov	r9, r3
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	2400      	movs	r4, #0
 80016a6:	469b      	mov	fp, r3
 80016a8:	e65e      	b.n	8001368 <__aeabi_dmul+0x48>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	000007ff 	.word	0x000007ff
 80016b0:	fffffc01 	.word	0xfffffc01
 80016b4:	08005ce0 	.word	0x08005ce0
 80016b8:	000003ff 	.word	0x000003ff
 80016bc:	feffffff 	.word	0xfeffffff
 80016c0:	000007fe 	.word	0x000007fe
 80016c4:	fffffc0d 	.word	0xfffffc0d
 80016c8:	4649      	mov	r1, r9
 80016ca:	2301      	movs	r3, #1
 80016cc:	4319      	orrs	r1, r3
 80016ce:	4689      	mov	r9, r1
 80016d0:	2600      	movs	r6, #0
 80016d2:	2001      	movs	r0, #1
 80016d4:	e667      	b.n	80013a6 <__aeabi_dmul+0x86>
 80016d6:	2300      	movs	r3, #0
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	2500      	movs	r5, #0
 80016dc:	4a43      	ldr	r2, [pc, #268]	; (80017ec <__aeabi_dmul+0x4cc>)
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	0324      	lsls	r4, r4, #12
 80016e2:	e67e      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80016e4:	2001      	movs	r0, #1
 80016e6:	1a40      	subs	r0, r0, r1
 80016e8:	2838      	cmp	r0, #56	; 0x38
 80016ea:	dd00      	ble.n	80016ee <__aeabi_dmul+0x3ce>
 80016ec:	e676      	b.n	80013dc <__aeabi_dmul+0xbc>
 80016ee:	281f      	cmp	r0, #31
 80016f0:	dd5b      	ble.n	80017aa <__aeabi_dmul+0x48a>
 80016f2:	221f      	movs	r2, #31
 80016f4:	0023      	movs	r3, r4
 80016f6:	4252      	negs	r2, r2
 80016f8:	1a51      	subs	r1, r2, r1
 80016fa:	40cb      	lsrs	r3, r1
 80016fc:	0019      	movs	r1, r3
 80016fe:	2820      	cmp	r0, #32
 8001700:	d003      	beq.n	800170a <__aeabi_dmul+0x3ea>
 8001702:	4a3b      	ldr	r2, [pc, #236]	; (80017f0 <__aeabi_dmul+0x4d0>)
 8001704:	4462      	add	r2, ip
 8001706:	4094      	lsls	r4, r2
 8001708:	4325      	orrs	r5, r4
 800170a:	1e6a      	subs	r2, r5, #1
 800170c:	4195      	sbcs	r5, r2
 800170e:	002a      	movs	r2, r5
 8001710:	430a      	orrs	r2, r1
 8001712:	2107      	movs	r1, #7
 8001714:	000d      	movs	r5, r1
 8001716:	2400      	movs	r4, #0
 8001718:	4015      	ands	r5, r2
 800171a:	4211      	tst	r1, r2
 800171c:	d05b      	beq.n	80017d6 <__aeabi_dmul+0x4b6>
 800171e:	210f      	movs	r1, #15
 8001720:	2400      	movs	r4, #0
 8001722:	4011      	ands	r1, r2
 8001724:	2904      	cmp	r1, #4
 8001726:	d053      	beq.n	80017d0 <__aeabi_dmul+0x4b0>
 8001728:	1d11      	adds	r1, r2, #4
 800172a:	4291      	cmp	r1, r2
 800172c:	4192      	sbcs	r2, r2
 800172e:	4252      	negs	r2, r2
 8001730:	18a4      	adds	r4, r4, r2
 8001732:	000a      	movs	r2, r1
 8001734:	0223      	lsls	r3, r4, #8
 8001736:	d54b      	bpl.n	80017d0 <__aeabi_dmul+0x4b0>
 8001738:	2201      	movs	r2, #1
 800173a:	2400      	movs	r4, #0
 800173c:	2500      	movs	r5, #0
 800173e:	e650      	b.n	80013e2 <__aeabi_dmul+0xc2>
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	031b      	lsls	r3, r3, #12
 8001744:	421c      	tst	r4, r3
 8001746:	d009      	beq.n	800175c <__aeabi_dmul+0x43c>
 8001748:	421e      	tst	r6, r3
 800174a:	d107      	bne.n	800175c <__aeabi_dmul+0x43c>
 800174c:	4333      	orrs	r3, r6
 800174e:	031c      	lsls	r4, r3, #12
 8001750:	4643      	mov	r3, r8
 8001752:	0015      	movs	r5, r2
 8001754:	0b24      	lsrs	r4, r4, #12
 8001756:	4a25      	ldr	r2, [pc, #148]	; (80017ec <__aeabi_dmul+0x4cc>)
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	e642      	b.n	80013e2 <__aeabi_dmul+0xc2>
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	0312      	lsls	r2, r2, #12
 8001760:	4314      	orrs	r4, r2
 8001762:	0324      	lsls	r4, r4, #12
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <__aeabi_dmul+0x4cc>)
 8001766:	0b24      	lsrs	r4, r4, #12
 8001768:	9701      	str	r7, [sp, #4]
 800176a:	e63a      	b.n	80013e2 <__aeabi_dmul+0xc2>
 800176c:	f000 fc3c 	bl	8001fe8 <__clzsi2>
 8001770:	0001      	movs	r1, r0
 8001772:	0002      	movs	r2, r0
 8001774:	3115      	adds	r1, #21
 8001776:	3220      	adds	r2, #32
 8001778:	291c      	cmp	r1, #28
 800177a:	dc00      	bgt.n	800177e <__aeabi_dmul+0x45e>
 800177c:	e74b      	b.n	8001616 <__aeabi_dmul+0x2f6>
 800177e:	0034      	movs	r4, r6
 8001780:	3808      	subs	r0, #8
 8001782:	2500      	movs	r5, #0
 8001784:	4084      	lsls	r4, r0
 8001786:	e750      	b.n	800162a <__aeabi_dmul+0x30a>
 8001788:	f000 fc2e 	bl	8001fe8 <__clzsi2>
 800178c:	0003      	movs	r3, r0
 800178e:	001a      	movs	r2, r3
 8001790:	3215      	adds	r2, #21
 8001792:	3020      	adds	r0, #32
 8001794:	2a1c      	cmp	r2, #28
 8001796:	dc00      	bgt.n	800179a <__aeabi_dmul+0x47a>
 8001798:	e71e      	b.n	80015d8 <__aeabi_dmul+0x2b8>
 800179a:	4656      	mov	r6, sl
 800179c:	3b08      	subs	r3, #8
 800179e:	2200      	movs	r2, #0
 80017a0:	409e      	lsls	r6, r3
 80017a2:	e723      	b.n	80015ec <__aeabi_dmul+0x2cc>
 80017a4:	9b00      	ldr	r3, [sp, #0]
 80017a6:	469c      	mov	ip, r3
 80017a8:	e6e6      	b.n	8001578 <__aeabi_dmul+0x258>
 80017aa:	4912      	ldr	r1, [pc, #72]	; (80017f4 <__aeabi_dmul+0x4d4>)
 80017ac:	0022      	movs	r2, r4
 80017ae:	4461      	add	r1, ip
 80017b0:	002e      	movs	r6, r5
 80017b2:	408d      	lsls	r5, r1
 80017b4:	408a      	lsls	r2, r1
 80017b6:	40c6      	lsrs	r6, r0
 80017b8:	1e69      	subs	r1, r5, #1
 80017ba:	418d      	sbcs	r5, r1
 80017bc:	4332      	orrs	r2, r6
 80017be:	432a      	orrs	r2, r5
 80017c0:	40c4      	lsrs	r4, r0
 80017c2:	0753      	lsls	r3, r2, #29
 80017c4:	d0b6      	beq.n	8001734 <__aeabi_dmul+0x414>
 80017c6:	210f      	movs	r1, #15
 80017c8:	4011      	ands	r1, r2
 80017ca:	2904      	cmp	r1, #4
 80017cc:	d1ac      	bne.n	8001728 <__aeabi_dmul+0x408>
 80017ce:	e7b1      	b.n	8001734 <__aeabi_dmul+0x414>
 80017d0:	0765      	lsls	r5, r4, #29
 80017d2:	0264      	lsls	r4, r4, #9
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	08d2      	lsrs	r2, r2, #3
 80017d8:	4315      	orrs	r5, r2
 80017da:	2200      	movs	r2, #0
 80017dc:	e601      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	0312      	lsls	r2, r2, #12
 80017e2:	4314      	orrs	r4, r2
 80017e4:	0324      	lsls	r4, r4, #12
 80017e6:	4a01      	ldr	r2, [pc, #4]	; (80017ec <__aeabi_dmul+0x4cc>)
 80017e8:	0b24      	lsrs	r4, r4, #12
 80017ea:	e5fa      	b.n	80013e2 <__aeabi_dmul+0xc2>
 80017ec:	000007ff 	.word	0x000007ff
 80017f0:	0000043e 	.word	0x0000043e
 80017f4:	0000041e 	.word	0x0000041e

080017f8 <__aeabi_dsub>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	4657      	mov	r7, sl
 80017fc:	464e      	mov	r6, r9
 80017fe:	4645      	mov	r5, r8
 8001800:	46de      	mov	lr, fp
 8001802:	b5e0      	push	{r5, r6, r7, lr}
 8001804:	001e      	movs	r6, r3
 8001806:	0017      	movs	r7, r2
 8001808:	004a      	lsls	r2, r1, #1
 800180a:	030b      	lsls	r3, r1, #12
 800180c:	0d52      	lsrs	r2, r2, #21
 800180e:	0a5b      	lsrs	r3, r3, #9
 8001810:	4690      	mov	r8, r2
 8001812:	0f42      	lsrs	r2, r0, #29
 8001814:	431a      	orrs	r2, r3
 8001816:	0fcd      	lsrs	r5, r1, #31
 8001818:	4ccd      	ldr	r4, [pc, #820]	; (8001b50 <__aeabi_dsub+0x358>)
 800181a:	0331      	lsls	r1, r6, #12
 800181c:	00c3      	lsls	r3, r0, #3
 800181e:	4694      	mov	ip, r2
 8001820:	0070      	lsls	r0, r6, #1
 8001822:	0f7a      	lsrs	r2, r7, #29
 8001824:	0a49      	lsrs	r1, r1, #9
 8001826:	00ff      	lsls	r7, r7, #3
 8001828:	469a      	mov	sl, r3
 800182a:	46b9      	mov	r9, r7
 800182c:	0d40      	lsrs	r0, r0, #21
 800182e:	0ff6      	lsrs	r6, r6, #31
 8001830:	4311      	orrs	r1, r2
 8001832:	42a0      	cmp	r0, r4
 8001834:	d100      	bne.n	8001838 <__aeabi_dsub+0x40>
 8001836:	e0b1      	b.n	800199c <__aeabi_dsub+0x1a4>
 8001838:	2201      	movs	r2, #1
 800183a:	4056      	eors	r6, r2
 800183c:	46b3      	mov	fp, r6
 800183e:	42b5      	cmp	r5, r6
 8001840:	d100      	bne.n	8001844 <__aeabi_dsub+0x4c>
 8001842:	e088      	b.n	8001956 <__aeabi_dsub+0x15e>
 8001844:	4642      	mov	r2, r8
 8001846:	1a12      	subs	r2, r2, r0
 8001848:	2a00      	cmp	r2, #0
 800184a:	dc00      	bgt.n	800184e <__aeabi_dsub+0x56>
 800184c:	e0ae      	b.n	80019ac <__aeabi_dsub+0x1b4>
 800184e:	2800      	cmp	r0, #0
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x5c>
 8001852:	e0c1      	b.n	80019d8 <__aeabi_dsub+0x1e0>
 8001854:	48be      	ldr	r0, [pc, #760]	; (8001b50 <__aeabi_dsub+0x358>)
 8001856:	4580      	cmp	r8, r0
 8001858:	d100      	bne.n	800185c <__aeabi_dsub+0x64>
 800185a:	e151      	b.n	8001b00 <__aeabi_dsub+0x308>
 800185c:	2080      	movs	r0, #128	; 0x80
 800185e:	0400      	lsls	r0, r0, #16
 8001860:	4301      	orrs	r1, r0
 8001862:	2a38      	cmp	r2, #56	; 0x38
 8001864:	dd00      	ble.n	8001868 <__aeabi_dsub+0x70>
 8001866:	e17b      	b.n	8001b60 <__aeabi_dsub+0x368>
 8001868:	2a1f      	cmp	r2, #31
 800186a:	dd00      	ble.n	800186e <__aeabi_dsub+0x76>
 800186c:	e1ee      	b.n	8001c4c <__aeabi_dsub+0x454>
 800186e:	2020      	movs	r0, #32
 8001870:	003e      	movs	r6, r7
 8001872:	1a80      	subs	r0, r0, r2
 8001874:	000c      	movs	r4, r1
 8001876:	40d6      	lsrs	r6, r2
 8001878:	40d1      	lsrs	r1, r2
 800187a:	4087      	lsls	r7, r0
 800187c:	4662      	mov	r2, ip
 800187e:	4084      	lsls	r4, r0
 8001880:	1a52      	subs	r2, r2, r1
 8001882:	1e78      	subs	r0, r7, #1
 8001884:	4187      	sbcs	r7, r0
 8001886:	4694      	mov	ip, r2
 8001888:	4334      	orrs	r4, r6
 800188a:	4327      	orrs	r7, r4
 800188c:	1bdc      	subs	r4, r3, r7
 800188e:	42a3      	cmp	r3, r4
 8001890:	419b      	sbcs	r3, r3
 8001892:	4662      	mov	r2, ip
 8001894:	425b      	negs	r3, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4699      	mov	r9, r3
 800189a:	464b      	mov	r3, r9
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	d400      	bmi.n	80018a2 <__aeabi_dsub+0xaa>
 80018a0:	e118      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 80018a2:	464b      	mov	r3, r9
 80018a4:	0258      	lsls	r0, r3, #9
 80018a6:	0a43      	lsrs	r3, r0, #9
 80018a8:	4699      	mov	r9, r3
 80018aa:	464b      	mov	r3, r9
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dsub+0xba>
 80018b0:	e137      	b.n	8001b22 <__aeabi_dsub+0x32a>
 80018b2:	4648      	mov	r0, r9
 80018b4:	f000 fb98 	bl	8001fe8 <__clzsi2>
 80018b8:	0001      	movs	r1, r0
 80018ba:	3908      	subs	r1, #8
 80018bc:	2320      	movs	r3, #32
 80018be:	0022      	movs	r2, r4
 80018c0:	4648      	mov	r0, r9
 80018c2:	1a5b      	subs	r3, r3, r1
 80018c4:	40da      	lsrs	r2, r3
 80018c6:	4088      	lsls	r0, r1
 80018c8:	408c      	lsls	r4, r1
 80018ca:	4643      	mov	r3, r8
 80018cc:	4310      	orrs	r0, r2
 80018ce:	4588      	cmp	r8, r1
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dsub+0xdc>
 80018d2:	e136      	b.n	8001b42 <__aeabi_dsub+0x34a>
 80018d4:	1ac9      	subs	r1, r1, r3
 80018d6:	1c4b      	adds	r3, r1, #1
 80018d8:	2b1f      	cmp	r3, #31
 80018da:	dd00      	ble.n	80018de <__aeabi_dsub+0xe6>
 80018dc:	e0ea      	b.n	8001ab4 <__aeabi_dsub+0x2bc>
 80018de:	2220      	movs	r2, #32
 80018e0:	0026      	movs	r6, r4
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	0001      	movs	r1, r0
 80018e6:	4094      	lsls	r4, r2
 80018e8:	40de      	lsrs	r6, r3
 80018ea:	40d8      	lsrs	r0, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	4091      	lsls	r1, r2
 80018f0:	1e62      	subs	r2, r4, #1
 80018f2:	4194      	sbcs	r4, r2
 80018f4:	4681      	mov	r9, r0
 80018f6:	4698      	mov	r8, r3
 80018f8:	4331      	orrs	r1, r6
 80018fa:	430c      	orrs	r4, r1
 80018fc:	0763      	lsls	r3, r4, #29
 80018fe:	d009      	beq.n	8001914 <__aeabi_dsub+0x11c>
 8001900:	230f      	movs	r3, #15
 8001902:	4023      	ands	r3, r4
 8001904:	2b04      	cmp	r3, #4
 8001906:	d005      	beq.n	8001914 <__aeabi_dsub+0x11c>
 8001908:	1d23      	adds	r3, r4, #4
 800190a:	42a3      	cmp	r3, r4
 800190c:	41a4      	sbcs	r4, r4
 800190e:	4264      	negs	r4, r4
 8001910:	44a1      	add	r9, r4
 8001912:	001c      	movs	r4, r3
 8001914:	464b      	mov	r3, r9
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	d400      	bmi.n	800191c <__aeabi_dsub+0x124>
 800191a:	e0de      	b.n	8001ada <__aeabi_dsub+0x2e2>
 800191c:	4641      	mov	r1, r8
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <__aeabi_dsub+0x358>)
 8001920:	3101      	adds	r1, #1
 8001922:	4299      	cmp	r1, r3
 8001924:	d100      	bne.n	8001928 <__aeabi_dsub+0x130>
 8001926:	e0e7      	b.n	8001af8 <__aeabi_dsub+0x300>
 8001928:	464b      	mov	r3, r9
 800192a:	488a      	ldr	r0, [pc, #552]	; (8001b54 <__aeabi_dsub+0x35c>)
 800192c:	08e4      	lsrs	r4, r4, #3
 800192e:	4003      	ands	r3, r0
 8001930:	0018      	movs	r0, r3
 8001932:	0549      	lsls	r1, r1, #21
 8001934:	075b      	lsls	r3, r3, #29
 8001936:	0240      	lsls	r0, r0, #9
 8001938:	4323      	orrs	r3, r4
 800193a:	0d4a      	lsrs	r2, r1, #21
 800193c:	0b04      	lsrs	r4, r0, #12
 800193e:	0512      	lsls	r2, r2, #20
 8001940:	07ed      	lsls	r5, r5, #31
 8001942:	4322      	orrs	r2, r4
 8001944:	432a      	orrs	r2, r5
 8001946:	0018      	movs	r0, r3
 8001948:	0011      	movs	r1, r2
 800194a:	bcf0      	pop	{r4, r5, r6, r7}
 800194c:	46bb      	mov	fp, r7
 800194e:	46b2      	mov	sl, r6
 8001950:	46a9      	mov	r9, r5
 8001952:	46a0      	mov	r8, r4
 8001954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001956:	4642      	mov	r2, r8
 8001958:	1a12      	subs	r2, r2, r0
 800195a:	2a00      	cmp	r2, #0
 800195c:	dd52      	ble.n	8001a04 <__aeabi_dsub+0x20c>
 800195e:	2800      	cmp	r0, #0
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x16c>
 8001962:	e09c      	b.n	8001a9e <__aeabi_dsub+0x2a6>
 8001964:	45a0      	cmp	r8, r4
 8001966:	d100      	bne.n	800196a <__aeabi_dsub+0x172>
 8001968:	e0ca      	b.n	8001b00 <__aeabi_dsub+0x308>
 800196a:	2080      	movs	r0, #128	; 0x80
 800196c:	0400      	lsls	r0, r0, #16
 800196e:	4301      	orrs	r1, r0
 8001970:	2a38      	cmp	r2, #56	; 0x38
 8001972:	dd00      	ble.n	8001976 <__aeabi_dsub+0x17e>
 8001974:	e149      	b.n	8001c0a <__aeabi_dsub+0x412>
 8001976:	2a1f      	cmp	r2, #31
 8001978:	dc00      	bgt.n	800197c <__aeabi_dsub+0x184>
 800197a:	e197      	b.n	8001cac <__aeabi_dsub+0x4b4>
 800197c:	0010      	movs	r0, r2
 800197e:	000e      	movs	r6, r1
 8001980:	3820      	subs	r0, #32
 8001982:	40c6      	lsrs	r6, r0
 8001984:	2a20      	cmp	r2, #32
 8001986:	d004      	beq.n	8001992 <__aeabi_dsub+0x19a>
 8001988:	2040      	movs	r0, #64	; 0x40
 800198a:	1a82      	subs	r2, r0, r2
 800198c:	4091      	lsls	r1, r2
 800198e:	430f      	orrs	r7, r1
 8001990:	46b9      	mov	r9, r7
 8001992:	464c      	mov	r4, r9
 8001994:	1e62      	subs	r2, r4, #1
 8001996:	4194      	sbcs	r4, r2
 8001998:	4334      	orrs	r4, r6
 800199a:	e13a      	b.n	8001c12 <__aeabi_dsub+0x41a>
 800199c:	000a      	movs	r2, r1
 800199e:	433a      	orrs	r2, r7
 80019a0:	d028      	beq.n	80019f4 <__aeabi_dsub+0x1fc>
 80019a2:	46b3      	mov	fp, r6
 80019a4:	42b5      	cmp	r5, r6
 80019a6:	d02b      	beq.n	8001a00 <__aeabi_dsub+0x208>
 80019a8:	4a6b      	ldr	r2, [pc, #428]	; (8001b58 <__aeabi_dsub+0x360>)
 80019aa:	4442      	add	r2, r8
 80019ac:	2a00      	cmp	r2, #0
 80019ae:	d05d      	beq.n	8001a6c <__aeabi_dsub+0x274>
 80019b0:	4642      	mov	r2, r8
 80019b2:	4644      	mov	r4, r8
 80019b4:	1a82      	subs	r2, r0, r2
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d000      	beq.n	80019bc <__aeabi_dsub+0x1c4>
 80019ba:	e0f5      	b.n	8001ba8 <__aeabi_dsub+0x3b0>
 80019bc:	4665      	mov	r5, ip
 80019be:	431d      	orrs	r5, r3
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x1cc>
 80019c2:	e19c      	b.n	8001cfe <__aeabi_dsub+0x506>
 80019c4:	1e55      	subs	r5, r2, #1
 80019c6:	2a01      	cmp	r2, #1
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x1d4>
 80019ca:	e1fb      	b.n	8001dc4 <__aeabi_dsub+0x5cc>
 80019cc:	4c60      	ldr	r4, [pc, #384]	; (8001b50 <__aeabi_dsub+0x358>)
 80019ce:	42a2      	cmp	r2, r4
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x1dc>
 80019d2:	e1bd      	b.n	8001d50 <__aeabi_dsub+0x558>
 80019d4:	002a      	movs	r2, r5
 80019d6:	e0f0      	b.n	8001bba <__aeabi_dsub+0x3c2>
 80019d8:	0008      	movs	r0, r1
 80019da:	4338      	orrs	r0, r7
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x1e8>
 80019de:	e0c3      	b.n	8001b68 <__aeabi_dsub+0x370>
 80019e0:	1e50      	subs	r0, r2, #1
 80019e2:	2a01      	cmp	r2, #1
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x1f0>
 80019e6:	e1a8      	b.n	8001d3a <__aeabi_dsub+0x542>
 80019e8:	4c59      	ldr	r4, [pc, #356]	; (8001b50 <__aeabi_dsub+0x358>)
 80019ea:	42a2      	cmp	r2, r4
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x1f8>
 80019ee:	e087      	b.n	8001b00 <__aeabi_dsub+0x308>
 80019f0:	0002      	movs	r2, r0
 80019f2:	e736      	b.n	8001862 <__aeabi_dsub+0x6a>
 80019f4:	2201      	movs	r2, #1
 80019f6:	4056      	eors	r6, r2
 80019f8:	46b3      	mov	fp, r6
 80019fa:	42b5      	cmp	r5, r6
 80019fc:	d000      	beq.n	8001a00 <__aeabi_dsub+0x208>
 80019fe:	e721      	b.n	8001844 <__aeabi_dsub+0x4c>
 8001a00:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <__aeabi_dsub+0x360>)
 8001a02:	4442      	add	r2, r8
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x212>
 8001a08:	e0b5      	b.n	8001b76 <__aeabi_dsub+0x37e>
 8001a0a:	4642      	mov	r2, r8
 8001a0c:	4644      	mov	r4, r8
 8001a0e:	1a82      	subs	r2, r0, r2
 8001a10:	2c00      	cmp	r4, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x21e>
 8001a14:	e138      	b.n	8001c88 <__aeabi_dsub+0x490>
 8001a16:	4e4e      	ldr	r6, [pc, #312]	; (8001b50 <__aeabi_dsub+0x358>)
 8001a18:	42b0      	cmp	r0, r6
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x226>
 8001a1c:	e1de      	b.n	8001ddc <__aeabi_dsub+0x5e4>
 8001a1e:	2680      	movs	r6, #128	; 0x80
 8001a20:	4664      	mov	r4, ip
 8001a22:	0436      	lsls	r6, r6, #16
 8001a24:	4334      	orrs	r4, r6
 8001a26:	46a4      	mov	ip, r4
 8001a28:	2a38      	cmp	r2, #56	; 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dsub+0x236>
 8001a2c:	e196      	b.n	8001d5c <__aeabi_dsub+0x564>
 8001a2e:	2a1f      	cmp	r2, #31
 8001a30:	dd00      	ble.n	8001a34 <__aeabi_dsub+0x23c>
 8001a32:	e224      	b.n	8001e7e <__aeabi_dsub+0x686>
 8001a34:	2620      	movs	r6, #32
 8001a36:	1ab4      	subs	r4, r6, r2
 8001a38:	46a2      	mov	sl, r4
 8001a3a:	4664      	mov	r4, ip
 8001a3c:	4656      	mov	r6, sl
 8001a3e:	40b4      	lsls	r4, r6
 8001a40:	46a1      	mov	r9, r4
 8001a42:	001c      	movs	r4, r3
 8001a44:	464e      	mov	r6, r9
 8001a46:	40d4      	lsrs	r4, r2
 8001a48:	4326      	orrs	r6, r4
 8001a4a:	0034      	movs	r4, r6
 8001a4c:	4656      	mov	r6, sl
 8001a4e:	40b3      	lsls	r3, r6
 8001a50:	1e5e      	subs	r6, r3, #1
 8001a52:	41b3      	sbcs	r3, r6
 8001a54:	431c      	orrs	r4, r3
 8001a56:	4663      	mov	r3, ip
 8001a58:	40d3      	lsrs	r3, r2
 8001a5a:	18c9      	adds	r1, r1, r3
 8001a5c:	19e4      	adds	r4, r4, r7
 8001a5e:	42bc      	cmp	r4, r7
 8001a60:	41bf      	sbcs	r7, r7
 8001a62:	427f      	negs	r7, r7
 8001a64:	46b9      	mov	r9, r7
 8001a66:	4680      	mov	r8, r0
 8001a68:	4489      	add	r9, r1
 8001a6a:	e0d8      	b.n	8001c1e <__aeabi_dsub+0x426>
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	4c3b      	ldr	r4, [pc, #236]	; (8001b5c <__aeabi_dsub+0x364>)
 8001a70:	3001      	adds	r0, #1
 8001a72:	4220      	tst	r0, r4
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dsub+0x280>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dsub+0x3ea>
 8001a78:	4640      	mov	r0, r8
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dsub+0x288>
 8001a7e:	e144      	b.n	8001d0a <__aeabi_dsub+0x512>
 8001a80:	4660      	mov	r0, ip
 8001a82:	4318      	orrs	r0, r3
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0x290>
 8001a86:	e190      	b.n	8001daa <__aeabi_dsub+0x5b2>
 8001a88:	0008      	movs	r0, r1
 8001a8a:	4338      	orrs	r0, r7
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_dsub+0x298>
 8001a8e:	e1aa      	b.n	8001de6 <__aeabi_dsub+0x5ee>
 8001a90:	4661      	mov	r1, ip
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	0749      	lsls	r1, r1, #29
 8001a96:	430b      	orrs	r3, r1
 8001a98:	4661      	mov	r1, ip
 8001a9a:	08cc      	lsrs	r4, r1, #3
 8001a9c:	e027      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001a9e:	0008      	movs	r0, r1
 8001aa0:	4338      	orrs	r0, r7
 8001aa2:	d061      	beq.n	8001b68 <__aeabi_dsub+0x370>
 8001aa4:	1e50      	subs	r0, r2, #1
 8001aa6:	2a01      	cmp	r2, #1
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x2b4>
 8001aaa:	e139      	b.n	8001d20 <__aeabi_dsub+0x528>
 8001aac:	42a2      	cmp	r2, r4
 8001aae:	d027      	beq.n	8001b00 <__aeabi_dsub+0x308>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	e75d      	b.n	8001970 <__aeabi_dsub+0x178>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	391f      	subs	r1, #31
 8001ab8:	40ca      	lsrs	r2, r1
 8001aba:	0011      	movs	r1, r2
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d003      	beq.n	8001ac8 <__aeabi_dsub+0x2d0>
 8001ac0:	2240      	movs	r2, #64	; 0x40
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4098      	lsls	r0, r3
 8001ac6:	4304      	orrs	r4, r0
 8001ac8:	1e63      	subs	r3, r4, #1
 8001aca:	419c      	sbcs	r4, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	4699      	mov	r9, r3
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d000      	beq.n	8001ada <__aeabi_dsub+0x2e2>
 8001ad8:	e712      	b.n	8001900 <__aeabi_dsub+0x108>
 8001ada:	464b      	mov	r3, r9
 8001adc:	464a      	mov	r2, r9
 8001ade:	08e4      	lsrs	r4, r4, #3
 8001ae0:	075b      	lsls	r3, r3, #29
 8001ae2:	4323      	orrs	r3, r4
 8001ae4:	08d4      	lsrs	r4, r2, #3
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	4919      	ldr	r1, [pc, #100]	; (8001b50 <__aeabi_dsub+0x358>)
 8001aea:	428a      	cmp	r2, r1
 8001aec:	d00e      	beq.n	8001b0c <__aeabi_dsub+0x314>
 8001aee:	0324      	lsls	r4, r4, #12
 8001af0:	0552      	lsls	r2, r2, #21
 8001af2:	0b24      	lsrs	r4, r4, #12
 8001af4:	0d52      	lsrs	r2, r2, #21
 8001af6:	e722      	b.n	800193e <__aeabi_dsub+0x146>
 8001af8:	000a      	movs	r2, r1
 8001afa:	2400      	movs	r4, #0
 8001afc:	2300      	movs	r3, #0
 8001afe:	e71e      	b.n	800193e <__aeabi_dsub+0x146>
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	4662      	mov	r2, ip
 8001b04:	0752      	lsls	r2, r2, #29
 8001b06:	4313      	orrs	r3, r2
 8001b08:	4662      	mov	r2, ip
 8001b0a:	08d4      	lsrs	r4, r2, #3
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	4322      	orrs	r2, r4
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x31c>
 8001b12:	e1fc      	b.n	8001f0e <__aeabi_dsub+0x716>
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0312      	lsls	r2, r2, #12
 8001b18:	4314      	orrs	r4, r2
 8001b1a:	0324      	lsls	r4, r4, #12
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <__aeabi_dsub+0x358>)
 8001b1e:	0b24      	lsrs	r4, r4, #12
 8001b20:	e70d      	b.n	800193e <__aeabi_dsub+0x146>
 8001b22:	0020      	movs	r0, r4
 8001b24:	f000 fa60 	bl	8001fe8 <__clzsi2>
 8001b28:	0001      	movs	r1, r0
 8001b2a:	3118      	adds	r1, #24
 8001b2c:	291f      	cmp	r1, #31
 8001b2e:	dc00      	bgt.n	8001b32 <__aeabi_dsub+0x33a>
 8001b30:	e6c4      	b.n	80018bc <__aeabi_dsub+0xc4>
 8001b32:	3808      	subs	r0, #8
 8001b34:	4084      	lsls	r4, r0
 8001b36:	4643      	mov	r3, r8
 8001b38:	0020      	movs	r0, r4
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	4588      	cmp	r8, r1
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x34a>
 8001b40:	e6c8      	b.n	80018d4 <__aeabi_dsub+0xdc>
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__aeabi_dsub+0x35c>)
 8001b44:	1a5b      	subs	r3, r3, r1
 8001b46:	4010      	ands	r0, r2
 8001b48:	4698      	mov	r8, r3
 8001b4a:	4681      	mov	r9, r0
 8001b4c:	e6d6      	b.n	80018fc <__aeabi_dsub+0x104>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	ff7fffff 	.word	0xff7fffff
 8001b58:	fffff801 	.word	0xfffff801
 8001b5c:	000007fe 	.word	0x000007fe
 8001b60:	430f      	orrs	r7, r1
 8001b62:	1e7a      	subs	r2, r7, #1
 8001b64:	4197      	sbcs	r7, r2
 8001b66:	e691      	b.n	800188c <__aeabi_dsub+0x94>
 8001b68:	4661      	mov	r1, ip
 8001b6a:	08db      	lsrs	r3, r3, #3
 8001b6c:	0749      	lsls	r1, r1, #29
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	4661      	mov	r1, ip
 8001b72:	08cc      	lsrs	r4, r1, #3
 8001b74:	e7b8      	b.n	8001ae8 <__aeabi_dsub+0x2f0>
 8001b76:	4640      	mov	r0, r8
 8001b78:	4cd3      	ldr	r4, [pc, #844]	; (8001ec8 <__aeabi_dsub+0x6d0>)
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	4220      	tst	r0, r4
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x38a>
 8001b80:	e0a2      	b.n	8001cc8 <__aeabi_dsub+0x4d0>
 8001b82:	4640      	mov	r0, r8
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x392>
 8001b88:	e101      	b.n	8001d8e <__aeabi_dsub+0x596>
 8001b8a:	4660      	mov	r0, ip
 8001b8c:	4318      	orrs	r0, r3
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dsub+0x39a>
 8001b90:	e15e      	b.n	8001e50 <__aeabi_dsub+0x658>
 8001b92:	0008      	movs	r0, r1
 8001b94:	4338      	orrs	r0, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dsub+0x3a2>
 8001b98:	e15f      	b.n	8001e5a <__aeabi_dsub+0x662>
 8001b9a:	4661      	mov	r1, ip
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	0749      	lsls	r1, r1, #29
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	4661      	mov	r1, ip
 8001ba4:	08cc      	lsrs	r4, r1, #3
 8001ba6:	e7a2      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001ba8:	4dc8      	ldr	r5, [pc, #800]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001baa:	42a8      	cmp	r0, r5
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x3b8>
 8001bae:	e0cf      	b.n	8001d50 <__aeabi_dsub+0x558>
 8001bb0:	2580      	movs	r5, #128	; 0x80
 8001bb2:	4664      	mov	r4, ip
 8001bb4:	042d      	lsls	r5, r5, #16
 8001bb6:	432c      	orrs	r4, r5
 8001bb8:	46a4      	mov	ip, r4
 8001bba:	2a38      	cmp	r2, #56	; 0x38
 8001bbc:	dc56      	bgt.n	8001c6c <__aeabi_dsub+0x474>
 8001bbe:	2a1f      	cmp	r2, #31
 8001bc0:	dd00      	ble.n	8001bc4 <__aeabi_dsub+0x3cc>
 8001bc2:	e0d1      	b.n	8001d68 <__aeabi_dsub+0x570>
 8001bc4:	2520      	movs	r5, #32
 8001bc6:	001e      	movs	r6, r3
 8001bc8:	1aad      	subs	r5, r5, r2
 8001bca:	4664      	mov	r4, ip
 8001bcc:	40ab      	lsls	r3, r5
 8001bce:	40ac      	lsls	r4, r5
 8001bd0:	40d6      	lsrs	r6, r2
 8001bd2:	1e5d      	subs	r5, r3, #1
 8001bd4:	41ab      	sbcs	r3, r5
 8001bd6:	4334      	orrs	r4, r6
 8001bd8:	4323      	orrs	r3, r4
 8001bda:	4664      	mov	r4, ip
 8001bdc:	40d4      	lsrs	r4, r2
 8001bde:	1b09      	subs	r1, r1, r4
 8001be0:	e049      	b.n	8001c76 <__aeabi_dsub+0x47e>
 8001be2:	4660      	mov	r0, ip
 8001be4:	1bdc      	subs	r4, r3, r7
 8001be6:	1a46      	subs	r6, r0, r1
 8001be8:	42a3      	cmp	r3, r4
 8001bea:	4180      	sbcs	r0, r0
 8001bec:	4240      	negs	r0, r0
 8001bee:	4681      	mov	r9, r0
 8001bf0:	0030      	movs	r0, r6
 8001bf2:	464e      	mov	r6, r9
 8001bf4:	1b80      	subs	r0, r0, r6
 8001bf6:	4681      	mov	r9, r0
 8001bf8:	0200      	lsls	r0, r0, #8
 8001bfa:	d476      	bmi.n	8001cea <__aeabi_dsub+0x4f2>
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	d000      	beq.n	8001c04 <__aeabi_dsub+0x40c>
 8001c02:	e652      	b.n	80018aa <__aeabi_dsub+0xb2>
 8001c04:	2400      	movs	r4, #0
 8001c06:	2500      	movs	r5, #0
 8001c08:	e771      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001c0a:	4339      	orrs	r1, r7
 8001c0c:	000c      	movs	r4, r1
 8001c0e:	1e62      	subs	r2, r4, #1
 8001c10:	4194      	sbcs	r4, r2
 8001c12:	18e4      	adds	r4, r4, r3
 8001c14:	429c      	cmp	r4, r3
 8001c16:	419b      	sbcs	r3, r3
 8001c18:	425b      	negs	r3, r3
 8001c1a:	4463      	add	r3, ip
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	464b      	mov	r3, r9
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	d400      	bmi.n	8001c26 <__aeabi_dsub+0x42e>
 8001c24:	e756      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001c26:	2301      	movs	r3, #1
 8001c28:	469c      	mov	ip, r3
 8001c2a:	4ba8      	ldr	r3, [pc, #672]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001c2c:	44e0      	add	r8, ip
 8001c2e:	4598      	cmp	r8, r3
 8001c30:	d038      	beq.n	8001ca4 <__aeabi_dsub+0x4ac>
 8001c32:	464b      	mov	r3, r9
 8001c34:	48a6      	ldr	r0, [pc, #664]	; (8001ed0 <__aeabi_dsub+0x6d8>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	4003      	ands	r3, r0
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	0863      	lsrs	r3, r4, #1
 8001c3e:	4014      	ands	r4, r2
 8001c40:	431c      	orrs	r4, r3
 8001c42:	07c3      	lsls	r3, r0, #31
 8001c44:	431c      	orrs	r4, r3
 8001c46:	0843      	lsrs	r3, r0, #1
 8001c48:	4699      	mov	r9, r3
 8001c4a:	e657      	b.n	80018fc <__aeabi_dsub+0x104>
 8001c4c:	0010      	movs	r0, r2
 8001c4e:	000e      	movs	r6, r1
 8001c50:	3820      	subs	r0, #32
 8001c52:	40c6      	lsrs	r6, r0
 8001c54:	2a20      	cmp	r2, #32
 8001c56:	d004      	beq.n	8001c62 <__aeabi_dsub+0x46a>
 8001c58:	2040      	movs	r0, #64	; 0x40
 8001c5a:	1a82      	subs	r2, r0, r2
 8001c5c:	4091      	lsls	r1, r2
 8001c5e:	430f      	orrs	r7, r1
 8001c60:	46b9      	mov	r9, r7
 8001c62:	464f      	mov	r7, r9
 8001c64:	1e7a      	subs	r2, r7, #1
 8001c66:	4197      	sbcs	r7, r2
 8001c68:	4337      	orrs	r7, r6
 8001c6a:	e60f      	b.n	800188c <__aeabi_dsub+0x94>
 8001c6c:	4662      	mov	r2, ip
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	4193      	sbcs	r3, r2
 8001c76:	1afc      	subs	r4, r7, r3
 8001c78:	42a7      	cmp	r7, r4
 8001c7a:	41bf      	sbcs	r7, r7
 8001c7c:	427f      	negs	r7, r7
 8001c7e:	1bcb      	subs	r3, r1, r7
 8001c80:	4699      	mov	r9, r3
 8001c82:	465d      	mov	r5, fp
 8001c84:	4680      	mov	r8, r0
 8001c86:	e608      	b.n	800189a <__aeabi_dsub+0xa2>
 8001c88:	4666      	mov	r6, ip
 8001c8a:	431e      	orrs	r6, r3
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x498>
 8001c8e:	e0be      	b.n	8001e0e <__aeabi_dsub+0x616>
 8001c90:	1e56      	subs	r6, r2, #1
 8001c92:	2a01      	cmp	r2, #1
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x4a0>
 8001c96:	e109      	b.n	8001eac <__aeabi_dsub+0x6b4>
 8001c98:	4c8c      	ldr	r4, [pc, #560]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001c9a:	42a2      	cmp	r2, r4
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x4a8>
 8001c9e:	e119      	b.n	8001ed4 <__aeabi_dsub+0x6dc>
 8001ca0:	0032      	movs	r2, r6
 8001ca2:	e6c1      	b.n	8001a28 <__aeabi_dsub+0x230>
 8001ca4:	4642      	mov	r2, r8
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e648      	b.n	800193e <__aeabi_dsub+0x146>
 8001cac:	2020      	movs	r0, #32
 8001cae:	000c      	movs	r4, r1
 8001cb0:	1a80      	subs	r0, r0, r2
 8001cb2:	003e      	movs	r6, r7
 8001cb4:	4087      	lsls	r7, r0
 8001cb6:	4084      	lsls	r4, r0
 8001cb8:	40d6      	lsrs	r6, r2
 8001cba:	1e78      	subs	r0, r7, #1
 8001cbc:	4187      	sbcs	r7, r0
 8001cbe:	40d1      	lsrs	r1, r2
 8001cc0:	4334      	orrs	r4, r6
 8001cc2:	433c      	orrs	r4, r7
 8001cc4:	448c      	add	ip, r1
 8001cc6:	e7a4      	b.n	8001c12 <__aeabi_dsub+0x41a>
 8001cc8:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <__aeabi_dsub+0x6d4>)
 8001cca:	4290      	cmp	r0, r2
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x4d8>
 8001cce:	e0e9      	b.n	8001ea4 <__aeabi_dsub+0x6ac>
 8001cd0:	19df      	adds	r7, r3, r7
 8001cd2:	429f      	cmp	r7, r3
 8001cd4:	419b      	sbcs	r3, r3
 8001cd6:	4461      	add	r1, ip
 8001cd8:	425b      	negs	r3, r3
 8001cda:	18c9      	adds	r1, r1, r3
 8001cdc:	07cc      	lsls	r4, r1, #31
 8001cde:	087f      	lsrs	r7, r7, #1
 8001ce0:	084b      	lsrs	r3, r1, #1
 8001ce2:	4699      	mov	r9, r3
 8001ce4:	4680      	mov	r8, r0
 8001ce6:	433c      	orrs	r4, r7
 8001ce8:	e6f4      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001cea:	1afc      	subs	r4, r7, r3
 8001cec:	42a7      	cmp	r7, r4
 8001cee:	41bf      	sbcs	r7, r7
 8001cf0:	4663      	mov	r3, ip
 8001cf2:	427f      	negs	r7, r7
 8001cf4:	1ac9      	subs	r1, r1, r3
 8001cf6:	1bcb      	subs	r3, r1, r7
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	465d      	mov	r5, fp
 8001cfc:	e5d5      	b.n	80018aa <__aeabi_dsub+0xb2>
 8001cfe:	08ff      	lsrs	r7, r7, #3
 8001d00:	074b      	lsls	r3, r1, #29
 8001d02:	465d      	mov	r5, fp
 8001d04:	433b      	orrs	r3, r7
 8001d06:	08cc      	lsrs	r4, r1, #3
 8001d08:	e6ee      	b.n	8001ae8 <__aeabi_dsub+0x2f0>
 8001d0a:	4662      	mov	r2, ip
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	d000      	beq.n	8001d12 <__aeabi_dsub+0x51a>
 8001d10:	e082      	b.n	8001e18 <__aeabi_dsub+0x620>
 8001d12:	000b      	movs	r3, r1
 8001d14:	433b      	orrs	r3, r7
 8001d16:	d11b      	bne.n	8001d50 <__aeabi_dsub+0x558>
 8001d18:	2480      	movs	r4, #128	; 0x80
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	0324      	lsls	r4, r4, #12
 8001d1e:	e6f9      	b.n	8001b14 <__aeabi_dsub+0x31c>
 8001d20:	19dc      	adds	r4, r3, r7
 8001d22:	429c      	cmp	r4, r3
 8001d24:	419b      	sbcs	r3, r3
 8001d26:	4461      	add	r1, ip
 8001d28:	4689      	mov	r9, r1
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	4499      	add	r9, r3
 8001d2e:	464b      	mov	r3, r9
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	d444      	bmi.n	8001dbe <__aeabi_dsub+0x5c6>
 8001d34:	2301      	movs	r3, #1
 8001d36:	4698      	mov	r8, r3
 8001d38:	e6cc      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001d3a:	1bdc      	subs	r4, r3, r7
 8001d3c:	4662      	mov	r2, ip
 8001d3e:	42a3      	cmp	r3, r4
 8001d40:	419b      	sbcs	r3, r3
 8001d42:	1a51      	subs	r1, r2, r1
 8001d44:	425b      	negs	r3, r3
 8001d46:	1acb      	subs	r3, r1, r3
 8001d48:	4699      	mov	r9, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4698      	mov	r8, r3
 8001d4e:	e5a4      	b.n	800189a <__aeabi_dsub+0xa2>
 8001d50:	08ff      	lsrs	r7, r7, #3
 8001d52:	074b      	lsls	r3, r1, #29
 8001d54:	465d      	mov	r5, fp
 8001d56:	433b      	orrs	r3, r7
 8001d58:	08cc      	lsrs	r4, r1, #3
 8001d5a:	e6d7      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001d5c:	4662      	mov	r2, ip
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	0014      	movs	r4, r2
 8001d62:	1e63      	subs	r3, r4, #1
 8001d64:	419c      	sbcs	r4, r3
 8001d66:	e679      	b.n	8001a5c <__aeabi_dsub+0x264>
 8001d68:	0015      	movs	r5, r2
 8001d6a:	4664      	mov	r4, ip
 8001d6c:	3d20      	subs	r5, #32
 8001d6e:	40ec      	lsrs	r4, r5
 8001d70:	46a0      	mov	r8, r4
 8001d72:	2a20      	cmp	r2, #32
 8001d74:	d005      	beq.n	8001d82 <__aeabi_dsub+0x58a>
 8001d76:	2540      	movs	r5, #64	; 0x40
 8001d78:	4664      	mov	r4, ip
 8001d7a:	1aaa      	subs	r2, r5, r2
 8001d7c:	4094      	lsls	r4, r2
 8001d7e:	4323      	orrs	r3, r4
 8001d80:	469a      	mov	sl, r3
 8001d82:	4654      	mov	r4, sl
 8001d84:	1e63      	subs	r3, r4, #1
 8001d86:	419c      	sbcs	r4, r3
 8001d88:	4643      	mov	r3, r8
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	e773      	b.n	8001c76 <__aeabi_dsub+0x47e>
 8001d8e:	4662      	mov	r2, ip
 8001d90:	431a      	orrs	r2, r3
 8001d92:	d023      	beq.n	8001ddc <__aeabi_dsub+0x5e4>
 8001d94:	000a      	movs	r2, r1
 8001d96:	433a      	orrs	r2, r7
 8001d98:	d000      	beq.n	8001d9c <__aeabi_dsub+0x5a4>
 8001d9a:	e0a0      	b.n	8001ede <__aeabi_dsub+0x6e6>
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	08db      	lsrs	r3, r3, #3
 8001da0:	0752      	lsls	r2, r2, #29
 8001da2:	4313      	orrs	r3, r2
 8001da4:	4662      	mov	r2, ip
 8001da6:	08d4      	lsrs	r4, r2, #3
 8001da8:	e6b0      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001daa:	000b      	movs	r3, r1
 8001dac:	433b      	orrs	r3, r7
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x5ba>
 8001db0:	e728      	b.n	8001c04 <__aeabi_dsub+0x40c>
 8001db2:	08ff      	lsrs	r7, r7, #3
 8001db4:	074b      	lsls	r3, r1, #29
 8001db6:	465d      	mov	r5, fp
 8001db8:	433b      	orrs	r3, r7
 8001dba:	08cc      	lsrs	r4, r1, #3
 8001dbc:	e697      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	4698      	mov	r8, r3
 8001dc2:	e736      	b.n	8001c32 <__aeabi_dsub+0x43a>
 8001dc4:	1afc      	subs	r4, r7, r3
 8001dc6:	42a7      	cmp	r7, r4
 8001dc8:	41bf      	sbcs	r7, r7
 8001dca:	4663      	mov	r3, ip
 8001dcc:	427f      	negs	r7, r7
 8001dce:	1ac9      	subs	r1, r1, r3
 8001dd0:	1bcb      	subs	r3, r1, r7
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	465d      	mov	r5, fp
 8001dd8:	4698      	mov	r8, r3
 8001dda:	e55e      	b.n	800189a <__aeabi_dsub+0xa2>
 8001ddc:	074b      	lsls	r3, r1, #29
 8001dde:	08ff      	lsrs	r7, r7, #3
 8001de0:	433b      	orrs	r3, r7
 8001de2:	08cc      	lsrs	r4, r1, #3
 8001de4:	e692      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001de6:	1bdc      	subs	r4, r3, r7
 8001de8:	4660      	mov	r0, ip
 8001dea:	42a3      	cmp	r3, r4
 8001dec:	41b6      	sbcs	r6, r6
 8001dee:	1a40      	subs	r0, r0, r1
 8001df0:	4276      	negs	r6, r6
 8001df2:	1b80      	subs	r0, r0, r6
 8001df4:	4681      	mov	r9, r0
 8001df6:	0200      	lsls	r0, r0, #8
 8001df8:	d560      	bpl.n	8001ebc <__aeabi_dsub+0x6c4>
 8001dfa:	1afc      	subs	r4, r7, r3
 8001dfc:	42a7      	cmp	r7, r4
 8001dfe:	41bf      	sbcs	r7, r7
 8001e00:	4663      	mov	r3, ip
 8001e02:	427f      	negs	r7, r7
 8001e04:	1ac9      	subs	r1, r1, r3
 8001e06:	1bcb      	subs	r3, r1, r7
 8001e08:	4699      	mov	r9, r3
 8001e0a:	465d      	mov	r5, fp
 8001e0c:	e576      	b.n	80018fc <__aeabi_dsub+0x104>
 8001e0e:	08ff      	lsrs	r7, r7, #3
 8001e10:	074b      	lsls	r3, r1, #29
 8001e12:	433b      	orrs	r3, r7
 8001e14:	08cc      	lsrs	r4, r1, #3
 8001e16:	e667      	b.n	8001ae8 <__aeabi_dsub+0x2f0>
 8001e18:	000a      	movs	r2, r1
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	433a      	orrs	r2, r7
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x62a>
 8001e20:	e66f      	b.n	8001b02 <__aeabi_dsub+0x30a>
 8001e22:	4662      	mov	r2, ip
 8001e24:	0752      	lsls	r2, r2, #29
 8001e26:	4313      	orrs	r3, r2
 8001e28:	4662      	mov	r2, ip
 8001e2a:	08d4      	lsrs	r4, r2, #3
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	0312      	lsls	r2, r2, #12
 8001e30:	4214      	tst	r4, r2
 8001e32:	d007      	beq.n	8001e44 <__aeabi_dsub+0x64c>
 8001e34:	08c8      	lsrs	r0, r1, #3
 8001e36:	4210      	tst	r0, r2
 8001e38:	d104      	bne.n	8001e44 <__aeabi_dsub+0x64c>
 8001e3a:	465d      	mov	r5, fp
 8001e3c:	0004      	movs	r4, r0
 8001e3e:	08fb      	lsrs	r3, r7, #3
 8001e40:	0749      	lsls	r1, r1, #29
 8001e42:	430b      	orrs	r3, r1
 8001e44:	0f5a      	lsrs	r2, r3, #29
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	0752      	lsls	r2, r2, #29
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	e65d      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001e50:	074b      	lsls	r3, r1, #29
 8001e52:	08ff      	lsrs	r7, r7, #3
 8001e54:	433b      	orrs	r3, r7
 8001e56:	08cc      	lsrs	r4, r1, #3
 8001e58:	e649      	b.n	8001aee <__aeabi_dsub+0x2f6>
 8001e5a:	19dc      	adds	r4, r3, r7
 8001e5c:	429c      	cmp	r4, r3
 8001e5e:	419b      	sbcs	r3, r3
 8001e60:	4461      	add	r1, ip
 8001e62:	4689      	mov	r9, r1
 8001e64:	425b      	negs	r3, r3
 8001e66:	4499      	add	r9, r3
 8001e68:	464b      	mov	r3, r9
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	d400      	bmi.n	8001e70 <__aeabi_dsub+0x678>
 8001e6e:	e631      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001e70:	464a      	mov	r2, r9
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <__aeabi_dsub+0x6d8>)
 8001e74:	401a      	ands	r2, r3
 8001e76:	2301      	movs	r3, #1
 8001e78:	4691      	mov	r9, r2
 8001e7a:	4698      	mov	r8, r3
 8001e7c:	e62a      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001e7e:	0016      	movs	r6, r2
 8001e80:	4664      	mov	r4, ip
 8001e82:	3e20      	subs	r6, #32
 8001e84:	40f4      	lsrs	r4, r6
 8001e86:	46a0      	mov	r8, r4
 8001e88:	2a20      	cmp	r2, #32
 8001e8a:	d005      	beq.n	8001e98 <__aeabi_dsub+0x6a0>
 8001e8c:	2640      	movs	r6, #64	; 0x40
 8001e8e:	4664      	mov	r4, ip
 8001e90:	1ab2      	subs	r2, r6, r2
 8001e92:	4094      	lsls	r4, r2
 8001e94:	4323      	orrs	r3, r4
 8001e96:	469a      	mov	sl, r3
 8001e98:	4654      	mov	r4, sl
 8001e9a:	1e63      	subs	r3, r4, #1
 8001e9c:	419c      	sbcs	r4, r3
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	431c      	orrs	r4, r3
 8001ea2:	e5db      	b.n	8001a5c <__aeabi_dsub+0x264>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	2400      	movs	r4, #0
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e548      	b.n	800193e <__aeabi_dsub+0x146>
 8001eac:	19dc      	adds	r4, r3, r7
 8001eae:	42bc      	cmp	r4, r7
 8001eb0:	41bf      	sbcs	r7, r7
 8001eb2:	4461      	add	r1, ip
 8001eb4:	4689      	mov	r9, r1
 8001eb6:	427f      	negs	r7, r7
 8001eb8:	44b9      	add	r9, r7
 8001eba:	e738      	b.n	8001d2e <__aeabi_dsub+0x536>
 8001ebc:	464b      	mov	r3, r9
 8001ebe:	4323      	orrs	r3, r4
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x6cc>
 8001ec2:	e69f      	b.n	8001c04 <__aeabi_dsub+0x40c>
 8001ec4:	e606      	b.n	8001ad4 <__aeabi_dsub+0x2dc>
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	000007fe 	.word	0x000007fe
 8001ecc:	000007ff 	.word	0x000007ff
 8001ed0:	ff7fffff 	.word	0xff7fffff
 8001ed4:	08ff      	lsrs	r7, r7, #3
 8001ed6:	074b      	lsls	r3, r1, #29
 8001ed8:	433b      	orrs	r3, r7
 8001eda:	08cc      	lsrs	r4, r1, #3
 8001edc:	e616      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001ede:	4662      	mov	r2, ip
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	0752      	lsls	r2, r2, #29
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	08d4      	lsrs	r4, r2, #3
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	0312      	lsls	r2, r2, #12
 8001eee:	4214      	tst	r4, r2
 8001ef0:	d007      	beq.n	8001f02 <__aeabi_dsub+0x70a>
 8001ef2:	08c8      	lsrs	r0, r1, #3
 8001ef4:	4210      	tst	r0, r2
 8001ef6:	d104      	bne.n	8001f02 <__aeabi_dsub+0x70a>
 8001ef8:	465d      	mov	r5, fp
 8001efa:	0004      	movs	r4, r0
 8001efc:	08fb      	lsrs	r3, r7, #3
 8001efe:	0749      	lsls	r1, r1, #29
 8001f00:	430b      	orrs	r3, r1
 8001f02:	0f5a      	lsrs	r2, r3, #29
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	0752      	lsls	r2, r2, #29
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	e5fe      	b.n	8001b0c <__aeabi_dsub+0x314>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	4a01      	ldr	r2, [pc, #4]	; (8001f18 <__aeabi_dsub+0x720>)
 8001f12:	001c      	movs	r4, r3
 8001f14:	e513      	b.n	800193e <__aeabi_dsub+0x146>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	000007ff 	.word	0x000007ff

08001f1c <__aeabi_d2iz>:
 8001f1c:	000a      	movs	r2, r1
 8001f1e:	b530      	push	{r4, r5, lr}
 8001f20:	4c13      	ldr	r4, [pc, #76]	; (8001f70 <__aeabi_d2iz+0x54>)
 8001f22:	0053      	lsls	r3, r2, #1
 8001f24:	0309      	lsls	r1, r1, #12
 8001f26:	0005      	movs	r5, r0
 8001f28:	0b09      	lsrs	r1, r1, #12
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	0d5b      	lsrs	r3, r3, #21
 8001f2e:	0fd2      	lsrs	r2, r2, #31
 8001f30:	42a3      	cmp	r3, r4
 8001f32:	dd04      	ble.n	8001f3e <__aeabi_d2iz+0x22>
 8001f34:	480f      	ldr	r0, [pc, #60]	; (8001f74 <__aeabi_d2iz+0x58>)
 8001f36:	4283      	cmp	r3, r0
 8001f38:	dd02      	ble.n	8001f40 <__aeabi_d2iz+0x24>
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <__aeabi_d2iz+0x5c>)
 8001f3c:	18d0      	adds	r0, r2, r3
 8001f3e:	bd30      	pop	{r4, r5, pc}
 8001f40:	2080      	movs	r0, #128	; 0x80
 8001f42:	0340      	lsls	r0, r0, #13
 8001f44:	4301      	orrs	r1, r0
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <__aeabi_d2iz+0x60>)
 8001f48:	1ac0      	subs	r0, r0, r3
 8001f4a:	281f      	cmp	r0, #31
 8001f4c:	dd08      	ble.n	8001f60 <__aeabi_d2iz+0x44>
 8001f4e:	480c      	ldr	r0, [pc, #48]	; (8001f80 <__aeabi_d2iz+0x64>)
 8001f50:	1ac3      	subs	r3, r0, r3
 8001f52:	40d9      	lsrs	r1, r3
 8001f54:	000b      	movs	r3, r1
 8001f56:	4258      	negs	r0, r3
 8001f58:	2a00      	cmp	r2, #0
 8001f5a:	d1f0      	bne.n	8001f3e <__aeabi_d2iz+0x22>
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	e7ee      	b.n	8001f3e <__aeabi_d2iz+0x22>
 8001f60:	4c08      	ldr	r4, [pc, #32]	; (8001f84 <__aeabi_d2iz+0x68>)
 8001f62:	40c5      	lsrs	r5, r0
 8001f64:	46a4      	mov	ip, r4
 8001f66:	4463      	add	r3, ip
 8001f68:	4099      	lsls	r1, r3
 8001f6a:	000b      	movs	r3, r1
 8001f6c:	432b      	orrs	r3, r5
 8001f6e:	e7f2      	b.n	8001f56 <__aeabi_d2iz+0x3a>
 8001f70:	000003fe 	.word	0x000003fe
 8001f74:	0000041d 	.word	0x0000041d
 8001f78:	7fffffff 	.word	0x7fffffff
 8001f7c:	00000433 	.word	0x00000433
 8001f80:	00000413 	.word	0x00000413
 8001f84:	fffffbed 	.word	0xfffffbed

08001f88 <__aeabi_i2d>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d016      	beq.n	8001fbc <__aeabi_i2d+0x34>
 8001f8e:	17c3      	asrs	r3, r0, #31
 8001f90:	18c5      	adds	r5, r0, r3
 8001f92:	405d      	eors	r5, r3
 8001f94:	0fc4      	lsrs	r4, r0, #31
 8001f96:	0028      	movs	r0, r5
 8001f98:	f000 f826 	bl	8001fe8 <__clzsi2>
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <__aeabi_i2d+0x5c>)
 8001f9e:	1a12      	subs	r2, r2, r0
 8001fa0:	280a      	cmp	r0, #10
 8001fa2:	dc16      	bgt.n	8001fd2 <__aeabi_i2d+0x4a>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	002e      	movs	r6, r5
 8001fa8:	3315      	adds	r3, #21
 8001faa:	409e      	lsls	r6, r3
 8001fac:	230b      	movs	r3, #11
 8001fae:	1a18      	subs	r0, r3, r0
 8001fb0:	40c5      	lsrs	r5, r0
 8001fb2:	0552      	lsls	r2, r2, #21
 8001fb4:	032d      	lsls	r5, r5, #12
 8001fb6:	0b2d      	lsrs	r5, r5, #12
 8001fb8:	0d53      	lsrs	r3, r2, #21
 8001fba:	e003      	b.n	8001fc4 <__aeabi_i2d+0x3c>
 8001fbc:	2400      	movs	r4, #0
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	051b      	lsls	r3, r3, #20
 8001fc6:	432b      	orrs	r3, r5
 8001fc8:	07e4      	lsls	r4, r4, #31
 8001fca:	4323      	orrs	r3, r4
 8001fcc:	0030      	movs	r0, r6
 8001fce:	0019      	movs	r1, r3
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
 8001fd2:	380b      	subs	r0, #11
 8001fd4:	4085      	lsls	r5, r0
 8001fd6:	0552      	lsls	r2, r2, #21
 8001fd8:	032d      	lsls	r5, r5, #12
 8001fda:	2600      	movs	r6, #0
 8001fdc:	0b2d      	lsrs	r5, r5, #12
 8001fde:	0d53      	lsrs	r3, r2, #21
 8001fe0:	e7f0      	b.n	8001fc4 <__aeabi_i2d+0x3c>
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	0000041e 	.word	0x0000041e

08001fe8 <__clzsi2>:
 8001fe8:	211c      	movs	r1, #28
 8001fea:	2301      	movs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	4298      	cmp	r0, r3
 8001ff0:	d301      	bcc.n	8001ff6 <__clzsi2+0xe>
 8001ff2:	0c00      	lsrs	r0, r0, #16
 8001ff4:	3910      	subs	r1, #16
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	d301      	bcc.n	8002000 <__clzsi2+0x18>
 8001ffc:	0a00      	lsrs	r0, r0, #8
 8001ffe:	3908      	subs	r1, #8
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	4298      	cmp	r0, r3
 8002004:	d301      	bcc.n	800200a <__clzsi2+0x22>
 8002006:	0900      	lsrs	r0, r0, #4
 8002008:	3904      	subs	r1, #4
 800200a:	a202      	add	r2, pc, #8	; (adr r2, 8002014 <__clzsi2+0x2c>)
 800200c:	5c10      	ldrb	r0, [r2, r0]
 800200e:	1840      	adds	r0, r0, r1
 8002010:	4770      	bx	lr
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	02020304 	.word	0x02020304
 8002018:	01010101 	.word	0x01010101
	...

08002024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <MX_DMA_Init+0x48>)
 800202c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_DMA_Init+0x48>)
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <MX_DMA_Init+0x48>)
 8002038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203a:	2201      	movs	r2, #1
 800203c:	4013      	ands	r3, r2
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2100      	movs	r1, #0
 8002046:	2009      	movs	r0, #9
 8002048:	f000 fc8c 	bl	8002964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800204c:	2009      	movs	r0, #9
 800204e:	f000 fc9e 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	200a      	movs	r0, #10
 8002058:	f000 fc84 	bl	8002964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800205c:	200a      	movs	r0, #10
 800205e:	f000 fc96 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	40021000 	.word	0x40021000

08002070 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MX_GPIO_Init+0x28>)
 8002078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <MX_GPIO_Init+0x28>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <MX_GPIO_Init+0x28>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	687b      	ldr	r3, [r7, #4]

}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b002      	add	sp, #8
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	40021000 	.word	0x40021000

0800209c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020a2:	f000 fb17 	bl	80026d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020a6:	f000 f8b7 	bl	8002218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020aa:	f7ff ffe1 	bl	8002070 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ae:	f7ff ffb9 	bl	8002024 <MX_DMA_Init>
  MX_TIM1_Init();
 80020b2:	f000 f96f 	bl	8002394 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  for(int i = 0; i <= 199; i++){
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	e08e      	b.n	80021da <main+0x13e>
	  sineBuffer[i] = (uint32_t)(500*sin(2*M_PI*i/200)+500);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff63 	bl	8001f88 <__aeabi_i2d>
 80020c2:	4a4e      	ldr	r2, [pc, #312]	; (80021fc <main+0x160>)
 80020c4:	4b4e      	ldr	r3, [pc, #312]	; (8002200 <main+0x164>)
 80020c6:	f7ff f92b 	bl	8001320 <__aeabi_dmul>
 80020ca:	0002      	movs	r2, r0
 80020cc:	000b      	movs	r3, r1
 80020ce:	0010      	movs	r0, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <main+0x168>)
 80020d6:	f7fe fd21 	bl	8000b1c <__aeabi_ddiv>
 80020da:	0002      	movs	r2, r0
 80020dc:	000b      	movs	r3, r1
 80020de:	0010      	movs	r0, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	f002 fdc3 	bl	8004c6c <sin>
 80020e6:	2200      	movs	r2, #0
 80020e8:	4b47      	ldr	r3, [pc, #284]	; (8002208 <main+0x16c>)
 80020ea:	f7ff f919 	bl	8001320 <__aeabi_dmul>
 80020ee:	0002      	movs	r2, r0
 80020f0:	000b      	movs	r3, r1
 80020f2:	0010      	movs	r0, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	2200      	movs	r2, #0
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <main+0x16c>)
 80020fa:	f7fe f9d3 	bl	80004a4 <__aeabi_dadd>
 80020fe:	0002      	movs	r2, r0
 8002100:	000b      	movs	r3, r1
 8002102:	0010      	movs	r0, r2
 8002104:	0019      	movs	r1, r3
 8002106:	f7fe f9af 	bl	8000468 <__aeabi_d2uiz>
 800210a:	0001      	movs	r1, r0
 800210c:	4b3f      	ldr	r3, [pc, #252]	; (800220c <main+0x170>)
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	50d1      	str	r1, [r2, r3]

	  if(i<100){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b63      	cmp	r3, #99	; 0x63
 8002118:	dc2e      	bgt.n	8002178 <main+0xdc>
		  sineBuffer2[i] = (uint32_t)(500*sin(2*M_PI*(i+100)/200)+500);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3364      	adds	r3, #100	; 0x64
 800211e:	0018      	movs	r0, r3
 8002120:	f7ff ff32 	bl	8001f88 <__aeabi_i2d>
 8002124:	4a35      	ldr	r2, [pc, #212]	; (80021fc <main+0x160>)
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <main+0x164>)
 8002128:	f7ff f8fa 	bl	8001320 <__aeabi_dmul>
 800212c:	0002      	movs	r2, r0
 800212e:	000b      	movs	r3, r1
 8002130:	0010      	movs	r0, r2
 8002132:	0019      	movs	r1, r3
 8002134:	2200      	movs	r2, #0
 8002136:	4b33      	ldr	r3, [pc, #204]	; (8002204 <main+0x168>)
 8002138:	f7fe fcf0 	bl	8000b1c <__aeabi_ddiv>
 800213c:	0002      	movs	r2, r0
 800213e:	000b      	movs	r3, r1
 8002140:	0010      	movs	r0, r2
 8002142:	0019      	movs	r1, r3
 8002144:	f002 fd92 	bl	8004c6c <sin>
 8002148:	2200      	movs	r2, #0
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <main+0x16c>)
 800214c:	f7ff f8e8 	bl	8001320 <__aeabi_dmul>
 8002150:	0002      	movs	r2, r0
 8002152:	000b      	movs	r3, r1
 8002154:	0010      	movs	r0, r2
 8002156:	0019      	movs	r1, r3
 8002158:	2200      	movs	r2, #0
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <main+0x16c>)
 800215c:	f7fe f9a2 	bl	80004a4 <__aeabi_dadd>
 8002160:	0002      	movs	r2, r0
 8002162:	000b      	movs	r3, r1
 8002164:	0010      	movs	r0, r2
 8002166:	0019      	movs	r1, r3
 8002168:	f7fe f97e 	bl	8000468 <__aeabi_d2uiz>
 800216c:	0001      	movs	r1, r0
 800216e:	4b28      	ldr	r3, [pc, #160]	; (8002210 <main+0x174>)
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	50d1      	str	r1, [r2, r3]
 8002176:	e02d      	b.n	80021d4 <main+0x138>
	  }else{
		  sineBuffer2[i] = (uint32_t)(500*sin(2*M_PI*(i-100)/200)+500);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b64      	subs	r3, #100	; 0x64
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff ff03 	bl	8001f88 <__aeabi_i2d>
 8002182:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <main+0x160>)
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <main+0x164>)
 8002186:	f7ff f8cb 	bl	8001320 <__aeabi_dmul>
 800218a:	0002      	movs	r2, r0
 800218c:	000b      	movs	r3, r1
 800218e:	0010      	movs	r0, r2
 8002190:	0019      	movs	r1, r3
 8002192:	2200      	movs	r2, #0
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <main+0x168>)
 8002196:	f7fe fcc1 	bl	8000b1c <__aeabi_ddiv>
 800219a:	0002      	movs	r2, r0
 800219c:	000b      	movs	r3, r1
 800219e:	0010      	movs	r0, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	f002 fd63 	bl	8004c6c <sin>
 80021a6:	2200      	movs	r2, #0
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <main+0x16c>)
 80021aa:	f7ff f8b9 	bl	8001320 <__aeabi_dmul>
 80021ae:	0002      	movs	r2, r0
 80021b0:	000b      	movs	r3, r1
 80021b2:	0010      	movs	r0, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	2200      	movs	r2, #0
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <main+0x16c>)
 80021ba:	f7fe f973 	bl	80004a4 <__aeabi_dadd>
 80021be:	0002      	movs	r2, r0
 80021c0:	000b      	movs	r3, r1
 80021c2:	0010      	movs	r0, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	f7fe f94f 	bl	8000468 <__aeabi_d2uiz>
 80021ca:	0001      	movs	r1, r0
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <main+0x174>)
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	50d1      	str	r1, [r2, r3]
  for(int i = 0; i <= 199; i++){
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3301      	adds	r3, #1
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2bc7      	cmp	r3, #199	; 0xc7
 80021de:	dc00      	bgt.n	80021e2 <main+0x146>
 80021e0:	e76c      	b.n	80020bc <main+0x20>
	  }

  }

  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)sineBuffer, 200);
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <main+0x170>)
 80021e4:	480b      	ldr	r0, [pc, #44]	; (8002214 <main+0x178>)
 80021e6:	23c8      	movs	r3, #200	; 0xc8
 80021e8:	2100      	movs	r1, #0
 80021ea:	f001 fcdb 	bl	8003ba4 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t *)sineBuffer2, 200);
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <main+0x174>)
 80021f0:	4808      	ldr	r0, [pc, #32]	; (8002214 <main+0x178>)
 80021f2:	23c8      	movs	r3, #200	; 0xc8
 80021f4:	2104      	movs	r1, #4
 80021f6:	f001 fcd5 	bl	8003ba4 <HAL_TIM_PWM_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <main+0x15e>
 80021fc:	54442d18 	.word	0x54442d18
 8002200:	401921fb 	.word	0x401921fb
 8002204:	40690000 	.word	0x40690000
 8002208:	407f4000 	.word	0x407f4000
 800220c:	20000028 	.word	0x20000028
 8002210:	20000348 	.word	0x20000348
 8002214:	20000668 	.word	0x20000668

08002218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b093      	sub	sp, #76	; 0x4c
 800221c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221e:	2414      	movs	r4, #20
 8002220:	193b      	adds	r3, r7, r4
 8002222:	0018      	movs	r0, r3
 8002224:	2334      	movs	r3, #52	; 0x34
 8002226:	001a      	movs	r2, r3
 8002228:	2100      	movs	r1, #0
 800222a:	f002 fd17 	bl	8004c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	0018      	movs	r0, r3
 8002232:	2310      	movs	r3, #16
 8002234:	001a      	movs	r2, r3
 8002236:	2100      	movs	r1, #0
 8002238:	f002 fd10 	bl	8004c5c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	0018      	movs	r0, r3
 8002242:	f000 ff77 	bl	8003134 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002246:	193b      	adds	r3, r7, r4
 8002248:	2202      	movs	r2, #2
 800224a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800224c:	193b      	adds	r3, r7, r4
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	0052      	lsls	r2, r2, #1
 8002252:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002254:	0021      	movs	r1, r4
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2202      	movs	r2, #2
 8002266:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002268:	187b      	adds	r3, r7, r1
 800226a:	2202      	movs	r2, #2
 800226c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2209      	movs	r2, #9
 8002278:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	0292      	lsls	r2, r2, #10
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002282:	187b      	adds	r3, r7, r1
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	05d2      	lsls	r2, r2, #23
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228a:	187b      	adds	r3, r7, r1
 800228c:	0018      	movs	r0, r3
 800228e:	f000 ff91 	bl	80031b4 <HAL_RCC_OscConfig>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002296:	f000 f81a 	bl	80022ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2202      	movs	r2, #2
 80022a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2290      	movs	r2, #144	; 0x90
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2100      	movs	r1, #0
 80022b8:	0018      	movs	r0, r3
 80022ba:	f001 fa91 	bl	80037e0 <HAL_RCC_ClockConfig>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d001      	beq.n	80022c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022c2:	f000 f804 	bl	80022ce <Error_Handler>
  }
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b013      	add	sp, #76	; 0x4c
 80022cc:	bd90      	pop	{r4, r7, pc}

080022ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d2:	b672      	cpsid	i
}
 80022d4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <Error_Handler+0x8>

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_MspInit+0x4c>)
 80022e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_MspInit+0x4c>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	430a      	orrs	r2, r1
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_MspInit+0x4c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_MspInit+0x4c>)
 80022f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_MspInit+0x4c>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0549      	lsls	r1, r1, #21
 8002300:	430a      	orrs	r2, r1
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <HAL_MspInit+0x4c>)
 8002306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	055b      	lsls	r3, r3, #21
 800230c:	4013      	ands	r3, r2
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002312:	23c0      	movs	r3, #192	; 0xc0
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	0018      	movs	r0, r3
 8002318:	f000 fa62 	bl	80027e0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234c:	f000 fa2c 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <DMA1_Channel1_IRQHandler+0x14>)
 800235e:	0018      	movs	r0, r3
 8002360:	f000 fc42 	bl	8002be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	200006b4 	.word	0x200006b4

08002370 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002376:	0018      	movs	r0, r3
 8002378:	f000 fc36 	bl	8002be8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	20000710 	.word	0x20000710

08002388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b098      	sub	sp, #96	; 0x60
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239a:	2354      	movs	r3, #84	; 0x54
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	0018      	movs	r0, r3
 80023a0:	230c      	movs	r3, #12
 80023a2:	001a      	movs	r2, r3
 80023a4:	2100      	movs	r1, #0
 80023a6:	f002 fc59 	bl	8004c5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023aa:	2338      	movs	r3, #56	; 0x38
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	0018      	movs	r0, r3
 80023b0:	231c      	movs	r3, #28
 80023b2:	001a      	movs	r2, r3
 80023b4:	2100      	movs	r1, #0
 80023b6:	f002 fc51 	bl	8004c5c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	0018      	movs	r0, r3
 80023be:	2334      	movs	r3, #52	; 0x34
 80023c0:	001a      	movs	r2, r3
 80023c2:	2100      	movs	r1, #0
 80023c4:	f002 fc4a 	bl	8004c5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023ca:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <MX_TIM1_Init+0x168>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023ce:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023dc:	4a48      	ldr	r2, [pc, #288]	; (8002500 <MX_TIM1_Init+0x16c>)
 80023de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023e6:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <MX_TIM1_Init+0x164>)
 80023f4:	0018      	movs	r0, r3
 80023f6:	f001 fb7d 	bl	8003af4 <HAL_TIM_PWM_Init>
 80023fa:	1e03      	subs	r3, r0, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80023fe:	f7ff ff66 	bl	80022ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002402:	2154      	movs	r1, #84	; 0x54
 8002404:	187b      	adds	r3, r7, r1
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2200      	movs	r2, #0
 800240e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002416:	187a      	adds	r2, r7, r1
 8002418:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <MX_TIM1_Init+0x164>)
 800241a:	0011      	movs	r1, r2
 800241c:	0018      	movs	r0, r3
 800241e:	f002 faeb 	bl	80049f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002422:	1e03      	subs	r3, r0, #0
 8002424:	d001      	beq.n	800242a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002426:	f7ff ff52 	bl	80022ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242a:	2138      	movs	r1, #56	; 0x38
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2260      	movs	r2, #96	; 0x60
 8002430:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2200      	movs	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800243e:	187b      	adds	r3, r7, r1
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002450:	187b      	adds	r3, r7, r1
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002456:	1879      	adds	r1, r7, r1
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <MX_TIM1_Init+0x164>)
 800245a:	2200      	movs	r2, #0
 800245c:	0018      	movs	r0, r3
 800245e:	f001 fd8b 	bl	8003f78 <HAL_TIM_PWM_ConfigChannel>
 8002462:	1e03      	subs	r3, r0, #0
 8002464:	d001      	beq.n	800246a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002466:	f7ff ff32 	bl	80022ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800246a:	2338      	movs	r3, #56	; 0x38
 800246c:	18f9      	adds	r1, r7, r3
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <MX_TIM1_Init+0x164>)
 8002470:	2204      	movs	r2, #4
 8002472:	0018      	movs	r0, r3
 8002474:	f001 fd80 	bl	8003f78 <HAL_TIM_PWM_ConfigChannel>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800247c:	f7ff ff27 	bl	80022ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	0192      	lsls	r2, r2, #6
 80024a4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024a6:	1d3b      	adds	r3, r7, #4
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	0492      	lsls	r2, r2, #18
 80024be:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2200      	movs	r2, #0
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2200      	movs	r2, #0
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024d2:	1d3a      	adds	r2, r7, #4
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_TIM1_Init+0x164>)
 80024d6:	0011      	movs	r1, r2
 80024d8:	0018      	movs	r0, r3
 80024da:	f002 faf5 	bl	8004ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 80024e2:	f7ff fef4 	bl	80022ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <MX_TIM1_Init+0x164>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 f88b 	bl	8002604 <HAL_TIM_MspPostInit>

}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b018      	add	sp, #96	; 0x60
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	20000668 	.word	0x20000668
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	000003e7 	.word	0x000003e7

08002504 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a36      	ldr	r2, [pc, #216]	; (80025ec <HAL_TIM_PWM_MspInit+0xe8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d165      	bne.n	80025e2 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_TIM_PWM_MspInit+0xec>)
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <HAL_TIM_PWM_MspInit+0xec>)
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0109      	lsls	r1, r1, #4
 8002520:	430a      	orrs	r2, r1
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
 8002524:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <HAL_TIM_PWM_MspInit+0xec>)
 8002526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002534:	4a30      	ldr	r2, [pc, #192]	; (80025f8 <HAL_TIM_PWM_MspInit+0xf4>)
 8002536:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 800253a:	2214      	movs	r2, #20
 800253c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002540:	2210      	movs	r2, #16
 8002542:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002558:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002560:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002562:	2220      	movs	r2, #32
 8002564:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	0192      	lsls	r2, r2, #6
 800256c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002570:	0018      	movs	r0, r3
 8002572:	f000 fa29 	bl	80029c8 <HAL_DMA_Init>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d001      	beq.n	800257e <HAL_TIM_PWM_MspInit+0x7a>
    {
      Error_Handler();
 800257a:	f7ff fea8 	bl	80022ce <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002582:	625a      	str	r2, [r3, #36]	; 0x24
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_TIM_PWM_MspInit+0xf0>)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel2;
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 800258c:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <HAL_TIM_PWM_MspInit+0xfc>)
 800258e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Request = DMA_REQUEST_TIM1_CH2;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 8002592:	2215      	movs	r2, #21
 8002594:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 8002598:	2210      	movs	r2, #16
 800259a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	0092      	lsls	r2, r2, #2
 80025ae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025ba:	2220      	movs	r2, #32
 80025bc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	0192      	lsls	r2, r2, #6
 80025c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 f9fd 	bl	80029c8 <HAL_DMA_Init>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 80025d2:	f7ff fe7c 	bl	80022ce <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a08      	ldr	r2, [pc, #32]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <HAL_TIM_PWM_MspInit+0xf8>)
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40021000 	.word	0x40021000
 80025f4:	200006b4 	.word	0x200006b4
 80025f8:	40020008 	.word	0x40020008
 80025fc:	20000710 	.word	0x20000710
 8002600:	4002001c 	.word	0x4002001c

08002604 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	240c      	movs	r4, #12
 800260e:	193b      	adds	r3, r7, r4
 8002610:	0018      	movs	r0, r3
 8002612:	2314      	movs	r3, #20
 8002614:	001a      	movs	r2, r3
 8002616:	2100      	movs	r1, #0
 8002618:	f002 fb20 	bl	8004c5c <memset>
  if(timHandle->Instance==TIM1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a15      	ldr	r2, [pc, #84]	; (8002678 <HAL_TIM_MspPostInit+0x74>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d123      	bne.n	800266e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_TIM_MspPostInit+0x78>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <HAL_TIM_MspPostInit+0x78>)
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_TIM_MspPostInit+0x78>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800263e:	193b      	adds	r3, r7, r4
 8002640:	22c0      	movs	r2, #192	; 0xc0
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	0021      	movs	r1, r4
 8002648:	187b      	adds	r3, r7, r1
 800264a:	2202      	movs	r2, #2
 800264c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2202      	movs	r2, #2
 800265e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	187a      	adds	r2, r7, r1
 8002662:	23a0      	movs	r3, #160	; 0xa0
 8002664:	05db      	lsls	r3, r3, #23
 8002666:	0011      	movs	r1, r2
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fbff 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b009      	add	sp, #36	; 0x24
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40021000 	.word	0x40021000

08002680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002682:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002684:	f7ff fe80 	bl	8002388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002688:	480c      	ldr	r0, [pc, #48]	; (80026bc <LoopForever+0x6>)
  ldr r1, =_edata
 800268a:	490d      	ldr	r1, [pc, #52]	; (80026c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <LoopForever+0xe>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026a0:	4c0a      	ldr	r4, [pc, #40]	; (80026cc <LoopForever+0x16>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ae:	f002 fab1 	bl	8004c14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026b2:	f7ff fcf3 	bl	800209c <main>

080026b6 <LoopForever>:

LoopForever:
  b LoopForever
 80026b6:	e7fe      	b.n	80026b6 <LoopForever>
  ldr   r0, =_estack
 80026b8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80026c4:	08005f98 	.word	0x08005f98
  ldr r2, =_sbss
 80026c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80026cc:	20000770 	.word	0x20000770

080026d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC1_IRQHandler>
	...

080026d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_Init+0x3c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_Init+0x3c>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0049      	lsls	r1, r1, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ee:	2003      	movs	r0, #3
 80026f0:	f000 f810 	bl	8002714 <HAL_InitTick>
 80026f4:	1e03      	subs	r3, r0, #0
 80026f6:	d003      	beq.n	8002700 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e001      	b.n	8002704 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002700:	f7ff fdea 	bl	80022d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781b      	ldrb	r3, [r3, #0]
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40022000 	.word	0x40022000

08002714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800271c:	230f      	movs	r3, #15
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_InitTick+0x88>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d02b      	beq.n	8002784 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_InitTick+0x8c>)
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_InitTick+0x88>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	0019      	movs	r1, r3
 8002736:	23fa      	movs	r3, #250	; 0xfa
 8002738:	0098      	lsls	r0, r3, #2
 800273a:	f7fd fce1 	bl	8000100 <__udivsi3>
 800273e:	0003      	movs	r3, r0
 8002740:	0019      	movs	r1, r3
 8002742:	0020      	movs	r0, r4
 8002744:	f7fd fcdc 	bl	8000100 <__udivsi3>
 8002748:	0003      	movs	r3, r0
 800274a:	0018      	movs	r0, r3
 800274c:	f000 f92f 	bl	80029ae <HAL_SYSTICK_Config>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d112      	bne.n	800277a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d80a      	bhi.n	8002770 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	2301      	movs	r3, #1
 800275e:	425b      	negs	r3, r3
 8002760:	2200      	movs	r2, #0
 8002762:	0018      	movs	r0, r3
 8002764:	f000 f8fe 	bl	8002964 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_InitTick+0x90>)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e00d      	b.n	800278c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002770:	230f      	movs	r3, #15
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e008      	b.n	800278c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800277a:	230f      	movs	r3, #15
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e003      	b.n	800278c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002784:	230f      	movs	r3, #15
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800278c:	230f      	movs	r3, #15
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	781b      	ldrb	r3, [r3, #0]
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b005      	add	sp, #20
 8002798:	bd90      	pop	{r4, r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	20000008 	.word	0x20000008
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000004 	.word	0x20000004

080027a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_IncTick+0x1c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	001a      	movs	r2, r3
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_IncTick+0x20>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	18d2      	adds	r2, r2, r3
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_IncTick+0x20>)
 80027ba:	601a      	str	r2, [r3, #0]
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	20000008 	.word	0x20000008
 80027c8:	2000076c 	.word	0x2000076c

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b02      	ldr	r3, [pc, #8]	; (80027dc <HAL_GetTick+0x10>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	0018      	movs	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	2000076c 	.word	0x2000076c

080027e0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b002      	add	sp, #8
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	40010000 	.word	0x40010000
 8002808:	fffff9ff 	.word	0xfffff9ff

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	0002      	movs	r2, r0
 8002814:	1dfb      	adds	r3, r7, #7
 8002816:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b7f      	cmp	r3, #127	; 0x7f
 800281e:	d809      	bhi.n	8002834 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	001a      	movs	r2, r3
 8002826:	231f      	movs	r3, #31
 8002828:	401a      	ands	r2, r3
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <__NVIC_EnableIRQ+0x30>)
 800282c:	2101      	movs	r1, #1
 800282e:	4091      	lsls	r1, r2
 8002830:	000a      	movs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	0002      	movs	r2, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b7f      	cmp	r3, #127	; 0x7f
 8002854:	d828      	bhi.n	80028a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002856:	4a2f      	ldr	r2, [pc, #188]	; (8002914 <__NVIC_SetPriority+0xd4>)
 8002858:	1dfb      	adds	r3, r7, #7
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b25b      	sxtb	r3, r3
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	33c0      	adds	r3, #192	; 0xc0
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	589b      	ldr	r3, [r3, r2]
 8002866:	1dfa      	adds	r2, r7, #7
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	0011      	movs	r1, r2
 800286c:	2203      	movs	r2, #3
 800286e:	400a      	ands	r2, r1
 8002870:	00d2      	lsls	r2, r2, #3
 8002872:	21ff      	movs	r1, #255	; 0xff
 8002874:	4091      	lsls	r1, r2
 8002876:	000a      	movs	r2, r1
 8002878:	43d2      	mvns	r2, r2
 800287a:	401a      	ands	r2, r3
 800287c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	22ff      	movs	r2, #255	; 0xff
 8002884:	401a      	ands	r2, r3
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	0018      	movs	r0, r3
 800288c:	2303      	movs	r3, #3
 800288e:	4003      	ands	r3, r0
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002894:	481f      	ldr	r0, [pc, #124]	; (8002914 <__NVIC_SetPriority+0xd4>)
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b25b      	sxtb	r3, r3
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	430a      	orrs	r2, r1
 80028a0:	33c0      	adds	r3, #192	; 0xc0
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028a6:	e031      	b.n	800290c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <__NVIC_SetPriority+0xd8>)
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	0019      	movs	r1, r3
 80028b0:	230f      	movs	r3, #15
 80028b2:	400b      	ands	r3, r1
 80028b4:	3b08      	subs	r3, #8
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3306      	adds	r3, #6
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	18d3      	adds	r3, r2, r3
 80028be:	3304      	adds	r3, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	1dfa      	adds	r2, r7, #7
 80028c4:	7812      	ldrb	r2, [r2, #0]
 80028c6:	0011      	movs	r1, r2
 80028c8:	2203      	movs	r2, #3
 80028ca:	400a      	ands	r2, r1
 80028cc:	00d2      	lsls	r2, r2, #3
 80028ce:	21ff      	movs	r1, #255	; 0xff
 80028d0:	4091      	lsls	r1, r2
 80028d2:	000a      	movs	r2, r1
 80028d4:	43d2      	mvns	r2, r2
 80028d6:	401a      	ands	r2, r3
 80028d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	401a      	ands	r2, r3
 80028e2:	1dfb      	adds	r3, r7, #7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	0018      	movs	r0, r3
 80028e8:	2303      	movs	r3, #3
 80028ea:	4003      	ands	r3, r0
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f0:	4809      	ldr	r0, [pc, #36]	; (8002918 <__NVIC_SetPriority+0xd8>)
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	001c      	movs	r4, r3
 80028f8:	230f      	movs	r3, #15
 80028fa:	4023      	ands	r3, r4
 80028fc:	3b08      	subs	r3, #8
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	430a      	orrs	r2, r1
 8002902:	3306      	adds	r3, #6
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	18c3      	adds	r3, r0, r3
 8002908:	3304      	adds	r3, #4
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b003      	add	sp, #12
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	e000e100 	.word	0xe000e100
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	1e5a      	subs	r2, r3, #1
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	045b      	lsls	r3, r3, #17
 800292c:	429a      	cmp	r2, r3
 800292e:	d301      	bcc.n	8002934 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002930:	2301      	movs	r3, #1
 8002932:	e010      	b.n	8002956 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <SysTick_Config+0x44>)
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	3a01      	subs	r2, #1
 800293a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293c:	2301      	movs	r3, #1
 800293e:	425b      	negs	r3, r3
 8002940:	2103      	movs	r1, #3
 8002942:	0018      	movs	r0, r3
 8002944:	f7ff ff7c 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x44>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x44>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b002      	add	sp, #8
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	210f      	movs	r1, #15
 8002970:	187b      	adds	r3, r7, r1
 8002972:	1c02      	adds	r2, r0, #0
 8002974:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	187b      	adds	r3, r7, r1
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b25b      	sxtb	r3, r3
 800297e:	0011      	movs	r1, r2
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	0002      	movs	r2, r0
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b25b      	sxtb	r3, r3
 80029a0:	0018      	movs	r0, r3
 80029a2:	f7ff ff33 	bl	800280c <__NVIC_EnableIRQ>
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7ff ffaf 	bl	800291c <SysTick_Config>
 80029be:	0003      	movs	r3, r0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e077      	b.n	8002aca <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a3d      	ldr	r2, [pc, #244]	; (8002ad4 <HAL_DMA_Init+0x10c>)
 80029e0:	4694      	mov	ip, r2
 80029e2:	4463      	add	r3, ip
 80029e4:	2114      	movs	r1, #20
 80029e6:	0018      	movs	r0, r3
 80029e8:	f7fd fb8a 	bl	8000100 <__udivsi3>
 80029ec:	0003      	movs	r3, r0
 80029ee:	009a      	lsls	r2, r3, #2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2225      	movs	r2, #37	; 0x25
 80029f8:	2102      	movs	r1, #2
 80029fa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4934      	ldr	r1, [pc, #208]	; (8002ad8 <HAL_DMA_Init+0x110>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f9c1 	bl	8002dcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	01db      	lsls	r3, r3, #7
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d102      	bne.n	8002a5c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	213f      	movs	r1, #63	; 0x3f
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a72:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d011      	beq.n	8002aa0 <HAL_DMA_Init+0xd8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d80d      	bhi.n	8002aa0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 f9cc 	bl	8002e24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	e008      	b.n	8002ab2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2225      	movs	r2, #37	; 0x25
 8002abc:	2101      	movs	r1, #1
 8002abe:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	bffdfff8 	.word	0xbffdfff8
 8002ad8:	ffff800f 	.word	0xffff800f

08002adc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2317      	movs	r3, #23
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2224      	movs	r2, #36	; 0x24
 8002af6:	5c9b      	ldrb	r3, [r3, r2]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_DMA_Start_IT+0x24>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e06f      	b.n	8002be0 <HAL_DMA_Start_IT+0x104>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	2101      	movs	r1, #1
 8002b06:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2225      	movs	r2, #37	; 0x25
 8002b0c:	5c9b      	ldrb	r3, [r3, r2]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d157      	bne.n	8002bc4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2225      	movs	r2, #37	; 0x25
 8002b18:	2102      	movs	r1, #2
 8002b1a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	438a      	bics	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f907 	bl	8002d4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	210e      	movs	r1, #14
 8002b52:	430a      	orrs	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e00f      	b.n	8002b78 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2104      	movs	r1, #4
 8002b64:	438a      	bics	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	210a      	movs	r1, #10
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	025b      	lsls	r3, r3, #9
 8002b82:	4013      	ands	r3, r2
 8002b84:	d008      	beq.n	8002b98 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0049      	lsls	r1, r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	0049      	lsls	r1, r1, #1
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00a      	b.n	8002bda <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2224      	movs	r2, #36	; 0x24
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002bd2:	2317      	movs	r3, #23
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002bda:	2317      	movs	r3, #23
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	781b      	ldrb	r3, [r3, #0]
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b006      	add	sp, #24
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002bf0:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <HAL_DMA_IRQHandler+0x160>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	221c      	movs	r2, #28
 8002c04:	4013      	ands	r3, r2
 8002c06:	2204      	movs	r2, #4
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x7a>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2204      	movs	r2, #4
 8002c16:	4013      	ands	r3, r2
 8002c18:	d023      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2220      	movs	r2, #32
 8002c22:	4013      	ands	r3, r2
 8002c24:	d107      	bne.n	8002c36 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2104      	movs	r1, #4
 8002c32:	438a      	bics	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002c36:	4b44      	ldr	r3, [pc, #272]	; (8002d48 <HAL_DMA_IRQHandler+0x160>)
 8002c38:	6859      	ldr	r1, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	221c      	movs	r2, #28
 8002c40:	4013      	ands	r3, r2
 8002c42:	2204      	movs	r2, #4
 8002c44:	409a      	lsls	r2, r3
 8002c46:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_DMA_IRQHandler+0x160>)
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d100      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x6e>
 8002c54:	e073      	b.n	8002d3e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	0010      	movs	r0, r2
 8002c5e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002c60:	e06d      	b.n	8002d3e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	221c      	movs	r2, #28
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	0013      	movs	r3, r2
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	d02e      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0xec>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d02a      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2220      	movs	r2, #32
 8002c86:	4013      	ands	r3, r2
 8002c88:	d10b      	bne.n	8002ca2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	210a      	movs	r1, #10
 8002c96:	438a      	bics	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2225      	movs	r2, #37	; 0x25
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002ca2:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_DMA_IRQHandler+0x160>)
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	221c      	movs	r2, #28
 8002cac:	4013      	ands	r3, r2
 8002cae:	2202      	movs	r2, #2
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	4b25      	ldr	r3, [pc, #148]	; (8002d48 <HAL_DMA_IRQHandler+0x160>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	; 0x24
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03a      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	0010      	movs	r0, r2
 8002cd0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002cd2:	e034      	b.n	8002d3e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	221c      	movs	r2, #28
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2208      	movs	r2, #8
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d02b      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x158>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2208      	movs	r2, #8
 8002cec:	4013      	ands	r3, r2
 8002cee:	d027      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	210e      	movs	r1, #14
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_DMA_IRQHandler+0x160>)
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	221c      	movs	r2, #28
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_DMA_IRQHandler+0x160>)
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2225      	movs	r2, #37	; 0x25
 8002d20:	2101      	movs	r1, #1
 8002d22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	; 0x24
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	46c0      	nop			; (mov r8, r8)
}
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b004      	add	sp, #16
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40020000 	.word	0x40020000

08002d4c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d74:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <DMA_SetConfig+0x7c>)
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	221c      	movs	r2, #28
 8002d80:	4013      	ands	r3, r2
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <DMA_SetConfig+0x7c>)
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d108      	bne.n	8002dae <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dac:	e007      	b.n	8002dbe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	60da      	str	r2, [r3, #12]
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40020000 	.word	0x40020000

08002dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002ddc:	4694      	mov	ip, r2
 8002dde:	4463      	add	r3, ip
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	001a      	movs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	001a      	movs	r2, r3
 8002dee:	23ff      	movs	r3, #255	; 0xff
 8002df0:	4013      	ands	r3, r2
 8002df2:	3b08      	subs	r3, #8
 8002df4:	2114      	movs	r1, #20
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fd f982 	bl	8000100 <__udivsi3>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002e04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	221f      	movs	r2, #31
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b004      	add	sp, #16
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	10008200 	.word	0x10008200
 8002e20:	40020880 	.word	0x40020880

08002e24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e3a:	4694      	mov	ip, r2
 8002e3c:	4463      	add	r3, ip
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	001a      	movs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	4013      	ands	r3, r2
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	1000823f 	.word	0x1000823f
 8002e68:	40020940 	.word	0x40020940

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7a:	e147      	b.n	800310c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4091      	lsls	r1, r2
 8002e86:	000a      	movs	r2, r1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d100      	bne.n	8002e94 <HAL_GPIO_Init+0x28>
 8002e92:	e138      	b.n	8003106 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d005      	beq.n	8002eac <HAL_GPIO_Init+0x40>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d130      	bne.n	8002f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	0013      	movs	r3, r2
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	0013      	movs	r3, r2
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	0013      	movs	r3, r2
 8002eea:	43da      	mvns	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	2201      	movs	r2, #1
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
 8002f00:	0013      	movs	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2203      	movs	r2, #3
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d017      	beq.n	8002f4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	409a      	lsls	r2, r3
 8002f28:	0013      	movs	r3, r2
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d123      	bne.n	8002f9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	58d3      	ldr	r3, [r2, r3]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2207      	movs	r2, #7
 8002f68:	4013      	ands	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	0013      	movs	r3, r2
 8002f72:	43da      	mvns	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2107      	movs	r1, #7
 8002f82:	400b      	ands	r3, r1
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	409a      	lsls	r2, r3
 8002f88:	0013      	movs	r3, r2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	08da      	lsrs	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3208      	adds	r2, #8
 8002f98:	0092      	lsls	r2, r2, #2
 8002f9a:	6939      	ldr	r1, [r7, #16]
 8002f9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	409a      	lsls	r2, r3
 8002fac:	0013      	movs	r3, r2
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	0013      	movs	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	23c0      	movs	r3, #192	; 0xc0
 8002fd8:	029b      	lsls	r3, r3, #10
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d100      	bne.n	8002fe0 <HAL_GPIO_Init+0x174>
 8002fde:	e092      	b.n	8003106 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002fe0:	4a50      	ldr	r2, [pc, #320]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3318      	adds	r3, #24
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	589b      	ldr	r3, [r3, r2]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	23a0      	movs	r3, #160	; 0xa0
 8003008:	05db      	lsls	r3, r3, #23
 800300a:	429a      	cmp	r2, r3
 800300c:	d013      	beq.n	8003036 <HAL_GPIO_Init+0x1ca>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a45      	ldr	r2, [pc, #276]	; (8003128 <HAL_GPIO_Init+0x2bc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00d      	beq.n	8003032 <HAL_GPIO_Init+0x1c6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a44      	ldr	r2, [pc, #272]	; (800312c <HAL_GPIO_Init+0x2c0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <HAL_GPIO_Init+0x1c2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a43      	ldr	r2, [pc, #268]	; (8003130 <HAL_GPIO_Init+0x2c4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_GPIO_Init+0x1be>
 8003026:	2303      	movs	r3, #3
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x1cc>
 800302a:	2305      	movs	r3, #5
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x1cc>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x1cc>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x1cc>
 8003036:	2300      	movs	r3, #0
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	2103      	movs	r1, #3
 800303c:	400a      	ands	r2, r1
 800303e:	00d2      	lsls	r2, r2, #3
 8003040:	4093      	lsls	r3, r2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003048:	4936      	ldr	r1, [pc, #216]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3318      	adds	r3, #24
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003056:	4a33      	ldr	r2, [pc, #204]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	58d3      	ldr	r3, [r2, r3]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	43da      	mvns	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	025b      	lsls	r3, r3, #9
 8003070:	4013      	ands	r3, r2
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800307c:	4929      	ldr	r1, [pc, #164]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 8003086:	2384      	movs	r3, #132	; 0x84
 8003088:	58d3      	ldr	r3, [r2, r3]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43da      	mvns	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	029b      	lsls	r3, r3, #10
 800309e:	4013      	ands	r3, r2
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030aa:	491e      	ldr	r1, [pc, #120]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 80030ac:	2284      	movs	r2, #132	; 0x84
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	035b      	lsls	r3, r3, #13
 80030ca:	4013      	ands	r3, r2
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d6:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	039b      	lsls	r3, r3, #14
 80030f4:	4013      	ands	r3, r2
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_GPIO_Init+0x2b8>)
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	40da      	lsrs	r2, r3
 8003114:	1e13      	subs	r3, r2, #0
 8003116:	d000      	beq.n	800311a <HAL_GPIO_Init+0x2ae>
 8003118:	e6b0      	b.n	8002e7c <HAL_GPIO_Init+0x10>
  }
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b006      	add	sp, #24
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021800 	.word	0x40021800
 8003128:	50000400 	.word	0x50000400
 800312c:	50000800 	.word	0x50000800
 8003130:	50000c00 	.word	0x50000c00

08003134 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003142:	4013      	ands	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d11f      	bne.n	8003198 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	0013      	movs	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	189b      	adds	r3, r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4912      	ldr	r1, [pc, #72]	; (80031b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003166:	0018      	movs	r0, r3
 8003168:	f7fc ffca 	bl	8000100 <__udivsi3>
 800316c:	0003      	movs	r3, r0
 800316e:	3301      	adds	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003172:	e008      	b.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3b01      	subs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e001      	b.n	8003186 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e009      	b.n	800319a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	401a      	ands	r2, r3
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	429a      	cmp	r2, r3
 8003196:	d0ed      	beq.n	8003174 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	40007000 	.word	0x40007000
 80031a8:	fffff9ff 	.word	0xfffff9ff
 80031ac:	20000000 	.word	0x20000000
 80031b0:	000f4240 	.word	0x000f4240

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e2f9      	b.n	80037ba <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2201      	movs	r2, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d100      	bne.n	80031d2 <HAL_RCC_OscConfig+0x1e>
 80031d0:	e07c      	b.n	80032cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d2:	4bc3      	ldr	r3, [pc, #780]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2238      	movs	r2, #56	; 0x38
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031dc:	4bc0      	ldr	r3, [pc, #768]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2203      	movs	r2, #3
 80031e2:	4013      	ands	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0x3e>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d002      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4bb9      	ldr	r3, [pc, #740]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	029b      	lsls	r3, r3, #10
 8003200:	4013      	ands	r3, r2
 8003202:	d062      	beq.n	80032ca <HAL_RCC_OscConfig+0x116>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d15e      	bne.n	80032ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e2d4      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	025b      	lsls	r3, r3, #9
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x78>
 800321c:	4bb0      	ldr	r3, [pc, #704]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4baf      	ldr	r3, [pc, #700]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	0249      	lsls	r1, r1, #9
 8003226:	430a      	orrs	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e020      	b.n	800326e <HAL_RCC_OscConfig+0xba>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	23a0      	movs	r3, #160	; 0xa0
 8003232:	02db      	lsls	r3, r3, #11
 8003234:	429a      	cmp	r2, r3
 8003236:	d10e      	bne.n	8003256 <HAL_RCC_OscConfig+0xa2>
 8003238:	4ba9      	ldr	r3, [pc, #676]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4ba8      	ldr	r3, [pc, #672]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800323e:	2180      	movs	r1, #128	; 0x80
 8003240:	02c9      	lsls	r1, r1, #11
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	4ba6      	ldr	r3, [pc, #664]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4ba5      	ldr	r3, [pc, #660]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800324c:	2180      	movs	r1, #128	; 0x80
 800324e:	0249      	lsls	r1, r1, #9
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0xba>
 8003256:	4ba2      	ldr	r3, [pc, #648]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4ba1      	ldr	r3, [pc, #644]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800325c:	49a1      	ldr	r1, [pc, #644]	; (80034e4 <HAL_RCC_OscConfig+0x330>)
 800325e:	400a      	ands	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	4b9f      	ldr	r3, [pc, #636]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b9e      	ldr	r3, [pc, #632]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003268:	499f      	ldr	r1, [pc, #636]	; (80034e8 <HAL_RCC_OscConfig+0x334>)
 800326a:	400a      	ands	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7ff faa9 	bl	80027cc <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7ff faa4 	bl	80027cc <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e293      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003292:	4b93      	ldr	r3, [pc, #588]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	029b      	lsls	r3, r3, #10
 800329a:	4013      	ands	r3, r2
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xcc>
 800329e:	e015      	b.n	80032cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7ff fa94 	bl	80027cc <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032aa:	f7ff fa8f 	bl	80027cc <HAL_GetTick>
 80032ae:	0002      	movs	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e27e      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032bc:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	029b      	lsls	r3, r3, #10
 80032c4:	4013      	ands	r3, r2
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCC_OscConfig+0xf6>
 80032c8:	e000      	b.n	80032cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2202      	movs	r2, #2
 80032d2:	4013      	ands	r3, r2
 80032d4:	d100      	bne.n	80032d8 <HAL_RCC_OscConfig+0x124>
 80032d6:	e099      	b.n	800340c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d8:	4b81      	ldr	r3, [pc, #516]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2238      	movs	r2, #56	; 0x38
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e2:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2203      	movs	r2, #3
 80032e8:	4013      	ands	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d102      	bne.n	80032f8 <HAL_RCC_OscConfig+0x144>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d002      	beq.n	80032fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d135      	bne.n	800336a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032fe:	4b78      	ldr	r3, [pc, #480]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4013      	ands	r3, r2
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x162>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e251      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a74      	ldr	r2, [pc, #464]	; (80034ec <HAL_RCC_OscConfig+0x338>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	4b6e      	ldr	r3, [pc, #440]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d112      	bne.n	8003358 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003332:	4b6b      	ldr	r3, [pc, #428]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6e      	ldr	r2, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x33c>)
 8003338:	4013      	ands	r3, r2
 800333a:	0019      	movs	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	4b67      	ldr	r3, [pc, #412]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003346:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0adb      	lsrs	r3, r3, #11
 800334c:	2207      	movs	r2, #7
 800334e:	4013      	ands	r3, r2
 8003350:	4a68      	ldr	r2, [pc, #416]	; (80034f4 <HAL_RCC_OscConfig+0x340>)
 8003352:	40da      	lsrs	r2, r3
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_OscConfig+0x344>)
 8003356:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003358:	4b68      	ldr	r3, [pc, #416]	; (80034fc <HAL_RCC_OscConfig+0x348>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0018      	movs	r0, r3
 800335e:	f7ff f9d9 	bl	8002714 <HAL_InitTick>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d051      	beq.n	800340a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e227      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d030      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <HAL_RCC_OscConfig+0x33c>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	4b57      	ldr	r3, [pc, #348]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003382:	430a      	orrs	r2, r1
 8003384:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	0049      	lsls	r1, r1, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7ff fa1a 	bl	80027cc <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339e:	f7ff fa15 	bl	80027cc <HAL_GetTick>
 80033a2:	0002      	movs	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e204      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4013      	ands	r3, r2
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <HAL_RCC_OscConfig+0x338>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	0019      	movs	r1, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	021a      	lsls	r2, r3, #8
 80033cc:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e01b      	b.n	800340c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80033d4:	4b42      	ldr	r3, [pc, #264]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80033da:	4949      	ldr	r1, [pc, #292]	; (8003500 <HAL_RCC_OscConfig+0x34c>)
 80033dc:	400a      	ands	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7ff f9f4 	bl	80027cc <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7ff f9ef 	bl	80027cc <HAL_GetTick>
 80033ee:	0002      	movs	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1de      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4013      	ands	r3, r2
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x236>
 8003408:	e000      	b.n	800340c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800340a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2208      	movs	r2, #8
 8003412:	4013      	ands	r3, r2
 8003414:	d047      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003416:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2238      	movs	r2, #56	; 0x38
 800341c:	4013      	ands	r3, r2
 800341e:	2b18      	cmp	r3, #24
 8003420:	d10a      	bne.n	8003438 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003422:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	2202      	movs	r2, #2
 8003428:	4013      	ands	r3, r2
 800342a:	d03c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2f2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d138      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e1c0      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d019      	beq.n	8003474 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003442:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003444:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003446:	2101      	movs	r1, #1
 8003448:	430a      	orrs	r2, r1
 800344a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7ff f9be 	bl	80027cc <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003456:	f7ff f9b9 	bl	80027cc <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e1a8      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	2202      	movs	r2, #2
 800346e:	4013      	ands	r3, r2
 8003470:	d0f1      	beq.n	8003456 <HAL_RCC_OscConfig+0x2a2>
 8003472:	e018      	b.n	80034a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 8003476:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800347a:	2101      	movs	r1, #1
 800347c:	438a      	bics	r2, r1
 800347e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7ff f9a4 	bl	80027cc <HAL_GetTick>
 8003484:	0003      	movs	r3, r0
 8003486:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348a:	f7ff f99f 	bl	80027cc <HAL_GetTick>
 800348e:	0002      	movs	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e18e      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800349c:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	2202      	movs	r2, #2
 80034a2:	4013      	ands	r3, r2
 80034a4:	d1f1      	bne.n	800348a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2204      	movs	r2, #4
 80034ac:	4013      	ands	r3, r2
 80034ae:	d100      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2fe>
 80034b0:	e0c6      	b.n	8003640 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	231f      	movs	r3, #31
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2238      	movs	r2, #56	; 0x38
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d11e      	bne.n	8003504 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCC_OscConfig+0x32c>)
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	d100      	bne.n	80034d2 <HAL_RCC_OscConfig+0x31e>
 80034d0:	e0b6      	b.n	8003640 <HAL_RCC_OscConfig+0x48c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d000      	beq.n	80034dc <HAL_RCC_OscConfig+0x328>
 80034da:	e0b1      	b.n	8003640 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e16c      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	fffeffff 	.word	0xfffeffff
 80034e8:	fffbffff 	.word	0xfffbffff
 80034ec:	ffff80ff 	.word	0xffff80ff
 80034f0:	ffffc7ff 	.word	0xffffc7ff
 80034f4:	00f42400 	.word	0x00f42400
 80034f8:	20000000 	.word	0x20000000
 80034fc:	20000004 	.word	0x20000004
 8003500:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003504:	4baf      	ldr	r3, [pc, #700]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	055b      	lsls	r3, r3, #21
 800350c:	4013      	ands	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_RCC_OscConfig+0x360>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <HAL_RCC_OscConfig+0x362>
 8003514:	2300      	movs	r3, #0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d011      	beq.n	800353e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	4baa      	ldr	r3, [pc, #680]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800351c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800351e:	4ba9      	ldr	r3, [pc, #676]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0549      	lsls	r1, r1, #21
 8003524:	430a      	orrs	r2, r1
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
 8003528:	4ba6      	ldr	r3, [pc, #664]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800352a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	055b      	lsls	r3, r3, #21
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003536:	231f      	movs	r3, #31
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353e:	4ba2      	ldr	r3, [pc, #648]	; (80037c8 <HAL_RCC_OscConfig+0x614>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4013      	ands	r3, r2
 8003548:	d11a      	bne.n	8003580 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354a:	4b9f      	ldr	r3, [pc, #636]	; (80037c8 <HAL_RCC_OscConfig+0x614>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b9e      	ldr	r3, [pc, #632]	; (80037c8 <HAL_RCC_OscConfig+0x614>)
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0049      	lsls	r1, r1, #1
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003558:	f7ff f938 	bl	80027cc <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7ff f933 	bl	80027cc <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e122      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003574:	4b94      	ldr	r3, [pc, #592]	; (80037c8 <HAL_RCC_OscConfig+0x614>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4013      	ands	r3, r2
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x3e2>
 8003588:	4b8e      	ldr	r3, [pc, #568]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800358a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358c:	4b8d      	ldr	r3, [pc, #564]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800358e:	2101      	movs	r1, #1
 8003590:	430a      	orrs	r2, r1
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
 8003594:	e01c      	b.n	80035d0 <HAL_RCC_OscConfig+0x41c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x404>
 800359e:	4b89      	ldr	r3, [pc, #548]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035a2:	4b88      	ldr	r3, [pc, #544]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035a4:	2104      	movs	r1, #4
 80035a6:	430a      	orrs	r2, r1
 80035a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80035aa:	4b86      	ldr	r3, [pc, #536]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035ae:	4b85      	ldr	r3, [pc, #532]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035b0:	2101      	movs	r1, #1
 80035b2:	430a      	orrs	r2, r1
 80035b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x41c>
 80035b8:	4b82      	ldr	r3, [pc, #520]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035bc:	4b81      	ldr	r3, [pc, #516]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035be:	2101      	movs	r1, #1
 80035c0:	438a      	bics	r2, r1
 80035c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80035c4:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035c8:	4b7e      	ldr	r3, [pc, #504]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035ca:	2104      	movs	r1, #4
 80035cc:	438a      	bics	r2, r1
 80035ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7ff f8f8 	bl	80027cc <HAL_GetTick>
 80035dc:	0003      	movs	r3, r0
 80035de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e0:	e009      	b.n	80035f6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7ff f8f3 	bl	80027cc <HAL_GetTick>
 80035e6:	0002      	movs	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	4a77      	ldr	r2, [pc, #476]	; (80037cc <HAL_RCC_OscConfig+0x618>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e0e1      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	4b73      	ldr	r3, [pc, #460]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x42e>
 8003600:	e013      	b.n	800362a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7ff f8e3 	bl	80027cc <HAL_GetTick>
 8003606:	0003      	movs	r3, r0
 8003608:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800360a:	e009      	b.n	8003620 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7ff f8de 	bl	80027cc <HAL_GetTick>
 8003610:	0002      	movs	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	4a6d      	ldr	r2, [pc, #436]	; (80037cc <HAL_RCC_OscConfig+0x618>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0cc      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003620:	4b68      	ldr	r3, [pc, #416]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2202      	movs	r2, #2
 8003626:	4013      	ands	r3, r2
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800362a:	231f      	movs	r3, #31
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b63      	ldr	r3, [pc, #396]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003638:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800363a:	4965      	ldr	r1, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x61c>)
 800363c:	400a      	ands	r2, r1
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d100      	bne.n	800364a <HAL_RCC_OscConfig+0x496>
 8003648:	e0b6      	b.n	80037b8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364a:	4b5e      	ldr	r3, [pc, #376]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2238      	movs	r2, #56	; 0x38
 8003650:	4013      	ands	r3, r2
 8003652:	2b10      	cmp	r3, #16
 8003654:	d100      	bne.n	8003658 <HAL_RCC_OscConfig+0x4a4>
 8003656:	e07e      	b.n	8003756 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d153      	bne.n	8003708 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003660:	4b58      	ldr	r3, [pc, #352]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003666:	495b      	ldr	r1, [pc, #364]	; (80037d4 <HAL_RCC_OscConfig+0x620>)
 8003668:	400a      	ands	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7ff f8ae 	bl	80027cc <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7ff f8a9 	bl	80027cc <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e098      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	4b4e      	ldr	r3, [pc, #312]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	049b      	lsls	r3, r3, #18
 8003690:	4013      	ands	r3, r2
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003694:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a4f      	ldr	r2, [pc, #316]	; (80037d8 <HAL_RCC_OscConfig+0x624>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	431a      	orrs	r2, r3
 80036bc:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80036be:	430a      	orrs	r2, r1
 80036c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b3f      	ldr	r3, [pc, #252]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	0449      	lsls	r1, r1, #17
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80036d0:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	0549      	lsls	r1, r1, #21
 80036da:	430a      	orrs	r2, r1
 80036dc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7ff f875 	bl	80027cc <HAL_GetTick>
 80036e2:	0003      	movs	r3, r0
 80036e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7ff f870 	bl	80027cc <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e05f      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	4b32      	ldr	r3, [pc, #200]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	049b      	lsls	r3, r3, #18
 8003702:	4013      	ands	r3, r2
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x534>
 8003706:	e057      	b.n	80037b8 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800370e:	4931      	ldr	r1, [pc, #196]	; (80037d4 <HAL_RCC_OscConfig+0x620>)
 8003710:	400a      	ands	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800371a:	2103      	movs	r1, #3
 800371c:	438a      	bics	r2, r1
 800371e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003726:	492d      	ldr	r1, [pc, #180]	; (80037dc <HAL_RCC_OscConfig+0x628>)
 8003728:	400a      	ands	r2, r1
 800372a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7ff f84e 	bl	80027cc <HAL_GetTick>
 8003730:	0003      	movs	r3, r0
 8003732:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7ff f849 	bl	80027cc <HAL_GetTick>
 800373a:	0002      	movs	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e038      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	049b      	lsls	r3, r3, #18
 8003750:	4013      	ands	r3, r2
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x582>
 8003754:	e030      	b.n	80037b8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02b      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_RCC_OscConfig+0x610>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2203      	movs	r2, #3
 800376c:	401a      	ands	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	429a      	cmp	r2, r3
 8003774:	d11e      	bne.n	80037b4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2270      	movs	r2, #112	; 0x70
 800377a:	401a      	ands	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d117      	bne.n	80037b4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	23fe      	movs	r3, #254	; 0xfe
 8003788:	01db      	lsls	r3, r3, #7
 800378a:	401a      	ands	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d10e      	bne.n	80037b4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	23f8      	movs	r3, #248	; 0xf8
 800379a:	039b      	lsls	r3, r3, #14
 800379c:	401a      	ands	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	0f5b      	lsrs	r3, r3, #29
 80037aa:	075a      	lsls	r2, r3, #29
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	0018      	movs	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	b008      	add	sp, #32
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40007000 	.word	0x40007000
 80037cc:	00001388 	.word	0x00001388
 80037d0:	efffffff 	.word	0xefffffff
 80037d4:	feffffff 	.word	0xfeffffff
 80037d8:	1fc1808c 	.word	0x1fc1808c
 80037dc:	effeffff 	.word	0xeffeffff

080037e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0e9      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f4:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2207      	movs	r2, #7
 80037fa:	4013      	ands	r3, r2
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d91e      	bls.n	8003840 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003802:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2207      	movs	r2, #7
 8003808:	4393      	bics	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	4b70      	ldr	r3, [pc, #448]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003814:	f7fe ffda 	bl	80027cc <HAL_GetTick>
 8003818:	0003      	movs	r3, r0
 800381a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800381c:	e009      	b.n	8003832 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381e:	f7fe ffd5 	bl	80027cc <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	4a6a      	ldr	r2, [pc, #424]	; (80039d4 <HAL_RCC_ClockConfig+0x1f4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0ca      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003832:	4b67      	ldr	r3, [pc, #412]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2207      	movs	r2, #7
 8003838:	4013      	ands	r3, r2
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d1ee      	bne.n	800381e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	4013      	ands	r3, r2
 8003848:	d015      	beq.n	8003876 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	4013      	ands	r3, r2
 8003852:	d006      	beq.n	8003862 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003854:	4b60      	ldr	r3, [pc, #384]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 800385a:	21e0      	movs	r1, #224	; 0xe0
 800385c:	01c9      	lsls	r1, r1, #7
 800385e:	430a      	orrs	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003862:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	4a5d      	ldr	r2, [pc, #372]	; (80039dc <HAL_RCC_ClockConfig+0x1fc>)
 8003868:	4013      	ands	r3, r2
 800386a:	0019      	movs	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2201      	movs	r2, #1
 800387c:	4013      	ands	r3, r2
 800387e:	d057      	beq.n	8003930 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	4013      	ands	r3, r2
 8003892:	d12b      	bne.n	80038ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e097      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	049b      	lsls	r3, r3, #18
 80038a8:	4013      	ands	r3, r2
 80038aa:	d11f      	bne.n	80038ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e08b      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4013      	ands	r3, r2
 80038c2:	d113      	bne.n	80038ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e07f      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d106      	bne.n	80038de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038d0:	4b41      	ldr	r3, [pc, #260]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	2202      	movs	r2, #2
 80038d6:	4013      	ands	r3, r2
 80038d8:	d108      	bne.n	80038ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e074      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	2202      	movs	r2, #2
 80038e4:	4013      	ands	r3, r2
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e06d      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ec:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2207      	movs	r2, #7
 80038f2:	4393      	bics	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038fc:	430a      	orrs	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003900:	f7fe ff64 	bl	80027cc <HAL_GetTick>
 8003904:	0003      	movs	r3, r0
 8003906:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003908:	e009      	b.n	800391e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390a:	f7fe ff5f 	bl	80027cc <HAL_GetTick>
 800390e:	0002      	movs	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <HAL_RCC_ClockConfig+0x1f4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e054      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2238      	movs	r2, #56	; 0x38
 8003924:	401a      	ands	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	429a      	cmp	r2, r3
 800392e:	d1ec      	bne.n	800390a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003930:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2207      	movs	r2, #7
 8003936:	4013      	ands	r3, r2
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d21e      	bcs.n	800397c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2207      	movs	r2, #7
 8003944:	4393      	bics	r3, r2
 8003946:	0019      	movs	r1, r3
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003950:	f7fe ff3c 	bl	80027cc <HAL_GetTick>
 8003954:	0003      	movs	r3, r0
 8003956:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003958:	e009      	b.n	800396e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395a:	f7fe ff37 	bl	80027cc <HAL_GetTick>
 800395e:	0002      	movs	r2, r0
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <HAL_RCC_ClockConfig+0x1f4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e02c      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800396e:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2207      	movs	r2, #7
 8003974:	4013      	ands	r3, r2
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d1ee      	bne.n	800395a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2204      	movs	r2, #4
 8003982:	4013      	ands	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <HAL_RCC_ClockConfig+0x200>)
 800398c:	4013      	ands	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800399a:	f000 f829 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 800399e:	0001      	movs	r1, r0
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	220f      	movs	r2, #15
 80039a8:	401a      	ands	r2, r3
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <HAL_RCC_ClockConfig+0x204>)
 80039ac:	0092      	lsls	r2, r2, #2
 80039ae:	58d3      	ldr	r3, [r2, r3]
 80039b0:	221f      	movs	r2, #31
 80039b2:	4013      	ands	r3, r2
 80039b4:	000a      	movs	r2, r1
 80039b6:	40da      	lsrs	r2, r3
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_ClockConfig+0x208>)
 80039ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_ClockConfig+0x20c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fe fea7 	bl	8002714 <HAL_InitTick>
 80039c6:	0003      	movs	r3, r0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40022000 	.word	0x40022000
 80039d4:	00001388 	.word	0x00001388
 80039d8:	40021000 	.word	0x40021000
 80039dc:	fffff0ff 	.word	0xfffff0ff
 80039e0:	ffff8fff 	.word	0xffff8fff
 80039e4:	08005d20 	.word	0x08005d20
 80039e8:	20000000 	.word	0x20000000
 80039ec:	20000004 	.word	0x20000004

080039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f6:	4b3c      	ldr	r3, [pc, #240]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2238      	movs	r2, #56	; 0x38
 80039fc:	4013      	ands	r3, r2
 80039fe:	d10f      	bne.n	8003a20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a00:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0adb      	lsrs	r3, r3, #11
 8003a06:	2207      	movs	r2, #7
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	0013      	movs	r3, r2
 8003a10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	4835      	ldr	r0, [pc, #212]	; (8003aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a16:	f7fc fb73 	bl	8000100 <__udivsi3>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	e05d      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a20:	4b31      	ldr	r3, [pc, #196]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2238      	movs	r2, #56	; 0x38
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d102      	bne.n	8003a32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a2c:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	e054      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a32:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2238      	movs	r2, #56	; 0x38
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d138      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2203      	movs	r2, #3
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	2207      	movs	r2, #7
 8003a50:	4013      	ands	r3, r2
 8003a52:	3301      	adds	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d10d      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4824      	ldr	r0, [pc, #144]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a60:	f7fc fb4e 	bl	8000100 <__udivsi3>
 8003a64:	0003      	movs	r3, r0
 8003a66:	0019      	movs	r1, r3
 8003a68:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	227f      	movs	r2, #127	; 0x7f
 8003a70:	4013      	ands	r3, r2
 8003a72:	434b      	muls	r3, r1
 8003a74:	617b      	str	r3, [r7, #20]
        break;
 8003a76:	e00d      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	481c      	ldr	r0, [pc, #112]	; (8003aec <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a7c:	f7fc fb40 	bl	8000100 <__udivsi3>
 8003a80:	0003      	movs	r3, r0
 8003a82:	0019      	movs	r1, r3
 8003a84:	4b18      	ldr	r3, [pc, #96]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	227f      	movs	r2, #127	; 0x7f
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	434b      	muls	r3, r1
 8003a90:	617b      	str	r3, [r7, #20]
        break;
 8003a92:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	0f5b      	lsrs	r3, r3, #29
 8003a9a:	2207      	movs	r2, #7
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	6978      	ldr	r0, [r7, #20]
 8003aa6:	f7fc fb2b 	bl	8000100 <__udivsi3>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	e015      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2238      	movs	r2, #56	; 0x38
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d103      	bne.n	8003ac4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2238      	movs	r2, #56	; 0x38
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b18      	cmp	r3, #24
 8003ace:	d103      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ad0:	23fa      	movs	r3, #250	; 0xfa
 8003ad2:	01db      	lsls	r3, r3, #7
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	e001      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003adc:	693b      	ldr	r3, [r7, #16]
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b006      	add	sp, #24
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	00f42400 	.word	0x00f42400
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e04a      	b.n	8003b9c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	223d      	movs	r2, #61	; 0x3d
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	223c      	movs	r2, #60	; 0x3c
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7fe fcf1 	bl	8002504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	223d      	movs	r2, #61	; 0x3d
 8003b26:	2102      	movs	r1, #2
 8003b28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	0019      	movs	r1, r3
 8003b34:	0010      	movs	r0, r2
 8003b36:	f000 fc01 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2248      	movs	r2, #72	; 0x48
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	223e      	movs	r2, #62	; 0x3e
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	223f      	movs	r2, #63	; 0x3f
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	2101      	movs	r1, #1
 8003b58:	5499      	strb	r1, [r3, r2]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2241      	movs	r2, #65	; 0x41
 8003b5e:	2101      	movs	r1, #1
 8003b60:	5499      	strb	r1, [r3, r2]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2242      	movs	r2, #66	; 0x42
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2243      	movs	r2, #67	; 0x43
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2244      	movs	r2, #68	; 0x44
 8003b76:	2101      	movs	r1, #1
 8003b78:	5499      	strb	r1, [r3, r2]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2245      	movs	r2, #69	; 0x45
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2246      	movs	r2, #70	; 0x46
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2247      	movs	r2, #71	; 0x47
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	223d      	movs	r2, #61	; 0x3d
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	1cbb      	adds	r3, r7, #2
 8003bb4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d108      	bne.n	8003bce <HAL_TIM_PWM_Start_DMA+0x2a>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	223e      	movs	r2, #62	; 0x3e
 8003bc0:	5c9b      	ldrb	r3, [r3, r2]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3b02      	subs	r3, #2
 8003bc6:	425a      	negs	r2, r3
 8003bc8:	4153      	adcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	e037      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x9a>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d108      	bne.n	8003be6 <HAL_TIM_PWM_Start_DMA+0x42>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	223f      	movs	r2, #63	; 0x3f
 8003bd8:	5c9b      	ldrb	r3, [r3, r2]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3b02      	subs	r3, #2
 8003bde:	425a      	negs	r2, r3
 8003be0:	4153      	adcs	r3, r2
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	e02b      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x9a>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d108      	bne.n	8003bfe <HAL_TIM_PWM_Start_DMA+0x5a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	5c9b      	ldrb	r3, [r3, r2]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3b02      	subs	r3, #2
 8003bf6:	425a      	negs	r2, r3
 8003bf8:	4153      	adcs	r3, r2
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e01f      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x9a>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d108      	bne.n	8003c16 <HAL_TIM_PWM_Start_DMA+0x72>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2241      	movs	r2, #65	; 0x41
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3b02      	subs	r3, #2
 8003c0e:	425a      	negs	r2, r3
 8003c10:	4153      	adcs	r3, r2
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	e013      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x9a>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d108      	bne.n	8003c2e <HAL_TIM_PWM_Start_DMA+0x8a>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2242      	movs	r2, #66	; 0x42
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	3b02      	subs	r3, #2
 8003c26:	425a      	negs	r2, r3
 8003c28:	4153      	adcs	r3, r2
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e007      	b.n	8003c3e <HAL_TIM_PWM_Start_DMA+0x9a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2243      	movs	r2, #67	; 0x43
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	3b02      	subs	r3, #2
 8003c38:	425a      	negs	r2, r3
 8003c3a:	4153      	adcs	r3, r2
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_TIM_PWM_Start_DMA+0xa2>
  {
    return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
 8003c44:	e182      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x3a8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <HAL_TIM_PWM_Start_DMA+0xba>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	223e      	movs	r2, #62	; 0x3e
 8003c50:	5c9b      	ldrb	r3, [r3, r2]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	425a      	negs	r2, r3
 8003c58:	4153      	adcs	r3, r2
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	e037      	b.n	8003cce <HAL_TIM_PWM_Start_DMA+0x12a>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d108      	bne.n	8003c76 <HAL_TIM_PWM_Start_DMA+0xd2>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	223f      	movs	r2, #63	; 0x3f
 8003c68:	5c9b      	ldrb	r3, [r3, r2]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	425a      	negs	r2, r3
 8003c70:	4153      	adcs	r3, r2
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	e02b      	b.n	8003cce <HAL_TIM_PWM_Start_DMA+0x12a>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d108      	bne.n	8003c8e <HAL_TIM_PWM_Start_DMA+0xea>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2240      	movs	r2, #64	; 0x40
 8003c80:	5c9b      	ldrb	r3, [r3, r2]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	425a      	negs	r2, r3
 8003c88:	4153      	adcs	r3, r2
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e01f      	b.n	8003cce <HAL_TIM_PWM_Start_DMA+0x12a>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	d108      	bne.n	8003ca6 <HAL_TIM_PWM_Start_DMA+0x102>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2241      	movs	r2, #65	; 0x41
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	425a      	negs	r2, r3
 8003ca0:	4153      	adcs	r3, r2
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e013      	b.n	8003cce <HAL_TIM_PWM_Start_DMA+0x12a>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d108      	bne.n	8003cbe <HAL_TIM_PWM_Start_DMA+0x11a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2242      	movs	r2, #66	; 0x42
 8003cb0:	5c9b      	ldrb	r3, [r3, r2]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	425a      	negs	r2, r3
 8003cb8:	4153      	adcs	r3, r2
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e007      	b.n	8003cce <HAL_TIM_PWM_Start_DMA+0x12a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2243      	movs	r2, #67	; 0x43
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	425a      	negs	r2, r3
 8003cca:	4153      	adcs	r3, r2
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d035      	beq.n	8003d3e <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    if ((pData == NULL) && (Length > 0U))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x140>
 8003cd8:	1cbb      	adds	r3, r7, #2
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_TIM_PWM_Start_DMA+0x140>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e133      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x3a8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_TIM_PWM_Start_DMA+0x150>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	223e      	movs	r2, #62	; 0x3e
 8003cee:	2102      	movs	r1, #2
 8003cf0:	5499      	strb	r1, [r3, r2]
 8003cf2:	e026      	b.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x19e>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d104      	bne.n	8003d04 <HAL_TIM_PWM_Start_DMA+0x160>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	223f      	movs	r2, #63	; 0x3f
 8003cfe:	2102      	movs	r1, #2
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	e01e      	b.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x19e>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d104      	bne.n	8003d14 <HAL_TIM_PWM_Start_DMA+0x170>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	2102      	movs	r1, #2
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	e016      	b.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x19e>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d104      	bne.n	8003d24 <HAL_TIM_PWM_Start_DMA+0x180>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2241      	movs	r2, #65	; 0x41
 8003d1e:	2102      	movs	r1, #2
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	e00e      	b.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x19e>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d104      	bne.n	8003d34 <HAL_TIM_PWM_Start_DMA+0x190>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2242      	movs	r2, #66	; 0x42
 8003d2e:	2102      	movs	r1, #2
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	e006      	b.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x19e>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2243      	movs	r2, #67	; 0x43
 8003d38:	2102      	movs	r1, #2
 8003d3a:	5499      	strb	r1, [r3, r2]
 8003d3c:	e001      	b.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x19e>
    }
  }
  else
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e104      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x3a8>
  }

  switch (Channel)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d100      	bne.n	8003d4a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003d48:	e080      	b.n	8003e4c <HAL_TIM_PWM_Start_DMA+0x2a8>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d900      	bls.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8003d50:	e0a1      	b.n	8003e96 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d054      	beq.n	8003e02 <HAL_TIM_PWM_Start_DMA+0x25e>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d900      	bls.n	8003d60 <HAL_TIM_PWM_Start_DMA+0x1bc>
 8003d5e:	e09a      	b.n	8003e96 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_PWM_Start_DMA+0x1ca>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d025      	beq.n	8003db8 <HAL_TIM_PWM_Start_DMA+0x214>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 8003d6c:	e093      	b.n	8003e96 <HAL_TIM_PWM_Start_DMA+0x2f2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	4a78      	ldr	r2, [pc, #480]	; (8003f54 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	4a77      	ldr	r2, [pc, #476]	; (8003f58 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	4a76      	ldr	r2, [pc, #472]	; (8003f5c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3334      	adds	r3, #52	; 0x34
 8003d92:	001a      	movs	r2, r3
 8003d94:	1cbb      	adds	r3, r7, #2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f7fe fea0 	bl	8002adc <HAL_DMA_Start_IT>
 8003d9c:	1e03      	subs	r3, r0, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_TIM_PWM_Start_DMA+0x200>
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0d3      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	0089      	lsls	r1, r1, #2
 8003db2:	430a      	orrs	r2, r1
 8003db4:	60da      	str	r2, [r3, #12]
      break;
 8003db6:	e06f      	b.n	8003e98 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	4a65      	ldr	r2, [pc, #404]	; (8003f54 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	4a64      	ldr	r2, [pc, #400]	; (8003f58 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	4a63      	ldr	r2, [pc, #396]	; (8003f5c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3338      	adds	r3, #56	; 0x38
 8003ddc:	001a      	movs	r2, r3
 8003dde:	1cbb      	adds	r3, r7, #2
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	f7fe fe7b 	bl	8002adc <HAL_DMA_Start_IT>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d001      	beq.n	8003dee <HAL_TIM_PWM_Start_DMA+0x24a>
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0ae      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	00c9      	lsls	r1, r1, #3
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]
      break;
 8003e00:	e04a      	b.n	8003e98 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	4a53      	ldr	r2, [pc, #332]	; (8003f54 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	4a51      	ldr	r2, [pc, #324]	; (8003f5c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	333c      	adds	r3, #60	; 0x3c
 8003e26:	001a      	movs	r2, r3
 8003e28:	1cbb      	adds	r3, r7, #2
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	f7fe fe56 	bl	8002adc <HAL_DMA_Start_IT>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_TIM_PWM_Start_DMA+0x294>
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e089      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	0109      	lsls	r1, r1, #4
 8003e46:	430a      	orrs	r2, r1
 8003e48:	60da      	str	r2, [r3, #12]
      break;
 8003e4a:	e025      	b.n	8003e98 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	4a40      	ldr	r2, [pc, #256]	; (8003f54 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4a3e      	ldr	r2, [pc, #248]	; (8003f5c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3340      	adds	r3, #64	; 0x40
 8003e70:	001a      	movs	r2, r3
 8003e72:	1cbb      	adds	r3, r7, #2
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	f7fe fe31 	bl	8002adc <HAL_DMA_Start_IT>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_TIM_PWM_Start_DMA+0x2de>
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e064      	b.n	8003f4c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	0149      	lsls	r1, r1, #5
 8003e90:	430a      	orrs	r2, r1
 8003e92:	60da      	str	r2, [r3, #12]
      break;
 8003e94:	e000      	b.n	8003e98 <HAL_TIM_PWM_Start_DMA+0x2f4>
      break;
 8003e96:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 fd85 	bl	80049b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_TIM_PWM_Start_DMA+0x32a>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_PWM_Start_DMA+0x32a>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_PWM_Start_DMA+0x32a>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_PWM_Start_DMA+0x32e>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x330>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_TIM_PWM_Start_DMA+0x346>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	0209      	lsls	r1, r1, #8
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d009      	beq.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x364>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_TIM_PWM_Start_DMA+0x364>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d116      	bne.n	8003f36 <HAL_TIM_PWM_Start_DMA+0x392>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d016      	beq.n	8003f48 <HAL_TIM_PWM_Start_DMA+0x3a4>
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	025b      	lsls	r3, r3, #9
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d011      	beq.n	8003f48 <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2101      	movs	r1, #1
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f34:	e008      	b.n	8003f48 <HAL_TIM_PWM_Start_DMA+0x3a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	430a      	orrs	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e000      	b.n	8003f4a <HAL_TIM_PWM_Start_DMA+0x3a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f48:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b006      	add	sp, #24
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08004229 	.word	0x08004229
 8003f58:	080042d3 	.word	0x080042d3
 8003f5c:	08004195 	.word	0x08004195
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800
 8003f70:	40000400 	.word	0x40000400
 8003f74:	00010007 	.word	0x00010007

08003f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	223c      	movs	r2, #60	; 0x3c
 8003f88:	5c9b      	ldrb	r3, [r3, r2]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0df      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	223c      	movs	r2, #60	; 0x3c
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b14      	cmp	r3, #20
 8003f9e:	d900      	bls.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003fa0:	e0d1      	b.n	8004146 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	009a      	lsls	r2, r3, #2
 8003fa6:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	0011      	movs	r1, r2
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 fa36 	bl	8004428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2108      	movs	r1, #8
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	438a      	bics	r2, r1
 8003fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6999      	ldr	r1, [r3, #24]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	619a      	str	r2, [r3, #24]
      break;
 8003fee:	e0ab      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 fa9f 	bl	800453c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2180      	movs	r1, #128	; 0x80
 800400a:	0109      	lsls	r1, r1, #4
 800400c:	430a      	orrs	r2, r1
 800400e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4951      	ldr	r1, [pc, #324]	; (8004160 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800401c:	400a      	ands	r2, r1
 800401e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6999      	ldr	r1, [r3, #24]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	619a      	str	r2, [r3, #24]
      break;
 8004034:	e088      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	0011      	movs	r1, r2
 800403e:	0018      	movs	r0, r3
 8004040:	f000 fb00 	bl	8004644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2108      	movs	r1, #8
 8004050:	430a      	orrs	r2, r1
 8004052:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2104      	movs	r1, #4
 8004060:	438a      	bics	r2, r1
 8004062:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69d9      	ldr	r1, [r3, #28]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	61da      	str	r2, [r3, #28]
      break;
 8004076:	e067      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	0011      	movs	r1, r2
 8004080:	0018      	movs	r0, r3
 8004082:	f000 fb67 	bl	8004754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	0109      	lsls	r1, r1, #4
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	492f      	ldr	r1, [pc, #188]	; (8004160 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69d9      	ldr	r1, [r3, #28]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	021a      	lsls	r2, r3, #8
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]
      break;
 80040bc:	e044      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	0011      	movs	r1, r2
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 fbae 	bl	8004828 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2108      	movs	r1, #8
 80040d8:	430a      	orrs	r2, r1
 80040da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2104      	movs	r1, #4
 80040e8:	438a      	bics	r2, r1
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040fe:	e023      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	0011      	movs	r1, r2
 8004108:	0018      	movs	r0, r3
 800410a:	f000 fbed 	bl	80048e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	0109      	lsls	r1, r1, #4
 800411c:	430a      	orrs	r2, r1
 800411e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	490d      	ldr	r1, [pc, #52]	; (8004160 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800412c:	400a      	ands	r2, r1
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	021a      	lsls	r2, r3, #8
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004144:	e000      	b.n	8004148 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8004146:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	223c      	movs	r2, #60	; 0x3c
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b004      	add	sp, #16
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	08005d60 	.word	0x08005d60
 8004160:	fffffbff 	.word	0xfffffbff

08004164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b002      	add	sp, #8
 8004192:	bd80      	pop	{r7, pc}

08004194 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	223e      	movs	r2, #62	; 0x3e
 80041b6:	2101      	movs	r1, #1
 80041b8:	5499      	strb	r1, [r3, r2]
 80041ba:	e02a      	b.n	8004212 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d107      	bne.n	80041d6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2202      	movs	r2, #2
 80041ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	223f      	movs	r2, #63	; 0x3f
 80041d0:	2101      	movs	r1, #1
 80041d2:	5499      	strb	r1, [r3, r2]
 80041d4:	e01d      	b.n	8004212 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d107      	bne.n	80041f0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2204      	movs	r2, #4
 80041e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2240      	movs	r2, #64	; 0x40
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]
 80041ee:	e010      	b.n	8004212 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d107      	bne.n	800420a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2208      	movs	r2, #8
 80041fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2241      	movs	r2, #65	; 0x41
 8004204:	2101      	movs	r1, #1
 8004206:	5499      	strb	r1, [r3, r2]
 8004208:	e003      	b.n	8004212 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	223d      	movs	r2, #61	; 0x3d
 800420e:	2101      	movs	r1, #1
 8004210:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff ffb5 	bl	8004184 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b004      	add	sp, #16
 8004226:	bd80      	pop	{r7, pc}

08004228 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d10b      	bne.n	8004258 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d136      	bne.n	80042bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	223e      	movs	r2, #62	; 0x3e
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]
 8004256:	e031      	b.n	80042bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d10b      	bne.n	800427a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2202      	movs	r2, #2
 8004266:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d125      	bne.n	80042bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	2101      	movs	r1, #1
 8004276:	5499      	strb	r1, [r3, r2]
 8004278:	e020      	b.n	80042bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d10b      	bne.n	800429c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2204      	movs	r2, #4
 8004288:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d114      	bne.n	80042bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2240      	movs	r2, #64	; 0x40
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]
 800429a:	e00f      	b.n	80042bc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d10a      	bne.n	80042bc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2208      	movs	r2, #8
 80042aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2241      	movs	r2, #65	; 0x41
 80042b8:	2101      	movs	r1, #1
 80042ba:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	0018      	movs	r0, r3
 80042c0:	f7ff ff50 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	771a      	strb	r2, [r3, #28]
}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b004      	add	sp, #16
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d103      	bne.n	80042f2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	771a      	strb	r2, [r3, #28]
 80042f0:	e019      	b.n	8004326 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d103      	bne.n	8004304 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2202      	movs	r2, #2
 8004300:	771a      	strb	r2, [r3, #28]
 8004302:	e010      	b.n	8004326 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d103      	bne.n	8004316 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2204      	movs	r2, #4
 8004312:	771a      	strb	r2, [r3, #28]
 8004314:	e007      	b.n	8004326 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d102      	bne.n	8004326 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2208      	movs	r2, #8
 8004324:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0018      	movs	r0, r3
 800432a:	f7ff ff23 	bl	8004174 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b004      	add	sp, #16
 800433a:	bd80      	pop	{r7, pc}

0800433c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a2f      	ldr	r2, [pc, #188]	; (800440c <TIM_Base_SetConfig+0xd0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x20>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a2e      	ldr	r2, [pc, #184]	; (8004410 <TIM_Base_SetConfig+0xd4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d108      	bne.n	800436e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2270      	movs	r2, #112	; 0x70
 8004360:	4393      	bics	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <TIM_Base_SetConfig+0xd0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <TIM_Base_SetConfig+0x62>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a25      	ldr	r2, [pc, #148]	; (8004410 <TIM_Base_SetConfig+0xd4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00f      	beq.n	800439e <TIM_Base_SetConfig+0x62>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <TIM_Base_SetConfig+0xd8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00b      	beq.n	800439e <TIM_Base_SetConfig+0x62>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <TIM_Base_SetConfig+0xdc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <TIM_Base_SetConfig+0x62>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a22      	ldr	r2, [pc, #136]	; (800441c <TIM_Base_SetConfig+0xe0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_Base_SetConfig+0x62>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a21      	ldr	r2, [pc, #132]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d108      	bne.n	80043b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a20      	ldr	r2, [pc, #128]	; (8004424 <TIM_Base_SetConfig+0xe8>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	4393      	bics	r3, r2
 80043b6:	001a      	movs	r2, r3
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a0c      	ldr	r2, [pc, #48]	; (800440c <TIM_Base_SetConfig+0xd0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <TIM_Base_SetConfig+0xba>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <TIM_Base_SetConfig+0xdc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <TIM_Base_SetConfig+0xba>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a0c      	ldr	r2, [pc, #48]	; (800441c <TIM_Base_SetConfig+0xe0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0xba>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a0b      	ldr	r2, [pc, #44]	; (8004420 <TIM_Base_SetConfig+0xe4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d103      	bne.n	80043fe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	615a      	str	r2, [r3, #20]
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b004      	add	sp, #16
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40000400 	.word	0x40000400
 8004414:	40002000 	.word	0x40002000
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800
 8004424:	fffffcff 	.word	0xfffffcff

08004428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	2201      	movs	r2, #1
 8004438:	4393      	bics	r3, r2
 800443a:	001a      	movs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a32      	ldr	r2, [pc, #200]	; (8004520 <TIM_OC1_SetConfig+0xf8>)
 8004456:	4013      	ands	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2203      	movs	r2, #3
 800445e:	4393      	bics	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2202      	movs	r2, #2
 8004470:	4393      	bics	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a28      	ldr	r2, [pc, #160]	; (8004524 <TIM_OC1_SetConfig+0xfc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_OC1_SetConfig+0x76>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <TIM_OC1_SetConfig+0x100>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_OC1_SetConfig+0x76>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a26      	ldr	r2, [pc, #152]	; (800452c <TIM_OC1_SetConfig+0x104>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_OC1_SetConfig+0x76>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a25      	ldr	r2, [pc, #148]	; (8004530 <TIM_OC1_SetConfig+0x108>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2208      	movs	r2, #8
 80044a2:	4393      	bics	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2204      	movs	r2, #4
 80044b4:	4393      	bics	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <TIM_OC1_SetConfig+0xfc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_OC1_SetConfig+0xb0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a19      	ldr	r2, [pc, #100]	; (8004528 <TIM_OC1_SetConfig+0x100>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_OC1_SetConfig+0xb0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a18      	ldr	r2, [pc, #96]	; (800452c <TIM_OC1_SetConfig+0x104>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_OC1_SetConfig+0xb0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a17      	ldr	r2, [pc, #92]	; (8004530 <TIM_OC1_SetConfig+0x108>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d111      	bne.n	80044fc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4a16      	ldr	r2, [pc, #88]	; (8004534 <TIM_OC1_SetConfig+0x10c>)
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <TIM_OC1_SetConfig+0x110>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	46bd      	mov	sp, r7
 800451a:	b006      	add	sp, #24
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	fffeff8f 	.word	0xfffeff8f
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40014000 	.word	0x40014000
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800
 8004534:	fffffeff 	.word	0xfffffeff
 8004538:	fffffdff 	.word	0xfffffdff

0800453c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	2210      	movs	r2, #16
 800454c:	4393      	bics	r3, r2
 800454e:	001a      	movs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a2e      	ldr	r2, [pc, #184]	; (8004624 <TIM_OC2_SetConfig+0xe8>)
 800456a:	4013      	ands	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <TIM_OC2_SetConfig+0xec>)
 8004572:	4013      	ands	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2220      	movs	r2, #32
 8004586:	4393      	bics	r3, r2
 8004588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a24      	ldr	r2, [pc, #144]	; (800462c <TIM_OC2_SetConfig+0xf0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10d      	bne.n	80045ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	4393      	bics	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2240      	movs	r2, #64	; 0x40
 80045b6:	4393      	bics	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1b      	ldr	r2, [pc, #108]	; (800462c <TIM_OC2_SetConfig+0xf0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_OC2_SetConfig+0x9e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1a      	ldr	r2, [pc, #104]	; (8004630 <TIM_OC2_SetConfig+0xf4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_OC2_SetConfig+0x9e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <TIM_OC2_SetConfig+0xf8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC2_SetConfig+0x9e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a18      	ldr	r2, [pc, #96]	; (8004638 <TIM_OC2_SetConfig+0xfc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d113      	bne.n	8004602 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4a17      	ldr	r2, [pc, #92]	; (800463c <TIM_OC2_SetConfig+0x100>)
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4a16      	ldr	r2, [pc, #88]	; (8004640 <TIM_OC2_SetConfig+0x104>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b006      	add	sp, #24
 8004622:	bd80      	pop	{r7, pc}
 8004624:	feff8fff 	.word	0xfeff8fff
 8004628:	fffffcff 	.word	0xfffffcff
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800
 800463c:	fffffbff 	.word	0xfffffbff
 8004640:	fffff7ff 	.word	0xfffff7ff

08004644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	4a35      	ldr	r2, [pc, #212]	; (8004728 <TIM_OC3_SetConfig+0xe4>)
 8004654:	401a      	ands	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a2f      	ldr	r2, [pc, #188]	; (800472c <TIM_OC3_SetConfig+0xe8>)
 8004670:	4013      	ands	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2203      	movs	r2, #3
 8004678:	4393      	bics	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	4a29      	ldr	r2, [pc, #164]	; (8004730 <TIM_OC3_SetConfig+0xec>)
 800468a:	4013      	ands	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a25      	ldr	r2, [pc, #148]	; (8004734 <TIM_OC3_SetConfig+0xf0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10d      	bne.n	80046be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4a24      	ldr	r2, [pc, #144]	; (8004738 <TIM_OC3_SetConfig+0xf4>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4a20      	ldr	r2, [pc, #128]	; (800473c <TIM_OC3_SetConfig+0xf8>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <TIM_OC3_SetConfig+0xf0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC3_SetConfig+0x9a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <TIM_OC3_SetConfig+0xfc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC3_SetConfig+0x9a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <TIM_OC3_SetConfig+0x100>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC3_SetConfig+0x9a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	; (8004748 <TIM_OC3_SetConfig+0x104>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d113      	bne.n	8004706 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	; (800474c <TIM_OC3_SetConfig+0x108>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4a19      	ldr	r2, [pc, #100]	; (8004750 <TIM_OC3_SetConfig+0x10c>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b006      	add	sp, #24
 8004726:	bd80      	pop	{r7, pc}
 8004728:	fffffeff 	.word	0xfffffeff
 800472c:	fffeff8f 	.word	0xfffeff8f
 8004730:	fffffdff 	.word	0xfffffdff
 8004734:	40012c00 	.word	0x40012c00
 8004738:	fffff7ff 	.word	0xfffff7ff
 800473c:	fffffbff 	.word	0xfffffbff
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800
 800474c:	ffffefff 	.word	0xffffefff
 8004750:	ffffdfff 	.word	0xffffdfff

08004754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	4a28      	ldr	r2, [pc, #160]	; (8004804 <TIM_OC4_SetConfig+0xb0>)
 8004764:	401a      	ands	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a22      	ldr	r2, [pc, #136]	; (8004808 <TIM_OC4_SetConfig+0xb4>)
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a21      	ldr	r2, [pc, #132]	; (800480c <TIM_OC4_SetConfig+0xb8>)
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <TIM_OC4_SetConfig+0xbc>)
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	031b      	lsls	r3, r3, #12
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a19      	ldr	r2, [pc, #100]	; (8004814 <TIM_OC4_SetConfig+0xc0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_OC4_SetConfig+0x78>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a18      	ldr	r2, [pc, #96]	; (8004818 <TIM_OC4_SetConfig+0xc4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC4_SetConfig+0x78>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a17      	ldr	r2, [pc, #92]	; (800481c <TIM_OC4_SetConfig+0xc8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC4_SetConfig+0x78>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a16      	ldr	r2, [pc, #88]	; (8004820 <TIM_OC4_SetConfig+0xcc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4a15      	ldr	r2, [pc, #84]	; (8004824 <TIM_OC4_SetConfig+0xd0>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b006      	add	sp, #24
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	ffffefff 	.word	0xffffefff
 8004808:	feff8fff 	.word	0xfeff8fff
 800480c:	fffffcff 	.word	0xfffffcff
 8004810:	ffffdfff 	.word	0xffffdfff
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800
 8004824:	ffffbfff 	.word	0xffffbfff

08004828 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4a25      	ldr	r2, [pc, #148]	; (80048cc <TIM_OC5_SetConfig+0xa4>)
 8004838:	401a      	ands	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <TIM_OC5_SetConfig+0xa8>)
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <TIM_OC5_SetConfig+0xac>)
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a17      	ldr	r2, [pc, #92]	; (80048d8 <TIM_OC5_SetConfig+0xb0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00b      	beq.n	8004896 <TIM_OC5_SetConfig+0x6e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a16      	ldr	r2, [pc, #88]	; (80048dc <TIM_OC5_SetConfig+0xb4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <TIM_OC5_SetConfig+0x6e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <TIM_OC5_SetConfig+0xb8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_OC5_SetConfig+0x6e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <TIM_OC5_SetConfig+0xbc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d109      	bne.n	80048aa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <TIM_OC5_SetConfig+0xa4>)
 800489a:	4013      	ands	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	621a      	str	r2, [r3, #32]
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b006      	add	sp, #24
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	fffeffff 	.word	0xfffeffff
 80048d0:	fffeff8f 	.word	0xfffeff8f
 80048d4:	fffdffff 	.word	0xfffdffff
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800

080048e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	4a26      	ldr	r2, [pc, #152]	; (8004990 <TIM_OC6_SetConfig+0xa8>)
 80048f8:	401a      	ands	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a20      	ldr	r2, [pc, #128]	; (8004994 <TIM_OC6_SetConfig+0xac>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <TIM_OC6_SetConfig+0xb0>)
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	051b      	lsls	r3, r3, #20
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a18      	ldr	r2, [pc, #96]	; (800499c <TIM_OC6_SetConfig+0xb4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00b      	beq.n	8004958 <TIM_OC6_SetConfig+0x70>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <TIM_OC6_SetConfig+0xb8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_OC6_SetConfig+0x70>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <TIM_OC6_SetConfig+0xbc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_OC6_SetConfig+0x70>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <TIM_OC6_SetConfig+0xc0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d109      	bne.n	800496c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <TIM_OC6_SetConfig+0xc4>)
 800495c:	4013      	ands	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b006      	add	sp, #24
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	ffefffff 	.word	0xffefffff
 8004994:	feff8fff 	.word	0xfeff8fff
 8004998:	ffdfffff 	.word	0xffdfffff
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40014400 	.word	0x40014400
 80049a8:	40014800 	.word	0x40014800
 80049ac:	fffbffff 	.word	0xfffbffff

080049b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	221f      	movs	r2, #31
 80049c0:	4013      	ands	r3, r2
 80049c2:	2201      	movs	r2, #1
 80049c4:	409a      	lsls	r2, r3
 80049c6:	0013      	movs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	43d2      	mvns	r2, r2
 80049d2:	401a      	ands	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	211f      	movs	r1, #31
 80049e0:	400b      	ands	r3, r1
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4099      	lsls	r1, r3
 80049e6:	000b      	movs	r3, r1
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b006      	add	sp, #24
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	223c      	movs	r2, #60	; 0x3c
 8004a06:	5c9b      	ldrb	r3, [r3, r2]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e04f      	b.n	8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	223c      	movs	r2, #60	; 0x3c
 8004a14:	2101      	movs	r1, #1
 8004a16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	223d      	movs	r2, #61	; 0x3d
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a20      	ldr	r2, [pc, #128]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a1f      	ldr	r2, [pc, #124]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2270      	movs	r2, #112	; 0x70
 8004a50:	4393      	bics	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10c      	bne.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	4393      	bics	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	223d      	movs	r2, #61	; 0x3d
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	223c      	movs	r2, #60	; 0x3c
 8004aaa:	2100      	movs	r1, #0
 8004aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b004      	add	sp, #16
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	ff0fffff 	.word	0xff0fffff
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40014000 	.word	0x40014000

08004ac8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	223c      	movs	r2, #60	; 0x3c
 8004ada:	5c9b      	ldrb	r3, [r3, r2]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e079      	b.n	8004bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	223c      	movs	r2, #60	; 0x3c
 8004ae8:	2101      	movs	r1, #1
 8004aea:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	22ff      	movs	r2, #255	; 0xff
 8004af0:	4393      	bics	r3, r2
 8004af2:	001a      	movs	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a38      	ldr	r2, [pc, #224]	; (8004be0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004b00:	401a      	ands	r2, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004b0e:	401a      	ands	r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a33      	ldr	r2, [pc, #204]	; (8004be8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004b1c:	401a      	ands	r2, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a30      	ldr	r2, [pc, #192]	; (8004bec <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a2e      	ldr	r2, [pc, #184]	; (8004bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004b38:	401a      	ands	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004b46:	401a      	ands	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004b54:	401a      	ands	r2, r3
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d106      	bne.n	8004b78 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004b6e:	401a      	ands	r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d121      	bne.n	8004bc6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004b86:	401a      	ands	r2, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	051b      	lsls	r3, r3, #20
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a1c      	ldr	r2, [pc, #112]	; (8004c08 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004b96:	401a      	ands	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004ba4:	401a      	ands	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d106      	bne.n	8004bc6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004bbc:	401a      	ands	r2, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	223c      	movs	r2, #60	; 0x3c
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b004      	add	sp, #16
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	fffffcff 	.word	0xfffffcff
 8004be4:	fffffbff 	.word	0xfffffbff
 8004be8:	fffff7ff 	.word	0xfffff7ff
 8004bec:	ffffefff 	.word	0xffffefff
 8004bf0:	ffffdfff 	.word	0xffffdfff
 8004bf4:	ffffbfff 	.word	0xffffbfff
 8004bf8:	fff0ffff 	.word	0xfff0ffff
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	efffffff 	.word	0xefffffff
 8004c04:	ff0fffff 	.word	0xff0fffff
 8004c08:	feffffff 	.word	0xfeffffff
 8004c0c:	fdffffff 	.word	0xfdffffff
 8004c10:	dfffffff 	.word	0xdfffffff

08004c14 <__libc_init_array>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	2600      	movs	r6, #0
 8004c18:	4d0c      	ldr	r5, [pc, #48]	; (8004c4c <__libc_init_array+0x38>)
 8004c1a:	4c0d      	ldr	r4, [pc, #52]	; (8004c50 <__libc_init_array+0x3c>)
 8004c1c:	1b64      	subs	r4, r4, r5
 8004c1e:	10a4      	asrs	r4, r4, #2
 8004c20:	42a6      	cmp	r6, r4
 8004c22:	d109      	bne.n	8004c38 <__libc_init_array+0x24>
 8004c24:	2600      	movs	r6, #0
 8004c26:	f001 f82f 	bl	8005c88 <_init>
 8004c2a:	4d0a      	ldr	r5, [pc, #40]	; (8004c54 <__libc_init_array+0x40>)
 8004c2c:	4c0a      	ldr	r4, [pc, #40]	; (8004c58 <__libc_init_array+0x44>)
 8004c2e:	1b64      	subs	r4, r4, r5
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	42a6      	cmp	r6, r4
 8004c34:	d105      	bne.n	8004c42 <__libc_init_array+0x2e>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	00b3      	lsls	r3, r6, #2
 8004c3a:	58eb      	ldr	r3, [r5, r3]
 8004c3c:	4798      	blx	r3
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7ee      	b.n	8004c20 <__libc_init_array+0xc>
 8004c42:	00b3      	lsls	r3, r6, #2
 8004c44:	58eb      	ldr	r3, [r5, r3]
 8004c46:	4798      	blx	r3
 8004c48:	3601      	adds	r6, #1
 8004c4a:	e7f2      	b.n	8004c32 <__libc_init_array+0x1e>
 8004c4c:	08005f90 	.word	0x08005f90
 8004c50:	08005f90 	.word	0x08005f90
 8004c54:	08005f90 	.word	0x08005f90
 8004c58:	08005f94 	.word	0x08005f94

08004c5c <memset>:
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	1882      	adds	r2, r0, r2
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d100      	bne.n	8004c66 <memset+0xa>
 8004c64:	4770      	bx	lr
 8004c66:	7019      	strb	r1, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	e7f9      	b.n	8004c60 <memset+0x4>

08004c6c <sin>:
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6e:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <sin+0x84>)
 8004c70:	004b      	lsls	r3, r1, #1
 8004c72:	b087      	sub	sp, #28
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	4293      	cmp	r3, r2
 8004c78:	dc06      	bgt.n	8004c88 <sin+0x1c>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	f000 fe53 	bl	800592c <__kernel_sin>
 8004c86:	e006      	b.n	8004c96 <sin+0x2a>
 8004c88:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <sin+0x88>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	dd05      	ble.n	8004c9a <sin+0x2e>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	000b      	movs	r3, r1
 8004c92:	f7fc fdb1 	bl	80017f8 <__aeabi_dsub>
 8004c96:	b007      	add	sp, #28
 8004c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c9a:	aa02      	add	r2, sp, #8
 8004c9c:	f000 f82c 	bl	8004cf8 <__ieee754_rem_pio2>
 8004ca0:	9c04      	ldr	r4, [sp, #16]
 8004ca2:	9d05      	ldr	r5, [sp, #20]
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	4003      	ands	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d00a      	beq.n	8004cc2 <sin+0x56>
 8004cac:	9802      	ldr	r0, [sp, #8]
 8004cae:	9903      	ldr	r1, [sp, #12]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d00d      	beq.n	8004cd0 <sin+0x64>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d115      	bne.n	8004ce4 <sin+0x78>
 8004cb8:	3301      	adds	r3, #1
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	0022      	movs	r2, r4
 8004cbe:	002b      	movs	r3, r5
 8004cc0:	e7df      	b.n	8004c82 <sin+0x16>
 8004cc2:	0022      	movs	r2, r4
 8004cc4:	9802      	ldr	r0, [sp, #8]
 8004cc6:	9903      	ldr	r1, [sp, #12]
 8004cc8:	002b      	movs	r3, r5
 8004cca:	f000 fa05 	bl	80050d8 <__kernel_cos>
 8004cce:	e7e2      	b.n	8004c96 <sin+0x2a>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	0022      	movs	r2, r4
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	002b      	movs	r3, r5
 8004cd8:	f000 fe28 	bl	800592c <__kernel_sin>
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	18c9      	adds	r1, r1, r3
 8004ce2:	e7d8      	b.n	8004c96 <sin+0x2a>
 8004ce4:	0022      	movs	r2, r4
 8004ce6:	002b      	movs	r3, r5
 8004ce8:	f000 f9f6 	bl	80050d8 <__kernel_cos>
 8004cec:	e7f6      	b.n	8004cdc <sin+0x70>
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	3fe921fb 	.word	0x3fe921fb
 8004cf4:	7fefffff 	.word	0x7fefffff

08004cf8 <__ieee754_rem_pio2>:
 8004cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfa:	004b      	lsls	r3, r1, #1
 8004cfc:	b091      	sub	sp, #68	; 0x44
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	0017      	movs	r7, r2
 8004d04:	4bb6      	ldr	r3, [pc, #728]	; (8004fe0 <__ieee754_rem_pio2+0x2e8>)
 8004d06:	9a02      	ldr	r2, [sp, #8]
 8004d08:	0004      	movs	r4, r0
 8004d0a:	000d      	movs	r5, r1
 8004d0c:	9109      	str	r1, [sp, #36]	; 0x24
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	dc09      	bgt.n	8004d26 <__ieee754_rem_pio2+0x2e>
 8004d12:	0002      	movs	r2, r0
 8004d14:	000b      	movs	r3, r1
 8004d16:	603a      	str	r2, [r7, #0]
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60ba      	str	r2, [r7, #8]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	2600      	movs	r6, #0
 8004d24:	e025      	b.n	8004d72 <__ieee754_rem_pio2+0x7a>
 8004d26:	4baf      	ldr	r3, [pc, #700]	; (8004fe4 <__ieee754_rem_pio2+0x2ec>)
 8004d28:	9a02      	ldr	r2, [sp, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	dd00      	ble.n	8004d30 <__ieee754_rem_pio2+0x38>
 8004d2e:	e06e      	b.n	8004e0e <__ieee754_rem_pio2+0x116>
 8004d30:	4ead      	ldr	r6, [pc, #692]	; (8004fe8 <__ieee754_rem_pio2+0x2f0>)
 8004d32:	4aae      	ldr	r2, [pc, #696]	; (8004fec <__ieee754_rem_pio2+0x2f4>)
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	dd35      	ble.n	8004da4 <__ieee754_rem_pio2+0xac>
 8004d38:	0020      	movs	r0, r4
 8004d3a:	0029      	movs	r1, r5
 8004d3c:	4baa      	ldr	r3, [pc, #680]	; (8004fe8 <__ieee754_rem_pio2+0x2f0>)
 8004d3e:	f7fc fd5b 	bl	80017f8 <__aeabi_dsub>
 8004d42:	9b02      	ldr	r3, [sp, #8]
 8004d44:	0004      	movs	r4, r0
 8004d46:	000d      	movs	r5, r1
 8004d48:	42b3      	cmp	r3, r6
 8004d4a:	d015      	beq.n	8004d78 <__ieee754_rem_pio2+0x80>
 8004d4c:	4aa8      	ldr	r2, [pc, #672]	; (8004ff0 <__ieee754_rem_pio2+0x2f8>)
 8004d4e:	4ba9      	ldr	r3, [pc, #676]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004d50:	f7fc fd52 	bl	80017f8 <__aeabi_dsub>
 8004d54:	0002      	movs	r2, r0
 8004d56:	000b      	movs	r3, r1
 8004d58:	0020      	movs	r0, r4
 8004d5a:	603a      	str	r2, [r7, #0]
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	0029      	movs	r1, r5
 8004d60:	f7fc fd4a 	bl	80017f8 <__aeabi_dsub>
 8004d64:	4aa2      	ldr	r2, [pc, #648]	; (8004ff0 <__ieee754_rem_pio2+0x2f8>)
 8004d66:	4ba3      	ldr	r3, [pc, #652]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004d68:	f7fc fd46 	bl	80017f8 <__aeabi_dsub>
 8004d6c:	2601      	movs	r6, #1
 8004d6e:	60b8      	str	r0, [r7, #8]
 8004d70:	60f9      	str	r1, [r7, #12]
 8004d72:	0030      	movs	r0, r6
 8004d74:	b011      	add	sp, #68	; 0x44
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d78:	22d3      	movs	r2, #211	; 0xd3
 8004d7a:	4b9e      	ldr	r3, [pc, #632]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004d7c:	0552      	lsls	r2, r2, #21
 8004d7e:	f7fc fd3b 	bl	80017f8 <__aeabi_dsub>
 8004d82:	4a9d      	ldr	r2, [pc, #628]	; (8004ff8 <__ieee754_rem_pio2+0x300>)
 8004d84:	4b9d      	ldr	r3, [pc, #628]	; (8004ffc <__ieee754_rem_pio2+0x304>)
 8004d86:	0004      	movs	r4, r0
 8004d88:	000d      	movs	r5, r1
 8004d8a:	f7fc fd35 	bl	80017f8 <__aeabi_dsub>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	000b      	movs	r3, r1
 8004d92:	0020      	movs	r0, r4
 8004d94:	603a      	str	r2, [r7, #0]
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	0029      	movs	r1, r5
 8004d9a:	f7fc fd2d 	bl	80017f8 <__aeabi_dsub>
 8004d9e:	4a96      	ldr	r2, [pc, #600]	; (8004ff8 <__ieee754_rem_pio2+0x300>)
 8004da0:	4b96      	ldr	r3, [pc, #600]	; (8004ffc <__ieee754_rem_pio2+0x304>)
 8004da2:	e7e1      	b.n	8004d68 <__ieee754_rem_pio2+0x70>
 8004da4:	0020      	movs	r0, r4
 8004da6:	0029      	movs	r1, r5
 8004da8:	4b8f      	ldr	r3, [pc, #572]	; (8004fe8 <__ieee754_rem_pio2+0x2f0>)
 8004daa:	f7fb fb7b 	bl	80004a4 <__aeabi_dadd>
 8004dae:	9b02      	ldr	r3, [sp, #8]
 8004db0:	0004      	movs	r4, r0
 8004db2:	000d      	movs	r5, r1
 8004db4:	42b3      	cmp	r3, r6
 8004db6:	d014      	beq.n	8004de2 <__ieee754_rem_pio2+0xea>
 8004db8:	4a8d      	ldr	r2, [pc, #564]	; (8004ff0 <__ieee754_rem_pio2+0x2f8>)
 8004dba:	4b8e      	ldr	r3, [pc, #568]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004dbc:	f7fb fb72 	bl	80004a4 <__aeabi_dadd>
 8004dc0:	0002      	movs	r2, r0
 8004dc2:	000b      	movs	r3, r1
 8004dc4:	0020      	movs	r0, r4
 8004dc6:	603a      	str	r2, [r7, #0]
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	0029      	movs	r1, r5
 8004dcc:	f7fc fd14 	bl	80017f8 <__aeabi_dsub>
 8004dd0:	4a87      	ldr	r2, [pc, #540]	; (8004ff0 <__ieee754_rem_pio2+0x2f8>)
 8004dd2:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004dd4:	f7fb fb66 	bl	80004a4 <__aeabi_dadd>
 8004dd8:	2601      	movs	r6, #1
 8004dda:	60b8      	str	r0, [r7, #8]
 8004ddc:	60f9      	str	r1, [r7, #12]
 8004dde:	4276      	negs	r6, r6
 8004de0:	e7c7      	b.n	8004d72 <__ieee754_rem_pio2+0x7a>
 8004de2:	22d3      	movs	r2, #211	; 0xd3
 8004de4:	4b83      	ldr	r3, [pc, #524]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004de6:	0552      	lsls	r2, r2, #21
 8004de8:	f7fb fb5c 	bl	80004a4 <__aeabi_dadd>
 8004dec:	4a82      	ldr	r2, [pc, #520]	; (8004ff8 <__ieee754_rem_pio2+0x300>)
 8004dee:	4b83      	ldr	r3, [pc, #524]	; (8004ffc <__ieee754_rem_pio2+0x304>)
 8004df0:	0004      	movs	r4, r0
 8004df2:	000d      	movs	r5, r1
 8004df4:	f7fb fb56 	bl	80004a4 <__aeabi_dadd>
 8004df8:	0002      	movs	r2, r0
 8004dfa:	000b      	movs	r3, r1
 8004dfc:	0020      	movs	r0, r4
 8004dfe:	603a      	str	r2, [r7, #0]
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	0029      	movs	r1, r5
 8004e04:	f7fc fcf8 	bl	80017f8 <__aeabi_dsub>
 8004e08:	4a7b      	ldr	r2, [pc, #492]	; (8004ff8 <__ieee754_rem_pio2+0x300>)
 8004e0a:	4b7c      	ldr	r3, [pc, #496]	; (8004ffc <__ieee754_rem_pio2+0x304>)
 8004e0c:	e7e2      	b.n	8004dd4 <__ieee754_rem_pio2+0xdc>
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <__ieee754_rem_pio2+0x308>)
 8004e10:	9a02      	ldr	r2, [sp, #8]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	dd00      	ble.n	8004e18 <__ieee754_rem_pio2+0x120>
 8004e16:	e0d3      	b.n	8004fc0 <__ieee754_rem_pio2+0x2c8>
 8004e18:	0020      	movs	r0, r4
 8004e1a:	0029      	movs	r1, r5
 8004e1c:	f000 fe32 	bl	8005a84 <fabs>
 8004e20:	4a78      	ldr	r2, [pc, #480]	; (8005004 <__ieee754_rem_pio2+0x30c>)
 8004e22:	4b79      	ldr	r3, [pc, #484]	; (8005008 <__ieee754_rem_pio2+0x310>)
 8004e24:	0004      	movs	r4, r0
 8004e26:	000d      	movs	r5, r1
 8004e28:	f7fc fa7a 	bl	8001320 <__aeabi_dmul>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4b77      	ldr	r3, [pc, #476]	; (800500c <__ieee754_rem_pio2+0x314>)
 8004e30:	f7fb fb38 	bl	80004a4 <__aeabi_dadd>
 8004e34:	f7fd f872 	bl	8001f1c <__aeabi_d2iz>
 8004e38:	0006      	movs	r6, r0
 8004e3a:	f7fd f8a5 	bl	8001f88 <__aeabi_i2d>
 8004e3e:	4a6b      	ldr	r2, [pc, #428]	; (8004fec <__ieee754_rem_pio2+0x2f4>)
 8004e40:	4b69      	ldr	r3, [pc, #420]	; (8004fe8 <__ieee754_rem_pio2+0x2f0>)
 8004e42:	9006      	str	r0, [sp, #24]
 8004e44:	9107      	str	r1, [sp, #28]
 8004e46:	f7fc fa6b 	bl	8001320 <__aeabi_dmul>
 8004e4a:	0002      	movs	r2, r0
 8004e4c:	000b      	movs	r3, r1
 8004e4e:	0020      	movs	r0, r4
 8004e50:	0029      	movs	r1, r5
 8004e52:	f7fc fcd1 	bl	80017f8 <__aeabi_dsub>
 8004e56:	4a66      	ldr	r2, [pc, #408]	; (8004ff0 <__ieee754_rem_pio2+0x2f8>)
 8004e58:	9004      	str	r0, [sp, #16]
 8004e5a:	9105      	str	r1, [sp, #20]
 8004e5c:	9806      	ldr	r0, [sp, #24]
 8004e5e:	9907      	ldr	r1, [sp, #28]
 8004e60:	4b64      	ldr	r3, [pc, #400]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004e62:	f7fc fa5d 	bl	8001320 <__aeabi_dmul>
 8004e66:	0004      	movs	r4, r0
 8004e68:	000d      	movs	r5, r1
 8004e6a:	2e1f      	cmp	r6, #31
 8004e6c:	dc0f      	bgt.n	8004e8e <__ieee754_rem_pio2+0x196>
 8004e6e:	4a68      	ldr	r2, [pc, #416]	; (8005010 <__ieee754_rem_pio2+0x318>)
 8004e70:	1e73      	subs	r3, r6, #1
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	589b      	ldr	r3, [r3, r2]
 8004e76:	9a02      	ldr	r2, [sp, #8]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d008      	beq.n	8004e8e <__ieee754_rem_pio2+0x196>
 8004e7c:	9804      	ldr	r0, [sp, #16]
 8004e7e:	9905      	ldr	r1, [sp, #20]
 8004e80:	0022      	movs	r2, r4
 8004e82:	002b      	movs	r3, r5
 8004e84:	f7fc fcb8 	bl	80017f8 <__aeabi_dsub>
 8004e88:	6038      	str	r0, [r7, #0]
 8004e8a:	6079      	str	r1, [r7, #4]
 8004e8c:	e012      	b.n	8004eb4 <__ieee754_rem_pio2+0x1bc>
 8004e8e:	0022      	movs	r2, r4
 8004e90:	9804      	ldr	r0, [sp, #16]
 8004e92:	9905      	ldr	r1, [sp, #20]
 8004e94:	002b      	movs	r3, r5
 8004e96:	f7fc fcaf 	bl	80017f8 <__aeabi_dsub>
 8004e9a:	9b02      	ldr	r3, [sp, #8]
 8004e9c:	151b      	asrs	r3, r3, #20
 8004e9e:	9308      	str	r3, [sp, #32]
 8004ea0:	9a08      	ldr	r2, [sp, #32]
 8004ea2:	004b      	lsls	r3, r1, #1
 8004ea4:	0d5b      	lsrs	r3, r3, #21
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	dc21      	bgt.n	8004ef0 <__ieee754_rem_pio2+0x1f8>
 8004eac:	0002      	movs	r2, r0
 8004eae:	000b      	movs	r3, r1
 8004eb0:	603a      	str	r2, [r7, #0]
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	9804      	ldr	r0, [sp, #16]
 8004eb6:	9905      	ldr	r1, [sp, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	9b02      	ldr	r3, [sp, #8]
 8004ec0:	f7fc fc9a 	bl	80017f8 <__aeabi_dsub>
 8004ec4:	0022      	movs	r2, r4
 8004ec6:	002b      	movs	r3, r5
 8004ec8:	f7fc fc96 	bl	80017f8 <__aeabi_dsub>
 8004ecc:	000b      	movs	r3, r1
 8004ece:	0002      	movs	r2, r0
 8004ed0:	60ba      	str	r2, [r7, #8]
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	db00      	blt.n	8004edc <__ieee754_rem_pio2+0x1e4>
 8004eda:	e74a      	b.n	8004d72 <__ieee754_rem_pio2+0x7a>
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	469c      	mov	ip, r3
 8004ee2:	9c02      	ldr	r4, [sp, #8]
 8004ee4:	18c9      	adds	r1, r1, r3
 8004ee6:	4464      	add	r4, ip
 8004ee8:	607c      	str	r4, [r7, #4]
 8004eea:	60b8      	str	r0, [r7, #8]
 8004eec:	60f9      	str	r1, [r7, #12]
 8004eee:	e776      	b.n	8004dde <__ieee754_rem_pio2+0xe6>
 8004ef0:	22d3      	movs	r2, #211	; 0xd3
 8004ef2:	9806      	ldr	r0, [sp, #24]
 8004ef4:	9907      	ldr	r1, [sp, #28]
 8004ef6:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <__ieee754_rem_pio2+0x2fc>)
 8004ef8:	0552      	lsls	r2, r2, #21
 8004efa:	f7fc fa11 	bl	8001320 <__aeabi_dmul>
 8004efe:	0004      	movs	r4, r0
 8004f00:	000d      	movs	r5, r1
 8004f02:	0002      	movs	r2, r0
 8004f04:	000b      	movs	r3, r1
 8004f06:	9804      	ldr	r0, [sp, #16]
 8004f08:	9905      	ldr	r1, [sp, #20]
 8004f0a:	f7fc fc75 	bl	80017f8 <__aeabi_dsub>
 8004f0e:	0002      	movs	r2, r0
 8004f10:	000b      	movs	r3, r1
 8004f12:	9002      	str	r0, [sp, #8]
 8004f14:	9103      	str	r1, [sp, #12]
 8004f16:	9804      	ldr	r0, [sp, #16]
 8004f18:	9905      	ldr	r1, [sp, #20]
 8004f1a:	f7fc fc6d 	bl	80017f8 <__aeabi_dsub>
 8004f1e:	0022      	movs	r2, r4
 8004f20:	002b      	movs	r3, r5
 8004f22:	f7fc fc69 	bl	80017f8 <__aeabi_dsub>
 8004f26:	0004      	movs	r4, r0
 8004f28:	000d      	movs	r5, r1
 8004f2a:	9806      	ldr	r0, [sp, #24]
 8004f2c:	9907      	ldr	r1, [sp, #28]
 8004f2e:	4a32      	ldr	r2, [pc, #200]	; (8004ff8 <__ieee754_rem_pio2+0x300>)
 8004f30:	4b32      	ldr	r3, [pc, #200]	; (8004ffc <__ieee754_rem_pio2+0x304>)
 8004f32:	f7fc f9f5 	bl	8001320 <__aeabi_dmul>
 8004f36:	0022      	movs	r2, r4
 8004f38:	002b      	movs	r3, r5
 8004f3a:	f7fc fc5d 	bl	80017f8 <__aeabi_dsub>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	000b      	movs	r3, r1
 8004f42:	0004      	movs	r4, r0
 8004f44:	000d      	movs	r5, r1
 8004f46:	9802      	ldr	r0, [sp, #8]
 8004f48:	9903      	ldr	r1, [sp, #12]
 8004f4a:	f7fc fc55 	bl	80017f8 <__aeabi_dsub>
 8004f4e:	9a08      	ldr	r2, [sp, #32]
 8004f50:	004b      	lsls	r3, r1, #1
 8004f52:	0d5b      	lsrs	r3, r3, #21
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b31      	cmp	r3, #49	; 0x31
 8004f58:	dc08      	bgt.n	8004f6c <__ieee754_rem_pio2+0x274>
 8004f5a:	0002      	movs	r2, r0
 8004f5c:	000b      	movs	r3, r1
 8004f5e:	603a      	str	r2, [r7, #0]
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	9a02      	ldr	r2, [sp, #8]
 8004f64:	9b03      	ldr	r3, [sp, #12]
 8004f66:	9204      	str	r2, [sp, #16]
 8004f68:	9305      	str	r3, [sp, #20]
 8004f6a:	e7a3      	b.n	8004eb4 <__ieee754_rem_pio2+0x1bc>
 8004f6c:	22b8      	movs	r2, #184	; 0xb8
 8004f6e:	9806      	ldr	r0, [sp, #24]
 8004f70:	9907      	ldr	r1, [sp, #28]
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <__ieee754_rem_pio2+0x304>)
 8004f74:	0592      	lsls	r2, r2, #22
 8004f76:	f7fc f9d3 	bl	8001320 <__aeabi_dmul>
 8004f7a:	0004      	movs	r4, r0
 8004f7c:	000d      	movs	r5, r1
 8004f7e:	0002      	movs	r2, r0
 8004f80:	000b      	movs	r3, r1
 8004f82:	9802      	ldr	r0, [sp, #8]
 8004f84:	9903      	ldr	r1, [sp, #12]
 8004f86:	f7fc fc37 	bl	80017f8 <__aeabi_dsub>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	000b      	movs	r3, r1
 8004f8e:	9004      	str	r0, [sp, #16]
 8004f90:	9105      	str	r1, [sp, #20]
 8004f92:	9802      	ldr	r0, [sp, #8]
 8004f94:	9903      	ldr	r1, [sp, #12]
 8004f96:	f7fc fc2f 	bl	80017f8 <__aeabi_dsub>
 8004f9a:	0022      	movs	r2, r4
 8004f9c:	002b      	movs	r3, r5
 8004f9e:	f7fc fc2b 	bl	80017f8 <__aeabi_dsub>
 8004fa2:	0004      	movs	r4, r0
 8004fa4:	000d      	movs	r5, r1
 8004fa6:	9806      	ldr	r0, [sp, #24]
 8004fa8:	9907      	ldr	r1, [sp, #28]
 8004faa:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <__ieee754_rem_pio2+0x31c>)
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <__ieee754_rem_pio2+0x320>)
 8004fae:	f7fc f9b7 	bl	8001320 <__aeabi_dmul>
 8004fb2:	0022      	movs	r2, r4
 8004fb4:	002b      	movs	r3, r5
 8004fb6:	f7fc fc1f 	bl	80017f8 <__aeabi_dsub>
 8004fba:	0004      	movs	r4, r0
 8004fbc:	000d      	movs	r5, r1
 8004fbe:	e75d      	b.n	8004e7c <__ieee754_rem_pio2+0x184>
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <__ieee754_rem_pio2+0x324>)
 8004fc2:	9a02      	ldr	r2, [sp, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dd2b      	ble.n	8005020 <__ieee754_rem_pio2+0x328>
 8004fc8:	0022      	movs	r2, r4
 8004fca:	002b      	movs	r3, r5
 8004fcc:	0020      	movs	r0, r4
 8004fce:	0029      	movs	r1, r5
 8004fd0:	f7fc fc12 	bl	80017f8 <__aeabi_dsub>
 8004fd4:	60b8      	str	r0, [r7, #8]
 8004fd6:	60f9      	str	r1, [r7, #12]
 8004fd8:	6038      	str	r0, [r7, #0]
 8004fda:	6079      	str	r1, [r7, #4]
 8004fdc:	e6a1      	b.n	8004d22 <__ieee754_rem_pio2+0x2a>
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	3fe921fb 	.word	0x3fe921fb
 8004fe4:	4002d97b 	.word	0x4002d97b
 8004fe8:	3ff921fb 	.word	0x3ff921fb
 8004fec:	54400000 	.word	0x54400000
 8004ff0:	1a626331 	.word	0x1a626331
 8004ff4:	3dd0b461 	.word	0x3dd0b461
 8004ff8:	2e037073 	.word	0x2e037073
 8004ffc:	3ba3198a 	.word	0x3ba3198a
 8005000:	413921fb 	.word	0x413921fb
 8005004:	6dc9c883 	.word	0x6dc9c883
 8005008:	3fe45f30 	.word	0x3fe45f30
 800500c:	3fe00000 	.word	0x3fe00000
 8005010:	08005db4 	.word	0x08005db4
 8005014:	252049c1 	.word	0x252049c1
 8005018:	397b839a 	.word	0x397b839a
 800501c:	7fefffff 	.word	0x7fefffff
 8005020:	9a02      	ldr	r2, [sp, #8]
 8005022:	0020      	movs	r0, r4
 8005024:	1516      	asrs	r6, r2, #20
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <__ieee754_rem_pio2+0x3d4>)
 8005028:	18b6      	adds	r6, r6, r2
 800502a:	9a02      	ldr	r2, [sp, #8]
 800502c:	0533      	lsls	r3, r6, #20
 800502e:	1ad5      	subs	r5, r2, r3
 8005030:	0029      	movs	r1, r5
 8005032:	f7fc ff73 	bl	8001f1c <__aeabi_d2iz>
 8005036:	f7fc ffa7 	bl	8001f88 <__aeabi_i2d>
 800503a:	0002      	movs	r2, r0
 800503c:	000b      	movs	r3, r1
 800503e:	0020      	movs	r0, r4
 8005040:	0029      	movs	r1, r5
 8005042:	920a      	str	r2, [sp, #40]	; 0x28
 8005044:	930b      	str	r3, [sp, #44]	; 0x2c
 8005046:	f7fc fbd7 	bl	80017f8 <__aeabi_dsub>
 800504a:	2200      	movs	r2, #0
 800504c:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <__ieee754_rem_pio2+0x3d8>)
 800504e:	f7fc f967 	bl	8001320 <__aeabi_dmul>
 8005052:	000d      	movs	r5, r1
 8005054:	0004      	movs	r4, r0
 8005056:	f7fc ff61 	bl	8001f1c <__aeabi_d2iz>
 800505a:	f7fc ff95 	bl	8001f88 <__aeabi_i2d>
 800505e:	0002      	movs	r2, r0
 8005060:	000b      	movs	r3, r1
 8005062:	0020      	movs	r0, r4
 8005064:	0029      	movs	r1, r5
 8005066:	920c      	str	r2, [sp, #48]	; 0x30
 8005068:	930d      	str	r3, [sp, #52]	; 0x34
 800506a:	f7fc fbc5 	bl	80017f8 <__aeabi_dsub>
 800506e:	2200      	movs	r2, #0
 8005070:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <__ieee754_rem_pio2+0x3d8>)
 8005072:	f7fc f955 	bl	8001320 <__aeabi_dmul>
 8005076:	2503      	movs	r5, #3
 8005078:	900e      	str	r0, [sp, #56]	; 0x38
 800507a:	910f      	str	r1, [sp, #60]	; 0x3c
 800507c:	ac0a      	add	r4, sp, #40	; 0x28
 800507e:	2200      	movs	r2, #0
 8005080:	6920      	ldr	r0, [r4, #16]
 8005082:	6961      	ldr	r1, [r4, #20]
 8005084:	2300      	movs	r3, #0
 8005086:	9502      	str	r5, [sp, #8]
 8005088:	3c08      	subs	r4, #8
 800508a:	3d01      	subs	r5, #1
 800508c:	f7fb f9be 	bl	800040c <__aeabi_dcmpeq>
 8005090:	2800      	cmp	r0, #0
 8005092:	d1f4      	bne.n	800507e <__ieee754_rem_pio2+0x386>
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <__ieee754_rem_pio2+0x3dc>)
 8005096:	0032      	movs	r2, r6
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	2302      	movs	r3, #2
 800509c:	0039      	movs	r1, r7
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	a80a      	add	r0, sp, #40	; 0x28
 80050a2:	9b02      	ldr	r3, [sp, #8]
 80050a4:	f000 f8d8 	bl	8005258 <__kernel_rem_pio2>
 80050a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050aa:	0006      	movs	r6, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	db00      	blt.n	80050b2 <__ieee754_rem_pio2+0x3ba>
 80050b0:	e65f      	b.n	8004d72 <__ieee754_rem_pio2+0x7a>
 80050b2:	2180      	movs	r1, #128	; 0x80
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	0609      	lsls	r1, r1, #24
 80050ba:	1843      	adds	r3, r0, r1
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	603a      	str	r2, [r7, #0]
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	1843      	adds	r3, r0, r1
 80050c6:	60ba      	str	r2, [r7, #8]
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	e688      	b.n	8004dde <__ieee754_rem_pio2+0xe6>
 80050cc:	fffffbea 	.word	0xfffffbea
 80050d0:	41700000 	.word	0x41700000
 80050d4:	08005e34 	.word	0x08005e34

080050d8 <__kernel_cos>:
 80050d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050da:	b087      	sub	sp, #28
 80050dc:	9204      	str	r2, [sp, #16]
 80050de:	9305      	str	r3, [sp, #20]
 80050e0:	004b      	lsls	r3, r1, #1
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	23f9      	movs	r3, #249	; 0xf9
 80050e8:	9a00      	ldr	r2, [sp, #0]
 80050ea:	0007      	movs	r7, r0
 80050ec:	000e      	movs	r6, r1
 80050ee:	059b      	lsls	r3, r3, #22
 80050f0:	429a      	cmp	r2, r3
 80050f2:	da04      	bge.n	80050fe <__kernel_cos+0x26>
 80050f4:	f7fc ff12 	bl	8001f1c <__aeabi_d2iz>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d100      	bne.n	80050fe <__kernel_cos+0x26>
 80050fc:	e084      	b.n	8005208 <__kernel_cos+0x130>
 80050fe:	003a      	movs	r2, r7
 8005100:	0033      	movs	r3, r6
 8005102:	0038      	movs	r0, r7
 8005104:	0031      	movs	r1, r6
 8005106:	f7fc f90b 	bl	8001320 <__aeabi_dmul>
 800510a:	2200      	movs	r2, #0
 800510c:	4b40      	ldr	r3, [pc, #256]	; (8005210 <__kernel_cos+0x138>)
 800510e:	0004      	movs	r4, r0
 8005110:	000d      	movs	r5, r1
 8005112:	f7fc f905 	bl	8001320 <__aeabi_dmul>
 8005116:	4a3f      	ldr	r2, [pc, #252]	; (8005214 <__kernel_cos+0x13c>)
 8005118:	9002      	str	r0, [sp, #8]
 800511a:	9103      	str	r1, [sp, #12]
 800511c:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <__kernel_cos+0x140>)
 800511e:	0020      	movs	r0, r4
 8005120:	0029      	movs	r1, r5
 8005122:	f7fc f8fd 	bl	8001320 <__aeabi_dmul>
 8005126:	4a3d      	ldr	r2, [pc, #244]	; (800521c <__kernel_cos+0x144>)
 8005128:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <__kernel_cos+0x148>)
 800512a:	f7fb f9bb 	bl	80004a4 <__aeabi_dadd>
 800512e:	0022      	movs	r2, r4
 8005130:	002b      	movs	r3, r5
 8005132:	f7fc f8f5 	bl	8001320 <__aeabi_dmul>
 8005136:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <__kernel_cos+0x14c>)
 8005138:	4b3b      	ldr	r3, [pc, #236]	; (8005228 <__kernel_cos+0x150>)
 800513a:	f7fc fb5d 	bl	80017f8 <__aeabi_dsub>
 800513e:	0022      	movs	r2, r4
 8005140:	002b      	movs	r3, r5
 8005142:	f7fc f8ed 	bl	8001320 <__aeabi_dmul>
 8005146:	4a39      	ldr	r2, [pc, #228]	; (800522c <__kernel_cos+0x154>)
 8005148:	4b39      	ldr	r3, [pc, #228]	; (8005230 <__kernel_cos+0x158>)
 800514a:	f7fb f9ab 	bl	80004a4 <__aeabi_dadd>
 800514e:	0022      	movs	r2, r4
 8005150:	002b      	movs	r3, r5
 8005152:	f7fc f8e5 	bl	8001320 <__aeabi_dmul>
 8005156:	4a37      	ldr	r2, [pc, #220]	; (8005234 <__kernel_cos+0x15c>)
 8005158:	4b37      	ldr	r3, [pc, #220]	; (8005238 <__kernel_cos+0x160>)
 800515a:	f7fc fb4d 	bl	80017f8 <__aeabi_dsub>
 800515e:	0022      	movs	r2, r4
 8005160:	002b      	movs	r3, r5
 8005162:	f7fc f8dd 	bl	8001320 <__aeabi_dmul>
 8005166:	4a35      	ldr	r2, [pc, #212]	; (800523c <__kernel_cos+0x164>)
 8005168:	4b35      	ldr	r3, [pc, #212]	; (8005240 <__kernel_cos+0x168>)
 800516a:	f7fb f99b 	bl	80004a4 <__aeabi_dadd>
 800516e:	0022      	movs	r2, r4
 8005170:	002b      	movs	r3, r5
 8005172:	f7fc f8d5 	bl	8001320 <__aeabi_dmul>
 8005176:	0022      	movs	r2, r4
 8005178:	002b      	movs	r3, r5
 800517a:	f7fc f8d1 	bl	8001320 <__aeabi_dmul>
 800517e:	9a04      	ldr	r2, [sp, #16]
 8005180:	9b05      	ldr	r3, [sp, #20]
 8005182:	0004      	movs	r4, r0
 8005184:	000d      	movs	r5, r1
 8005186:	0038      	movs	r0, r7
 8005188:	0031      	movs	r1, r6
 800518a:	f7fc f8c9 	bl	8001320 <__aeabi_dmul>
 800518e:	0002      	movs	r2, r0
 8005190:	000b      	movs	r3, r1
 8005192:	0020      	movs	r0, r4
 8005194:	0029      	movs	r1, r5
 8005196:	f7fc fb2f 	bl	80017f8 <__aeabi_dsub>
 800519a:	4b2a      	ldr	r3, [pc, #168]	; (8005244 <__kernel_cos+0x16c>)
 800519c:	9a00      	ldr	r2, [sp, #0]
 800519e:	0004      	movs	r4, r0
 80051a0:	000d      	movs	r5, r1
 80051a2:	429a      	cmp	r2, r3
 80051a4:	dc0d      	bgt.n	80051c2 <__kernel_cos+0xea>
 80051a6:	0002      	movs	r2, r0
 80051a8:	000b      	movs	r3, r1
 80051aa:	9802      	ldr	r0, [sp, #8]
 80051ac:	9903      	ldr	r1, [sp, #12]
 80051ae:	f7fc fb23 	bl	80017f8 <__aeabi_dsub>
 80051b2:	0002      	movs	r2, r0
 80051b4:	2000      	movs	r0, #0
 80051b6:	000b      	movs	r3, r1
 80051b8:	4923      	ldr	r1, [pc, #140]	; (8005248 <__kernel_cos+0x170>)
 80051ba:	f7fc fb1d 	bl	80017f8 <__aeabi_dsub>
 80051be:	b007      	add	sp, #28
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c2:	4b22      	ldr	r3, [pc, #136]	; (800524c <__kernel_cos+0x174>)
 80051c4:	9a00      	ldr	r2, [sp, #0]
 80051c6:	2600      	movs	r6, #0
 80051c8:	429a      	cmp	r2, r3
 80051ca:	dc1b      	bgt.n	8005204 <__kernel_cos+0x12c>
 80051cc:	0013      	movs	r3, r2
 80051ce:	4a20      	ldr	r2, [pc, #128]	; (8005250 <__kernel_cos+0x178>)
 80051d0:	4694      	mov	ip, r2
 80051d2:	4463      	add	r3, ip
 80051d4:	001f      	movs	r7, r3
 80051d6:	0032      	movs	r2, r6
 80051d8:	003b      	movs	r3, r7
 80051da:	2000      	movs	r0, #0
 80051dc:	491a      	ldr	r1, [pc, #104]	; (8005248 <__kernel_cos+0x170>)
 80051de:	f7fc fb0b 	bl	80017f8 <__aeabi_dsub>
 80051e2:	0032      	movs	r2, r6
 80051e4:	003b      	movs	r3, r7
 80051e6:	9000      	str	r0, [sp, #0]
 80051e8:	9101      	str	r1, [sp, #4]
 80051ea:	9802      	ldr	r0, [sp, #8]
 80051ec:	9903      	ldr	r1, [sp, #12]
 80051ee:	f7fc fb03 	bl	80017f8 <__aeabi_dsub>
 80051f2:	0022      	movs	r2, r4
 80051f4:	002b      	movs	r3, r5
 80051f6:	f7fc faff 	bl	80017f8 <__aeabi_dsub>
 80051fa:	0002      	movs	r2, r0
 80051fc:	000b      	movs	r3, r1
 80051fe:	9800      	ldr	r0, [sp, #0]
 8005200:	9901      	ldr	r1, [sp, #4]
 8005202:	e7da      	b.n	80051ba <__kernel_cos+0xe2>
 8005204:	4f13      	ldr	r7, [pc, #76]	; (8005254 <__kernel_cos+0x17c>)
 8005206:	e7e6      	b.n	80051d6 <__kernel_cos+0xfe>
 8005208:	2000      	movs	r0, #0
 800520a:	490f      	ldr	r1, [pc, #60]	; (8005248 <__kernel_cos+0x170>)
 800520c:	e7d7      	b.n	80051be <__kernel_cos+0xe6>
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	3fe00000 	.word	0x3fe00000
 8005214:	be8838d4 	.word	0xbe8838d4
 8005218:	bda8fae9 	.word	0xbda8fae9
 800521c:	bdb4b1c4 	.word	0xbdb4b1c4
 8005220:	3e21ee9e 	.word	0x3e21ee9e
 8005224:	809c52ad 	.word	0x809c52ad
 8005228:	3e927e4f 	.word	0x3e927e4f
 800522c:	19cb1590 	.word	0x19cb1590
 8005230:	3efa01a0 	.word	0x3efa01a0
 8005234:	16c15177 	.word	0x16c15177
 8005238:	3f56c16c 	.word	0x3f56c16c
 800523c:	5555554c 	.word	0x5555554c
 8005240:	3fa55555 	.word	0x3fa55555
 8005244:	3fd33332 	.word	0x3fd33332
 8005248:	3ff00000 	.word	0x3ff00000
 800524c:	3fe90000 	.word	0x3fe90000
 8005250:	ffe00000 	.word	0xffe00000
 8005254:	3fd20000 	.word	0x3fd20000

08005258 <__kernel_rem_pio2>:
 8005258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525a:	4ccb      	ldr	r4, [pc, #812]	; (8005588 <__kernel_rem_pio2+0x330>)
 800525c:	44a5      	add	sp, r4
 800525e:	930d      	str	r3, [sp, #52]	; 0x34
 8005260:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005262:	0014      	movs	r4, r2
 8005264:	009a      	lsls	r2, r3, #2
 8005266:	4bc9      	ldr	r3, [pc, #804]	; (800558c <__kernel_rem_pio2+0x334>)
 8005268:	900e      	str	r0, [sp, #56]	; 0x38
 800526a:	58d3      	ldr	r3, [r2, r3]
 800526c:	9107      	str	r1, [sp, #28]
 800526e:	930a      	str	r3, [sp, #40]	; 0x28
 8005270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005272:	3b01      	subs	r3, #1
 8005274:	930c      	str	r3, [sp, #48]	; 0x30
 8005276:	2300      	movs	r3, #0
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	0023      	movs	r3, r4
 800527c:	3314      	adds	r3, #20
 800527e:	db04      	blt.n	800528a <__kernel_rem_pio2+0x32>
 8005280:	2118      	movs	r1, #24
 8005282:	1ee0      	subs	r0, r4, #3
 8005284:	f7fa ffc6 	bl	8000214 <__divsi3>
 8005288:	9000      	str	r0, [sp, #0]
 800528a:	2218      	movs	r2, #24
 800528c:	9b00      	ldr	r3, [sp, #0]
 800528e:	4252      	negs	r2, r2
 8005290:	3301      	adds	r3, #1
 8005292:	435a      	muls	r2, r3
 8005294:	1913      	adds	r3, r2, r4
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800529a:	9b00      	ldr	r3, [sp, #0]
 800529c:	ae26      	add	r6, sp, #152	; 0x98
 800529e:	1a9d      	subs	r5, r3, r2
 80052a0:	002c      	movs	r4, r5
 80052a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a4:	189f      	adds	r7, r3, r2
 80052a6:	1b63      	subs	r3, r4, r5
 80052a8:	429f      	cmp	r7, r3
 80052aa:	da0f      	bge.n	80052cc <__kernel_rem_pio2+0x74>
 80052ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80052ae:	af76      	add	r7, sp, #472	; 0x1d8
 80052b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052b4:	1af3      	subs	r3, r6, r3
 80052b6:	429a      	cmp	r2, r3
 80052b8:	db30      	blt.n	800531c <__kernel_rem_pio2+0xc4>
 80052ba:	ab26      	add	r3, sp, #152	; 0x98
 80052bc:	00f4      	lsls	r4, r6, #3
 80052be:	2200      	movs	r2, #0
 80052c0:	18e4      	adds	r4, r4, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	2500      	movs	r5, #0
 80052c6:	9204      	str	r2, [sp, #16]
 80052c8:	9305      	str	r3, [sp, #20]
 80052ca:	e01e      	b.n	800530a <__kernel_rem_pio2+0xb2>
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	db07      	blt.n	80052e0 <__kernel_rem_pio2+0x88>
 80052d0:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80052d2:	00a3      	lsls	r3, r4, #2
 80052d4:	58d0      	ldr	r0, [r2, r3]
 80052d6:	f7fc fe57 	bl	8001f88 <__aeabi_i2d>
 80052da:	c603      	stmia	r6!, {r0, r1}
 80052dc:	3401      	adds	r4, #1
 80052de:	e7e2      	b.n	80052a6 <__kernel_rem_pio2+0x4e>
 80052e0:	2000      	movs	r0, #0
 80052e2:	2100      	movs	r1, #0
 80052e4:	e7f9      	b.n	80052da <__kernel_rem_pio2+0x82>
 80052e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e8:	00e9      	lsls	r1, r5, #3
 80052ea:	1859      	adds	r1, r3, r1
 80052ec:	6808      	ldr	r0, [r1, #0]
 80052ee:	6849      	ldr	r1, [r1, #4]
 80052f0:	6822      	ldr	r2, [r4, #0]
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	f7fc f814 	bl	8001320 <__aeabi_dmul>
 80052f8:	0002      	movs	r2, r0
 80052fa:	000b      	movs	r3, r1
 80052fc:	9804      	ldr	r0, [sp, #16]
 80052fe:	9905      	ldr	r1, [sp, #20]
 8005300:	f7fb f8d0 	bl	80004a4 <__aeabi_dadd>
 8005304:	9004      	str	r0, [sp, #16]
 8005306:	9105      	str	r1, [sp, #20]
 8005308:	3501      	adds	r5, #1
 800530a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800530c:	3c08      	subs	r4, #8
 800530e:	429d      	cmp	r5, r3
 8005310:	dde9      	ble.n	80052e6 <__kernel_rem_pio2+0x8e>
 8005312:	9b04      	ldr	r3, [sp, #16]
 8005314:	9c05      	ldr	r4, [sp, #20]
 8005316:	3601      	adds	r6, #1
 8005318:	c718      	stmia	r7!, {r3, r4}
 800531a:	e7c9      	b.n	80052b0 <__kernel_rem_pio2+0x58>
 800531c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531e:	aa12      	add	r2, sp, #72	; 0x48
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	189b      	adds	r3, r3, r2
 8005324:	9310      	str	r3, [sp, #64]	; 0x40
 8005326:	9b00      	ldr	r3, [sp, #0]
 8005328:	0098      	lsls	r0, r3, #2
 800532a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800532c:	181b      	adds	r3, r3, r0
 800532e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	aa76      	add	r2, sp, #472	; 0x1d8
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	18d3      	adds	r3, r2, r3
 800533c:	681c      	ldr	r4, [r3, #0]
 800533e:	685d      	ldr	r5, [r3, #4]
 8005340:	ab12      	add	r3, sp, #72	; 0x48
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	9309      	str	r3, [sp, #36]	; 0x24
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	9211      	str	r2, [sp, #68]	; 0x44
 800534a:	9308      	str	r3, [sp, #32]
 800534c:	9b08      	ldr	r3, [sp, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	dc74      	bgt.n	800543c <__kernel_rem_pio2+0x1e4>
 8005352:	0020      	movs	r0, r4
 8005354:	0029      	movs	r1, r5
 8005356:	9a02      	ldr	r2, [sp, #8]
 8005358:	f000 fc22 	bl	8005ba0 <scalbn>
 800535c:	23ff      	movs	r3, #255	; 0xff
 800535e:	2200      	movs	r2, #0
 8005360:	059b      	lsls	r3, r3, #22
 8005362:	0004      	movs	r4, r0
 8005364:	000d      	movs	r5, r1
 8005366:	f7fb ffdb 	bl	8001320 <__aeabi_dmul>
 800536a:	f000 fb8f 	bl	8005a8c <floor>
 800536e:	2200      	movs	r2, #0
 8005370:	4b87      	ldr	r3, [pc, #540]	; (8005590 <__kernel_rem_pio2+0x338>)
 8005372:	f7fb ffd5 	bl	8001320 <__aeabi_dmul>
 8005376:	0002      	movs	r2, r0
 8005378:	000b      	movs	r3, r1
 800537a:	0020      	movs	r0, r4
 800537c:	0029      	movs	r1, r5
 800537e:	f7fc fa3b 	bl	80017f8 <__aeabi_dsub>
 8005382:	000d      	movs	r5, r1
 8005384:	0004      	movs	r4, r0
 8005386:	f7fc fdc9 	bl	8001f1c <__aeabi_d2iz>
 800538a:	9009      	str	r0, [sp, #36]	; 0x24
 800538c:	f7fc fdfc 	bl	8001f88 <__aeabi_i2d>
 8005390:	000b      	movs	r3, r1
 8005392:	0002      	movs	r2, r0
 8005394:	0029      	movs	r1, r5
 8005396:	0020      	movs	r0, r4
 8005398:	f7fc fa2e 	bl	80017f8 <__aeabi_dsub>
 800539c:	9b02      	ldr	r3, [sp, #8]
 800539e:	0006      	movs	r6, r0
 80053a0:	000f      	movs	r7, r1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dd74      	ble.n	8005490 <__kernel_rem_pio2+0x238>
 80053a6:	2118      	movs	r1, #24
 80053a8:	9b04      	ldr	r3, [sp, #16]
 80053aa:	aa12      	add	r2, sp, #72	; 0x48
 80053ac:	3b01      	subs	r3, #1
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	589a      	ldr	r2, [r3, r2]
 80053b2:	9802      	ldr	r0, [sp, #8]
 80053b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80053b6:	1a09      	subs	r1, r1, r0
 80053b8:	0010      	movs	r0, r2
 80053ba:	4108      	asrs	r0, r1
 80053bc:	1824      	adds	r4, r4, r0
 80053be:	4088      	lsls	r0, r1
 80053c0:	a912      	add	r1, sp, #72	; 0x48
 80053c2:	1a12      	subs	r2, r2, r0
 80053c4:	505a      	str	r2, [r3, r1]
 80053c6:	2317      	movs	r3, #23
 80053c8:	9902      	ldr	r1, [sp, #8]
 80053ca:	9409      	str	r4, [sp, #36]	; 0x24
 80053cc:	1a5b      	subs	r3, r3, r1
 80053ce:	411a      	asrs	r2, r3
 80053d0:	9208      	str	r2, [sp, #32]
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dd6d      	ble.n	80054b4 <__kernel_rem_pio2+0x25c>
 80053d8:	2200      	movs	r2, #0
 80053da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053dc:	2080      	movs	r0, #128	; 0x80
 80053de:	3301      	adds	r3, #1
 80053e0:	9309      	str	r3, [sp, #36]	; 0x24
 80053e2:	4b6c      	ldr	r3, [pc, #432]	; (8005594 <__kernel_rem_pio2+0x33c>)
 80053e4:	0014      	movs	r4, r2
 80053e6:	469c      	mov	ip, r3
 80053e8:	2501      	movs	r5, #1
 80053ea:	0440      	lsls	r0, r0, #17
 80053ec:	9b04      	ldr	r3, [sp, #16]
 80053ee:	4293      	cmp	r3, r2
 80053f0:	dd00      	ble.n	80053f4 <__kernel_rem_pio2+0x19c>
 80053f2:	e099      	b.n	8005528 <__kernel_rem_pio2+0x2d0>
 80053f4:	9b02      	ldr	r3, [sp, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	dd05      	ble.n	8005406 <__kernel_rem_pio2+0x1ae>
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d100      	bne.n	8005400 <__kernel_rem_pio2+0x1a8>
 80053fe:	e0a9      	b.n	8005554 <__kernel_rem_pio2+0x2fc>
 8005400:	2b02      	cmp	r3, #2
 8005402:	d100      	bne.n	8005406 <__kernel_rem_pio2+0x1ae>
 8005404:	e0b1      	b.n	800556a <__kernel_rem_pio2+0x312>
 8005406:	9b08      	ldr	r3, [sp, #32]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d153      	bne.n	80054b4 <__kernel_rem_pio2+0x25c>
 800540c:	0032      	movs	r2, r6
 800540e:	003b      	movs	r3, r7
 8005410:	2000      	movs	r0, #0
 8005412:	4961      	ldr	r1, [pc, #388]	; (8005598 <__kernel_rem_pio2+0x340>)
 8005414:	f7fc f9f0 	bl	80017f8 <__aeabi_dsub>
 8005418:	0006      	movs	r6, r0
 800541a:	000f      	movs	r7, r1
 800541c:	2c00      	cmp	r4, #0
 800541e:	d049      	beq.n	80054b4 <__kernel_rem_pio2+0x25c>
 8005420:	9a02      	ldr	r2, [sp, #8]
 8005422:	2000      	movs	r0, #0
 8005424:	495c      	ldr	r1, [pc, #368]	; (8005598 <__kernel_rem_pio2+0x340>)
 8005426:	f000 fbbb 	bl	8005ba0 <scalbn>
 800542a:	0002      	movs	r2, r0
 800542c:	000b      	movs	r3, r1
 800542e:	0030      	movs	r0, r6
 8005430:	0039      	movs	r1, r7
 8005432:	f7fc f9e1 	bl	80017f8 <__aeabi_dsub>
 8005436:	0006      	movs	r6, r0
 8005438:	000f      	movs	r7, r1
 800543a:	e03b      	b.n	80054b4 <__kernel_rem_pio2+0x25c>
 800543c:	2200      	movs	r2, #0
 800543e:	4b57      	ldr	r3, [pc, #348]	; (800559c <__kernel_rem_pio2+0x344>)
 8005440:	0020      	movs	r0, r4
 8005442:	0029      	movs	r1, r5
 8005444:	f7fb ff6c 	bl	8001320 <__aeabi_dmul>
 8005448:	f7fc fd68 	bl	8001f1c <__aeabi_d2iz>
 800544c:	f7fc fd9c 	bl	8001f88 <__aeabi_i2d>
 8005450:	2200      	movs	r2, #0
 8005452:	4b53      	ldr	r3, [pc, #332]	; (80055a0 <__kernel_rem_pio2+0x348>)
 8005454:	0006      	movs	r6, r0
 8005456:	000f      	movs	r7, r1
 8005458:	f7fb ff62 	bl	8001320 <__aeabi_dmul>
 800545c:	0002      	movs	r2, r0
 800545e:	000b      	movs	r3, r1
 8005460:	0020      	movs	r0, r4
 8005462:	0029      	movs	r1, r5
 8005464:	f7fc f9c8 	bl	80017f8 <__aeabi_dsub>
 8005468:	f7fc fd58 	bl	8001f1c <__aeabi_d2iz>
 800546c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005470:	c301      	stmia	r3!, {r0}
 8005472:	9309      	str	r3, [sp, #36]	; 0x24
 8005474:	9b08      	ldr	r3, [sp, #32]
 8005476:	0030      	movs	r0, r6
 8005478:	3b01      	subs	r3, #1
 800547a:	9308      	str	r3, [sp, #32]
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	18d3      	adds	r3, r2, r3
 8005480:	0039      	movs	r1, r7
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f7fb f80d 	bl	80004a4 <__aeabi_dadd>
 800548a:	0004      	movs	r4, r0
 800548c:	000d      	movs	r5, r1
 800548e:	e75d      	b.n	800534c <__kernel_rem_pio2+0xf4>
 8005490:	9b02      	ldr	r3, [sp, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d107      	bne.n	80054a6 <__kernel_rem_pio2+0x24e>
 8005496:	9b04      	ldr	r3, [sp, #16]
 8005498:	aa12      	add	r2, sp, #72	; 0x48
 800549a:	3b01      	subs	r3, #1
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	5898      	ldr	r0, [r3, r2]
 80054a0:	15c3      	asrs	r3, r0, #23
 80054a2:	9308      	str	r3, [sp, #32]
 80054a4:	e795      	b.n	80053d2 <__kernel_rem_pio2+0x17a>
 80054a6:	2200      	movs	r2, #0
 80054a8:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <__kernel_rem_pio2+0x34c>)
 80054aa:	f7fa ffd3 	bl	8000454 <__aeabi_dcmpge>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d137      	bne.n	8005522 <__kernel_rem_pio2+0x2ca>
 80054b2:	9008      	str	r0, [sp, #32]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	0030      	movs	r0, r6
 80054ba:	0039      	movs	r1, r7
 80054bc:	f7fa ffa6 	bl	800040c <__aeabi_dcmpeq>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d100      	bne.n	80054c6 <__kernel_rem_pio2+0x26e>
 80054c4:	e0b9      	b.n	800563a <__kernel_rem_pio2+0x3e2>
 80054c6:	2200      	movs	r2, #0
 80054c8:	9b04      	ldr	r3, [sp, #16]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054d0:	428b      	cmp	r3, r1
 80054d2:	da53      	bge.n	800557c <__kernel_rem_pio2+0x324>
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	d100      	bne.n	80054da <__kernel_rem_pio2+0x282>
 80054d8:	e095      	b.n	8005606 <__kernel_rem_pio2+0x3ae>
 80054da:	9b02      	ldr	r3, [sp, #8]
 80054dc:	aa12      	add	r2, sp, #72	; 0x48
 80054de:	3b18      	subs	r3, #24
 80054e0:	9302      	str	r3, [sp, #8]
 80054e2:	9b00      	ldr	r3, [sp, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	589b      	ldr	r3, [r3, r2]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d100      	bne.n	80054ee <__kernel_rem_pio2+0x296>
 80054ec:	e0a1      	b.n	8005632 <__kernel_rem_pio2+0x3da>
 80054ee:	2000      	movs	r0, #0
 80054f0:	9a02      	ldr	r2, [sp, #8]
 80054f2:	4929      	ldr	r1, [pc, #164]	; (8005598 <__kernel_rem_pio2+0x340>)
 80054f4:	f000 fb54 	bl	8005ba0 <scalbn>
 80054f8:	0006      	movs	r6, r0
 80054fa:	000f      	movs	r7, r1
 80054fc:	9c00      	ldr	r4, [sp, #0]
 80054fe:	2c00      	cmp	r4, #0
 8005500:	db00      	blt.n	8005504 <__kernel_rem_pio2+0x2ac>
 8005502:	e0d9      	b.n	80056b8 <__kernel_rem_pio2+0x460>
 8005504:	9c00      	ldr	r4, [sp, #0]
 8005506:	2c00      	cmp	r4, #0
 8005508:	da00      	bge.n	800550c <__kernel_rem_pio2+0x2b4>
 800550a:	e10c      	b.n	8005726 <__kernel_rem_pio2+0x4ce>
 800550c:	ab76      	add	r3, sp, #472	; 0x1d8
 800550e:	00e6      	lsls	r6, r4, #3
 8005510:	2200      	movs	r2, #0
 8005512:	18f6      	adds	r6, r6, r3
 8005514:	2300      	movs	r3, #0
 8005516:	9202      	str	r2, [sp, #8]
 8005518:	9303      	str	r3, [sp, #12]
 800551a:	9b00      	ldr	r3, [sp, #0]
 800551c:	2500      	movs	r5, #0
 800551e:	1b1f      	subs	r7, r3, r4
 8005520:	e0f3      	b.n	800570a <__kernel_rem_pio2+0x4b2>
 8005522:	2302      	movs	r3, #2
 8005524:	9308      	str	r3, [sp, #32]
 8005526:	e757      	b.n	80053d8 <__kernel_rem_pio2+0x180>
 8005528:	9b00      	ldr	r3, [sp, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2c00      	cmp	r4, #0
 800552e:	d10b      	bne.n	8005548 <__kernel_rem_pio2+0x2f0>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <__kernel_rem_pio2+0x2e4>
 8005534:	9c00      	ldr	r4, [sp, #0]
 8005536:	1ac3      	subs	r3, r0, r3
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	002b      	movs	r3, r5
 800553c:	9c00      	ldr	r4, [sp, #0]
 800553e:	3201      	adds	r2, #1
 8005540:	3404      	adds	r4, #4
 8005542:	9400      	str	r4, [sp, #0]
 8005544:	001c      	movs	r4, r3
 8005546:	e751      	b.n	80053ec <__kernel_rem_pio2+0x194>
 8005548:	4661      	mov	r1, ip
 800554a:	1acb      	subs	r3, r1, r3
 800554c:	9900      	ldr	r1, [sp, #0]
 800554e:	600b      	str	r3, [r1, #0]
 8005550:	0023      	movs	r3, r4
 8005552:	e7f3      	b.n	800553c <__kernel_rem_pio2+0x2e4>
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	aa12      	add	r2, sp, #72	; 0x48
 8005558:	3b01      	subs	r3, #1
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	589a      	ldr	r2, [r3, r2]
 800555e:	9200      	str	r2, [sp, #0]
 8005560:	0252      	lsls	r2, r2, #9
 8005562:	0a52      	lsrs	r2, r2, #9
 8005564:	a912      	add	r1, sp, #72	; 0x48
 8005566:	505a      	str	r2, [r3, r1]
 8005568:	e74d      	b.n	8005406 <__kernel_rem_pio2+0x1ae>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	aa12      	add	r2, sp, #72	; 0x48
 800556e:	3b01      	subs	r3, #1
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	589a      	ldr	r2, [r3, r2]
 8005574:	9200      	str	r2, [sp, #0]
 8005576:	0292      	lsls	r2, r2, #10
 8005578:	0a92      	lsrs	r2, r2, #10
 800557a:	e7f3      	b.n	8005564 <__kernel_rem_pio2+0x30c>
 800557c:	0099      	lsls	r1, r3, #2
 800557e:	a812      	add	r0, sp, #72	; 0x48
 8005580:	5809      	ldr	r1, [r1, r0]
 8005582:	3b01      	subs	r3, #1
 8005584:	430a      	orrs	r2, r1
 8005586:	e7a2      	b.n	80054ce <__kernel_rem_pio2+0x276>
 8005588:	fffffd84 	.word	0xfffffd84
 800558c:	08005f80 	.word	0x08005f80
 8005590:	40200000 	.word	0x40200000
 8005594:	00ffffff 	.word	0x00ffffff
 8005598:	3ff00000 	.word	0x3ff00000
 800559c:	3e700000 	.word	0x3e700000
 80055a0:	41700000 	.word	0x41700000
 80055a4:	3fe00000 	.word	0x3fe00000
 80055a8:	3301      	adds	r3, #1
 80055aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80055ac:	009a      	lsls	r2, r3, #2
 80055ae:	4252      	negs	r2, r2
 80055b0:	588a      	ldr	r2, [r1, r2]
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	d0f8      	beq.n	80055a8 <__kernel_rem_pio2+0x350>
 80055b6:	9a04      	ldr	r2, [sp, #16]
 80055b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80055ba:	1c57      	adds	r7, r2, #1
 80055bc:	1854      	adds	r4, r2, r1
 80055be:	00e4      	lsls	r4, r4, #3
 80055c0:	aa26      	add	r2, sp, #152	; 0x98
 80055c2:	1914      	adds	r4, r2, r4
 80055c4:	9a04      	ldr	r2, [sp, #16]
 80055c6:	18d3      	adds	r3, r2, r3
 80055c8:	9304      	str	r3, [sp, #16]
 80055ca:	9b04      	ldr	r3, [sp, #16]
 80055cc:	42bb      	cmp	r3, r7
 80055ce:	da00      	bge.n	80055d2 <__kernel_rem_pio2+0x37a>
 80055d0:	e6b0      	b.n	8005334 <__kernel_rem_pio2+0xdc>
 80055d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055d4:	00bb      	lsls	r3, r7, #2
 80055d6:	58d0      	ldr	r0, [r2, r3]
 80055d8:	f7fc fcd6 	bl	8001f88 <__aeabi_i2d>
 80055dc:	2200      	movs	r2, #0
 80055de:	2300      	movs	r3, #0
 80055e0:	0026      	movs	r6, r4
 80055e2:	2500      	movs	r5, #0
 80055e4:	6020      	str	r0, [r4, #0]
 80055e6:	6061      	str	r1, [r4, #4]
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055ee:	429d      	cmp	r5, r3
 80055f0:	dd0b      	ble.n	800560a <__kernel_rem_pio2+0x3b2>
 80055f2:	00fb      	lsls	r3, r7, #3
 80055f4:	aa76      	add	r2, sp, #472	; 0x1d8
 80055f6:	18d3      	adds	r3, r2, r3
 80055f8:	3701      	adds	r7, #1
 80055fa:	9900      	ldr	r1, [sp, #0]
 80055fc:	9a01      	ldr	r2, [sp, #4]
 80055fe:	3408      	adds	r4, #8
 8005600:	6019      	str	r1, [r3, #0]
 8005602:	605a      	str	r2, [r3, #4]
 8005604:	e7e1      	b.n	80055ca <__kernel_rem_pio2+0x372>
 8005606:	2301      	movs	r3, #1
 8005608:	e7cf      	b.n	80055aa <__kernel_rem_pio2+0x352>
 800560a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800560c:	00e9      	lsls	r1, r5, #3
 800560e:	1859      	adds	r1, r3, r1
 8005610:	6808      	ldr	r0, [r1, #0]
 8005612:	6849      	ldr	r1, [r1, #4]
 8005614:	6832      	ldr	r2, [r6, #0]
 8005616:	6873      	ldr	r3, [r6, #4]
 8005618:	f7fb fe82 	bl	8001320 <__aeabi_dmul>
 800561c:	0002      	movs	r2, r0
 800561e:	000b      	movs	r3, r1
 8005620:	9800      	ldr	r0, [sp, #0]
 8005622:	9901      	ldr	r1, [sp, #4]
 8005624:	f7fa ff3e 	bl	80004a4 <__aeabi_dadd>
 8005628:	3501      	adds	r5, #1
 800562a:	9000      	str	r0, [sp, #0]
 800562c:	9101      	str	r1, [sp, #4]
 800562e:	3e08      	subs	r6, #8
 8005630:	e7dc      	b.n	80055ec <__kernel_rem_pio2+0x394>
 8005632:	9b00      	ldr	r3, [sp, #0]
 8005634:	3b01      	subs	r3, #1
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	e74f      	b.n	80054da <__kernel_rem_pio2+0x282>
 800563a:	9b02      	ldr	r3, [sp, #8]
 800563c:	0030      	movs	r0, r6
 800563e:	425a      	negs	r2, r3
 8005640:	0039      	movs	r1, r7
 8005642:	f000 faad 	bl	8005ba0 <scalbn>
 8005646:	2200      	movs	r2, #0
 8005648:	4bb5      	ldr	r3, [pc, #724]	; (8005920 <__kernel_rem_pio2+0x6c8>)
 800564a:	0004      	movs	r4, r0
 800564c:	000d      	movs	r5, r1
 800564e:	f7fa ff01 	bl	8000454 <__aeabi_dcmpge>
 8005652:	2800      	cmp	r0, #0
 8005654:	d025      	beq.n	80056a2 <__kernel_rem_pio2+0x44a>
 8005656:	2200      	movs	r2, #0
 8005658:	4bb2      	ldr	r3, [pc, #712]	; (8005924 <__kernel_rem_pio2+0x6cc>)
 800565a:	0020      	movs	r0, r4
 800565c:	0029      	movs	r1, r5
 800565e:	f7fb fe5f 	bl	8001320 <__aeabi_dmul>
 8005662:	f7fc fc5b 	bl	8001f1c <__aeabi_d2iz>
 8005666:	9b04      	ldr	r3, [sp, #16]
 8005668:	0006      	movs	r6, r0
 800566a:	009f      	lsls	r7, r3, #2
 800566c:	f7fc fc8c 	bl	8001f88 <__aeabi_i2d>
 8005670:	2200      	movs	r2, #0
 8005672:	4bab      	ldr	r3, [pc, #684]	; (8005920 <__kernel_rem_pio2+0x6c8>)
 8005674:	f7fb fe54 	bl	8001320 <__aeabi_dmul>
 8005678:	0002      	movs	r2, r0
 800567a:	000b      	movs	r3, r1
 800567c:	0020      	movs	r0, r4
 800567e:	0029      	movs	r1, r5
 8005680:	f7fc f8ba 	bl	80017f8 <__aeabi_dsub>
 8005684:	f7fc fc4a 	bl	8001f1c <__aeabi_d2iz>
 8005688:	ab12      	add	r3, sp, #72	; 0x48
 800568a:	51d8      	str	r0, [r3, r7]
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	aa12      	add	r2, sp, #72	; 0x48
 8005690:	3301      	adds	r3, #1
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	3318      	adds	r3, #24
 8005698:	9302      	str	r3, [sp, #8]
 800569a:	9b00      	ldr	r3, [sp, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	509e      	str	r6, [r3, r2]
 80056a0:	e725      	b.n	80054ee <__kernel_rem_pio2+0x296>
 80056a2:	9b04      	ldr	r3, [sp, #16]
 80056a4:	0020      	movs	r0, r4
 80056a6:	0029      	movs	r1, r5
 80056a8:	009e      	lsls	r6, r3, #2
 80056aa:	f7fc fc37 	bl	8001f1c <__aeabi_d2iz>
 80056ae:	ab12      	add	r3, sp, #72	; 0x48
 80056b0:	5198      	str	r0, [r3, r6]
 80056b2:	9b04      	ldr	r3, [sp, #16]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	e71a      	b.n	80054ee <__kernel_rem_pio2+0x296>
 80056b8:	00e5      	lsls	r5, r4, #3
 80056ba:	ab76      	add	r3, sp, #472	; 0x1d8
 80056bc:	aa12      	add	r2, sp, #72	; 0x48
 80056be:	195d      	adds	r5, r3, r5
 80056c0:	00a3      	lsls	r3, r4, #2
 80056c2:	5898      	ldr	r0, [r3, r2]
 80056c4:	f7fc fc60 	bl	8001f88 <__aeabi_i2d>
 80056c8:	0032      	movs	r2, r6
 80056ca:	003b      	movs	r3, r7
 80056cc:	f7fb fe28 	bl	8001320 <__aeabi_dmul>
 80056d0:	2200      	movs	r2, #0
 80056d2:	6028      	str	r0, [r5, #0]
 80056d4:	6069      	str	r1, [r5, #4]
 80056d6:	4b93      	ldr	r3, [pc, #588]	; (8005924 <__kernel_rem_pio2+0x6cc>)
 80056d8:	0030      	movs	r0, r6
 80056da:	0039      	movs	r1, r7
 80056dc:	f7fb fe20 	bl	8001320 <__aeabi_dmul>
 80056e0:	3c01      	subs	r4, #1
 80056e2:	0006      	movs	r6, r0
 80056e4:	000f      	movs	r7, r1
 80056e6:	e70a      	b.n	80054fe <__kernel_rem_pio2+0x2a6>
 80056e8:	4b8f      	ldr	r3, [pc, #572]	; (8005928 <__kernel_rem_pio2+0x6d0>)
 80056ea:	00e9      	lsls	r1, r5, #3
 80056ec:	1859      	adds	r1, r3, r1
 80056ee:	6808      	ldr	r0, [r1, #0]
 80056f0:	6849      	ldr	r1, [r1, #4]
 80056f2:	ce0c      	ldmia	r6!, {r2, r3}
 80056f4:	f7fb fe14 	bl	8001320 <__aeabi_dmul>
 80056f8:	0002      	movs	r2, r0
 80056fa:	000b      	movs	r3, r1
 80056fc:	9802      	ldr	r0, [sp, #8]
 80056fe:	9903      	ldr	r1, [sp, #12]
 8005700:	f7fa fed0 	bl	80004a4 <__aeabi_dadd>
 8005704:	9002      	str	r0, [sp, #8]
 8005706:	9103      	str	r1, [sp, #12]
 8005708:	3501      	adds	r5, #1
 800570a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570c:	429d      	cmp	r5, r3
 800570e:	dc01      	bgt.n	8005714 <__kernel_rem_pio2+0x4bc>
 8005710:	42bd      	cmp	r5, r7
 8005712:	dde9      	ble.n	80056e8 <__kernel_rem_pio2+0x490>
 8005714:	ab4e      	add	r3, sp, #312	; 0x138
 8005716:	00ff      	lsls	r7, r7, #3
 8005718:	19df      	adds	r7, r3, r7
 800571a:	3c01      	subs	r4, #1
 800571c:	9a02      	ldr	r2, [sp, #8]
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	603a      	str	r2, [r7, #0]
 8005722:	607b      	str	r3, [r7, #4]
 8005724:	e6ef      	b.n	8005506 <__kernel_rem_pio2+0x2ae>
 8005726:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005728:	2b02      	cmp	r3, #2
 800572a:	dc0e      	bgt.n	800574a <__kernel_rem_pio2+0x4f2>
 800572c:	2b00      	cmp	r3, #0
 800572e:	dd00      	ble.n	8005732 <__kernel_rem_pio2+0x4da>
 8005730:	e08c      	b.n	800584c <__kernel_rem_pio2+0x5f4>
 8005732:	2500      	movs	r5, #0
 8005734:	002c      	movs	r4, r5
 8005736:	42ab      	cmp	r3, r5
 8005738:	d046      	beq.n	80057c8 <__kernel_rem_pio2+0x570>
 800573a:	2007      	movs	r0, #7
 800573c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573e:	4003      	ands	r3, r0
 8005740:	0018      	movs	r0, r3
 8005742:	239f      	movs	r3, #159	; 0x9f
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	449d      	add	sp, r3
 8005748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800574a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800574c:	2b03      	cmp	r3, #3
 800574e:	d1f4      	bne.n	800573a <__kernel_rem_pio2+0x4e2>
 8005750:	9b00      	ldr	r3, [sp, #0]
 8005752:	00dc      	lsls	r4, r3, #3
 8005754:	ab4e      	add	r3, sp, #312	; 0x138
 8005756:	191c      	adds	r4, r3, r4
 8005758:	0025      	movs	r5, r4
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	9302      	str	r3, [sp, #8]
 800575e:	9b02      	ldr	r3, [sp, #8]
 8005760:	3d08      	subs	r5, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	dd00      	ble.n	8005768 <__kernel_rem_pio2+0x510>
 8005766:	e07f      	b.n	8005868 <__kernel_rem_pio2+0x610>
 8005768:	9d00      	ldr	r5, [sp, #0]
 800576a:	3c08      	subs	r4, #8
 800576c:	2d01      	cmp	r5, #1
 800576e:	dd00      	ble.n	8005772 <__kernel_rem_pio2+0x51a>
 8005770:	e09c      	b.n	80058ac <__kernel_rem_pio2+0x654>
 8005772:	2400      	movs	r4, #0
 8005774:	0021      	movs	r1, r4
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	dd00      	ble.n	800577e <__kernel_rem_pio2+0x526>
 800577c:	e0b4      	b.n	80058e8 <__kernel_rem_pio2+0x690>
 800577e:	9b08      	ldr	r3, [sp, #32]
 8005780:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8005782:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8005784:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8005786:	9851      	ldr	r0, [sp, #324]	; 0x144
 8005788:	2b00      	cmp	r3, #0
 800578a:	d000      	beq.n	800578e <__kernel_rem_pio2+0x536>
 800578c:	e0ba      	b.n	8005904 <__kernel_rem_pio2+0x6ac>
 800578e:	0033      	movs	r3, r6
 8005790:	003a      	movs	r2, r7
 8005792:	9e07      	ldr	r6, [sp, #28]
 8005794:	6032      	str	r2, [r6, #0]
 8005796:	6073      	str	r3, [r6, #4]
 8005798:	002a      	movs	r2, r5
 800579a:	0003      	movs	r3, r0
 800579c:	60b2      	str	r2, [r6, #8]
 800579e:	60f3      	str	r3, [r6, #12]
 80057a0:	0022      	movs	r2, r4
 80057a2:	000b      	movs	r3, r1
 80057a4:	6132      	str	r2, [r6, #16]
 80057a6:	6173      	str	r3, [r6, #20]
 80057a8:	e7c7      	b.n	800573a <__kernel_rem_pio2+0x4e2>
 80057aa:	9b00      	ldr	r3, [sp, #0]
 80057ac:	aa4e      	add	r2, sp, #312	; 0x138
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	18d3      	adds	r3, r2, r3
 80057b2:	0028      	movs	r0, r5
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	0021      	movs	r1, r4
 80057ba:	f7fa fe73 	bl	80004a4 <__aeabi_dadd>
 80057be:	0005      	movs	r5, r0
 80057c0:	000c      	movs	r4, r1
 80057c2:	9b00      	ldr	r3, [sp, #0]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	9b00      	ldr	r3, [sp, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	daed      	bge.n	80057aa <__kernel_rem_pio2+0x552>
 80057ce:	9b08      	ldr	r3, [sp, #32]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <__kernel_rem_pio2+0x582>
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	18e4      	adds	r4, r4, r3
 80057da:	002a      	movs	r2, r5
 80057dc:	0023      	movs	r3, r4
 80057de:	9907      	ldr	r1, [sp, #28]
 80057e0:	600a      	str	r2, [r1, #0]
 80057e2:	604b      	str	r3, [r1, #4]
 80057e4:	e7a9      	b.n	800573a <__kernel_rem_pio2+0x4e2>
 80057e6:	00e3      	lsls	r3, r4, #3
 80057e8:	aa4e      	add	r2, sp, #312	; 0x138
 80057ea:	18d3      	adds	r3, r2, r3
 80057ec:	0030      	movs	r0, r6
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	0029      	movs	r1, r5
 80057f4:	f7fa fe56 	bl	80004a4 <__aeabi_dadd>
 80057f8:	0006      	movs	r6, r0
 80057fa:	000d      	movs	r5, r1
 80057fc:	3c01      	subs	r4, #1
 80057fe:	2c00      	cmp	r4, #0
 8005800:	daf1      	bge.n	80057e6 <__kernel_rem_pio2+0x58e>
 8005802:	9b08      	ldr	r3, [sp, #32]
 8005804:	0029      	movs	r1, r5
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <__kernel_rem_pio2+0x5b8>
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	061b      	lsls	r3, r3, #24
 800580e:	18e9      	adds	r1, r5, r3
 8005810:	0032      	movs	r2, r6
 8005812:	000b      	movs	r3, r1
 8005814:	9907      	ldr	r1, [sp, #28]
 8005816:	2401      	movs	r4, #1
 8005818:	600a      	str	r2, [r1, #0]
 800581a:	604b      	str	r3, [r1, #4]
 800581c:	984e      	ldr	r0, [sp, #312]	; 0x138
 800581e:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8005820:	002b      	movs	r3, r5
 8005822:	f7fb ffe9 	bl	80017f8 <__aeabi_dsub>
 8005826:	0007      	movs	r7, r0
 8005828:	000e      	movs	r6, r1
 800582a:	ad4e      	add	r5, sp, #312	; 0x138
 800582c:	9b00      	ldr	r3, [sp, #0]
 800582e:	3508      	adds	r5, #8
 8005830:	42a3      	cmp	r3, r4
 8005832:	da0f      	bge.n	8005854 <__kernel_rem_pio2+0x5fc>
 8005834:	9b08      	ldr	r3, [sp, #32]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <__kernel_rem_pio2+0x5e8>
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	18f6      	adds	r6, r6, r3
 8005840:	003a      	movs	r2, r7
 8005842:	0033      	movs	r3, r6
 8005844:	9907      	ldr	r1, [sp, #28]
 8005846:	608a      	str	r2, [r1, #8]
 8005848:	60cb      	str	r3, [r1, #12]
 800584a:	e776      	b.n	800573a <__kernel_rem_pio2+0x4e2>
 800584c:	2600      	movs	r6, #0
 800584e:	9c00      	ldr	r4, [sp, #0]
 8005850:	0035      	movs	r5, r6
 8005852:	e7d4      	b.n	80057fe <__kernel_rem_pio2+0x5a6>
 8005854:	0038      	movs	r0, r7
 8005856:	682a      	ldr	r2, [r5, #0]
 8005858:	686b      	ldr	r3, [r5, #4]
 800585a:	0031      	movs	r1, r6
 800585c:	f7fa fe22 	bl	80004a4 <__aeabi_dadd>
 8005860:	3401      	adds	r4, #1
 8005862:	0007      	movs	r7, r0
 8005864:	000e      	movs	r6, r1
 8005866:	e7e1      	b.n	800582c <__kernel_rem_pio2+0x5d4>
 8005868:	9b02      	ldr	r3, [sp, #8]
 800586a:	68ae      	ldr	r6, [r5, #8]
 800586c:	68ef      	ldr	r7, [r5, #12]
 800586e:	3b01      	subs	r3, #1
 8005870:	9302      	str	r3, [sp, #8]
 8005872:	682a      	ldr	r2, [r5, #0]
 8005874:	686b      	ldr	r3, [r5, #4]
 8005876:	9204      	str	r2, [sp, #16]
 8005878:	9305      	str	r3, [sp, #20]
 800587a:	9804      	ldr	r0, [sp, #16]
 800587c:	9905      	ldr	r1, [sp, #20]
 800587e:	0032      	movs	r2, r6
 8005880:	003b      	movs	r3, r7
 8005882:	f7fa fe0f 	bl	80004a4 <__aeabi_dadd>
 8005886:	0002      	movs	r2, r0
 8005888:	000b      	movs	r3, r1
 800588a:	900a      	str	r0, [sp, #40]	; 0x28
 800588c:	910b      	str	r1, [sp, #44]	; 0x2c
 800588e:	9804      	ldr	r0, [sp, #16]
 8005890:	9905      	ldr	r1, [sp, #20]
 8005892:	f7fb ffb1 	bl	80017f8 <__aeabi_dsub>
 8005896:	0032      	movs	r2, r6
 8005898:	003b      	movs	r3, r7
 800589a:	f7fa fe03 	bl	80004a4 <__aeabi_dadd>
 800589e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a2:	60a8      	str	r0, [r5, #8]
 80058a4:	60e9      	str	r1, [r5, #12]
 80058a6:	602a      	str	r2, [r5, #0]
 80058a8:	606b      	str	r3, [r5, #4]
 80058aa:	e758      	b.n	800575e <__kernel_rem_pio2+0x506>
 80058ac:	6826      	ldr	r6, [r4, #0]
 80058ae:	6867      	ldr	r7, [r4, #4]
 80058b0:	68a2      	ldr	r2, [r4, #8]
 80058b2:	68e3      	ldr	r3, [r4, #12]
 80058b4:	0030      	movs	r0, r6
 80058b6:	0039      	movs	r1, r7
 80058b8:	9202      	str	r2, [sp, #8]
 80058ba:	9303      	str	r3, [sp, #12]
 80058bc:	f7fa fdf2 	bl	80004a4 <__aeabi_dadd>
 80058c0:	0002      	movs	r2, r0
 80058c2:	000b      	movs	r3, r1
 80058c4:	9004      	str	r0, [sp, #16]
 80058c6:	9105      	str	r1, [sp, #20]
 80058c8:	0030      	movs	r0, r6
 80058ca:	0039      	movs	r1, r7
 80058cc:	f7fb ff94 	bl	80017f8 <__aeabi_dsub>
 80058d0:	9a02      	ldr	r2, [sp, #8]
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	f7fa fde6 	bl	80004a4 <__aeabi_dadd>
 80058d8:	9a04      	ldr	r2, [sp, #16]
 80058da:	9b05      	ldr	r3, [sp, #20]
 80058dc:	60a0      	str	r0, [r4, #8]
 80058de:	60e1      	str	r1, [r4, #12]
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	6063      	str	r3, [r4, #4]
 80058e4:	3d01      	subs	r5, #1
 80058e6:	e740      	b.n	800576a <__kernel_rem_pio2+0x512>
 80058e8:	9b00      	ldr	r3, [sp, #0]
 80058ea:	aa4e      	add	r2, sp, #312	; 0x138
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	18d3      	adds	r3, r2, r3
 80058f0:	0020      	movs	r0, r4
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f7fa fdd5 	bl	80004a4 <__aeabi_dadd>
 80058fa:	9b00      	ldr	r3, [sp, #0]
 80058fc:	0004      	movs	r4, r0
 80058fe:	3b01      	subs	r3, #1
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	e738      	b.n	8005776 <__kernel_rem_pio2+0x51e>
 8005904:	9b07      	ldr	r3, [sp, #28]
 8005906:	9a07      	ldr	r2, [sp, #28]
 8005908:	601f      	str	r7, [r3, #0]
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	061b      	lsls	r3, r3, #24
 800590e:	18f6      	adds	r6, r6, r3
 8005910:	18c0      	adds	r0, r0, r3
 8005912:	18c9      	adds	r1, r1, r3
 8005914:	6056      	str	r6, [r2, #4]
 8005916:	6095      	str	r5, [r2, #8]
 8005918:	60d0      	str	r0, [r2, #12]
 800591a:	6114      	str	r4, [r2, #16]
 800591c:	6151      	str	r1, [r2, #20]
 800591e:	e70c      	b.n	800573a <__kernel_rem_pio2+0x4e2>
 8005920:	41700000 	.word	0x41700000
 8005924:	3e700000 	.word	0x3e700000
 8005928:	08005f40 	.word	0x08005f40

0800592c <__kernel_sin>:
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	b089      	sub	sp, #36	; 0x24
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	9303      	str	r3, [sp, #12]
 8005934:	22f9      	movs	r2, #249	; 0xf9
 8005936:	004b      	lsls	r3, r1, #1
 8005938:	0007      	movs	r7, r0
 800593a:	000e      	movs	r6, r1
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	0592      	lsls	r2, r2, #22
 8005940:	4293      	cmp	r3, r2
 8005942:	da03      	bge.n	800594c <__kernel_sin+0x20>
 8005944:	f7fc faea 	bl	8001f1c <__aeabi_d2iz>
 8005948:	2800      	cmp	r0, #0
 800594a:	d04c      	beq.n	80059e6 <__kernel_sin+0xba>
 800594c:	003a      	movs	r2, r7
 800594e:	0033      	movs	r3, r6
 8005950:	0038      	movs	r0, r7
 8005952:	0031      	movs	r1, r6
 8005954:	f7fb fce4 	bl	8001320 <__aeabi_dmul>
 8005958:	0004      	movs	r4, r0
 800595a:	000d      	movs	r5, r1
 800595c:	0002      	movs	r2, r0
 800595e:	000b      	movs	r3, r1
 8005960:	0038      	movs	r0, r7
 8005962:	0031      	movs	r1, r6
 8005964:	f7fb fcdc 	bl	8001320 <__aeabi_dmul>
 8005968:	4a39      	ldr	r2, [pc, #228]	; (8005a50 <__kernel_sin+0x124>)
 800596a:	9000      	str	r0, [sp, #0]
 800596c:	9101      	str	r1, [sp, #4]
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <__kernel_sin+0x128>)
 8005970:	0020      	movs	r0, r4
 8005972:	0029      	movs	r1, r5
 8005974:	f7fb fcd4 	bl	8001320 <__aeabi_dmul>
 8005978:	4a37      	ldr	r2, [pc, #220]	; (8005a58 <__kernel_sin+0x12c>)
 800597a:	4b38      	ldr	r3, [pc, #224]	; (8005a5c <__kernel_sin+0x130>)
 800597c:	f7fb ff3c 	bl	80017f8 <__aeabi_dsub>
 8005980:	0022      	movs	r2, r4
 8005982:	002b      	movs	r3, r5
 8005984:	f7fb fccc 	bl	8001320 <__aeabi_dmul>
 8005988:	4a35      	ldr	r2, [pc, #212]	; (8005a60 <__kernel_sin+0x134>)
 800598a:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <__kernel_sin+0x138>)
 800598c:	f7fa fd8a 	bl	80004a4 <__aeabi_dadd>
 8005990:	0022      	movs	r2, r4
 8005992:	002b      	movs	r3, r5
 8005994:	f7fb fcc4 	bl	8001320 <__aeabi_dmul>
 8005998:	4a33      	ldr	r2, [pc, #204]	; (8005a68 <__kernel_sin+0x13c>)
 800599a:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <__kernel_sin+0x140>)
 800599c:	f7fb ff2c 	bl	80017f8 <__aeabi_dsub>
 80059a0:	0022      	movs	r2, r4
 80059a2:	002b      	movs	r3, r5
 80059a4:	f7fb fcbc 	bl	8001320 <__aeabi_dmul>
 80059a8:	4b31      	ldr	r3, [pc, #196]	; (8005a70 <__kernel_sin+0x144>)
 80059aa:	4a32      	ldr	r2, [pc, #200]	; (8005a74 <__kernel_sin+0x148>)
 80059ac:	f7fa fd7a 	bl	80004a4 <__aeabi_dadd>
 80059b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b2:	9004      	str	r0, [sp, #16]
 80059b4:	9105      	str	r1, [sp, #20]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d119      	bne.n	80059ee <__kernel_sin+0xc2>
 80059ba:	0002      	movs	r2, r0
 80059bc:	000b      	movs	r3, r1
 80059be:	0020      	movs	r0, r4
 80059c0:	0029      	movs	r1, r5
 80059c2:	f7fb fcad 	bl	8001320 <__aeabi_dmul>
 80059c6:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <__kernel_sin+0x14c>)
 80059c8:	4b2c      	ldr	r3, [pc, #176]	; (8005a7c <__kernel_sin+0x150>)
 80059ca:	f7fb ff15 	bl	80017f8 <__aeabi_dsub>
 80059ce:	9a00      	ldr	r2, [sp, #0]
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	f7fb fca5 	bl	8001320 <__aeabi_dmul>
 80059d6:	0002      	movs	r2, r0
 80059d8:	000b      	movs	r3, r1
 80059da:	0038      	movs	r0, r7
 80059dc:	0031      	movs	r1, r6
 80059de:	f7fa fd61 	bl	80004a4 <__aeabi_dadd>
 80059e2:	0007      	movs	r7, r0
 80059e4:	000e      	movs	r6, r1
 80059e6:	0038      	movs	r0, r7
 80059e8:	0031      	movs	r1, r6
 80059ea:	b009      	add	sp, #36	; 0x24
 80059ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ee:	2200      	movs	r2, #0
 80059f0:	9802      	ldr	r0, [sp, #8]
 80059f2:	9903      	ldr	r1, [sp, #12]
 80059f4:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <__kernel_sin+0x154>)
 80059f6:	f7fb fc93 	bl	8001320 <__aeabi_dmul>
 80059fa:	9a04      	ldr	r2, [sp, #16]
 80059fc:	9b05      	ldr	r3, [sp, #20]
 80059fe:	9006      	str	r0, [sp, #24]
 8005a00:	9107      	str	r1, [sp, #28]
 8005a02:	9800      	ldr	r0, [sp, #0]
 8005a04:	9901      	ldr	r1, [sp, #4]
 8005a06:	f7fb fc8b 	bl	8001320 <__aeabi_dmul>
 8005a0a:	0002      	movs	r2, r0
 8005a0c:	000b      	movs	r3, r1
 8005a0e:	9806      	ldr	r0, [sp, #24]
 8005a10:	9907      	ldr	r1, [sp, #28]
 8005a12:	f7fb fef1 	bl	80017f8 <__aeabi_dsub>
 8005a16:	0022      	movs	r2, r4
 8005a18:	002b      	movs	r3, r5
 8005a1a:	f7fb fc81 	bl	8001320 <__aeabi_dmul>
 8005a1e:	9a02      	ldr	r2, [sp, #8]
 8005a20:	9b03      	ldr	r3, [sp, #12]
 8005a22:	f7fb fee9 	bl	80017f8 <__aeabi_dsub>
 8005a26:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <__kernel_sin+0x14c>)
 8005a28:	0004      	movs	r4, r0
 8005a2a:	000d      	movs	r5, r1
 8005a2c:	9800      	ldr	r0, [sp, #0]
 8005a2e:	9901      	ldr	r1, [sp, #4]
 8005a30:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <__kernel_sin+0x150>)
 8005a32:	f7fb fc75 	bl	8001320 <__aeabi_dmul>
 8005a36:	0002      	movs	r2, r0
 8005a38:	000b      	movs	r3, r1
 8005a3a:	0020      	movs	r0, r4
 8005a3c:	0029      	movs	r1, r5
 8005a3e:	f7fa fd31 	bl	80004a4 <__aeabi_dadd>
 8005a42:	0002      	movs	r2, r0
 8005a44:	000b      	movs	r3, r1
 8005a46:	0038      	movs	r0, r7
 8005a48:	0031      	movs	r1, r6
 8005a4a:	f7fb fed5 	bl	80017f8 <__aeabi_dsub>
 8005a4e:	e7c8      	b.n	80059e2 <__kernel_sin+0xb6>
 8005a50:	5acfd57c 	.word	0x5acfd57c
 8005a54:	3de5d93a 	.word	0x3de5d93a
 8005a58:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a5c:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a60:	57b1fe7d 	.word	0x57b1fe7d
 8005a64:	3ec71de3 	.word	0x3ec71de3
 8005a68:	19c161d5 	.word	0x19c161d5
 8005a6c:	3f2a01a0 	.word	0x3f2a01a0
 8005a70:	3f811111 	.word	0x3f811111
 8005a74:	1110f8a6 	.word	0x1110f8a6
 8005a78:	55555549 	.word	0x55555549
 8005a7c:	3fc55555 	.word	0x3fc55555
 8005a80:	3fe00000 	.word	0x3fe00000

08005a84 <fabs>:
 8005a84:	004b      	lsls	r3, r1, #1
 8005a86:	0859      	lsrs	r1, r3, #1
 8005a88:	4770      	bx	lr
	...

08005a8c <floor>:
 8005a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a8e:	004b      	lsls	r3, r1, #1
 8005a90:	4a3d      	ldr	r2, [pc, #244]	; (8005b88 <floor+0xfc>)
 8005a92:	0d5b      	lsrs	r3, r3, #21
 8005a94:	189f      	adds	r7, r3, r2
 8005a96:	4684      	mov	ip, r0
 8005a98:	000e      	movs	r6, r1
 8005a9a:	000d      	movs	r5, r1
 8005a9c:	0004      	movs	r4, r0
 8005a9e:	9001      	str	r0, [sp, #4]
 8005aa0:	2f13      	cmp	r7, #19
 8005aa2:	dc34      	bgt.n	8005b0e <floor+0x82>
 8005aa4:	2f00      	cmp	r7, #0
 8005aa6:	da16      	bge.n	8005ad6 <floor+0x4a>
 8005aa8:	4a38      	ldr	r2, [pc, #224]	; (8005b8c <floor+0x100>)
 8005aaa:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <floor+0x104>)
 8005aac:	4660      	mov	r0, ip
 8005aae:	0031      	movs	r1, r6
 8005ab0:	f7fa fcf8 	bl	80004a4 <__aeabi_dadd>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f7fa fcc2 	bl	8000440 <__aeabi_dcmpgt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d007      	beq.n	8005ad0 <floor+0x44>
 8005ac0:	2e00      	cmp	r6, #0
 8005ac2:	da5d      	bge.n	8005b80 <floor+0xf4>
 8005ac4:	0073      	lsls	r3, r6, #1
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	431c      	orrs	r4, r3
 8005aca:	d001      	beq.n	8005ad0 <floor+0x44>
 8005acc:	2400      	movs	r4, #0
 8005ace:	4d31      	ldr	r5, [pc, #196]	; (8005b94 <floor+0x108>)
 8005ad0:	46a4      	mov	ip, r4
 8005ad2:	002e      	movs	r6, r5
 8005ad4:	e029      	b.n	8005b2a <floor+0x9e>
 8005ad6:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <floor+0x10c>)
 8005ad8:	413b      	asrs	r3, r7
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	400b      	ands	r3, r1
 8005ade:	4303      	orrs	r3, r0
 8005ae0:	d023      	beq.n	8005b2a <floor+0x9e>
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <floor+0x100>)
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <floor+0x104>)
 8005ae6:	4660      	mov	r0, ip
 8005ae8:	0031      	movs	r1, r6
 8005aea:	f7fa fcdb 	bl	80004a4 <__aeabi_dadd>
 8005aee:	2200      	movs	r2, #0
 8005af0:	2300      	movs	r3, #0
 8005af2:	f7fa fca5 	bl	8000440 <__aeabi_dcmpgt>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d0ea      	beq.n	8005ad0 <floor+0x44>
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	da03      	bge.n	8005b06 <floor+0x7a>
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	035b      	lsls	r3, r3, #13
 8005b02:	413b      	asrs	r3, r7
 8005b04:	18f5      	adds	r5, r6, r3
 8005b06:	9b00      	ldr	r3, [sp, #0]
 8005b08:	2400      	movs	r4, #0
 8005b0a:	439d      	bics	r5, r3
 8005b0c:	e7e0      	b.n	8005ad0 <floor+0x44>
 8005b0e:	2f33      	cmp	r7, #51	; 0x33
 8005b10:	dd0f      	ble.n	8005b32 <floor+0xa6>
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	429f      	cmp	r7, r3
 8005b18:	d107      	bne.n	8005b2a <floor+0x9e>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	000b      	movs	r3, r1
 8005b1e:	4660      	mov	r0, ip
 8005b20:	0031      	movs	r1, r6
 8005b22:	f7fa fcbf 	bl	80004a4 <__aeabi_dadd>
 8005b26:	4684      	mov	ip, r0
 8005b28:	000e      	movs	r6, r1
 8005b2a:	4660      	mov	r0, ip
 8005b2c:	0031      	movs	r1, r6
 8005b2e:	b003      	add	sp, #12
 8005b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b32:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <floor+0x110>)
 8005b34:	189b      	adds	r3, r3, r2
 8005b36:	2201      	movs	r2, #1
 8005b38:	4252      	negs	r2, r2
 8005b3a:	40da      	lsrs	r2, r3
 8005b3c:	9200      	str	r2, [sp, #0]
 8005b3e:	4210      	tst	r0, r2
 8005b40:	d0f3      	beq.n	8005b2a <floor+0x9e>
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <floor+0x100>)
 8005b44:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <floor+0x104>)
 8005b46:	4660      	mov	r0, ip
 8005b48:	0031      	movs	r1, r6
 8005b4a:	f7fa fcab 	bl	80004a4 <__aeabi_dadd>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	f7fa fc75 	bl	8000440 <__aeabi_dcmpgt>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0ba      	beq.n	8005ad0 <floor+0x44>
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	da02      	bge.n	8005b64 <floor+0xd8>
 8005b5e:	2f14      	cmp	r7, #20
 8005b60:	d103      	bne.n	8005b6a <floor+0xde>
 8005b62:	3501      	adds	r5, #1
 8005b64:	9b00      	ldr	r3, [sp, #0]
 8005b66:	439c      	bics	r4, r3
 8005b68:	e7b2      	b.n	8005ad0 <floor+0x44>
 8005b6a:	2334      	movs	r3, #52	; 0x34
 8005b6c:	1bdf      	subs	r7, r3, r7
 8005b6e:	3b33      	subs	r3, #51	; 0x33
 8005b70:	40bb      	lsls	r3, r7
 8005b72:	18e4      	adds	r4, r4, r3
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	429c      	cmp	r4, r3
 8005b78:	419b      	sbcs	r3, r3
 8005b7a:	425b      	negs	r3, r3
 8005b7c:	18f5      	adds	r5, r6, r3
 8005b7e:	e7f1      	b.n	8005b64 <floor+0xd8>
 8005b80:	2400      	movs	r4, #0
 8005b82:	0025      	movs	r5, r4
 8005b84:	e7a4      	b.n	8005ad0 <floor+0x44>
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	fffffc01 	.word	0xfffffc01
 8005b8c:	8800759c 	.word	0x8800759c
 8005b90:	7e37e43c 	.word	0x7e37e43c
 8005b94:	bff00000 	.word	0xbff00000
 8005b98:	000fffff 	.word	0x000fffff
 8005b9c:	fffffbed 	.word	0xfffffbed

08005ba0 <scalbn>:
 8005ba0:	004b      	lsls	r3, r1, #1
 8005ba2:	b570      	push	{r4, r5, r6, lr}
 8005ba4:	0d5b      	lsrs	r3, r3, #21
 8005ba6:	0014      	movs	r4, r2
 8005ba8:	000a      	movs	r2, r1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10d      	bne.n	8005bca <scalbn+0x2a>
 8005bae:	004b      	lsls	r3, r1, #1
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	4303      	orrs	r3, r0
 8005bb4:	d010      	beq.n	8005bd8 <scalbn+0x38>
 8005bb6:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <scalbn+0xb4>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f7fb fbb1 	bl	8001320 <__aeabi_dmul>
 8005bbe:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <scalbn+0xb8>)
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	da0a      	bge.n	8005bda <scalbn+0x3a>
 8005bc4:	4a25      	ldr	r2, [pc, #148]	; (8005c5c <scalbn+0xbc>)
 8005bc6:	4b26      	ldr	r3, [pc, #152]	; (8005c60 <scalbn+0xc0>)
 8005bc8:	e019      	b.n	8005bfe <scalbn+0x5e>
 8005bca:	4d26      	ldr	r5, [pc, #152]	; (8005c64 <scalbn+0xc4>)
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	d108      	bne.n	8005be2 <scalbn+0x42>
 8005bd0:	0002      	movs	r2, r0
 8005bd2:	000b      	movs	r3, r1
 8005bd4:	f7fa fc66 	bl	80004a4 <__aeabi_dadd>
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
 8005bda:	000a      	movs	r2, r1
 8005bdc:	004b      	lsls	r3, r1, #1
 8005bde:	0d5b      	lsrs	r3, r3, #21
 8005be0:	3b36      	subs	r3, #54	; 0x36
 8005be2:	4d21      	ldr	r5, [pc, #132]	; (8005c68 <scalbn+0xc8>)
 8005be4:	18e3      	adds	r3, r4, r3
 8005be6:	42ab      	cmp	r3, r5
 8005be8:	dd0c      	ble.n	8005c04 <scalbn+0x64>
 8005bea:	4c20      	ldr	r4, [pc, #128]	; (8005c6c <scalbn+0xcc>)
 8005bec:	4d20      	ldr	r5, [pc, #128]	; (8005c70 <scalbn+0xd0>)
 8005bee:	2900      	cmp	r1, #0
 8005bf0:	da01      	bge.n	8005bf6 <scalbn+0x56>
 8005bf2:	4c1e      	ldr	r4, [pc, #120]	; (8005c6c <scalbn+0xcc>)
 8005bf4:	4d1f      	ldr	r5, [pc, #124]	; (8005c74 <scalbn+0xd4>)
 8005bf6:	0020      	movs	r0, r4
 8005bf8:	0029      	movs	r1, r5
 8005bfa:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <scalbn+0xcc>)
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <scalbn+0xd0>)
 8005bfe:	f7fb fb8f 	bl	8001320 <__aeabi_dmul>
 8005c02:	e7e9      	b.n	8005bd8 <scalbn+0x38>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dd05      	ble.n	8005c14 <scalbn+0x74>
 8005c08:	4c1b      	ldr	r4, [pc, #108]	; (8005c78 <scalbn+0xd8>)
 8005c0a:	051b      	lsls	r3, r3, #20
 8005c0c:	4022      	ands	r2, r4
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	0011      	movs	r1, r2
 8005c12:	e7e1      	b.n	8005bd8 <scalbn+0x38>
 8005c14:	001d      	movs	r5, r3
 8005c16:	3535      	adds	r5, #53	; 0x35
 8005c18:	da13      	bge.n	8005c42 <scalbn+0xa2>
 8005c1a:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <scalbn+0xdc>)
 8005c1c:	0fcb      	lsrs	r3, r1, #31
 8005c1e:	4294      	cmp	r4, r2
 8005c20:	dd08      	ble.n	8005c34 <scalbn+0x94>
 8005c22:	4812      	ldr	r0, [pc, #72]	; (8005c6c <scalbn+0xcc>)
 8005c24:	4912      	ldr	r1, [pc, #72]	; (8005c70 <scalbn+0xd0>)
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <scalbn+0x8e>
 8005c2a:	4810      	ldr	r0, [pc, #64]	; (8005c6c <scalbn+0xcc>)
 8005c2c:	4911      	ldr	r1, [pc, #68]	; (8005c74 <scalbn+0xd4>)
 8005c2e:	4a0f      	ldr	r2, [pc, #60]	; (8005c6c <scalbn+0xcc>)
 8005c30:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <scalbn+0xd0>)
 8005c32:	e7e4      	b.n	8005bfe <scalbn+0x5e>
 8005c34:	4809      	ldr	r0, [pc, #36]	; (8005c5c <scalbn+0xbc>)
 8005c36:	490a      	ldr	r1, [pc, #40]	; (8005c60 <scalbn+0xc0>)
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0c3      	beq.n	8005bc4 <scalbn+0x24>
 8005c3c:	4807      	ldr	r0, [pc, #28]	; (8005c5c <scalbn+0xbc>)
 8005c3e:	4910      	ldr	r1, [pc, #64]	; (8005c80 <scalbn+0xe0>)
 8005c40:	e7c0      	b.n	8005bc4 <scalbn+0x24>
 8005c42:	4c0d      	ldr	r4, [pc, #52]	; (8005c78 <scalbn+0xd8>)
 8005c44:	3336      	adds	r3, #54	; 0x36
 8005c46:	4022      	ands	r2, r4
 8005c48:	051b      	lsls	r3, r3, #20
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	2200      	movs	r2, #0
 8005c50:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <scalbn+0xe4>)
 8005c52:	e7d4      	b.n	8005bfe <scalbn+0x5e>
 8005c54:	43500000 	.word	0x43500000
 8005c58:	ffff3cb0 	.word	0xffff3cb0
 8005c5c:	c2f8f359 	.word	0xc2f8f359
 8005c60:	01a56e1f 	.word	0x01a56e1f
 8005c64:	000007ff 	.word	0x000007ff
 8005c68:	000007fe 	.word	0x000007fe
 8005c6c:	8800759c 	.word	0x8800759c
 8005c70:	7e37e43c 	.word	0x7e37e43c
 8005c74:	fe37e43c 	.word	0xfe37e43c
 8005c78:	800fffff 	.word	0x800fffff
 8005c7c:	0000c350 	.word	0x0000c350
 8005c80:	81a56e1f 	.word	0x81a56e1f
 8005c84:	3c900000 	.word	0x3c900000

08005c88 <_init>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr

08005c94 <_fini>:
 8005c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9a:	bc08      	pop	{r3}
 8005c9c:	469e      	mov	lr, r3
 8005c9e:	4770      	bx	lr
