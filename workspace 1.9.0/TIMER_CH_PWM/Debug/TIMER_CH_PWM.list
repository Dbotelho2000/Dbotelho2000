
TIMER_CH_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002614  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002760  08002760  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002760  08002760  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002760  08002760  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002774  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002774  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093d9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001773  00000000  00000000  0002940d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014335  00000000  00000000  0002beb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac09  00000000  00000000  000401ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083552  00000000  00000000  0004adf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce348  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000ce398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080026b4 	.word	0x080026b4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080026b4 	.word	0x080026b4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa50 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f816 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f93a 	bl	800049c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000228:	f000 f86c 	bl	8000304 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <main+0x34>)
 800022e:	2100      	movs	r1, #0
 8000230:	0018      	movs	r0, r3
 8000232:	f001 fa5b 	bl	80016ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <main+0x34>)
 8000238:	2104      	movs	r1, #4
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fa56 	bl	80016ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000240:	4b02      	ldr	r3, [pc, #8]	; (800024c <main+0x34>)
 8000242:	2108      	movs	r1, #8
 8000244:	0018      	movs	r0, r3
 8000246:	f001 fa51 	bl	80016ec <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0x32>
 800024c:	20000028 	.word	0x20000028

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b093      	sub	sp, #76	; 0x4c
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	2414      	movs	r4, #20
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	2334      	movs	r3, #52	; 0x34
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f002 fa1f 	bl	80026a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	0018      	movs	r0, r3
 800026a:	2310      	movs	r3, #16
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f002 fa18 	bl	80026a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fcff 	bl	8000c7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2202      	movs	r2, #2
 8000282:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2240      	movs	r2, #64	; 0x40
 8000298:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2202      	movs	r2, #2
 800029e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2202      	movs	r2, #2
 80002a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2208      	movs	r2, #8
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	0292      	lsls	r2, r2, #10
 80002b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0592      	lsls	r2, r2, #22
 80002c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fd19 	bl	8000cfc <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ce:	f000 f8fb 	bl	80004c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2207      	movs	r2, #7
 80002d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2202      	movs	r2, #2
 80002dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 f81a 	bl	8001328 <HAL_RCC_ClockConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002f8:	f000 f8e6 	bl	80004c8 <Error_Handler>
  }
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b013      	add	sp, #76	; 0x4c
 8000302:	bd90      	pop	{r4, r7, pc}

08000304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b098      	sub	sp, #96	; 0x60
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030a:	2354      	movs	r3, #84	; 0x54
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	0018      	movs	r0, r3
 8000310:	230c      	movs	r3, #12
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f002 f9c5 	bl	80026a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031a:	2338      	movs	r3, #56	; 0x38
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	0018      	movs	r0, r3
 8000320:	231c      	movs	r3, #28
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f002 f9bd 	bl	80026a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	0018      	movs	r0, r3
 800032e:	2334      	movs	r3, #52	; 0x34
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f002 f9b6 	bl	80026a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000338:	4b54      	ldr	r3, [pc, #336]	; (800048c <MX_TIM1_Init+0x188>)
 800033a:	4a55      	ldr	r2, [pc, #340]	; (8000490 <MX_TIM1_Init+0x18c>)
 800033c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 800033e:	4b53      	ldr	r3, [pc, #332]	; (800048c <MX_TIM1_Init+0x188>)
 8000340:	2205      	movs	r2, #5
 8000342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b51      	ldr	r3, [pc, #324]	; (800048c <MX_TIM1_Init+0x188>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800034a:	4b50      	ldr	r3, [pc, #320]	; (800048c <MX_TIM1_Init+0x188>)
 800034c:	4a51      	ldr	r2, [pc, #324]	; (8000494 <MX_TIM1_Init+0x190>)
 800034e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b4e      	ldr	r3, [pc, #312]	; (800048c <MX_TIM1_Init+0x188>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000356:	4b4d      	ldr	r3, [pc, #308]	; (800048c <MX_TIM1_Init+0x188>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800035c:	4b4b      	ldr	r3, [pc, #300]	; (800048c <MX_TIM1_Init+0x188>)
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000362:	4b4a      	ldr	r3, [pc, #296]	; (800048c <MX_TIM1_Init+0x188>)
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f969 	bl	800163c <HAL_TIM_PWM_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800036e:	f000 f8ab 	bl	80004c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000372:	2154      	movs	r1, #84	; 0x54
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000386:	187a      	adds	r2, r7, r1
 8000388:	4b40      	ldr	r3, [pc, #256]	; (800048c <MX_TIM1_Init+0x188>)
 800038a:	0011      	movs	r1, r2
 800038c:	0018      	movs	r0, r3
 800038e:	f002 f83f 	bl	8002410 <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000396:	f000 f897 	bl	80004c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800039a:	2138      	movs	r1, #56	; 0x38
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2260      	movs	r2, #96	; 0x60
 80003a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 249;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	22f9      	movs	r2, #249	; 0xf9
 80003a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	0052      	lsls	r2, r2, #1
 80003c0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	4b30      	ldr	r3, [pc, #192]	; (800048c <MX_TIM1_Init+0x188>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 fba2 	bl	8001b18 <HAL_TIM_PWM_ConfigChannel>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80003d8:	f000 f876 	bl	80004c8 <Error_Handler>
  }
  sConfigOC.Pulse = 499;
 80003dc:	2138      	movs	r1, #56	; 0x38
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	22f4      	movs	r2, #244	; 0xf4
 80003e2:	32ff      	adds	r2, #255	; 0xff
 80003e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003e6:	1879      	adds	r1, r7, r1
 80003e8:	4b28      	ldr	r3, [pc, #160]	; (800048c <MX_TIM1_Init+0x188>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fb93 	bl	8001b18 <HAL_TIM_PWM_ConfigChannel>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80003f6:	f000 f867 	bl	80004c8 <Error_Handler>
  }
  sConfigOC.Pulse = 749;
 80003fa:	2138      	movs	r1, #56	; 0x38
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	4a26      	ldr	r2, [pc, #152]	; (8000498 <MX_TIM1_Init+0x194>)
 8000400:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000402:	1879      	adds	r1, r7, r1
 8000404:	4b21      	ldr	r3, [pc, #132]	; (800048c <MX_TIM1_Init+0x188>)
 8000406:	2208      	movs	r2, #8
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fb85 	bl	8001b18 <HAL_TIM_PWM_ConfigChannel>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000412:	f000 f859 	bl	80004c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	0192      	lsls	r2, r2, #6
 800043a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	0492      	lsls	r2, r2, #18
 8000454:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000468:	1d3a      	adds	r2, r7, #4
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_TIM1_Init+0x188>)
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f002 f836 	bl	80024e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_TIM1_Init+0x178>
  {
    Error_Handler();
 8000478:	f000 f826 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <MX_TIM1_Init+0x188>)
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f880 	bl	8000584 <HAL_TIM_MspPostInit>

}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b018      	add	sp, #96	; 0x60
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000028 	.word	0x20000028
 8000490:	40012c00 	.word	0x40012c00
 8000494:	000003e7 	.word	0x000003e7
 8000498:	000002ed 	.word	0x000002ed

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_GPIO_Init+0x28>)
 80004a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <MX_GPIO_Init+0x28>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	635a      	str	r2, [r3, #52]	; 0x34
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <MX_GPIO_Init+0x28>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i
}
 80004ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <Error_Handler+0x8>
	...

080004d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <HAL_MspInit+0x4c>)
 80004dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <HAL_MspInit+0x4c>)
 80004e0:	2101      	movs	r1, #1
 80004e2:	430a      	orrs	r2, r1
 80004e4:	641a      	str	r2, [r3, #64]	; 0x40
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_MspInit+0x4c>)
 80004e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ea:	2201      	movs	r2, #1
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_MspInit+0x4c>)
 80004f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_MspInit+0x4c>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0549      	lsls	r1, r1, #21
 80004fc:	430a      	orrs	r2, r1
 80004fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <HAL_MspInit+0x4c>)
 8000502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	055b      	lsls	r3, r3, #21
 8000508:	4013      	ands	r3, r2
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800050e:	23c0      	movs	r3, #192	; 0xc0
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	0018      	movs	r0, r3
 8000514:	f000 f95a 	bl	80007cc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000

08000524 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a12      	ldr	r2, [pc, #72]	; (800057c <HAL_TIM_PWM_MspInit+0x58>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d11d      	bne.n	8000572 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_TIM_PWM_MspInit+0x5c>)
 8000538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_TIM_PWM_MspInit+0x5c>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0109      	lsls	r1, r1, #4
 8000540:	430a      	orrs	r2, r1
 8000542:	641a      	str	r2, [r3, #64]	; 0x40
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_TIM_PWM_MspInit+0x5c>)
 8000546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	200d      	movs	r0, #13
 8000558:	f000 f9fa 	bl	8000950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800055c:	200d      	movs	r0, #13
 800055e:	f000 fa0c 	bl	800097a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	200e      	movs	r0, #14
 8000568:	f000 f9f2 	bl	8000950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800056c:	200e      	movs	r0, #14
 800056e:	f000 fa04 	bl	800097a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b004      	add	sp, #16
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40012c00 	.word	0x40012c00
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	240c      	movs	r4, #12
 800058e:	193b      	adds	r3, r7, r4
 8000590:	0018      	movs	r0, r3
 8000592:	2314      	movs	r3, #20
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 f884 	bl	80026a4 <memset>
  if(htim->Instance==TIM1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a15      	ldr	r2, [pc, #84]	; (80005f8 <HAL_TIM_MspPostInit+0x74>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d123      	bne.n	80005ee <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_TIM_MspPostInit+0x78>)
 80005a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_TIM_MspPostInit+0x78>)
 80005ac:	2101      	movs	r1, #1
 80005ae:	430a      	orrs	r2, r1
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_TIM_MspPostInit+0x78>)
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	2201      	movs	r2, #1
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	22e0      	movs	r2, #224	; 0xe0
 80005c2:	00d2      	lsls	r2, r2, #3
 80005c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	0021      	movs	r1, r4
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2202      	movs	r2, #2
 80005cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2202      	movs	r2, #2
 80005de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	187a      	adds	r2, r7, r1
 80005e2:	23a0      	movs	r3, #160	; 0xa0
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 f9e3 	bl	80009b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b009      	add	sp, #36	; 0x24
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	40012c00 	.word	0x40012c00
 80005fc:	40021000 	.word	0x40021000

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <NMI_Handler+0x4>

08000606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000624:	f000 f8b6 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 f93c 	bl	80018b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000028 	.word	0x20000028

08000648 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <TIM1_CC_IRQHandler+0x14>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f930 	bl	80018b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	20000028 	.word	0x20000028

08000660 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff fff6 	bl	8000660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f001 ffdf 	bl	800265c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800069e:	f7ff fdbb 	bl	8000218 <main>

080006a2 <LoopForever>:

LoopForever:
  b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b0:	08002768 	.word	0x08002768
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b8:	20000078 	.word	0x20000078

080006bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <HAL_Init+0x3c>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_Init+0x3c>)
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	0049      	lsls	r1, r1, #1
 80006d6:	430a      	orrs	r2, r1
 80006d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006da:	2003      	movs	r0, #3
 80006dc:	f000 f810 	bl	8000700 <HAL_InitTick>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d003      	beq.n	80006ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e001      	b.n	80006f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f7ff fef2 	bl	80004d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	781b      	ldrb	r3, [r3, #0]
}
 80006f4:	0018      	movs	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b002      	add	sp, #8
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000708:	230f      	movs	r3, #15
 800070a:	18fb      	adds	r3, r7, r3
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <HAL_InitTick+0x88>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d02b      	beq.n	8000770 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <HAL_InitTick+0x8c>)
 800071a:	681c      	ldr	r4, [r3, #0]
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <HAL_InitTick+0x88>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	0019      	movs	r1, r3
 8000722:	23fa      	movs	r3, #250	; 0xfa
 8000724:	0098      	lsls	r0, r3, #2
 8000726:	f7ff fceb 	bl	8000100 <__udivsi3>
 800072a:	0003      	movs	r3, r0
 800072c:	0019      	movs	r1, r3
 800072e:	0020      	movs	r0, r4
 8000730:	f7ff fce6 	bl	8000100 <__udivsi3>
 8000734:	0003      	movs	r3, r0
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f92f 	bl	800099a <HAL_SYSTICK_Config>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d112      	bne.n	8000766 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d80a      	bhi.n	800075c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	2301      	movs	r3, #1
 800074a:	425b      	negs	r3, r3
 800074c:	2200      	movs	r2, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f000 f8fe 	bl	8000950 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_InitTick+0x90>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e00d      	b.n	8000778 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800075c:	230f      	movs	r3, #15
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	e008      	b.n	8000778 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000766:	230f      	movs	r3, #15
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e003      	b.n	8000778 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000778:	230f      	movs	r3, #15
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	781b      	ldrb	r3, [r3, #0]
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b005      	add	sp, #20
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000008 	.word	0x20000008
 800078c:	20000000 	.word	0x20000000
 8000790:	20000004 	.word	0x20000004

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	001a      	movs	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	18d2      	adds	r2, r2, r3
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <HAL_IncTick+0x20>)
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000074 	.word	0x20000074

080007b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	20000074 	.word	0x20000074

080007cc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80007da:	4013      	ands	r3, r2
 80007dc:	0019      	movs	r1, r3
 80007de:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	40010000 	.word	0x40010000
 80007f4:	fffff9ff 	.word	0xfffff9ff

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b7f      	cmp	r3, #127	; 0x7f
 800080a:	d809      	bhi.n	8000820 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	231f      	movs	r3, #31
 8000814:	401a      	ands	r2, r3
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_EnableIRQ+0x30>)
 8000818:	2101      	movs	r1, #1
 800081a:	4091      	lsls	r1, r2
 800081c:	000a      	movs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	e000e100 	.word	0xe000e100

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b7f      	cmp	r3, #127	; 0x7f
 8000840:	d828      	bhi.n	8000894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000842:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <__NVIC_SetPriority+0xd4>)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	33c0      	adds	r3, #192	; 0xc0
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	589b      	ldr	r3, [r3, r2]
 8000852:	1dfa      	adds	r2, r7, #7
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	0011      	movs	r1, r2
 8000858:	2203      	movs	r2, #3
 800085a:	400a      	ands	r2, r1
 800085c:	00d2      	lsls	r2, r2, #3
 800085e:	21ff      	movs	r1, #255	; 0xff
 8000860:	4091      	lsls	r1, r2
 8000862:	000a      	movs	r2, r1
 8000864:	43d2      	mvns	r2, r2
 8000866:	401a      	ands	r2, r3
 8000868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	401a      	ands	r2, r3
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	2303      	movs	r3, #3
 800087a:	4003      	ands	r3, r0
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	481f      	ldr	r0, [pc, #124]	; (8000900 <__NVIC_SetPriority+0xd4>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	089b      	lsrs	r3, r3, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	33c0      	adds	r3, #192	; 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000892:	e031      	b.n	80008f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <__NVIC_SetPriority+0xd8>)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	230f      	movs	r3, #15
 800089e:	400b      	ands	r3, r1
 80008a0:	3b08      	subs	r3, #8
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	3306      	adds	r3, #6
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	3304      	adds	r3, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	0011      	movs	r1, r2
 80008b4:	2203      	movs	r2, #3
 80008b6:	400a      	ands	r2, r1
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	21ff      	movs	r1, #255	; 0xff
 80008bc:	4091      	lsls	r1, r2
 80008be:	000a      	movs	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	401a      	ands	r2, r3
 80008c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	401a      	ands	r2, r3
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	2303      	movs	r3, #3
 80008d6:	4003      	ands	r3, r0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001c      	movs	r4, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	4023      	ands	r3, r4
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	430a      	orrs	r2, r1
 80008ee:	3306      	adds	r3, #6
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18c3      	adds	r3, r0, r3
 80008f4:	3304      	adds	r3, #4
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b003      	add	sp, #12
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	045b      	lsls	r3, r3, #17
 8000918:	429a      	cmp	r2, r3
 800091a:	d301      	bcc.n	8000920 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091c:	2301      	movs	r3, #1
 800091e:	e010      	b.n	8000942 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <SysTick_Config+0x44>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	3a01      	subs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000928:	2301      	movs	r3, #1
 800092a:	425b      	negs	r3, r3
 800092c:	2103      	movs	r1, #3
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff7c 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <SysTick_Config+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <SysTick_Config+0x44>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	210f      	movs	r1, #15
 800095c:	187b      	adds	r3, r7, r1
 800095e:	1c02      	adds	r2, r0, #0
 8000960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	187b      	adds	r3, r7, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	0002      	movs	r2, r0
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ff33 	bl	80007f8 <__NVIC_EnableIRQ>
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ffaf 	bl	8000908 <SysTick_Config>
 80009aa:	0003      	movs	r3, r0
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e147      	b.n	8000c54 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d100      	bne.n	80009dc <HAL_GPIO_Init+0x28>
 80009da:	e138      	b.n	8000c4e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2203      	movs	r2, #3
 80009e2:	4013      	ands	r3, r2
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d005      	beq.n	80009f4 <HAL_GPIO_Init+0x40>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2203      	movs	r2, #3
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	409a      	lsls	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	409a      	lsls	r2, r3
 8000a16:	0013      	movs	r3, r2
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	2201      	movs	r2, #1
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d017      	beq.n	8000a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	0013      	movs	r3, r2
 8000a72:	43da      	mvns	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2203      	movs	r2, #3
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	58d3      	ldr	r3, [r2, r3]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	2207      	movs	r2, #7
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	2107      	movs	r1, #7
 8000aca:	400b      	ands	r3, r1
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	6939      	ldr	r1, [r7, #16]
 8000ae4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	43da      	mvns	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2203      	movs	r2, #3
 8000b04:	401a      	ands	r2, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	23c0      	movs	r3, #192	; 0xc0
 8000b20:	029b      	lsls	r3, r3, #10
 8000b22:	4013      	ands	r3, r2
 8000b24:	d100      	bne.n	8000b28 <HAL_GPIO_Init+0x174>
 8000b26:	e092      	b.n	8000c4e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b28:	4a50      	ldr	r2, [pc, #320]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3318      	adds	r3, #24
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	589b      	ldr	r3, [r3, r2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	220f      	movs	r2, #15
 8000b40:	409a      	lsls	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	43da      	mvns	r2, r3
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	23a0      	movs	r3, #160	; 0xa0
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d013      	beq.n	8000b7e <HAL_GPIO_Init+0x1ca>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a45      	ldr	r2, [pc, #276]	; (8000c70 <HAL_GPIO_Init+0x2bc>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d00d      	beq.n	8000b7a <HAL_GPIO_Init+0x1c6>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a44      	ldr	r2, [pc, #272]	; (8000c74 <HAL_GPIO_Init+0x2c0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d007      	beq.n	8000b76 <HAL_GPIO_Init+0x1c2>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a43      	ldr	r2, [pc, #268]	; (8000c78 <HAL_GPIO_Init+0x2c4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_GPIO_Init+0x1be>
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x1cc>
 8000b72:	2305      	movs	r3, #5
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x1cc>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x1cc>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x1cc>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	2103      	movs	r1, #3
 8000b84:	400a      	ands	r2, r1
 8000b86:	00d2      	lsls	r2, r2, #3
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b90:	4936      	ldr	r1, [pc, #216]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3318      	adds	r3, #24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b9e:	4a33      	ldr	r2, [pc, #204]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	58d3      	ldr	r3, [r2, r3]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	025b      	lsls	r3, r3, #9
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bc4:	4929      	ldr	r1, [pc, #164]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000bcc:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000bce:	2384      	movs	r3, #132	; 0x84
 8000bd0:	58d3      	ldr	r3, [r2, r3]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	029b      	lsls	r3, r3, #10
 8000be6:	4013      	ands	r3, r2
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bf2:	491e      	ldr	r1, [pc, #120]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000bf4:	2284      	movs	r2, #132	; 0x84
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43da      	mvns	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	035b      	lsls	r3, r3, #13
 8000c12:	4013      	ands	r3, r2
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	039b      	lsls	r3, r3, #14
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_GPIO_Init+0x2b8>)
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	40da      	lsrs	r2, r3
 8000c5c:	1e13      	subs	r3, r2, #0
 8000c5e:	d000      	beq.n	8000c62 <HAL_GPIO_Init+0x2ae>
 8000c60:	e6b0      	b.n	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b006      	add	sp, #24
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021800 	.word	0x40021800
 8000c70:	50000400 	.word	0x50000400
 8000c74:	50000800 	.word	0x50000800
 8000c78:	50000c00 	.word	0x50000c00

08000c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d11f      	bne.n	8000ce0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	189b      	adds	r3, r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fa26 	bl	8000100 <__udivsi3>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cba:	e008      	b.n	8000cce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	e001      	b.n	8000cce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e009      	b.n	8000ce2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d0ed      	beq.n	8000cbc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	fffff9ff 	.word	0xfffff9ff
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	000f4240 	.word	0x000f4240

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e2f9      	b.n	8001302 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4013      	ands	r3, r2
 8000d16:	d100      	bne.n	8000d1a <HAL_RCC_OscConfig+0x1e>
 8000d18:	e07c      	b.n	8000e14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d1a:	4bc3      	ldr	r3, [pc, #780]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2238      	movs	r2, #56	; 0x38
 8000d20:	4013      	ands	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d24:	4bc0      	ldr	r3, [pc, #768]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	d102      	bne.n	8000d3a <HAL_RCC_OscConfig+0x3e>
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d002      	beq.n	8000d40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d10b      	bne.n	8000d58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	4bb9      	ldr	r3, [pc, #740]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	029b      	lsls	r3, r3, #10
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d062      	beq.n	8000e12 <HAL_RCC_OscConfig+0x116>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d15e      	bne.n	8000e12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e2d4      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	025b      	lsls	r3, r3, #9
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d107      	bne.n	8000d74 <HAL_RCC_OscConfig+0x78>
 8000d64:	4bb0      	ldr	r3, [pc, #704]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4baf      	ldr	r3, [pc, #700]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0249      	lsls	r1, r1, #9
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e020      	b.n	8000db6 <HAL_RCC_OscConfig+0xba>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	23a0      	movs	r3, #160	; 0xa0
 8000d7a:	02db      	lsls	r3, r3, #11
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d10e      	bne.n	8000d9e <HAL_RCC_OscConfig+0xa2>
 8000d80:	4ba9      	ldr	r3, [pc, #676]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4ba8      	ldr	r3, [pc, #672]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	02c9      	lsls	r1, r1, #11
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	4ba6      	ldr	r3, [pc, #664]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4ba5      	ldr	r3, [pc, #660]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0249      	lsls	r1, r1, #9
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e00b      	b.n	8000db6 <HAL_RCC_OscConfig+0xba>
 8000d9e:	4ba2      	ldr	r3, [pc, #648]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4ba1      	ldr	r3, [pc, #644]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000da4:	49a1      	ldr	r1, [pc, #644]	; (800102c <HAL_RCC_OscConfig+0x330>)
 8000da6:	400a      	ands	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	4b9f      	ldr	r3, [pc, #636]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b9e      	ldr	r3, [pc, #632]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000db0:	499f      	ldr	r1, [pc, #636]	; (8001030 <HAL_RCC_OscConfig+0x334>)
 8000db2:	400a      	ands	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d014      	beq.n	8000de8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fcfb 	bl	80007b8 <HAL_GetTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fcf6 	bl	80007b8 <HAL_GetTick>
 8000dcc:	0002      	movs	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e293      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dda:	4b93      	ldr	r3, [pc, #588]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	029b      	lsls	r3, r3, #10
 8000de2:	4013      	ands	r3, r2
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xcc>
 8000de6:	e015      	b.n	8000e14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de8:	f7ff fce6 	bl	80007b8 <HAL_GetTick>
 8000dec:	0003      	movs	r3, r0
 8000dee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df2:	f7ff fce1 	bl	80007b8 <HAL_GetTick>
 8000df6:	0002      	movs	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b64      	cmp	r3, #100	; 0x64
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e27e      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e04:	4b88      	ldr	r3, [pc, #544]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d1f0      	bne.n	8000df2 <HAL_RCC_OscConfig+0xf6>
 8000e10:	e000      	b.n	8000e14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2202      	movs	r2, #2
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d100      	bne.n	8000e20 <HAL_RCC_OscConfig+0x124>
 8000e1e:	e099      	b.n	8000f54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e20:	4b81      	ldr	r3, [pc, #516]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2238      	movs	r2, #56	; 0x38
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e2a:	4b7f      	ldr	r3, [pc, #508]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	2203      	movs	r2, #3
 8000e30:	4013      	ands	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b10      	cmp	r3, #16
 8000e38:	d102      	bne.n	8000e40 <HAL_RCC_OscConfig+0x144>
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d002      	beq.n	8000e46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d135      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e46:	4b78      	ldr	r3, [pc, #480]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d005      	beq.n	8000e5e <HAL_RCC_OscConfig+0x162>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e251      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5e:	4b72      	ldr	r3, [pc, #456]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a74      	ldr	r2, [pc, #464]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	0019      	movs	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	021a      	lsls	r2, r3, #8
 8000e6e:	4b6e      	ldr	r3, [pc, #440]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e70:	430a      	orrs	r2, r1
 8000e72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d112      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e7a:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a6e      	ldr	r2, [pc, #440]	; (8001038 <HAL_RCC_OscConfig+0x33c>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	0019      	movs	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	4b67      	ldr	r3, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e8e:	4b66      	ldr	r3, [pc, #408]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0adb      	lsrs	r3, r3, #11
 8000e94:	2207      	movs	r2, #7
 8000e96:	4013      	ands	r3, r2
 8000e98:	4a68      	ldr	r2, [pc, #416]	; (800103c <HAL_RCC_OscConfig+0x340>)
 8000e9a:	40da      	lsrs	r2, r3
 8000e9c:	4b68      	ldr	r3, [pc, #416]	; (8001040 <HAL_RCC_OscConfig+0x344>)
 8000e9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ea0:	4b68      	ldr	r3, [pc, #416]	; (8001044 <HAL_RCC_OscConfig+0x348>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff fc2b 	bl	8000700 <HAL_InitTick>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d051      	beq.n	8000f52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e227      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d030      	beq.n	8000f1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eba:	4b5b      	ldr	r3, [pc, #364]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a5e      	ldr	r2, [pc, #376]	; (8001038 <HAL_RCC_OscConfig+0x33c>)
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	4b57      	ldr	r3, [pc, #348]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000ece:	4b56      	ldr	r3, [pc, #344]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b55      	ldr	r3, [pc, #340]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0049      	lsls	r1, r1, #1
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc6c 	bl	80007b8 <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc67 	bl	80007b8 <HAL_GetTick>
 8000eea:	0002      	movs	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e204      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4013      	ands	r3, r2
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f04:	4b48      	ldr	r3, [pc, #288]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4a4a      	ldr	r2, [pc, #296]	; (8001034 <HAL_RCC_OscConfig+0x338>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	021a      	lsls	r2, r3, #8
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f16:	430a      	orrs	r2, r1
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	e01b      	b.n	8000f54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000f1c:	4b42      	ldr	r3, [pc, #264]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	4949      	ldr	r1, [pc, #292]	; (8001048 <HAL_RCC_OscConfig+0x34c>)
 8000f24:	400a      	ands	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc46 	bl	80007b8 <HAL_GetTick>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f32:	f7ff fc41 	bl	80007b8 <HAL_GetTick>
 8000f36:	0002      	movs	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e1de      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d1f0      	bne.n	8000f32 <HAL_RCC_OscConfig+0x236>
 8000f50:	e000      	b.n	8000f54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2208      	movs	r2, #8
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d047      	beq.n	8000fee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2238      	movs	r2, #56	; 0x38
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b18      	cmp	r3, #24
 8000f68:	d10a      	bne.n	8000f80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4013      	ands	r3, r2
 8000f72:	d03c      	beq.n	8000fee <HAL_RCC_OscConfig+0x2f2>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d138      	bne.n	8000fee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e1c0      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d019      	beq.n	8000fbc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f94:	f7ff fc10 	bl	80007b8 <HAL_GetTick>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fc0b 	bl	80007b8 <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e1a8      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d0f1      	beq.n	8000f9e <HAL_RCC_OscConfig+0x2a2>
 8000fba:	e018      	b.n	8000fee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	438a      	bics	r2, r1
 8000fc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fbf6 	bl	80007b8 <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fbf1 	bl	80007b8 <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e18e      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe8:	2202      	movs	r2, #2
 8000fea:	4013      	ands	r3, r2
 8000fec:	d1f1      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d100      	bne.n	8000ffa <HAL_RCC_OscConfig+0x2fe>
 8000ff8:	e0c6      	b.n	8001188 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffa:	231f      	movs	r3, #31
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2238      	movs	r2, #56	; 0x38
 8001008:	4013      	ands	r3, r2
 800100a:	2b20      	cmp	r3, #32
 800100c:	d11e      	bne.n	800104c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_RCC_OscConfig+0x32c>)
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	2202      	movs	r2, #2
 8001014:	4013      	ands	r3, r2
 8001016:	d100      	bne.n	800101a <HAL_RCC_OscConfig+0x31e>
 8001018:	e0b6      	b.n	8001188 <HAL_RCC_OscConfig+0x48c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d000      	beq.n	8001024 <HAL_RCC_OscConfig+0x328>
 8001022:	e0b1      	b.n	8001188 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e16c      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
 8001028:	40021000 	.word	0x40021000
 800102c:	fffeffff 	.word	0xfffeffff
 8001030:	fffbffff 	.word	0xfffbffff
 8001034:	ffff80ff 	.word	0xffff80ff
 8001038:	ffffc7ff 	.word	0xffffc7ff
 800103c:	00f42400 	.word	0x00f42400
 8001040:	20000000 	.word	0x20000000
 8001044:	20000004 	.word	0x20000004
 8001048:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800104c:	4baf      	ldr	r3, [pc, #700]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800104e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	055b      	lsls	r3, r3, #21
 8001054:	4013      	ands	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x360>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x362>
 800105c:	2300      	movs	r3, #0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d011      	beq.n	8001086 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4baa      	ldr	r3, [pc, #680]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001066:	4ba9      	ldr	r3, [pc, #676]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0549      	lsls	r1, r1, #21
 800106c:	430a      	orrs	r2, r1
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001070:	4ba6      	ldr	r3, [pc, #664]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	055b      	lsls	r3, r3, #21
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800107e:	231f      	movs	r3, #31
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001086:	4ba2      	ldr	r3, [pc, #648]	; (8001310 <HAL_RCC_OscConfig+0x614>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4013      	ands	r3, r2
 8001090:	d11a      	bne.n	80010c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001092:	4b9f      	ldr	r3, [pc, #636]	; (8001310 <HAL_RCC_OscConfig+0x614>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <HAL_RCC_OscConfig+0x614>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0049      	lsls	r1, r1, #1
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fb8a 	bl	80007b8 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010aa:	f7ff fb85 	bl	80007b8 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e122      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010bc:	4b94      	ldr	r3, [pc, #592]	; (8001310 <HAL_RCC_OscConfig+0x614>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d106      	bne.n	80010de <HAL_RCC_OscConfig+0x3e2>
 80010d0:	4b8e      	ldr	r3, [pc, #568]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80010d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010d4:	4b8d      	ldr	r3, [pc, #564]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	65da      	str	r2, [r3, #92]	; 0x5c
 80010dc:	e01c      	b.n	8001118 <HAL_RCC_OscConfig+0x41c>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0x404>
 80010e6:	4b89      	ldr	r3, [pc, #548]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80010e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80010ec:	2104      	movs	r1, #4
 80010ee:	430a      	orrs	r2, r1
 80010f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80010f2:	4b86      	ldr	r3, [pc, #536]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80010f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	430a      	orrs	r2, r1
 80010fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0x41c>
 8001100:	4b82      	ldr	r3, [pc, #520]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001104:	4b81      	ldr	r3, [pc, #516]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001106:	2101      	movs	r1, #1
 8001108:	438a      	bics	r2, r1
 800110a:	65da      	str	r2, [r3, #92]	; 0x5c
 800110c:	4b7f      	ldr	r3, [pc, #508]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800110e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001110:	4b7e      	ldr	r3, [pc, #504]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001112:	2104      	movs	r1, #4
 8001114:	438a      	bics	r2, r1
 8001116:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d014      	beq.n	800114a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fb4a 	bl	80007b8 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001128:	e009      	b.n	800113e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800112a:	f7ff fb45 	bl	80007b8 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	4a77      	ldr	r2, [pc, #476]	; (8001314 <HAL_RCC_OscConfig+0x618>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e0e1      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113e:	4b73      	ldr	r3, [pc, #460]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001142:	2202      	movs	r2, #2
 8001144:	4013      	ands	r3, r2
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x42e>
 8001148:	e013      	b.n	8001172 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114a:	f7ff fb35 	bl	80007b8 <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001152:	e009      	b.n	8001168 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001154:	f7ff fb30 	bl	80007b8 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a6d      	ldr	r2, [pc, #436]	; (8001314 <HAL_RCC_OscConfig+0x618>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e0cc      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001168:	4b68      	ldr	r3, [pc, #416]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800116a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800116c:	2202      	movs	r2, #2
 800116e:	4013      	ands	r3, r2
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001172:	231f      	movs	r3, #31
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800117c:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800117e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001180:	4b62      	ldr	r3, [pc, #392]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001182:	4965      	ldr	r1, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x61c>)
 8001184:	400a      	ands	r2, r1
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d100      	bne.n	8001192 <HAL_RCC_OscConfig+0x496>
 8001190:	e0b6      	b.n	8001300 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001192:	4b5e      	ldr	r3, [pc, #376]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2238      	movs	r2, #56	; 0x38
 8001198:	4013      	ands	r3, r2
 800119a:	2b10      	cmp	r3, #16
 800119c:	d100      	bne.n	80011a0 <HAL_RCC_OscConfig+0x4a4>
 800119e:	e07e      	b.n	800129e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d153      	bne.n	8001250 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a8:	4b58      	ldr	r3, [pc, #352]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80011ae:	495b      	ldr	r1, [pc, #364]	; (800131c <HAL_RCC_OscConfig+0x620>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff fb00 	bl	80007b8 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff fafb 	bl	80007b8 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e098      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d0:	4b4e      	ldr	r3, [pc, #312]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	049b      	lsls	r3, r3, #18
 80011d8:	4013      	ands	r3, r2
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <HAL_RCC_OscConfig+0x624>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	431a      	orrs	r2, r3
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001206:	430a      	orrs	r2, r1
 8001208:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	0449      	lsls	r1, r1, #17
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0549      	lsls	r1, r1, #21
 8001222:	430a      	orrs	r2, r1
 8001224:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fac7 	bl	80007b8 <HAL_GetTick>
 800122a:	0003      	movs	r3, r0
 800122c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001230:	f7ff fac2 	bl	80007b8 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e05f      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	049b      	lsls	r3, r3, #18
 800124a:	4013      	ands	r3, r2
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x534>
 800124e:	e057      	b.n	8001300 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001256:	4931      	ldr	r1, [pc, #196]	; (800131c <HAL_RCC_OscConfig+0x620>)
 8001258:	400a      	ands	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001262:	2103      	movs	r1, #3
 8001264:	438a      	bics	r2, r1
 8001266:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_RCC_OscConfig+0x610>)
 800126e:	492d      	ldr	r1, [pc, #180]	; (8001324 <HAL_RCC_OscConfig+0x628>)
 8001270:	400a      	ands	r2, r1
 8001272:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff faa0 	bl	80007b8 <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fa9b 	bl	80007b8 <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e038      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x610>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	049b      	lsls	r3, r3, #18
 8001298:	4013      	ands	r3, r2
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x582>
 800129c:	e030      	b.n	8001300 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e02b      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_RCC_OscConfig+0x610>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2203      	movs	r2, #3
 80012b4:	401a      	ands	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d11e      	bne.n	80012fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2270      	movs	r2, #112	; 0x70
 80012c2:	401a      	ands	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d117      	bne.n	80012fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	23fe      	movs	r3, #254	; 0xfe
 80012d0:	01db      	lsls	r3, r3, #7
 80012d2:	401a      	ands	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012da:	429a      	cmp	r2, r3
 80012dc:	d10e      	bne.n	80012fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	23f8      	movs	r3, #248	; 0xf8
 80012e2:	039b      	lsls	r3, r3, #14
 80012e4:	401a      	ands	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	0f5b      	lsrs	r3, r3, #29
 80012f2:	075a      	lsls	r2, r3, #29
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b008      	add	sp, #32
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	40007000 	.word	0x40007000
 8001314:	00001388 	.word	0x00001388
 8001318:	efffffff 	.word	0xefffffff
 800131c:	feffffff 	.word	0xfeffffff
 8001320:	1fc1808c 	.word	0x1fc1808c
 8001324:	effeffff 	.word	0xeffeffff

08001328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0e9      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b76      	ldr	r3, [pc, #472]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2207      	movs	r2, #7
 8001342:	4013      	ands	r3, r2
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d91e      	bls.n	8001388 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b73      	ldr	r3, [pc, #460]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2207      	movs	r2, #7
 8001350:	4393      	bics	r3, r2
 8001352:	0019      	movs	r1, r3
 8001354:	4b70      	ldr	r3, [pc, #448]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800135c:	f7ff fa2c 	bl	80007b8 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001364:	e009      	b.n	800137a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001366:	f7ff fa27 	bl	80007b8 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	4a6a      	ldr	r2, [pc, #424]	; (800151c <HAL_RCC_ClockConfig+0x1f4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0ca      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800137a:	4b67      	ldr	r3, [pc, #412]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2207      	movs	r2, #7
 8001380:	4013      	ands	r3, r2
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d1ee      	bne.n	8001366 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2202      	movs	r2, #2
 800138e:	4013      	ands	r3, r2
 8001390:	d015      	beq.n	80013be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
 800139a:	d006      	beq.n	80013aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800139c:	4b60      	ldr	r3, [pc, #384]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80013a2:	21e0      	movs	r1, #224	; 0xe0
 80013a4:	01c9      	lsls	r1, r1, #7
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013aa:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4a5d      	ldr	r2, [pc, #372]	; (8001524 <HAL_RCC_ClockConfig+0x1fc>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4013      	ands	r3, r2
 80013c6:	d057      	beq.n	8001478 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	029b      	lsls	r3, r3, #10
 80013d8:	4013      	ands	r3, r2
 80013da:	d12b      	bne.n	8001434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e097      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d107      	bne.n	80013f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e8:	4b4d      	ldr	r3, [pc, #308]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	049b      	lsls	r3, r3, #18
 80013f0:	4013      	ands	r3, r2
 80013f2:	d11f      	bne.n	8001434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e08b      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	4b47      	ldr	r3, [pc, #284]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4013      	ands	r3, r2
 800140a:	d113      	bne.n	8001434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e07f      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d106      	bne.n	8001426 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	2202      	movs	r2, #2
 800141e:	4013      	ands	r3, r2
 8001420:	d108      	bne.n	8001434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e074      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001426:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	2202      	movs	r2, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e06d      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2207      	movs	r2, #7
 800143a:	4393      	bics	r3, r2
 800143c:	0019      	movs	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001448:	f7ff f9b6 	bl	80007b8 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001450:	e009      	b.n	8001466 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001452:	f7ff f9b1 	bl	80007b8 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4a2f      	ldr	r2, [pc, #188]	; (800151c <HAL_RCC_ClockConfig+0x1f4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e054      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2238      	movs	r2, #56	; 0x38
 800146c:	401a      	ands	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	429a      	cmp	r2, r3
 8001476:	d1ec      	bne.n	8001452 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2207      	movs	r2, #7
 800147e:	4013      	ands	r3, r2
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d21e      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2207      	movs	r2, #7
 800148c:	4393      	bics	r3, r2
 800148e:	0019      	movs	r1, r3
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001498:	f7ff f98e 	bl	80007b8 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014a0:	e009      	b.n	80014b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a2:	f7ff f989 	bl	80007b8 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_RCC_ClockConfig+0x1f4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e02c      	b.n	8001510 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2207      	movs	r2, #7
 80014bc:	4013      	ands	r3, r2
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1ee      	bne.n	80014a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2204      	movs	r2, #4
 80014ca:	4013      	ands	r3, r2
 80014cc:	d009      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <HAL_RCC_ClockConfig+0x200>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	0019      	movs	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80014e2:	f000 f829 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80014e6:	0001      	movs	r1, r0
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	220f      	movs	r2, #15
 80014f0:	401a      	ands	r2, r3
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_RCC_ClockConfig+0x204>)
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	58d3      	ldr	r3, [r2, r3]
 80014f8:	221f      	movs	r2, #31
 80014fa:	4013      	ands	r3, r2
 80014fc:	000a      	movs	r2, r1
 80014fe:	40da      	lsrs	r2, r3
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_ClockConfig+0x208>)
 8001502:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_ClockConfig+0x20c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff f8f9 	bl	8000700 <HAL_InitTick>
 800150e:	0003      	movs	r3, r0
}
 8001510:	0018      	movs	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	b004      	add	sp, #16
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40022000 	.word	0x40022000
 800151c:	00001388 	.word	0x00001388
 8001520:	40021000 	.word	0x40021000
 8001524:	fffff0ff 	.word	0xfffff0ff
 8001528:	ffff8fff 	.word	0xffff8fff
 800152c:	080026cc 	.word	0x080026cc
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2238      	movs	r2, #56	; 0x38
 8001544:	4013      	ands	r3, r2
 8001546:	d10f      	bne.n	8001568 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0adb      	lsrs	r3, r3, #11
 800154e:	2207      	movs	r2, #7
 8001550:	4013      	ands	r3, r2
 8001552:	2201      	movs	r2, #1
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	4835      	ldr	r0, [pc, #212]	; (8001634 <HAL_RCC_GetSysClockFreq+0xfc>)
 800155e:	f7fe fdcf 	bl	8000100 <__udivsi3>
 8001562:	0003      	movs	r3, r0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e05d      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2238      	movs	r2, #56	; 0x38
 800156e:	4013      	ands	r3, r2
 8001570:	2b08      	cmp	r3, #8
 8001572:	d102      	bne.n	800157a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001574:	4b30      	ldr	r3, [pc, #192]	; (8001638 <HAL_RCC_GetSysClockFreq+0x100>)
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	e054      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2238      	movs	r2, #56	; 0x38
 8001580:	4013      	ands	r3, r2
 8001582:	2b10      	cmp	r3, #16
 8001584:	d138      	bne.n	80015f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2203      	movs	r2, #3
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	2207      	movs	r2, #7
 8001598:	4013      	ands	r3, r2
 800159a:	3301      	adds	r3, #1
 800159c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	4824      	ldr	r0, [pc, #144]	; (8001638 <HAL_RCC_GetSysClockFreq+0x100>)
 80015a8:	f7fe fdaa 	bl	8000100 <__udivsi3>
 80015ac:	0003      	movs	r3, r0
 80015ae:	0019      	movs	r1, r3
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	227f      	movs	r2, #127	; 0x7f
 80015b8:	4013      	ands	r3, r2
 80015ba:	434b      	muls	r3, r1
 80015bc:	617b      	str	r3, [r7, #20]
        break;
 80015be:	e00d      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	481c      	ldr	r0, [pc, #112]	; (8001634 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015c4:	f7fe fd9c 	bl	8000100 <__udivsi3>
 80015c8:	0003      	movs	r3, r0
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	227f      	movs	r2, #127	; 0x7f
 80015d4:	4013      	ands	r3, r2
 80015d6:	434b      	muls	r3, r1
 80015d8:	617b      	str	r3, [r7, #20]
        break;
 80015da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0f5b      	lsrs	r3, r3, #29
 80015e2:	2207      	movs	r2, #7
 80015e4:	4013      	ands	r3, r2
 80015e6:	3301      	adds	r3, #1
 80015e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	6978      	ldr	r0, [r7, #20]
 80015ee:	f7fe fd87 	bl	8000100 <__udivsi3>
 80015f2:	0003      	movs	r3, r0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	e015      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2238      	movs	r2, #56	; 0x38
 80015fe:	4013      	ands	r3, r2
 8001600:	2b20      	cmp	r3, #32
 8001602:	d103      	bne.n	800160c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_RCC_GetSysClockFreq+0xf8>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2238      	movs	r2, #56	; 0x38
 8001612:	4013      	ands	r3, r2
 8001614:	2b18      	cmp	r3, #24
 8001616:	d103      	bne.n	8001620 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001618:	23fa      	movs	r3, #250	; 0xfa
 800161a:	01db      	lsls	r3, r3, #7
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	e001      	b.n	8001624 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001624:	693b      	ldr	r3, [r7, #16]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b006      	add	sp, #24
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	00f42400 	.word	0x00f42400
 8001638:	007a1200 	.word	0x007a1200

0800163c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e04a      	b.n	80016e4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	223d      	movs	r2, #61	; 0x3d
 8001652:	5c9b      	ldrb	r3, [r3, r2]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d107      	bne.n	800166a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	223c      	movs	r2, #60	; 0x3c
 800165e:	2100      	movs	r1, #0
 8001660:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	0018      	movs	r0, r3
 8001666:	f7fe ff5d 	bl	8000524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	223d      	movs	r2, #61	; 0x3d
 800166e:	2102      	movs	r1, #2
 8001670:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	0019      	movs	r1, r3
 800167c:	0010      	movs	r0, r2
 800167e:	f000 fb69 	bl	8001d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2248      	movs	r2, #72	; 0x48
 8001686:	2101      	movs	r1, #1
 8001688:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	223e      	movs	r2, #62	; 0x3e
 800168e:	2101      	movs	r1, #1
 8001690:	5499      	strb	r1, [r3, r2]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	223f      	movs	r2, #63	; 0x3f
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	2101      	movs	r1, #1
 80016a0:	5499      	strb	r1, [r3, r2]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2241      	movs	r2, #65	; 0x41
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2242      	movs	r2, #66	; 0x42
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2243      	movs	r2, #67	; 0x43
 80016b6:	2101      	movs	r1, #1
 80016b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2244      	movs	r2, #68	; 0x44
 80016be:	2101      	movs	r1, #1
 80016c0:	5499      	strb	r1, [r3, r2]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2245      	movs	r2, #69	; 0x45
 80016c6:	2101      	movs	r1, #1
 80016c8:	5499      	strb	r1, [r3, r2]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2246      	movs	r2, #70	; 0x46
 80016ce:	2101      	movs	r1, #1
 80016d0:	5499      	strb	r1, [r3, r2]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2247      	movs	r2, #71	; 0x47
 80016d6:	2101      	movs	r1, #1
 80016d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	223d      	movs	r2, #61	; 0x3d
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d108      	bne.n	800170e <HAL_TIM_PWM_Start+0x22>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	223e      	movs	r2, #62	; 0x3e
 8001700:	5c9b      	ldrb	r3, [r3, r2]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	4193      	sbcs	r3, r2
 800170a:	b2db      	uxtb	r3, r3
 800170c:	e037      	b.n	800177e <HAL_TIM_PWM_Start+0x92>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d108      	bne.n	8001726 <HAL_TIM_PWM_Start+0x3a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	223f      	movs	r2, #63	; 0x3f
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	1e5a      	subs	r2, r3, #1
 8001720:	4193      	sbcs	r3, r2
 8001722:	b2db      	uxtb	r3, r3
 8001724:	e02b      	b.n	800177e <HAL_TIM_PWM_Start+0x92>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d108      	bne.n	800173e <HAL_TIM_PWM_Start+0x52>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	5c9b      	ldrb	r3, [r3, r2]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	1e5a      	subs	r2, r3, #1
 8001738:	4193      	sbcs	r3, r2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	e01f      	b.n	800177e <HAL_TIM_PWM_Start+0x92>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d108      	bne.n	8001756 <HAL_TIM_PWM_Start+0x6a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2241      	movs	r2, #65	; 0x41
 8001748:	5c9b      	ldrb	r3, [r3, r2]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	1e5a      	subs	r2, r3, #1
 8001750:	4193      	sbcs	r3, r2
 8001752:	b2db      	uxtb	r3, r3
 8001754:	e013      	b.n	800177e <HAL_TIM_PWM_Start+0x92>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b10      	cmp	r3, #16
 800175a:	d108      	bne.n	800176e <HAL_TIM_PWM_Start+0x82>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2242      	movs	r2, #66	; 0x42
 8001760:	5c9b      	ldrb	r3, [r3, r2]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	1e5a      	subs	r2, r3, #1
 8001768:	4193      	sbcs	r3, r2
 800176a:	b2db      	uxtb	r3, r3
 800176c:	e007      	b.n	800177e <HAL_TIM_PWM_Start+0x92>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2243      	movs	r2, #67	; 0x43
 8001772:	5c9b      	ldrb	r3, [r3, r2]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	3b01      	subs	r3, #1
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	4193      	sbcs	r3, r2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e085      	b.n	8001892 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d104      	bne.n	8001796 <HAL_TIM_PWM_Start+0xaa>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	223e      	movs	r2, #62	; 0x3e
 8001790:	2102      	movs	r1, #2
 8001792:	5499      	strb	r1, [r3, r2]
 8001794:	e023      	b.n	80017de <HAL_TIM_PWM_Start+0xf2>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d104      	bne.n	80017a6 <HAL_TIM_PWM_Start+0xba>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	223f      	movs	r2, #63	; 0x3f
 80017a0:	2102      	movs	r1, #2
 80017a2:	5499      	strb	r1, [r3, r2]
 80017a4:	e01b      	b.n	80017de <HAL_TIM_PWM_Start+0xf2>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d104      	bne.n	80017b6 <HAL_TIM_PWM_Start+0xca>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2240      	movs	r2, #64	; 0x40
 80017b0:	2102      	movs	r1, #2
 80017b2:	5499      	strb	r1, [r3, r2]
 80017b4:	e013      	b.n	80017de <HAL_TIM_PWM_Start+0xf2>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d104      	bne.n	80017c6 <HAL_TIM_PWM_Start+0xda>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2241      	movs	r2, #65	; 0x41
 80017c0:	2102      	movs	r1, #2
 80017c2:	5499      	strb	r1, [r3, r2]
 80017c4:	e00b      	b.n	80017de <HAL_TIM_PWM_Start+0xf2>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d104      	bne.n	80017d6 <HAL_TIM_PWM_Start+0xea>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2242      	movs	r2, #66	; 0x42
 80017d0:	2102      	movs	r1, #2
 80017d2:	5499      	strb	r1, [r3, r2]
 80017d4:	e003      	b.n	80017de <HAL_TIM_PWM_Start+0xf2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2243      	movs	r2, #67	; 0x43
 80017da:	2102      	movs	r1, #2
 80017dc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6839      	ldr	r1, [r7, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 fdee 	bl	80023c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_TIM_PWM_Start+0x1b0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00e      	beq.n	8001814 <HAL_TIM_PWM_Start+0x128>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <HAL_TIM_PWM_Start+0x1b4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_TIM_PWM_Start+0x128>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <HAL_TIM_PWM_Start+0x1b8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_TIM_PWM_Start+0x128>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <HAL_TIM_PWM_Start+0x1bc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_TIM_PWM_Start+0x12c>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_TIM_PWM_Start+0x12e>
 8001818:	2300      	movs	r3, #0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0209      	lsls	r1, r1, #8
 800182c:	430a      	orrs	r2, r1
 800182e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_TIM_PWM_Start+0x1b0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d009      	beq.n	800184e <HAL_TIM_PWM_Start+0x162>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_TIM_PWM_Start+0x1c0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d004      	beq.n	800184e <HAL_TIM_PWM_Start+0x162>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_TIM_PWM_Start+0x1b4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d116      	bne.n	800187c <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_TIM_PWM_Start+0x1c4>)
 8001856:	4013      	ands	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b06      	cmp	r3, #6
 800185e:	d016      	beq.n	800188e <HAL_TIM_PWM_Start+0x1a2>
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	025b      	lsls	r3, r3, #9
 8001866:	429a      	cmp	r2, r3
 8001868:	d011      	beq.n	800188e <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800187a:	e008      	b.n	800188e <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2101      	movs	r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e000      	b.n	8001890 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	40014000 	.word	0x40014000
 80018a4:	40014400 	.word	0x40014400
 80018a8:	40014800 	.word	0x40014800
 80018ac:	40000400 	.word	0x40000400
 80018b0:	00010007 	.word	0x00010007

080018b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2202      	movs	r2, #2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d124      	bne.n	8001914 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2202      	movs	r2, #2
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d11d      	bne.n	8001914 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2203      	movs	r2, #3
 80018de:	4252      	negs	r2, r2
 80018e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2203      	movs	r2, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	d004      	beq.n	80018fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 fa14 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 80018fc:	e007      	b.n	800190e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0018      	movs	r0, r3
 8001902:	f000 fa07 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 fa13 	bl	8001d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2204      	movs	r2, #4
 800191c:	4013      	ands	r3, r2
 800191e:	2b04      	cmp	r3, #4
 8001920:	d125      	bne.n	800196e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2204      	movs	r2, #4
 800192a:	4013      	ands	r3, r2
 800192c:	2b04      	cmp	r3, #4
 800192e:	d11e      	bne.n	800196e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2205      	movs	r2, #5
 8001936:	4252      	negs	r2, r2
 8001938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699a      	ldr	r2, [r3, #24]
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4013      	ands	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	0018      	movs	r0, r3
 8001952:	f000 f9e7 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 8001956:	e007      	b.n	8001968 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	0018      	movs	r0, r3
 800195c:	f000 f9da 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f9e6 	bl	8001d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2208      	movs	r2, #8
 8001976:	4013      	ands	r3, r2
 8001978:	2b08      	cmp	r3, #8
 800197a:	d124      	bne.n	80019c6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2208      	movs	r2, #8
 8001984:	4013      	ands	r3, r2
 8001986:	2b08      	cmp	r3, #8
 8001988:	d11d      	bne.n	80019c6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2209      	movs	r2, #9
 8001990:	4252      	negs	r2, r2
 8001992:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2203      	movs	r2, #3
 80019a2:	4013      	ands	r3, r2
 80019a4:	d004      	beq.n	80019b0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f9bb 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 80019ae:	e007      	b.n	80019c0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 f9ae 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 f9ba 	bl	8001d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	2210      	movs	r2, #16
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b10      	cmp	r3, #16
 80019d2:	d125      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2210      	movs	r2, #16
 80019dc:	4013      	ands	r3, r2
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d11e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2211      	movs	r2, #17
 80019e8:	4252      	negs	r2, r2
 80019ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2208      	movs	r2, #8
 80019f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	23c0      	movs	r3, #192	; 0xc0
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4013      	ands	r3, r2
 80019fe:	d004      	beq.n	8001a0a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 f98e 	bl	8001d24 <HAL_TIM_IC_CaptureCallback>
 8001a08:	e007      	b.n	8001a1a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 f981 	bl	8001d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 f98d 	bl	8001d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d10f      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2202      	movs	r2, #2
 8001a42:	4252      	negs	r2, r2
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f95b 	bl	8001d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b80      	cmp	r3, #128	; 0x80
 8001a5a:	d10f      	bne.n	8001a7c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b80      	cmp	r3, #128	; 0x80
 8001a68:	d108      	bne.n	8001a7c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2281      	movs	r2, #129	; 0x81
 8001a70:	4252      	negs	r2, r2
 8001a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 fde0 	bl	800263c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	401a      	ands	r2, r3
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d10e      	bne.n	8001aae <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b80      	cmp	r3, #128	; 0x80
 8001a9c:	d107      	bne.n	8001aae <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <HAL_TIM_IRQHandler+0x260>)
 8001aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 fdcf 	bl	800264c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d10f      	bne.n	8001adc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d108      	bne.n	8001adc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2241      	movs	r2, #65	; 0x41
 8001ad0:	4252      	negs	r2, r2
 8001ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 f934 	bl	8001d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d10f      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d108      	bne.n	8001b0a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2221      	movs	r2, #33	; 0x21
 8001afe:	4252      	negs	r2, r2
 8001b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fd91 	bl	800262c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	fffffeff 	.word	0xfffffeff

08001b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	223c      	movs	r2, #60	; 0x3c
 8001b28:	5c9b      	ldrb	r3, [r3, r2]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0df      	b.n	8001cf2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	223c      	movs	r2, #60	; 0x3c
 8001b36:	2101      	movs	r1, #1
 8001b38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b14      	cmp	r3, #20
 8001b3e:	d900      	bls.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8001b40:	e0d1      	b.n	8001ce6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	009a      	lsls	r2, r3, #2
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	0011      	movs	r1, r2
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 f972 	bl	8001e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2108      	movs	r1, #8
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2104      	movs	r1, #4
 8001b78:	438a      	bics	r2, r1
 8001b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6999      	ldr	r1, [r3, #24]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	619a      	str	r2, [r3, #24]
      break;
 8001b8e:	e0ab      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	0011      	movs	r1, r2
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 f9db 	bl	8001f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0109      	lsls	r1, r1, #4
 8001bac:	430a      	orrs	r2, r1
 8001bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4951      	ldr	r1, [pc, #324]	; (8001d00 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6999      	ldr	r1, [r3, #24]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	021a      	lsls	r2, r3, #8
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	619a      	str	r2, [r3, #24]
      break;
 8001bd4:	e088      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	0011      	movs	r1, r2
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 fa3c 	bl	800205c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2108      	movs	r1, #8
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2104      	movs	r1, #4
 8001c00:	438a      	bics	r2, r1
 8001c02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69d9      	ldr	r1, [r3, #28]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	61da      	str	r2, [r3, #28]
      break;
 8001c16:	e067      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	0011      	movs	r1, r2
 8001c20:	0018      	movs	r0, r3
 8001c22:	f000 faa3 	bl	800216c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69da      	ldr	r2, [r3, #28]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0109      	lsls	r1, r1, #4
 8001c34:	430a      	orrs	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	492f      	ldr	r1, [pc, #188]	; (8001d00 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001c44:	400a      	ands	r2, r1
 8001c46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69d9      	ldr	r1, [r3, #28]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	021a      	lsls	r2, r3, #8
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	61da      	str	r2, [r3, #28]
      break;
 8001c5c:	e044      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	0011      	movs	r1, r2
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 faea 	bl	8002240 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2108      	movs	r1, #8
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2104      	movs	r1, #4
 8001c88:	438a      	bics	r2, r1
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001c9e:	e023      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 fb29 	bl	8002300 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0109      	lsls	r1, r1, #4
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	490d      	ldr	r1, [pc, #52]	; (8001d00 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	021a      	lsls	r2, r3, #8
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001ce4:	e000      	b.n	8001ce8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8001ce6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	223c      	movs	r2, #60	; 0x3c
 8001cec:	2100      	movs	r1, #0
 8001cee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	0800270c 	.word	0x0800270c
 8001d00:	fffffbff 	.word	0xfffffbff

08001d04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b002      	add	sp, #8
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a2f      	ldr	r2, [pc, #188]	; (8001e24 <TIM_Base_SetConfig+0xd0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d003      	beq.n	8001d74 <TIM_Base_SetConfig+0x20>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <TIM_Base_SetConfig+0xd4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d108      	bne.n	8001d86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2270      	movs	r2, #112	; 0x70
 8001d78:	4393      	bics	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <TIM_Base_SetConfig+0xd0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <TIM_Base_SetConfig+0x62>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <TIM_Base_SetConfig+0xd4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00f      	beq.n	8001db6 <TIM_Base_SetConfig+0x62>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <TIM_Base_SetConfig+0xd8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00b      	beq.n	8001db6 <TIM_Base_SetConfig+0x62>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a23      	ldr	r2, [pc, #140]	; (8001e30 <TIM_Base_SetConfig+0xdc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <TIM_Base_SetConfig+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <TIM_Base_SetConfig+0xe0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d003      	beq.n	8001db6 <TIM_Base_SetConfig+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <TIM_Base_SetConfig+0xe4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d108      	bne.n	8001dc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <TIM_Base_SetConfig+0xe8>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	4393      	bics	r3, r2
 8001dce:	001a      	movs	r2, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a0c      	ldr	r2, [pc, #48]	; (8001e24 <TIM_Base_SetConfig+0xd0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00b      	beq.n	8001e0e <TIM_Base_SetConfig+0xba>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <TIM_Base_SetConfig+0xdc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d007      	beq.n	8001e0e <TIM_Base_SetConfig+0xba>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <TIM_Base_SetConfig+0xe0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d003      	beq.n	8001e0e <TIM_Base_SetConfig+0xba>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <TIM_Base_SetConfig+0xe4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d103      	bne.n	8001e16 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	615a      	str	r2, [r3, #20]
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b004      	add	sp, #16
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40002000 	.word	0x40002000
 8001e30:	40014000 	.word	0x40014000
 8001e34:	40014400 	.word	0x40014400
 8001e38:	40014800 	.word	0x40014800
 8001e3c:	fffffcff 	.word	0xfffffcff

08001e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4393      	bics	r3, r2
 8001e52:	001a      	movs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <TIM_OC1_SetConfig+0xf8>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2203      	movs	r2, #3
 8001e76:	4393      	bics	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2202      	movs	r2, #2
 8001e88:	4393      	bics	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <TIM_OC1_SetConfig+0xfc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00b      	beq.n	8001eb6 <TIM_OC1_SetConfig+0x76>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <TIM_OC1_SetConfig+0x100>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d007      	beq.n	8001eb6 <TIM_OC1_SetConfig+0x76>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <TIM_OC1_SetConfig+0x104>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d003      	beq.n	8001eb6 <TIM_OC1_SetConfig+0x76>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a25      	ldr	r2, [pc, #148]	; (8001f48 <TIM_OC1_SetConfig+0x108>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10c      	bne.n	8001ed0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	4393      	bics	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	4393      	bics	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <TIM_OC1_SetConfig+0xfc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00b      	beq.n	8001ef0 <TIM_OC1_SetConfig+0xb0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <TIM_OC1_SetConfig+0x100>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <TIM_OC1_SetConfig+0xb0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <TIM_OC1_SetConfig+0x104>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d003      	beq.n	8001ef0 <TIM_OC1_SetConfig+0xb0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <TIM_OC1_SetConfig+0x108>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d111      	bne.n	8001f14 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <TIM_OC1_SetConfig+0x10c>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <TIM_OC1_SetConfig+0x110>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	621a      	str	r2, [r3, #32]
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b006      	add	sp, #24
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	fffeff8f 	.word	0xfffeff8f
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40014000 	.word	0x40014000
 8001f44:	40014400 	.word	0x40014400
 8001f48:	40014800 	.word	0x40014800
 8001f4c:	fffffeff 	.word	0xfffffeff
 8001f50:	fffffdff 	.word	0xfffffdff

08001f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	2210      	movs	r2, #16
 8001f64:	4393      	bics	r3, r2
 8001f66:	001a      	movs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <TIM_OC2_SetConfig+0xe8>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <TIM_OC2_SetConfig+0xec>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <TIM_OC2_SetConfig+0xf0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10d      	bne.n	8001fd2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	4393      	bics	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	4393      	bics	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <TIM_OC2_SetConfig+0xf0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00b      	beq.n	8001ff2 <TIM_OC2_SetConfig+0x9e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <TIM_OC2_SetConfig+0xf4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <TIM_OC2_SetConfig+0x9e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <TIM_OC2_SetConfig+0xf8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <TIM_OC2_SetConfig+0x9e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <TIM_OC2_SetConfig+0xfc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d113      	bne.n	800201a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <TIM_OC2_SetConfig+0x100>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4a16      	ldr	r2, [pc, #88]	; (8002058 <TIM_OC2_SetConfig+0x104>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	621a      	str	r2, [r3, #32]
}
 8002034:	46c0      	nop			; (mov r8, r8)
 8002036:	46bd      	mov	sp, r7
 8002038:	b006      	add	sp, #24
 800203a:	bd80      	pop	{r7, pc}
 800203c:	feff8fff 	.word	0xfeff8fff
 8002040:	fffffcff 	.word	0xfffffcff
 8002044:	40012c00 	.word	0x40012c00
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800
 8002054:	fffffbff 	.word	0xfffffbff
 8002058:	fffff7ff 	.word	0xfffff7ff

0800205c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a35      	ldr	r2, [pc, #212]	; (8002140 <TIM_OC3_SetConfig+0xe4>)
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4a2f      	ldr	r2, [pc, #188]	; (8002144 <TIM_OC3_SetConfig+0xe8>)
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2203      	movs	r2, #3
 8002090:	4393      	bics	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <TIM_OC3_SetConfig+0xec>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <TIM_OC3_SetConfig+0xf0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10d      	bne.n	80020d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <TIM_OC3_SetConfig+0xf4>)
 80020be:	4013      	ands	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	4a20      	ldr	r2, [pc, #128]	; (8002154 <TIM_OC3_SetConfig+0xf8>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <TIM_OC3_SetConfig+0xf0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00b      	beq.n	80020f6 <TIM_OC3_SetConfig+0x9a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <TIM_OC3_SetConfig+0xfc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_OC3_SetConfig+0x9a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <TIM_OC3_SetConfig+0x100>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_OC3_SetConfig+0x9a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <TIM_OC3_SetConfig+0x104>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d113      	bne.n	800211e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <TIM_OC3_SetConfig+0x108>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <TIM_OC3_SetConfig+0x10c>)
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	621a      	str	r2, [r3, #32]
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b006      	add	sp, #24
 800213e:	bd80      	pop	{r7, pc}
 8002140:	fffffeff 	.word	0xfffffeff
 8002144:	fffeff8f 	.word	0xfffeff8f
 8002148:	fffffdff 	.word	0xfffffdff
 800214c:	40012c00 	.word	0x40012c00
 8002150:	fffff7ff 	.word	0xfffff7ff
 8002154:	fffffbff 	.word	0xfffffbff
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800
 8002164:	ffffefff 	.word	0xffffefff
 8002168:	ffffdfff 	.word	0xffffdfff

0800216c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a28      	ldr	r2, [pc, #160]	; (800221c <TIM_OC4_SetConfig+0xb0>)
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <TIM_OC4_SetConfig+0xb4>)
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a21      	ldr	r2, [pc, #132]	; (8002224 <TIM_OC4_SetConfig+0xb8>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <TIM_OC4_SetConfig+0xbc>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	031b      	lsls	r3, r3, #12
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <TIM_OC4_SetConfig+0xc0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00b      	beq.n	80021e4 <TIM_OC4_SetConfig+0x78>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a18      	ldr	r2, [pc, #96]	; (8002230 <TIM_OC4_SetConfig+0xc4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <TIM_OC4_SetConfig+0x78>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <TIM_OC4_SetConfig+0xc8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_OC4_SetConfig+0x78>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <TIM_OC4_SetConfig+0xcc>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d109      	bne.n	80021f8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <TIM_OC4_SetConfig+0xd0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	621a      	str	r2, [r3, #32]
}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b006      	add	sp, #24
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	ffffefff 	.word	0xffffefff
 8002220:	feff8fff 	.word	0xfeff8fff
 8002224:	fffffcff 	.word	0xfffffcff
 8002228:	ffffdfff 	.word	0xffffdfff
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800
 800223c:	ffffbfff 	.word	0xffffbfff

08002240 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <TIM_OC5_SetConfig+0xa4>)
 8002250:	401a      	ands	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <TIM_OC5_SetConfig+0xa8>)
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <TIM_OC5_SetConfig+0xac>)
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <TIM_OC5_SetConfig+0xb0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00b      	beq.n	80022ae <TIM_OC5_SetConfig+0x6e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <TIM_OC5_SetConfig+0xb4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <TIM_OC5_SetConfig+0x6e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <TIM_OC5_SetConfig+0xb8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <TIM_OC5_SetConfig+0x6e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <TIM_OC5_SetConfig+0xbc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d109      	bne.n	80022c2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <TIM_OC5_SetConfig+0xa4>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	621a      	str	r2, [r3, #32]
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	fffeffff 	.word	0xfffeffff
 80022e8:	fffeff8f 	.word	0xfffeff8f
 80022ec:	fffdffff 	.word	0xfffdffff
 80022f0:	40012c00 	.word	0x40012c00
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40014400 	.word	0x40014400
 80022fc:	40014800 	.word	0x40014800

08002300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <TIM_OC6_SetConfig+0xa8>)
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a20      	ldr	r2, [pc, #128]	; (80023ac <TIM_OC6_SetConfig+0xac>)
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4a1c      	ldr	r2, [pc, #112]	; (80023b0 <TIM_OC6_SetConfig+0xb0>)
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <TIM_OC6_SetConfig+0xb4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00b      	beq.n	8002370 <TIM_OC6_SetConfig+0x70>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <TIM_OC6_SetConfig+0xb8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <TIM_OC6_SetConfig+0x70>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a16      	ldr	r2, [pc, #88]	; (80023bc <TIM_OC6_SetConfig+0xbc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <TIM_OC6_SetConfig+0x70>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <TIM_OC6_SetConfig+0xc0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d109      	bne.n	8002384 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <TIM_OC6_SetConfig+0xc4>)
 8002374:	4013      	ands	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	621a      	str	r2, [r3, #32]
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b006      	add	sp, #24
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	ffefffff 	.word	0xffefffff
 80023ac:	feff8fff 	.word	0xfeff8fff
 80023b0:	ffdfffff 	.word	0xffdfffff
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40014400 	.word	0x40014400
 80023c0:	40014800 	.word	0x40014800
 80023c4:	fffbffff 	.word	0xfffbffff

080023c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	221f      	movs	r2, #31
 80023d8:	4013      	ands	r3, r2
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	43d2      	mvns	r2, r2
 80023ea:	401a      	ands	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	211f      	movs	r1, #31
 80023f8:	400b      	ands	r3, r1
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4099      	lsls	r1, r3
 80023fe:	000b      	movs	r3, r1
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b006      	add	sp, #24
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	223c      	movs	r2, #60	; 0x3c
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002424:	2302      	movs	r3, #2
 8002426:	e04f      	b.n	80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	223c      	movs	r2, #60	; 0x3c
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	223d      	movs	r2, #61	; 0x3d
 8002434:	2102      	movs	r1, #2
 8002436:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d108      	bne.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002456:	4013      	ands	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2270      	movs	r2, #112	; 0x70
 8002468:	4393      	bics	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a11      	ldr	r2, [pc, #68]	; (80024dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10c      	bne.n	80024b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	4393      	bics	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223d      	movs	r2, #61	; 0x3d
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	223c      	movs	r2, #60	; 0x3c
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	ff0fffff 	.word	0xff0fffff
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40014000 	.word	0x40014000

080024e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	223c      	movs	r2, #60	; 0x3c
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e079      	b.n	80025f0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	223c      	movs	r2, #60	; 0x3c
 8002500:	2101      	movs	r1, #1
 8002502:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	22ff      	movs	r2, #255	; 0xff
 8002508:	4393      	bics	r3, r2
 800250a:	001a      	movs	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a38      	ldr	r2, [pc, #224]	; (80025f8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002518:	401a      	ands	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a35      	ldr	r2, [pc, #212]	; (80025fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002526:	401a      	ands	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002534:	401a      	ands	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a30      	ldr	r2, [pc, #192]	; (8002604 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002542:	401a      	ands	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a2e      	ldr	r2, [pc, #184]	; (8002608 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002550:	401a      	ands	r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800255e:	401a      	ands	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a29      	ldr	r2, [pc, #164]	; (8002610 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800256c:	401a      	ands	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d106      	bne.n	8002590 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8002586:	401a      	ands	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d121      	bne.n	80025de <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800259e:	401a      	ands	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80025ae:	401a      	ands	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80025bc:	401a      	ands	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d106      	bne.n	80025de <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80025d4:	401a      	ands	r2, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	223c      	movs	r2, #60	; 0x3c
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b004      	add	sp, #16
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	fffffcff 	.word	0xfffffcff
 80025fc:	fffffbff 	.word	0xfffffbff
 8002600:	fffff7ff 	.word	0xfffff7ff
 8002604:	ffffefff 	.word	0xffffefff
 8002608:	ffffdfff 	.word	0xffffdfff
 800260c:	ffffbfff 	.word	0xffffbfff
 8002610:	fff0ffff 	.word	0xfff0ffff
 8002614:	40012c00 	.word	0x40012c00
 8002618:	efffffff 	.word	0xefffffff
 800261c:	ff0fffff 	.word	0xff0fffff
 8002620:	feffffff 	.word	0xfeffffff
 8002624:	fdffffff 	.word	0xfdffffff
 8002628:	dfffffff 	.word	0xdfffffff

0800262c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	2600      	movs	r6, #0
 8002660:	4d0c      	ldr	r5, [pc, #48]	; (8002694 <__libc_init_array+0x38>)
 8002662:	4c0d      	ldr	r4, [pc, #52]	; (8002698 <__libc_init_array+0x3c>)
 8002664:	1b64      	subs	r4, r4, r5
 8002666:	10a4      	asrs	r4, r4, #2
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	2600      	movs	r6, #0
 800266e:	f000 f821 	bl	80026b4 <_init>
 8002672:	4d0a      	ldr	r5, [pc, #40]	; (800269c <__libc_init_array+0x40>)
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <__libc_init_array+0x44>)
 8002676:	1b64      	subs	r4, r4, r5
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	00b3      	lsls	r3, r6, #2
 8002682:	58eb      	ldr	r3, [r5, r3]
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	00b3      	lsls	r3, r6, #2
 800268c:	58eb      	ldr	r3, [r5, r3]
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	08002760 	.word	0x08002760
 8002698:	08002760 	.word	0x08002760
 800269c:	08002760 	.word	0x08002760
 80026a0:	08002764 	.word	0x08002764

080026a4 <memset>:
 80026a4:	0003      	movs	r3, r0
 80026a6:	1882      	adds	r2, r0, r2
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d100      	bne.n	80026ae <memset+0xa>
 80026ac:	4770      	bx	lr
 80026ae:	7019      	strb	r1, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	e7f9      	b.n	80026a8 <memset+0x4>

080026b4 <_init>:
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ba:	bc08      	pop	{r3}
 80026bc:	469e      	mov	lr, r3
 80026be:	4770      	bx	lr

080026c0 <_fini>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr
