
TIM_PWM_TT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080091e0  080091e0  000191e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c0  080095c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080095c0  080095c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095c0  080095c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080095c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000074  0800963c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  0800963c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012102  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298b  00000000  00000000  0003219e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00034b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00035a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764b  00000000  00000000  00036818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001354c  00000000  00000000  0004de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f512  00000000  00000000  000613af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f08c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe4  00000000  00000000  000f0914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080091c4 	.word	0x080091c4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080091c4 	.word	0x080091c4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	0010      	movs	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	0019      	movs	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f001 f815 	bl	800142c <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 ff65 	bl	80012dc <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f001 f807 	bl	800142c <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fffd 	bl	800142c <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ff8d 	bl	8001360 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff83 	bl	8001360 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_cfrcmple>:
 8000468:	4684      	mov	ip, r0
 800046a:	0008      	movs	r0, r1
 800046c:	4661      	mov	r1, ip
 800046e:	e7ff      	b.n	8000470 <__aeabi_cfcmpeq>

08000470 <__aeabi_cfcmpeq>:
 8000470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000472:	f000 f8bd 	bl	80005f0 <__lesf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	d401      	bmi.n	800047e <__aeabi_cfcmpeq+0xe>
 800047a:	2100      	movs	r1, #0
 800047c:	42c8      	cmn	r0, r1
 800047e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000480 <__aeabi_fcmpeq>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 f849 	bl	8000518 <__eqsf2>
 8000486:	4240      	negs	r0, r0
 8000488:	3001      	adds	r0, #1
 800048a:	bd10      	pop	{r4, pc}

0800048c <__aeabi_fcmplt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f000 f8af 	bl	80005f0 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	db01      	blt.n	800049a <__aeabi_fcmplt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_fcmple>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f000 f8a5 	bl	80005f0 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	dd01      	ble.n	80004ae <__aeabi_fcmple+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_fcmpgt>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	f000 f855 	bl	8000564 <__gesf2>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	dc01      	bgt.n	80004c2 <__aeabi_fcmpgt+0xe>
 80004be:	2000      	movs	r0, #0
 80004c0:	bd10      	pop	{r4, pc}
 80004c2:	2001      	movs	r0, #1
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_fcmpge>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 f84b 	bl	8000564 <__gesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	da01      	bge.n	80004d6 <__aeabi_fcmpge+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_d2uiz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2200      	movs	r2, #0
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004e2:	0004      	movs	r4, r0
 80004e4:	000d      	movs	r5, r1
 80004e6:	f7ff ffb5 	bl	8000454 <__aeabi_dcmpge>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d104      	bne.n	80004f8 <__aeabi_d2uiz+0x1c>
 80004ee:	0020      	movs	r0, r4
 80004f0:	0029      	movs	r1, r5
 80004f2:	f001 fdfd 	bl	80020f0 <__aeabi_d2iz>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <__aeabi_d2uiz+0x38>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	0020      	movs	r0, r4
 80004fe:	0029      	movs	r1, r5
 8000500:	f001 fa64 	bl	80019cc <__aeabi_dsub>
 8000504:	f001 fdf4 	bl	80020f0 <__aeabi_d2iz>
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	469c      	mov	ip, r3
 800050e:	4460      	add	r0, ip
 8000510:	e7f1      	b.n	80004f6 <__aeabi_d2uiz+0x1a>
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	41e00000 	.word	0x41e00000

08000518 <__eqsf2>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	0042      	lsls	r2, r0, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	024e      	lsls	r6, r1, #9
 8000520:	004c      	lsls	r4, r1, #1
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a6d      	lsrs	r5, r5, #9
 8000526:	2001      	movs	r0, #1
 8000528:	0e12      	lsrs	r2, r2, #24
 800052a:	0a76      	lsrs	r6, r6, #9
 800052c:	0e24      	lsrs	r4, r4, #24
 800052e:	0fc9      	lsrs	r1, r1, #31
 8000530:	2aff      	cmp	r2, #255	; 0xff
 8000532:	d006      	beq.n	8000542 <__eqsf2+0x2a>
 8000534:	2cff      	cmp	r4, #255	; 0xff
 8000536:	d003      	beq.n	8000540 <__eqsf2+0x28>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d101      	bne.n	8000540 <__eqsf2+0x28>
 800053c:	42b5      	cmp	r5, r6
 800053e:	d006      	beq.n	800054e <__eqsf2+0x36>
 8000540:	bd70      	pop	{r4, r5, r6, pc}
 8000542:	2d00      	cmp	r5, #0
 8000544:	d1fc      	bne.n	8000540 <__eqsf2+0x28>
 8000546:	2cff      	cmp	r4, #255	; 0xff
 8000548:	d1fa      	bne.n	8000540 <__eqsf2+0x28>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__eqsf2+0x28>
 800054e:	428b      	cmp	r3, r1
 8000550:	d006      	beq.n	8000560 <__eqsf2+0x48>
 8000552:	2001      	movs	r0, #1
 8000554:	2a00      	cmp	r2, #0
 8000556:	d1f3      	bne.n	8000540 <__eqsf2+0x28>
 8000558:	0028      	movs	r0, r5
 800055a:	1e43      	subs	r3, r0, #1
 800055c:	4198      	sbcs	r0, r3
 800055e:	e7ef      	b.n	8000540 <__eqsf2+0x28>
 8000560:	2000      	movs	r0, #0
 8000562:	e7ed      	b.n	8000540 <__eqsf2+0x28>

08000564 <__gesf2>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0245      	lsls	r5, r0, #9
 800056a:	024e      	lsls	r6, r1, #9
 800056c:	004c      	lsls	r4, r1, #1
 800056e:	0fc3      	lsrs	r3, r0, #31
 8000570:	0a6d      	lsrs	r5, r5, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a76      	lsrs	r6, r6, #9
 8000576:	0e24      	lsrs	r4, r4, #24
 8000578:	0fc8      	lsrs	r0, r1, #31
 800057a:	2aff      	cmp	r2, #255	; 0xff
 800057c:	d01b      	beq.n	80005b6 <__gesf2+0x52>
 800057e:	2cff      	cmp	r4, #255	; 0xff
 8000580:	d00e      	beq.n	80005a0 <__gesf2+0x3c>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11b      	bne.n	80005be <__gesf2+0x5a>
 8000586:	2c00      	cmp	r4, #0
 8000588:	d101      	bne.n	800058e <__gesf2+0x2a>
 800058a:	2e00      	cmp	r6, #0
 800058c:	d01c      	beq.n	80005c8 <__gesf2+0x64>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d00c      	beq.n	80005ac <__gesf2+0x48>
 8000592:	4283      	cmp	r3, r0
 8000594:	d01c      	beq.n	80005d0 <__gesf2+0x6c>
 8000596:	2102      	movs	r1, #2
 8000598:	1e58      	subs	r0, r3, #1
 800059a:	4008      	ands	r0, r1
 800059c:	3801      	subs	r0, #1
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d122      	bne.n	80005ea <__gesf2+0x86>
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d1f4      	bne.n	8000592 <__gesf2+0x2e>
 80005a8:	2d00      	cmp	r5, #0
 80005aa:	d1f2      	bne.n	8000592 <__gesf2+0x2e>
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d1f6      	bne.n	800059e <__gesf2+0x3a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4240      	negs	r0, r0
 80005b4:	e7f3      	b.n	800059e <__gesf2+0x3a>
 80005b6:	2d00      	cmp	r5, #0
 80005b8:	d117      	bne.n	80005ea <__gesf2+0x86>
 80005ba:	2cff      	cmp	r4, #255	; 0xff
 80005bc:	d0f0      	beq.n	80005a0 <__gesf2+0x3c>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d1e7      	bne.n	8000592 <__gesf2+0x2e>
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d1e5      	bne.n	8000592 <__gesf2+0x2e>
 80005c6:	e7e6      	b.n	8000596 <__gesf2+0x32>
 80005c8:	2000      	movs	r0, #0
 80005ca:	2d00      	cmp	r5, #0
 80005cc:	d0e7      	beq.n	800059e <__gesf2+0x3a>
 80005ce:	e7e2      	b.n	8000596 <__gesf2+0x32>
 80005d0:	42a2      	cmp	r2, r4
 80005d2:	dc05      	bgt.n	80005e0 <__gesf2+0x7c>
 80005d4:	dbea      	blt.n	80005ac <__gesf2+0x48>
 80005d6:	42b5      	cmp	r5, r6
 80005d8:	d802      	bhi.n	80005e0 <__gesf2+0x7c>
 80005da:	d3e7      	bcc.n	80005ac <__gesf2+0x48>
 80005dc:	2000      	movs	r0, #0
 80005de:	e7de      	b.n	800059e <__gesf2+0x3a>
 80005e0:	4243      	negs	r3, r0
 80005e2:	4158      	adcs	r0, r3
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	3801      	subs	r0, #1
 80005e8:	e7d9      	b.n	800059e <__gesf2+0x3a>
 80005ea:	2002      	movs	r0, #2
 80005ec:	4240      	negs	r0, r0
 80005ee:	e7d6      	b.n	800059e <__gesf2+0x3a>

080005f0 <__lesf2>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	0042      	lsls	r2, r0, #1
 80005f4:	0245      	lsls	r5, r0, #9
 80005f6:	024e      	lsls	r6, r1, #9
 80005f8:	004c      	lsls	r4, r1, #1
 80005fa:	0fc3      	lsrs	r3, r0, #31
 80005fc:	0a6d      	lsrs	r5, r5, #9
 80005fe:	0e12      	lsrs	r2, r2, #24
 8000600:	0a76      	lsrs	r6, r6, #9
 8000602:	0e24      	lsrs	r4, r4, #24
 8000604:	0fc8      	lsrs	r0, r1, #31
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d00b      	beq.n	8000622 <__lesf2+0x32>
 800060a:	2cff      	cmp	r4, #255	; 0xff
 800060c:	d00d      	beq.n	800062a <__lesf2+0x3a>
 800060e:	2a00      	cmp	r2, #0
 8000610:	d11f      	bne.n	8000652 <__lesf2+0x62>
 8000612:	2c00      	cmp	r4, #0
 8000614:	d116      	bne.n	8000644 <__lesf2+0x54>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d114      	bne.n	8000644 <__lesf2+0x54>
 800061a:	2000      	movs	r0, #0
 800061c:	2d00      	cmp	r5, #0
 800061e:	d010      	beq.n	8000642 <__lesf2+0x52>
 8000620:	e009      	b.n	8000636 <__lesf2+0x46>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d10c      	bne.n	8000640 <__lesf2+0x50>
 8000626:	2cff      	cmp	r4, #255	; 0xff
 8000628:	d113      	bne.n	8000652 <__lesf2+0x62>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d108      	bne.n	8000640 <__lesf2+0x50>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d008      	beq.n	8000644 <__lesf2+0x54>
 8000632:	4283      	cmp	r3, r0
 8000634:	d012      	beq.n	800065c <__lesf2+0x6c>
 8000636:	2102      	movs	r1, #2
 8000638:	1e58      	subs	r0, r3, #1
 800063a:	4008      	ands	r0, r1
 800063c:	3801      	subs	r0, #1
 800063e:	e000      	b.n	8000642 <__lesf2+0x52>
 8000640:	2002      	movs	r0, #2
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	2d00      	cmp	r5, #0
 8000646:	d1f4      	bne.n	8000632 <__lesf2+0x42>
 8000648:	2800      	cmp	r0, #0
 800064a:	d1fa      	bne.n	8000642 <__lesf2+0x52>
 800064c:	2001      	movs	r0, #1
 800064e:	4240      	negs	r0, r0
 8000650:	e7f7      	b.n	8000642 <__lesf2+0x52>
 8000652:	2c00      	cmp	r4, #0
 8000654:	d1ed      	bne.n	8000632 <__lesf2+0x42>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d1eb      	bne.n	8000632 <__lesf2+0x42>
 800065a:	e7ec      	b.n	8000636 <__lesf2+0x46>
 800065c:	42a2      	cmp	r2, r4
 800065e:	dc05      	bgt.n	800066c <__lesf2+0x7c>
 8000660:	dbf2      	blt.n	8000648 <__lesf2+0x58>
 8000662:	42b5      	cmp	r5, r6
 8000664:	d802      	bhi.n	800066c <__lesf2+0x7c>
 8000666:	d3ef      	bcc.n	8000648 <__lesf2+0x58>
 8000668:	2000      	movs	r0, #0
 800066a:	e7ea      	b.n	8000642 <__lesf2+0x52>
 800066c:	4243      	negs	r3, r0
 800066e:	4158      	adcs	r0, r3
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	3801      	subs	r0, #1
 8000674:	e7e5      	b.n	8000642 <__lesf2+0x52>
 8000676:	46c0      	nop			; (mov r8, r8)

08000678 <__aeabi_dadd>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	464f      	mov	r7, r9
 800067c:	4646      	mov	r6, r8
 800067e:	46d6      	mov	lr, sl
 8000680:	000d      	movs	r5, r1
 8000682:	0004      	movs	r4, r0
 8000684:	b5c0      	push	{r6, r7, lr}
 8000686:	001f      	movs	r7, r3
 8000688:	0011      	movs	r1, r2
 800068a:	0328      	lsls	r0, r5, #12
 800068c:	0f62      	lsrs	r2, r4, #29
 800068e:	0a40      	lsrs	r0, r0, #9
 8000690:	4310      	orrs	r0, r2
 8000692:	007a      	lsls	r2, r7, #1
 8000694:	0d52      	lsrs	r2, r2, #21
 8000696:	00e3      	lsls	r3, r4, #3
 8000698:	033c      	lsls	r4, r7, #12
 800069a:	4691      	mov	r9, r2
 800069c:	0a64      	lsrs	r4, r4, #9
 800069e:	0ffa      	lsrs	r2, r7, #31
 80006a0:	0f4f      	lsrs	r7, r1, #29
 80006a2:	006e      	lsls	r6, r5, #1
 80006a4:	4327      	orrs	r7, r4
 80006a6:	4692      	mov	sl, r2
 80006a8:	46b8      	mov	r8, r7
 80006aa:	0d76      	lsrs	r6, r6, #21
 80006ac:	0fed      	lsrs	r5, r5, #31
 80006ae:	00c9      	lsls	r1, r1, #3
 80006b0:	4295      	cmp	r5, r2
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x3e>
 80006b4:	e099      	b.n	80007ea <__aeabi_dadd+0x172>
 80006b6:	464c      	mov	r4, r9
 80006b8:	1b34      	subs	r4, r6, r4
 80006ba:	46a4      	mov	ip, r4
 80006bc:	2c00      	cmp	r4, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x4a>
 80006c0:	e07c      	b.n	80007bc <__aeabi_dadd+0x144>
 80006c2:	464a      	mov	r2, r9
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x52>
 80006c8:	e0b8      	b.n	800083c <__aeabi_dadd+0x1c4>
 80006ca:	4ac5      	ldr	r2, [pc, #788]	; (80009e0 <__aeabi_dadd+0x368>)
 80006cc:	4296      	cmp	r6, r2
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x5a>
 80006d0:	e11c      	b.n	800090c <__aeabi_dadd+0x294>
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	003c      	movs	r4, r7
 80006d6:	0412      	lsls	r2, r2, #16
 80006d8:	4314      	orrs	r4, r2
 80006da:	46a0      	mov	r8, r4
 80006dc:	4662      	mov	r2, ip
 80006de:	2a38      	cmp	r2, #56	; 0x38
 80006e0:	dd00      	ble.n	80006e4 <__aeabi_dadd+0x6c>
 80006e2:	e161      	b.n	80009a8 <__aeabi_dadd+0x330>
 80006e4:	2a1f      	cmp	r2, #31
 80006e6:	dd00      	ble.n	80006ea <__aeabi_dadd+0x72>
 80006e8:	e1cc      	b.n	8000a84 <__aeabi_dadd+0x40c>
 80006ea:	4664      	mov	r4, ip
 80006ec:	2220      	movs	r2, #32
 80006ee:	1b12      	subs	r2, r2, r4
 80006f0:	4644      	mov	r4, r8
 80006f2:	4094      	lsls	r4, r2
 80006f4:	000f      	movs	r7, r1
 80006f6:	46a1      	mov	r9, r4
 80006f8:	4664      	mov	r4, ip
 80006fa:	4091      	lsls	r1, r2
 80006fc:	40e7      	lsrs	r7, r4
 80006fe:	464c      	mov	r4, r9
 8000700:	1e4a      	subs	r2, r1, #1
 8000702:	4191      	sbcs	r1, r2
 8000704:	433c      	orrs	r4, r7
 8000706:	4642      	mov	r2, r8
 8000708:	4321      	orrs	r1, r4
 800070a:	4664      	mov	r4, ip
 800070c:	40e2      	lsrs	r2, r4
 800070e:	1a80      	subs	r0, r0, r2
 8000710:	1a5c      	subs	r4, r3, r1
 8000712:	42a3      	cmp	r3, r4
 8000714:	419b      	sbcs	r3, r3
 8000716:	425f      	negs	r7, r3
 8000718:	1bc7      	subs	r7, r0, r7
 800071a:	023b      	lsls	r3, r7, #8
 800071c:	d400      	bmi.n	8000720 <__aeabi_dadd+0xa8>
 800071e:	e0d0      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000720:	027f      	lsls	r7, r7, #9
 8000722:	0a7f      	lsrs	r7, r7, #9
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_dadd+0xb2>
 8000728:	e0ff      	b.n	800092a <__aeabi_dadd+0x2b2>
 800072a:	0038      	movs	r0, r7
 800072c:	f001 fdce 	bl	80022cc <__clzsi2>
 8000730:	0001      	movs	r1, r0
 8000732:	3908      	subs	r1, #8
 8000734:	2320      	movs	r3, #32
 8000736:	0022      	movs	r2, r4
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	408f      	lsls	r7, r1
 800073c:	40da      	lsrs	r2, r3
 800073e:	408c      	lsls	r4, r1
 8000740:	4317      	orrs	r7, r2
 8000742:	42b1      	cmp	r1, r6
 8000744:	da00      	bge.n	8000748 <__aeabi_dadd+0xd0>
 8000746:	e0ff      	b.n	8000948 <__aeabi_dadd+0x2d0>
 8000748:	1b89      	subs	r1, r1, r6
 800074a:	1c4b      	adds	r3, r1, #1
 800074c:	2b1f      	cmp	r3, #31
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0xda>
 8000750:	e0a8      	b.n	80008a4 <__aeabi_dadd+0x22c>
 8000752:	2220      	movs	r2, #32
 8000754:	0039      	movs	r1, r7
 8000756:	1ad2      	subs	r2, r2, r3
 8000758:	0020      	movs	r0, r4
 800075a:	4094      	lsls	r4, r2
 800075c:	4091      	lsls	r1, r2
 800075e:	40d8      	lsrs	r0, r3
 8000760:	1e62      	subs	r2, r4, #1
 8000762:	4194      	sbcs	r4, r2
 8000764:	40df      	lsrs	r7, r3
 8000766:	2600      	movs	r6, #0
 8000768:	4301      	orrs	r1, r0
 800076a:	430c      	orrs	r4, r1
 800076c:	0763      	lsls	r3, r4, #29
 800076e:	d009      	beq.n	8000784 <__aeabi_dadd+0x10c>
 8000770:	230f      	movs	r3, #15
 8000772:	4023      	ands	r3, r4
 8000774:	2b04      	cmp	r3, #4
 8000776:	d005      	beq.n	8000784 <__aeabi_dadd+0x10c>
 8000778:	1d23      	adds	r3, r4, #4
 800077a:	42a3      	cmp	r3, r4
 800077c:	41a4      	sbcs	r4, r4
 800077e:	4264      	negs	r4, r4
 8000780:	193f      	adds	r7, r7, r4
 8000782:	001c      	movs	r4, r3
 8000784:	023b      	lsls	r3, r7, #8
 8000786:	d400      	bmi.n	800078a <__aeabi_dadd+0x112>
 8000788:	e09e      	b.n	80008c8 <__aeabi_dadd+0x250>
 800078a:	4b95      	ldr	r3, [pc, #596]	; (80009e0 <__aeabi_dadd+0x368>)
 800078c:	3601      	adds	r6, #1
 800078e:	429e      	cmp	r6, r3
 8000790:	d100      	bne.n	8000794 <__aeabi_dadd+0x11c>
 8000792:	e0b7      	b.n	8000904 <__aeabi_dadd+0x28c>
 8000794:	4a93      	ldr	r2, [pc, #588]	; (80009e4 <__aeabi_dadd+0x36c>)
 8000796:	08e4      	lsrs	r4, r4, #3
 8000798:	4017      	ands	r7, r2
 800079a:	077b      	lsls	r3, r7, #29
 800079c:	0571      	lsls	r1, r6, #21
 800079e:	027f      	lsls	r7, r7, #9
 80007a0:	4323      	orrs	r3, r4
 80007a2:	0b3f      	lsrs	r7, r7, #12
 80007a4:	0d4a      	lsrs	r2, r1, #21
 80007a6:	0512      	lsls	r2, r2, #20
 80007a8:	433a      	orrs	r2, r7
 80007aa:	07ed      	lsls	r5, r5, #31
 80007ac:	432a      	orrs	r2, r5
 80007ae:	0018      	movs	r0, r3
 80007b0:	0011      	movs	r1, r2
 80007b2:	bce0      	pop	{r5, r6, r7}
 80007b4:	46ba      	mov	sl, r7
 80007b6:	46b1      	mov	r9, r6
 80007b8:	46a8      	mov	r8, r5
 80007ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007bc:	2c00      	cmp	r4, #0
 80007be:	d04b      	beq.n	8000858 <__aeabi_dadd+0x1e0>
 80007c0:	464c      	mov	r4, r9
 80007c2:	1ba4      	subs	r4, r4, r6
 80007c4:	46a4      	mov	ip, r4
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	d000      	beq.n	80007cc <__aeabi_dadd+0x154>
 80007ca:	e123      	b.n	8000a14 <__aeabi_dadd+0x39c>
 80007cc:	0004      	movs	r4, r0
 80007ce:	431c      	orrs	r4, r3
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x15c>
 80007d2:	e1af      	b.n	8000b34 <__aeabi_dadd+0x4bc>
 80007d4:	4662      	mov	r2, ip
 80007d6:	1e54      	subs	r4, r2, #1
 80007d8:	2a01      	cmp	r2, #1
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x166>
 80007dc:	e215      	b.n	8000c0a <__aeabi_dadd+0x592>
 80007de:	4d80      	ldr	r5, [pc, #512]	; (80009e0 <__aeabi_dadd+0x368>)
 80007e0:	45ac      	cmp	ip, r5
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x16e>
 80007e4:	e1c8      	b.n	8000b78 <__aeabi_dadd+0x500>
 80007e6:	46a4      	mov	ip, r4
 80007e8:	e11b      	b.n	8000a22 <__aeabi_dadd+0x3aa>
 80007ea:	464a      	mov	r2, r9
 80007ec:	1ab2      	subs	r2, r6, r2
 80007ee:	4694      	mov	ip, r2
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	dc00      	bgt.n	80007f6 <__aeabi_dadd+0x17e>
 80007f4:	e0ac      	b.n	8000950 <__aeabi_dadd+0x2d8>
 80007f6:	464a      	mov	r2, r9
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d043      	beq.n	8000884 <__aeabi_dadd+0x20c>
 80007fc:	4a78      	ldr	r2, [pc, #480]	; (80009e0 <__aeabi_dadd+0x368>)
 80007fe:	4296      	cmp	r6, r2
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x18c>
 8000802:	e1af      	b.n	8000b64 <__aeabi_dadd+0x4ec>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	003c      	movs	r4, r7
 8000808:	0412      	lsls	r2, r2, #16
 800080a:	4314      	orrs	r4, r2
 800080c:	46a0      	mov	r8, r4
 800080e:	4662      	mov	r2, ip
 8000810:	2a38      	cmp	r2, #56	; 0x38
 8000812:	dc67      	bgt.n	80008e4 <__aeabi_dadd+0x26c>
 8000814:	2a1f      	cmp	r2, #31
 8000816:	dc00      	bgt.n	800081a <__aeabi_dadd+0x1a2>
 8000818:	e15f      	b.n	8000ada <__aeabi_dadd+0x462>
 800081a:	4647      	mov	r7, r8
 800081c:	3a20      	subs	r2, #32
 800081e:	40d7      	lsrs	r7, r2
 8000820:	4662      	mov	r2, ip
 8000822:	2a20      	cmp	r2, #32
 8000824:	d005      	beq.n	8000832 <__aeabi_dadd+0x1ba>
 8000826:	4664      	mov	r4, ip
 8000828:	2240      	movs	r2, #64	; 0x40
 800082a:	1b12      	subs	r2, r2, r4
 800082c:	4644      	mov	r4, r8
 800082e:	4094      	lsls	r4, r2
 8000830:	4321      	orrs	r1, r4
 8000832:	1e4a      	subs	r2, r1, #1
 8000834:	4191      	sbcs	r1, r2
 8000836:	000c      	movs	r4, r1
 8000838:	433c      	orrs	r4, r7
 800083a:	e057      	b.n	80008ec <__aeabi_dadd+0x274>
 800083c:	003a      	movs	r2, r7
 800083e:	430a      	orrs	r2, r1
 8000840:	d100      	bne.n	8000844 <__aeabi_dadd+0x1cc>
 8000842:	e105      	b.n	8000a50 <__aeabi_dadd+0x3d8>
 8000844:	0022      	movs	r2, r4
 8000846:	3a01      	subs	r2, #1
 8000848:	2c01      	cmp	r4, #1
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1d6>
 800084c:	e182      	b.n	8000b54 <__aeabi_dadd+0x4dc>
 800084e:	4c64      	ldr	r4, [pc, #400]	; (80009e0 <__aeabi_dadd+0x368>)
 8000850:	45a4      	cmp	ip, r4
 8000852:	d05b      	beq.n	800090c <__aeabi_dadd+0x294>
 8000854:	4694      	mov	ip, r2
 8000856:	e741      	b.n	80006dc <__aeabi_dadd+0x64>
 8000858:	4c63      	ldr	r4, [pc, #396]	; (80009e8 <__aeabi_dadd+0x370>)
 800085a:	1c77      	adds	r7, r6, #1
 800085c:	4227      	tst	r7, r4
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x1ea>
 8000860:	e0c4      	b.n	80009ec <__aeabi_dadd+0x374>
 8000862:	0004      	movs	r4, r0
 8000864:	431c      	orrs	r4, r3
 8000866:	2e00      	cmp	r6, #0
 8000868:	d000      	beq.n	800086c <__aeabi_dadd+0x1f4>
 800086a:	e169      	b.n	8000b40 <__aeabi_dadd+0x4c8>
 800086c:	2c00      	cmp	r4, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x1fa>
 8000870:	e1bf      	b.n	8000bf2 <__aeabi_dadd+0x57a>
 8000872:	4644      	mov	r4, r8
 8000874:	430c      	orrs	r4, r1
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x202>
 8000878:	e1d0      	b.n	8000c1c <__aeabi_dadd+0x5a4>
 800087a:	0742      	lsls	r2, r0, #29
 800087c:	08db      	lsrs	r3, r3, #3
 800087e:	4313      	orrs	r3, r2
 8000880:	08c0      	lsrs	r0, r0, #3
 8000882:	e029      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000884:	003a      	movs	r2, r7
 8000886:	430a      	orrs	r2, r1
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x214>
 800088a:	e170      	b.n	8000b6e <__aeabi_dadd+0x4f6>
 800088c:	4662      	mov	r2, ip
 800088e:	4664      	mov	r4, ip
 8000890:	3a01      	subs	r2, #1
 8000892:	2c01      	cmp	r4, #1
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x220>
 8000896:	e0e0      	b.n	8000a5a <__aeabi_dadd+0x3e2>
 8000898:	4c51      	ldr	r4, [pc, #324]	; (80009e0 <__aeabi_dadd+0x368>)
 800089a:	45a4      	cmp	ip, r4
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x228>
 800089e:	e161      	b.n	8000b64 <__aeabi_dadd+0x4ec>
 80008a0:	4694      	mov	ip, r2
 80008a2:	e7b4      	b.n	800080e <__aeabi_dadd+0x196>
 80008a4:	003a      	movs	r2, r7
 80008a6:	391f      	subs	r1, #31
 80008a8:	40ca      	lsrs	r2, r1
 80008aa:	0011      	movs	r1, r2
 80008ac:	2b20      	cmp	r3, #32
 80008ae:	d003      	beq.n	80008b8 <__aeabi_dadd+0x240>
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	409f      	lsls	r7, r3
 80008b6:	433c      	orrs	r4, r7
 80008b8:	1e63      	subs	r3, r4, #1
 80008ba:	419c      	sbcs	r4, r3
 80008bc:	2700      	movs	r7, #0
 80008be:	2600      	movs	r6, #0
 80008c0:	430c      	orrs	r4, r1
 80008c2:	0763      	lsls	r3, r4, #29
 80008c4:	d000      	beq.n	80008c8 <__aeabi_dadd+0x250>
 80008c6:	e753      	b.n	8000770 <__aeabi_dadd+0xf8>
 80008c8:	46b4      	mov	ip, r6
 80008ca:	08e4      	lsrs	r4, r4, #3
 80008cc:	077b      	lsls	r3, r7, #29
 80008ce:	4323      	orrs	r3, r4
 80008d0:	08f8      	lsrs	r0, r7, #3
 80008d2:	4a43      	ldr	r2, [pc, #268]	; (80009e0 <__aeabi_dadd+0x368>)
 80008d4:	4594      	cmp	ip, r2
 80008d6:	d01d      	beq.n	8000914 <__aeabi_dadd+0x29c>
 80008d8:	4662      	mov	r2, ip
 80008da:	0307      	lsls	r7, r0, #12
 80008dc:	0552      	lsls	r2, r2, #21
 80008de:	0b3f      	lsrs	r7, r7, #12
 80008e0:	0d52      	lsrs	r2, r2, #21
 80008e2:	e760      	b.n	80007a6 <__aeabi_dadd+0x12e>
 80008e4:	4644      	mov	r4, r8
 80008e6:	430c      	orrs	r4, r1
 80008e8:	1e62      	subs	r2, r4, #1
 80008ea:	4194      	sbcs	r4, r2
 80008ec:	18e4      	adds	r4, r4, r3
 80008ee:	429c      	cmp	r4, r3
 80008f0:	419b      	sbcs	r3, r3
 80008f2:	425f      	negs	r7, r3
 80008f4:	183f      	adds	r7, r7, r0
 80008f6:	023b      	lsls	r3, r7, #8
 80008f8:	d5e3      	bpl.n	80008c2 <__aeabi_dadd+0x24a>
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <__aeabi_dadd+0x368>)
 80008fc:	3601      	adds	r6, #1
 80008fe:	429e      	cmp	r6, r3
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x28c>
 8000902:	e0b5      	b.n	8000a70 <__aeabi_dadd+0x3f8>
 8000904:	0032      	movs	r2, r6
 8000906:	2700      	movs	r7, #0
 8000908:	2300      	movs	r3, #0
 800090a:	e74c      	b.n	80007a6 <__aeabi_dadd+0x12e>
 800090c:	0742      	lsls	r2, r0, #29
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	4313      	orrs	r3, r2
 8000912:	08c0      	lsrs	r0, r0, #3
 8000914:	001a      	movs	r2, r3
 8000916:	4302      	orrs	r2, r0
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x2a4>
 800091a:	e1e1      	b.n	8000ce0 <__aeabi_dadd+0x668>
 800091c:	2780      	movs	r7, #128	; 0x80
 800091e:	033f      	lsls	r7, r7, #12
 8000920:	4307      	orrs	r7, r0
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <__aeabi_dadd+0x368>)
 8000926:	0b3f      	lsrs	r7, r7, #12
 8000928:	e73d      	b.n	80007a6 <__aeabi_dadd+0x12e>
 800092a:	0020      	movs	r0, r4
 800092c:	f001 fcce 	bl	80022cc <__clzsi2>
 8000930:	0001      	movs	r1, r0
 8000932:	3118      	adds	r1, #24
 8000934:	291f      	cmp	r1, #31
 8000936:	dc00      	bgt.n	800093a <__aeabi_dadd+0x2c2>
 8000938:	e6fc      	b.n	8000734 <__aeabi_dadd+0xbc>
 800093a:	3808      	subs	r0, #8
 800093c:	4084      	lsls	r4, r0
 800093e:	0027      	movs	r7, r4
 8000940:	2400      	movs	r4, #0
 8000942:	42b1      	cmp	r1, r6
 8000944:	db00      	blt.n	8000948 <__aeabi_dadd+0x2d0>
 8000946:	e6ff      	b.n	8000748 <__aeabi_dadd+0xd0>
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <__aeabi_dadd+0x36c>)
 800094a:	1a76      	subs	r6, r6, r1
 800094c:	4017      	ands	r7, r2
 800094e:	e70d      	b.n	800076c <__aeabi_dadd+0xf4>
 8000950:	2a00      	cmp	r2, #0
 8000952:	d02f      	beq.n	80009b4 <__aeabi_dadd+0x33c>
 8000954:	464a      	mov	r2, r9
 8000956:	1b92      	subs	r2, r2, r6
 8000958:	4694      	mov	ip, r2
 800095a:	2e00      	cmp	r6, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_dadd+0x2e8>
 800095e:	e0ad      	b.n	8000abc <__aeabi_dadd+0x444>
 8000960:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <__aeabi_dadd+0x368>)
 8000962:	4591      	cmp	r9, r2
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x2f0>
 8000966:	e10f      	b.n	8000b88 <__aeabi_dadd+0x510>
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	0412      	lsls	r2, r2, #16
 800096c:	4310      	orrs	r0, r2
 800096e:	4662      	mov	r2, ip
 8000970:	2a38      	cmp	r2, #56	; 0x38
 8000972:	dd00      	ble.n	8000976 <__aeabi_dadd+0x2fe>
 8000974:	e10f      	b.n	8000b96 <__aeabi_dadd+0x51e>
 8000976:	2a1f      	cmp	r2, #31
 8000978:	dd00      	ble.n	800097c <__aeabi_dadd+0x304>
 800097a:	e180      	b.n	8000c7e <__aeabi_dadd+0x606>
 800097c:	4664      	mov	r4, ip
 800097e:	2220      	movs	r2, #32
 8000980:	001e      	movs	r6, r3
 8000982:	1b12      	subs	r2, r2, r4
 8000984:	4667      	mov	r7, ip
 8000986:	0004      	movs	r4, r0
 8000988:	4093      	lsls	r3, r2
 800098a:	4094      	lsls	r4, r2
 800098c:	40fe      	lsrs	r6, r7
 800098e:	1e5a      	subs	r2, r3, #1
 8000990:	4193      	sbcs	r3, r2
 8000992:	40f8      	lsrs	r0, r7
 8000994:	4334      	orrs	r4, r6
 8000996:	431c      	orrs	r4, r3
 8000998:	4480      	add	r8, r0
 800099a:	1864      	adds	r4, r4, r1
 800099c:	428c      	cmp	r4, r1
 800099e:	41bf      	sbcs	r7, r7
 80009a0:	427f      	negs	r7, r7
 80009a2:	464e      	mov	r6, r9
 80009a4:	4447      	add	r7, r8
 80009a6:	e7a6      	b.n	80008f6 <__aeabi_dadd+0x27e>
 80009a8:	4642      	mov	r2, r8
 80009aa:	430a      	orrs	r2, r1
 80009ac:	0011      	movs	r1, r2
 80009ae:	1e4a      	subs	r2, r1, #1
 80009b0:	4191      	sbcs	r1, r2
 80009b2:	e6ad      	b.n	8000710 <__aeabi_dadd+0x98>
 80009b4:	4c0c      	ldr	r4, [pc, #48]	; (80009e8 <__aeabi_dadd+0x370>)
 80009b6:	1c72      	adds	r2, r6, #1
 80009b8:	4222      	tst	r2, r4
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x346>
 80009bc:	e0a1      	b.n	8000b02 <__aeabi_dadd+0x48a>
 80009be:	0002      	movs	r2, r0
 80009c0:	431a      	orrs	r2, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_dadd+0x350>
 80009c6:	e0fa      	b.n	8000bbe <__aeabi_dadd+0x546>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x356>
 80009cc:	e145      	b.n	8000c5a <__aeabi_dadd+0x5e2>
 80009ce:	003a      	movs	r2, r7
 80009d0:	430a      	orrs	r2, r1
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x35e>
 80009d4:	e146      	b.n	8000c64 <__aeabi_dadd+0x5ec>
 80009d6:	0742      	lsls	r2, r0, #29
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	4313      	orrs	r3, r2
 80009dc:	08c0      	lsrs	r0, r0, #3
 80009de:	e77b      	b.n	80008d8 <__aeabi_dadd+0x260>
 80009e0:	000007ff 	.word	0x000007ff
 80009e4:	ff7fffff 	.word	0xff7fffff
 80009e8:	000007fe 	.word	0x000007fe
 80009ec:	4647      	mov	r7, r8
 80009ee:	1a5c      	subs	r4, r3, r1
 80009f0:	1bc2      	subs	r2, r0, r7
 80009f2:	42a3      	cmp	r3, r4
 80009f4:	41bf      	sbcs	r7, r7
 80009f6:	427f      	negs	r7, r7
 80009f8:	46b9      	mov	r9, r7
 80009fa:	0017      	movs	r7, r2
 80009fc:	464a      	mov	r2, r9
 80009fe:	1abf      	subs	r7, r7, r2
 8000a00:	023a      	lsls	r2, r7, #8
 8000a02:	d500      	bpl.n	8000a06 <__aeabi_dadd+0x38e>
 8000a04:	e08d      	b.n	8000b22 <__aeabi_dadd+0x4aa>
 8000a06:	0023      	movs	r3, r4
 8000a08:	433b      	orrs	r3, r7
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_dadd+0x396>
 8000a0c:	e68a      	b.n	8000724 <__aeabi_dadd+0xac>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	2500      	movs	r5, #0
 8000a12:	e761      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000a14:	4cb4      	ldr	r4, [pc, #720]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000a16:	45a1      	cmp	r9, r4
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x3a4>
 8000a1a:	e0ad      	b.n	8000b78 <__aeabi_dadd+0x500>
 8000a1c:	2480      	movs	r4, #128	; 0x80
 8000a1e:	0424      	lsls	r4, r4, #16
 8000a20:	4320      	orrs	r0, r4
 8000a22:	4664      	mov	r4, ip
 8000a24:	2c38      	cmp	r4, #56	; 0x38
 8000a26:	dc3d      	bgt.n	8000aa4 <__aeabi_dadd+0x42c>
 8000a28:	4662      	mov	r2, ip
 8000a2a:	2c1f      	cmp	r4, #31
 8000a2c:	dd00      	ble.n	8000a30 <__aeabi_dadd+0x3b8>
 8000a2e:	e0b7      	b.n	8000ba0 <__aeabi_dadd+0x528>
 8000a30:	2520      	movs	r5, #32
 8000a32:	001e      	movs	r6, r3
 8000a34:	1b2d      	subs	r5, r5, r4
 8000a36:	0004      	movs	r4, r0
 8000a38:	40ab      	lsls	r3, r5
 8000a3a:	40ac      	lsls	r4, r5
 8000a3c:	40d6      	lsrs	r6, r2
 8000a3e:	40d0      	lsrs	r0, r2
 8000a40:	4642      	mov	r2, r8
 8000a42:	1e5d      	subs	r5, r3, #1
 8000a44:	41ab      	sbcs	r3, r5
 8000a46:	4334      	orrs	r4, r6
 8000a48:	1a12      	subs	r2, r2, r0
 8000a4a:	4690      	mov	r8, r2
 8000a4c:	4323      	orrs	r3, r4
 8000a4e:	e02c      	b.n	8000aaa <__aeabi_dadd+0x432>
 8000a50:	0742      	lsls	r2, r0, #29
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	08c0      	lsrs	r0, r0, #3
 8000a58:	e73b      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000a5a:	185c      	adds	r4, r3, r1
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	419b      	sbcs	r3, r3
 8000a60:	4440      	add	r0, r8
 8000a62:	425b      	negs	r3, r3
 8000a64:	18c7      	adds	r7, r0, r3
 8000a66:	2601      	movs	r6, #1
 8000a68:	023b      	lsls	r3, r7, #8
 8000a6a:	d400      	bmi.n	8000a6e <__aeabi_dadd+0x3f6>
 8000a6c:	e729      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000a6e:	2602      	movs	r6, #2
 8000a70:	4a9e      	ldr	r2, [pc, #632]	; (8000cec <__aeabi_dadd+0x674>)
 8000a72:	0863      	lsrs	r3, r4, #1
 8000a74:	4017      	ands	r7, r2
 8000a76:	2201      	movs	r2, #1
 8000a78:	4014      	ands	r4, r2
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	07fb      	lsls	r3, r7, #31
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	087f      	lsrs	r7, r7, #1
 8000a82:	e673      	b.n	800076c <__aeabi_dadd+0xf4>
 8000a84:	4644      	mov	r4, r8
 8000a86:	3a20      	subs	r2, #32
 8000a88:	40d4      	lsrs	r4, r2
 8000a8a:	4662      	mov	r2, ip
 8000a8c:	2a20      	cmp	r2, #32
 8000a8e:	d005      	beq.n	8000a9c <__aeabi_dadd+0x424>
 8000a90:	4667      	mov	r7, ip
 8000a92:	2240      	movs	r2, #64	; 0x40
 8000a94:	1bd2      	subs	r2, r2, r7
 8000a96:	4647      	mov	r7, r8
 8000a98:	4097      	lsls	r7, r2
 8000a9a:	4339      	orrs	r1, r7
 8000a9c:	1e4a      	subs	r2, r1, #1
 8000a9e:	4191      	sbcs	r1, r2
 8000aa0:	4321      	orrs	r1, r4
 8000aa2:	e635      	b.n	8000710 <__aeabi_dadd+0x98>
 8000aa4:	4303      	orrs	r3, r0
 8000aa6:	1e58      	subs	r0, r3, #1
 8000aa8:	4183      	sbcs	r3, r0
 8000aaa:	1acc      	subs	r4, r1, r3
 8000aac:	42a1      	cmp	r1, r4
 8000aae:	41bf      	sbcs	r7, r7
 8000ab0:	4643      	mov	r3, r8
 8000ab2:	427f      	negs	r7, r7
 8000ab4:	4655      	mov	r5, sl
 8000ab6:	464e      	mov	r6, r9
 8000ab8:	1bdf      	subs	r7, r3, r7
 8000aba:	e62e      	b.n	800071a <__aeabi_dadd+0xa2>
 8000abc:	0002      	movs	r2, r0
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x44c>
 8000ac2:	e0bd      	b.n	8000c40 <__aeabi_dadd+0x5c8>
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	4664      	mov	r4, ip
 8000ac8:	3a01      	subs	r2, #1
 8000aca:	2c01      	cmp	r4, #1
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x458>
 8000ace:	e0e5      	b.n	8000c9c <__aeabi_dadd+0x624>
 8000ad0:	4c85      	ldr	r4, [pc, #532]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000ad2:	45a4      	cmp	ip, r4
 8000ad4:	d058      	beq.n	8000b88 <__aeabi_dadd+0x510>
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	e749      	b.n	800096e <__aeabi_dadd+0x2f6>
 8000ada:	4664      	mov	r4, ip
 8000adc:	2220      	movs	r2, #32
 8000ade:	1b12      	subs	r2, r2, r4
 8000ae0:	4644      	mov	r4, r8
 8000ae2:	4094      	lsls	r4, r2
 8000ae4:	000f      	movs	r7, r1
 8000ae6:	46a1      	mov	r9, r4
 8000ae8:	4664      	mov	r4, ip
 8000aea:	4091      	lsls	r1, r2
 8000aec:	40e7      	lsrs	r7, r4
 8000aee:	464c      	mov	r4, r9
 8000af0:	1e4a      	subs	r2, r1, #1
 8000af2:	4191      	sbcs	r1, r2
 8000af4:	433c      	orrs	r4, r7
 8000af6:	4642      	mov	r2, r8
 8000af8:	430c      	orrs	r4, r1
 8000afa:	4661      	mov	r1, ip
 8000afc:	40ca      	lsrs	r2, r1
 8000afe:	1880      	adds	r0, r0, r2
 8000b00:	e6f4      	b.n	80008ec <__aeabi_dadd+0x274>
 8000b02:	4c79      	ldr	r4, [pc, #484]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000b04:	42a2      	cmp	r2, r4
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x492>
 8000b08:	e6fd      	b.n	8000906 <__aeabi_dadd+0x28e>
 8000b0a:	1859      	adds	r1, r3, r1
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	419b      	sbcs	r3, r3
 8000b10:	4440      	add	r0, r8
 8000b12:	425f      	negs	r7, r3
 8000b14:	19c7      	adds	r7, r0, r7
 8000b16:	07fc      	lsls	r4, r7, #31
 8000b18:	0849      	lsrs	r1, r1, #1
 8000b1a:	0016      	movs	r6, r2
 8000b1c:	430c      	orrs	r4, r1
 8000b1e:	087f      	lsrs	r7, r7, #1
 8000b20:	e6cf      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000b22:	1acc      	subs	r4, r1, r3
 8000b24:	42a1      	cmp	r1, r4
 8000b26:	41bf      	sbcs	r7, r7
 8000b28:	4643      	mov	r3, r8
 8000b2a:	427f      	negs	r7, r7
 8000b2c:	1a18      	subs	r0, r3, r0
 8000b2e:	4655      	mov	r5, sl
 8000b30:	1bc7      	subs	r7, r0, r7
 8000b32:	e5f7      	b.n	8000724 <__aeabi_dadd+0xac>
 8000b34:	08c9      	lsrs	r1, r1, #3
 8000b36:	077b      	lsls	r3, r7, #29
 8000b38:	4655      	mov	r5, sl
 8000b3a:	430b      	orrs	r3, r1
 8000b3c:	08f8      	lsrs	r0, r7, #3
 8000b3e:	e6c8      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d000      	beq.n	8000b46 <__aeabi_dadd+0x4ce>
 8000b44:	e081      	b.n	8000c4a <__aeabi_dadd+0x5d2>
 8000b46:	4643      	mov	r3, r8
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	d115      	bne.n	8000b78 <__aeabi_dadd+0x500>
 8000b4c:	2080      	movs	r0, #128	; 0x80
 8000b4e:	2500      	movs	r5, #0
 8000b50:	0300      	lsls	r0, r0, #12
 8000b52:	e6e3      	b.n	800091c <__aeabi_dadd+0x2a4>
 8000b54:	1a5c      	subs	r4, r3, r1
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	419b      	sbcs	r3, r3
 8000b5a:	1bc7      	subs	r7, r0, r7
 8000b5c:	425b      	negs	r3, r3
 8000b5e:	2601      	movs	r6, #1
 8000b60:	1aff      	subs	r7, r7, r3
 8000b62:	e5da      	b.n	800071a <__aeabi_dadd+0xa2>
 8000b64:	0742      	lsls	r2, r0, #29
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	08c0      	lsrs	r0, r0, #3
 8000b6c:	e6d2      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000b6e:	0742      	lsls	r2, r0, #29
 8000b70:	08db      	lsrs	r3, r3, #3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	08c0      	lsrs	r0, r0, #3
 8000b76:	e6ac      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000b78:	4643      	mov	r3, r8
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	08c9      	lsrs	r1, r1, #3
 8000b7e:	075b      	lsls	r3, r3, #29
 8000b80:	4655      	mov	r5, sl
 8000b82:	430b      	orrs	r3, r1
 8000b84:	08d0      	lsrs	r0, r2, #3
 8000b86:	e6c5      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000b88:	4643      	mov	r3, r8
 8000b8a:	4642      	mov	r2, r8
 8000b8c:	075b      	lsls	r3, r3, #29
 8000b8e:	08c9      	lsrs	r1, r1, #3
 8000b90:	430b      	orrs	r3, r1
 8000b92:	08d0      	lsrs	r0, r2, #3
 8000b94:	e6be      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000b96:	4303      	orrs	r3, r0
 8000b98:	001c      	movs	r4, r3
 8000b9a:	1e63      	subs	r3, r4, #1
 8000b9c:	419c      	sbcs	r4, r3
 8000b9e:	e6fc      	b.n	800099a <__aeabi_dadd+0x322>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	3c20      	subs	r4, #32
 8000ba4:	40e2      	lsrs	r2, r4
 8000ba6:	0014      	movs	r4, r2
 8000ba8:	4662      	mov	r2, ip
 8000baa:	2a20      	cmp	r2, #32
 8000bac:	d003      	beq.n	8000bb6 <__aeabi_dadd+0x53e>
 8000bae:	2540      	movs	r5, #64	; 0x40
 8000bb0:	1aad      	subs	r5, r5, r2
 8000bb2:	40a8      	lsls	r0, r5
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	1e58      	subs	r0, r3, #1
 8000bb8:	4183      	sbcs	r3, r0
 8000bba:	4323      	orrs	r3, r4
 8000bbc:	e775      	b.n	8000aaa <__aeabi_dadd+0x432>
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d0e2      	beq.n	8000b88 <__aeabi_dadd+0x510>
 8000bc2:	003a      	movs	r2, r7
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	d0cd      	beq.n	8000b64 <__aeabi_dadd+0x4ec>
 8000bc8:	0742      	lsls	r2, r0, #29
 8000bca:	08db      	lsrs	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	08c0      	lsrs	r0, r0, #3
 8000bd2:	0312      	lsls	r2, r2, #12
 8000bd4:	4210      	tst	r0, r2
 8000bd6:	d006      	beq.n	8000be6 <__aeabi_dadd+0x56e>
 8000bd8:	08fc      	lsrs	r4, r7, #3
 8000bda:	4214      	tst	r4, r2
 8000bdc:	d103      	bne.n	8000be6 <__aeabi_dadd+0x56e>
 8000bde:	0020      	movs	r0, r4
 8000be0:	08cb      	lsrs	r3, r1, #3
 8000be2:	077a      	lsls	r2, r7, #29
 8000be4:	4313      	orrs	r3, r2
 8000be6:	0f5a      	lsrs	r2, r3, #29
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	0752      	lsls	r2, r2, #29
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	e690      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dadd+0x582>
 8000bf8:	e709      	b.n	8000a0e <__aeabi_dadd+0x396>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	4642      	mov	r2, r8
 8000bfe:	08c9      	lsrs	r1, r1, #3
 8000c00:	075b      	lsls	r3, r3, #29
 8000c02:	4655      	mov	r5, sl
 8000c04:	430b      	orrs	r3, r1
 8000c06:	08d0      	lsrs	r0, r2, #3
 8000c08:	e666      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000c0a:	1acc      	subs	r4, r1, r3
 8000c0c:	42a1      	cmp	r1, r4
 8000c0e:	4189      	sbcs	r1, r1
 8000c10:	1a3f      	subs	r7, r7, r0
 8000c12:	4249      	negs	r1, r1
 8000c14:	4655      	mov	r5, sl
 8000c16:	2601      	movs	r6, #1
 8000c18:	1a7f      	subs	r7, r7, r1
 8000c1a:	e57e      	b.n	800071a <__aeabi_dadd+0xa2>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	1a5c      	subs	r4, r3, r1
 8000c20:	1a87      	subs	r7, r0, r2
 8000c22:	42a3      	cmp	r3, r4
 8000c24:	4192      	sbcs	r2, r2
 8000c26:	4252      	negs	r2, r2
 8000c28:	1abf      	subs	r7, r7, r2
 8000c2a:	023a      	lsls	r2, r7, #8
 8000c2c:	d53d      	bpl.n	8000caa <__aeabi_dadd+0x632>
 8000c2e:	1acc      	subs	r4, r1, r3
 8000c30:	42a1      	cmp	r1, r4
 8000c32:	4189      	sbcs	r1, r1
 8000c34:	4643      	mov	r3, r8
 8000c36:	4249      	negs	r1, r1
 8000c38:	1a1f      	subs	r7, r3, r0
 8000c3a:	4655      	mov	r5, sl
 8000c3c:	1a7f      	subs	r7, r7, r1
 8000c3e:	e595      	b.n	800076c <__aeabi_dadd+0xf4>
 8000c40:	077b      	lsls	r3, r7, #29
 8000c42:	08c9      	lsrs	r1, r1, #3
 8000c44:	430b      	orrs	r3, r1
 8000c46:	08f8      	lsrs	r0, r7, #3
 8000c48:	e643      	b.n	80008d2 <__aeabi_dadd+0x25a>
 8000c4a:	4644      	mov	r4, r8
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	430c      	orrs	r4, r1
 8000c50:	d130      	bne.n	8000cb4 <__aeabi_dadd+0x63c>
 8000c52:	0742      	lsls	r2, r0, #29
 8000c54:	4313      	orrs	r3, r2
 8000c56:	08c0      	lsrs	r0, r0, #3
 8000c58:	e65c      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000c5a:	077b      	lsls	r3, r7, #29
 8000c5c:	08c9      	lsrs	r1, r1, #3
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	08f8      	lsrs	r0, r7, #3
 8000c62:	e639      	b.n	80008d8 <__aeabi_dadd+0x260>
 8000c64:	185c      	adds	r4, r3, r1
 8000c66:	429c      	cmp	r4, r3
 8000c68:	419b      	sbcs	r3, r3
 8000c6a:	4440      	add	r0, r8
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	18c7      	adds	r7, r0, r3
 8000c70:	023b      	lsls	r3, r7, #8
 8000c72:	d400      	bmi.n	8000c76 <__aeabi_dadd+0x5fe>
 8000c74:	e625      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <__aeabi_dadd+0x674>)
 8000c78:	2601      	movs	r6, #1
 8000c7a:	401f      	ands	r7, r3
 8000c7c:	e621      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000c7e:	0004      	movs	r4, r0
 8000c80:	3a20      	subs	r2, #32
 8000c82:	40d4      	lsrs	r4, r2
 8000c84:	4662      	mov	r2, ip
 8000c86:	2a20      	cmp	r2, #32
 8000c88:	d004      	beq.n	8000c94 <__aeabi_dadd+0x61c>
 8000c8a:	2240      	movs	r2, #64	; 0x40
 8000c8c:	4666      	mov	r6, ip
 8000c8e:	1b92      	subs	r2, r2, r6
 8000c90:	4090      	lsls	r0, r2
 8000c92:	4303      	orrs	r3, r0
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	4193      	sbcs	r3, r2
 8000c98:	431c      	orrs	r4, r3
 8000c9a:	e67e      	b.n	800099a <__aeabi_dadd+0x322>
 8000c9c:	185c      	adds	r4, r3, r1
 8000c9e:	428c      	cmp	r4, r1
 8000ca0:	4189      	sbcs	r1, r1
 8000ca2:	4440      	add	r0, r8
 8000ca4:	4249      	negs	r1, r1
 8000ca6:	1847      	adds	r7, r0, r1
 8000ca8:	e6dd      	b.n	8000a66 <__aeabi_dadd+0x3ee>
 8000caa:	0023      	movs	r3, r4
 8000cac:	433b      	orrs	r3, r7
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dadd+0x63a>
 8000cb0:	e6ad      	b.n	8000a0e <__aeabi_dadd+0x396>
 8000cb2:	e606      	b.n	80008c2 <__aeabi_dadd+0x24a>
 8000cb4:	0744      	lsls	r4, r0, #29
 8000cb6:	4323      	orrs	r3, r4
 8000cb8:	2480      	movs	r4, #128	; 0x80
 8000cba:	08c0      	lsrs	r0, r0, #3
 8000cbc:	0324      	lsls	r4, r4, #12
 8000cbe:	4220      	tst	r0, r4
 8000cc0:	d008      	beq.n	8000cd4 <__aeabi_dadd+0x65c>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	08d6      	lsrs	r6, r2, #3
 8000cc6:	4226      	tst	r6, r4
 8000cc8:	d104      	bne.n	8000cd4 <__aeabi_dadd+0x65c>
 8000cca:	4655      	mov	r5, sl
 8000ccc:	0030      	movs	r0, r6
 8000cce:	08cb      	lsrs	r3, r1, #3
 8000cd0:	0751      	lsls	r1, r2, #29
 8000cd2:	430b      	orrs	r3, r1
 8000cd4:	0f5a      	lsrs	r2, r3, #29
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	0752      	lsls	r2, r2, #29
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	e619      	b.n	8000914 <__aeabi_dadd+0x29c>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	4a01      	ldr	r2, [pc, #4]	; (8000ce8 <__aeabi_dadd+0x670>)
 8000ce4:	001f      	movs	r7, r3
 8000ce6:	e55e      	b.n	80007a6 <__aeabi_dadd+0x12e>
 8000ce8:	000007ff 	.word	0x000007ff
 8000cec:	ff7fffff 	.word	0xff7fffff

08000cf0 <__aeabi_ddiv>:
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf2:	4657      	mov	r7, sl
 8000cf4:	464e      	mov	r6, r9
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	46de      	mov	lr, fp
 8000cfa:	b5e0      	push	{r5, r6, r7, lr}
 8000cfc:	4681      	mov	r9, r0
 8000cfe:	0005      	movs	r5, r0
 8000d00:	030c      	lsls	r4, r1, #12
 8000d02:	0048      	lsls	r0, r1, #1
 8000d04:	4692      	mov	sl, r2
 8000d06:	001f      	movs	r7, r3
 8000d08:	b085      	sub	sp, #20
 8000d0a:	0b24      	lsrs	r4, r4, #12
 8000d0c:	0d40      	lsrs	r0, r0, #21
 8000d0e:	0fce      	lsrs	r6, r1, #31
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_ddiv+0x26>
 8000d14:	e156      	b.n	8000fc4 <__aeabi_ddiv+0x2d4>
 8000d16:	4bd4      	ldr	r3, [pc, #848]	; (8001068 <__aeabi_ddiv+0x378>)
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_ddiv+0x2e>
 8000d1c:	e172      	b.n	8001004 <__aeabi_ddiv+0x314>
 8000d1e:	0f6b      	lsrs	r3, r5, #29
 8000d20:	00e4      	lsls	r4, r4, #3
 8000d22:	431c      	orrs	r4, r3
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	041b      	lsls	r3, r3, #16
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	4698      	mov	r8, r3
 8000d2c:	4bcf      	ldr	r3, [pc, #828]	; (800106c <__aeabi_ddiv+0x37c>)
 8000d2e:	00ed      	lsls	r5, r5, #3
 8000d30:	469b      	mov	fp, r3
 8000d32:	2300      	movs	r3, #0
 8000d34:	4699      	mov	r9, r3
 8000d36:	4483      	add	fp, r0
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	033c      	lsls	r4, r7, #12
 8000d3c:	007b      	lsls	r3, r7, #1
 8000d3e:	4650      	mov	r0, sl
 8000d40:	0b24      	lsrs	r4, r4, #12
 8000d42:	0d5b      	lsrs	r3, r3, #21
 8000d44:	0fff      	lsrs	r7, r7, #31
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_ddiv+0x5c>
 8000d4a:	e11f      	b.n	8000f8c <__aeabi_ddiv+0x29c>
 8000d4c:	4ac6      	ldr	r2, [pc, #792]	; (8001068 <__aeabi_ddiv+0x378>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x64>
 8000d52:	e162      	b.n	800101a <__aeabi_ddiv+0x32a>
 8000d54:	49c5      	ldr	r1, [pc, #788]	; (800106c <__aeabi_ddiv+0x37c>)
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	468c      	mov	ip, r1
 8000d5a:	00e4      	lsls	r4, r4, #3
 8000d5c:	4659      	mov	r1, fp
 8000d5e:	4314      	orrs	r4, r2
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	4463      	add	r3, ip
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	1acb      	subs	r3, r1, r3
 8000d68:	4314      	orrs	r4, r2
 8000d6a:	469b      	mov	fp, r3
 8000d6c:	00c2      	lsls	r2, r0, #3
 8000d6e:	2000      	movs	r0, #0
 8000d70:	0033      	movs	r3, r6
 8000d72:	407b      	eors	r3, r7
 8000d74:	469a      	mov	sl, r3
 8000d76:	464b      	mov	r3, r9
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d827      	bhi.n	8000dcc <__aeabi_ddiv+0xdc>
 8000d7c:	49bc      	ldr	r1, [pc, #752]	; (8001070 <__aeabi_ddiv+0x380>)
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	58cb      	ldr	r3, [r1, r3]
 8000d82:	469f      	mov	pc, r3
 8000d84:	46b2      	mov	sl, r6
 8000d86:	9b00      	ldr	r3, [sp, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d016      	beq.n	8000dba <__aeabi_ddiv+0xca>
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_ddiv+0xa2>
 8000d90:	e28e      	b.n	80012b0 <__aeabi_ddiv+0x5c0>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <__aeabi_ddiv+0xa8>
 8000d96:	e0d9      	b.n	8000f4c <__aeabi_ddiv+0x25c>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	2500      	movs	r5, #0
 8000d9e:	4652      	mov	r2, sl
 8000da0:	051b      	lsls	r3, r3, #20
 8000da2:	4323      	orrs	r3, r4
 8000da4:	07d2      	lsls	r2, r2, #31
 8000da6:	4313      	orrs	r3, r2
 8000da8:	0028      	movs	r0, r5
 8000daa:	0019      	movs	r1, r3
 8000dac:	b005      	add	sp, #20
 8000dae:	bcf0      	pop	{r4, r5, r6, r7}
 8000db0:	46bb      	mov	fp, r7
 8000db2:	46b2      	mov	sl, r6
 8000db4:	46a9      	mov	r9, r5
 8000db6:	46a0      	mov	r8, r4
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dba:	2400      	movs	r4, #0
 8000dbc:	2500      	movs	r5, #0
 8000dbe:	4baa      	ldr	r3, [pc, #680]	; (8001068 <__aeabi_ddiv+0x378>)
 8000dc0:	e7ed      	b.n	8000d9e <__aeabi_ddiv+0xae>
 8000dc2:	46ba      	mov	sl, r7
 8000dc4:	46a0      	mov	r8, r4
 8000dc6:	0015      	movs	r5, r2
 8000dc8:	9000      	str	r0, [sp, #0]
 8000dca:	e7dc      	b.n	8000d86 <__aeabi_ddiv+0x96>
 8000dcc:	4544      	cmp	r4, r8
 8000dce:	d200      	bcs.n	8000dd2 <__aeabi_ddiv+0xe2>
 8000dd0:	e1c7      	b.n	8001162 <__aeabi_ddiv+0x472>
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_ddiv+0xe6>
 8000dd4:	e1c2      	b.n	800115c <__aeabi_ddiv+0x46c>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	425b      	negs	r3, r3
 8000dda:	469c      	mov	ip, r3
 8000ddc:	002e      	movs	r6, r5
 8000dde:	4640      	mov	r0, r8
 8000de0:	2500      	movs	r5, #0
 8000de2:	44e3      	add	fp, ip
 8000de4:	0223      	lsls	r3, r4, #8
 8000de6:	0e14      	lsrs	r4, r2, #24
 8000de8:	431c      	orrs	r4, r3
 8000dea:	0c1b      	lsrs	r3, r3, #16
 8000dec:	4699      	mov	r9, r3
 8000dee:	0423      	lsls	r3, r4, #16
 8000df0:	0c1f      	lsrs	r7, r3, #16
 8000df2:	0212      	lsls	r2, r2, #8
 8000df4:	4649      	mov	r1, r9
 8000df6:	9200      	str	r2, [sp, #0]
 8000df8:	9701      	str	r7, [sp, #4]
 8000dfa:	f7ff fa07 	bl	800020c <__aeabi_uidivmod>
 8000dfe:	0002      	movs	r2, r0
 8000e00:	437a      	muls	r2, r7
 8000e02:	040b      	lsls	r3, r1, #16
 8000e04:	0c31      	lsrs	r1, r6, #16
 8000e06:	4680      	mov	r8, r0
 8000e08:	4319      	orrs	r1, r3
 8000e0a:	428a      	cmp	r2, r1
 8000e0c:	d907      	bls.n	8000e1e <__aeabi_ddiv+0x12e>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	469c      	mov	ip, r3
 8000e14:	1909      	adds	r1, r1, r4
 8000e16:	44e0      	add	r8, ip
 8000e18:	428c      	cmp	r4, r1
 8000e1a:	d800      	bhi.n	8000e1e <__aeabi_ddiv+0x12e>
 8000e1c:	e207      	b.n	800122e <__aeabi_ddiv+0x53e>
 8000e1e:	1a88      	subs	r0, r1, r2
 8000e20:	4649      	mov	r1, r9
 8000e22:	f7ff f9f3 	bl	800020c <__aeabi_uidivmod>
 8000e26:	0409      	lsls	r1, r1, #16
 8000e28:	468c      	mov	ip, r1
 8000e2a:	0431      	lsls	r1, r6, #16
 8000e2c:	4666      	mov	r6, ip
 8000e2e:	9a01      	ldr	r2, [sp, #4]
 8000e30:	0c09      	lsrs	r1, r1, #16
 8000e32:	4342      	muls	r2, r0
 8000e34:	0003      	movs	r3, r0
 8000e36:	4331      	orrs	r1, r6
 8000e38:	428a      	cmp	r2, r1
 8000e3a:	d904      	bls.n	8000e46 <__aeabi_ddiv+0x156>
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	428c      	cmp	r4, r1
 8000e42:	d800      	bhi.n	8000e46 <__aeabi_ddiv+0x156>
 8000e44:	e1ed      	b.n	8001222 <__aeabi_ddiv+0x532>
 8000e46:	1a88      	subs	r0, r1, r2
 8000e48:	4642      	mov	r2, r8
 8000e4a:	0412      	lsls	r2, r2, #16
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4690      	mov	r8, r2
 8000e50:	4641      	mov	r1, r8
 8000e52:	9b00      	ldr	r3, [sp, #0]
 8000e54:	040e      	lsls	r6, r1, #16
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	001f      	movs	r7, r3
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	9b00      	ldr	r3, [sp, #0]
 8000e5e:	0c36      	lsrs	r6, r6, #16
 8000e60:	041b      	lsls	r3, r3, #16
 8000e62:	0c19      	lsrs	r1, r3, #16
 8000e64:	000b      	movs	r3, r1
 8000e66:	4373      	muls	r3, r6
 8000e68:	0c12      	lsrs	r2, r2, #16
 8000e6a:	437e      	muls	r6, r7
 8000e6c:	9103      	str	r1, [sp, #12]
 8000e6e:	4351      	muls	r1, r2
 8000e70:	437a      	muls	r2, r7
 8000e72:	0c1f      	lsrs	r7, r3, #16
 8000e74:	46bc      	mov	ip, r7
 8000e76:	1876      	adds	r6, r6, r1
 8000e78:	4466      	add	r6, ip
 8000e7a:	42b1      	cmp	r1, r6
 8000e7c:	d903      	bls.n	8000e86 <__aeabi_ddiv+0x196>
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	468c      	mov	ip, r1
 8000e84:	4462      	add	r2, ip
 8000e86:	0c31      	lsrs	r1, r6, #16
 8000e88:	188a      	adds	r2, r1, r2
 8000e8a:	0431      	lsls	r1, r6, #16
 8000e8c:	041e      	lsls	r6, r3, #16
 8000e8e:	0c36      	lsrs	r6, r6, #16
 8000e90:	198e      	adds	r6, r1, r6
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d302      	bcc.n	8000e9c <__aeabi_ddiv+0x1ac>
 8000e96:	d112      	bne.n	8000ebe <__aeabi_ddiv+0x1ce>
 8000e98:	42b5      	cmp	r5, r6
 8000e9a:	d210      	bcs.n	8000ebe <__aeabi_ddiv+0x1ce>
 8000e9c:	4643      	mov	r3, r8
 8000e9e:	1e59      	subs	r1, r3, #1
 8000ea0:	9b00      	ldr	r3, [sp, #0]
 8000ea2:	469c      	mov	ip, r3
 8000ea4:	4465      	add	r5, ip
 8000ea6:	001f      	movs	r7, r3
 8000ea8:	429d      	cmp	r5, r3
 8000eaa:	419b      	sbcs	r3, r3
 8000eac:	425b      	negs	r3, r3
 8000eae:	191b      	adds	r3, r3, r4
 8000eb0:	18c0      	adds	r0, r0, r3
 8000eb2:	4284      	cmp	r4, r0
 8000eb4:	d200      	bcs.n	8000eb8 <__aeabi_ddiv+0x1c8>
 8000eb6:	e1a0      	b.n	80011fa <__aeabi_ddiv+0x50a>
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_ddiv+0x1cc>
 8000eba:	e19b      	b.n	80011f4 <__aeabi_ddiv+0x504>
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	1bae      	subs	r6, r5, r6
 8000ec0:	42b5      	cmp	r5, r6
 8000ec2:	41ad      	sbcs	r5, r5
 8000ec4:	1a80      	subs	r0, r0, r2
 8000ec6:	426d      	negs	r5, r5
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	4284      	cmp	r4, r0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_ddiv+0x1e0>
 8000ece:	e1d5      	b.n	800127c <__aeabi_ddiv+0x58c>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	f7ff f99b 	bl	800020c <__aeabi_uidivmod>
 8000ed6:	9a01      	ldr	r2, [sp, #4]
 8000ed8:	040b      	lsls	r3, r1, #16
 8000eda:	4342      	muls	r2, r0
 8000edc:	0c31      	lsrs	r1, r6, #16
 8000ede:	0005      	movs	r5, r0
 8000ee0:	4319      	orrs	r1, r3
 8000ee2:	428a      	cmp	r2, r1
 8000ee4:	d900      	bls.n	8000ee8 <__aeabi_ddiv+0x1f8>
 8000ee6:	e16c      	b.n	80011c2 <__aeabi_ddiv+0x4d2>
 8000ee8:	1a88      	subs	r0, r1, r2
 8000eea:	4649      	mov	r1, r9
 8000eec:	f7ff f98e 	bl	800020c <__aeabi_uidivmod>
 8000ef0:	9a01      	ldr	r2, [sp, #4]
 8000ef2:	0436      	lsls	r6, r6, #16
 8000ef4:	4342      	muls	r2, r0
 8000ef6:	0409      	lsls	r1, r1, #16
 8000ef8:	0c36      	lsrs	r6, r6, #16
 8000efa:	0003      	movs	r3, r0
 8000efc:	430e      	orrs	r6, r1
 8000efe:	42b2      	cmp	r2, r6
 8000f00:	d900      	bls.n	8000f04 <__aeabi_ddiv+0x214>
 8000f02:	e153      	b.n	80011ac <__aeabi_ddiv+0x4bc>
 8000f04:	9803      	ldr	r0, [sp, #12]
 8000f06:	1ab6      	subs	r6, r6, r2
 8000f08:	0002      	movs	r2, r0
 8000f0a:	042d      	lsls	r5, r5, #16
 8000f0c:	431d      	orrs	r5, r3
 8000f0e:	9f02      	ldr	r7, [sp, #8]
 8000f10:	042b      	lsls	r3, r5, #16
 8000f12:	0c1b      	lsrs	r3, r3, #16
 8000f14:	435a      	muls	r2, r3
 8000f16:	437b      	muls	r3, r7
 8000f18:	469c      	mov	ip, r3
 8000f1a:	0c29      	lsrs	r1, r5, #16
 8000f1c:	4348      	muls	r0, r1
 8000f1e:	0c13      	lsrs	r3, r2, #16
 8000f20:	4484      	add	ip, r0
 8000f22:	4463      	add	r3, ip
 8000f24:	4379      	muls	r1, r7
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d903      	bls.n	8000f32 <__aeabi_ddiv+0x242>
 8000f2a:	2080      	movs	r0, #128	; 0x80
 8000f2c:	0240      	lsls	r0, r0, #9
 8000f2e:	4684      	mov	ip, r0
 8000f30:	4461      	add	r1, ip
 8000f32:	0c18      	lsrs	r0, r3, #16
 8000f34:	0412      	lsls	r2, r2, #16
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	0c12      	lsrs	r2, r2, #16
 8000f3a:	1841      	adds	r1, r0, r1
 8000f3c:	189b      	adds	r3, r3, r2
 8000f3e:	428e      	cmp	r6, r1
 8000f40:	d200      	bcs.n	8000f44 <__aeabi_ddiv+0x254>
 8000f42:	e0ff      	b.n	8001144 <__aeabi_ddiv+0x454>
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x258>
 8000f46:	e0fa      	b.n	800113e <__aeabi_ddiv+0x44e>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	431d      	orrs	r5, r3
 8000f4c:	4a49      	ldr	r2, [pc, #292]	; (8001074 <__aeabi_ddiv+0x384>)
 8000f4e:	445a      	add	r2, fp
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	dc00      	bgt.n	8000f56 <__aeabi_ddiv+0x266>
 8000f54:	e0aa      	b.n	80010ac <__aeabi_ddiv+0x3bc>
 8000f56:	076b      	lsls	r3, r5, #29
 8000f58:	d000      	beq.n	8000f5c <__aeabi_ddiv+0x26c>
 8000f5a:	e13d      	b.n	80011d8 <__aeabi_ddiv+0x4e8>
 8000f5c:	08ed      	lsrs	r5, r5, #3
 8000f5e:	4643      	mov	r3, r8
 8000f60:	01db      	lsls	r3, r3, #7
 8000f62:	d506      	bpl.n	8000f72 <__aeabi_ddiv+0x282>
 8000f64:	4642      	mov	r2, r8
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <__aeabi_ddiv+0x388>)
 8000f68:	401a      	ands	r2, r3
 8000f6a:	4690      	mov	r8, r2
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	00d2      	lsls	r2, r2, #3
 8000f70:	445a      	add	r2, fp
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <__aeabi_ddiv+0x38c>)
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dd00      	ble.n	8000f7a <__aeabi_ddiv+0x28a>
 8000f78:	e71f      	b.n	8000dba <__aeabi_ddiv+0xca>
 8000f7a:	4643      	mov	r3, r8
 8000f7c:	075b      	lsls	r3, r3, #29
 8000f7e:	431d      	orrs	r5, r3
 8000f80:	4643      	mov	r3, r8
 8000f82:	0552      	lsls	r2, r2, #21
 8000f84:	025c      	lsls	r4, r3, #9
 8000f86:	0b24      	lsrs	r4, r4, #12
 8000f88:	0d53      	lsrs	r3, r2, #21
 8000f8a:	e708      	b.n	8000d9e <__aeabi_ddiv+0xae>
 8000f8c:	4652      	mov	r2, sl
 8000f8e:	4322      	orrs	r2, r4
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x2a4>
 8000f92:	e07b      	b.n	800108c <__aeabi_ddiv+0x39c>
 8000f94:	2c00      	cmp	r4, #0
 8000f96:	d100      	bne.n	8000f9a <__aeabi_ddiv+0x2aa>
 8000f98:	e0fa      	b.n	8001190 <__aeabi_ddiv+0x4a0>
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	f001 f996 	bl	80022cc <__clzsi2>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	3a0b      	subs	r2, #11
 8000fa4:	231d      	movs	r3, #29
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	4652      	mov	r2, sl
 8000fac:	3908      	subs	r1, #8
 8000fae:	40da      	lsrs	r2, r3
 8000fb0:	408c      	lsls	r4, r1
 8000fb2:	4314      	orrs	r4, r2
 8000fb4:	4652      	mov	r2, sl
 8000fb6:	408a      	lsls	r2, r1
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <__aeabi_ddiv+0x390>)
 8000fba:	4458      	add	r0, fp
 8000fbc:	469b      	mov	fp, r3
 8000fbe:	4483      	add	fp, r0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	e6d5      	b.n	8000d70 <__aeabi_ddiv+0x80>
 8000fc4:	464b      	mov	r3, r9
 8000fc6:	4323      	orrs	r3, r4
 8000fc8:	4698      	mov	r8, r3
 8000fca:	d044      	beq.n	8001056 <__aeabi_ddiv+0x366>
 8000fcc:	2c00      	cmp	r4, #0
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x2e2>
 8000fd0:	e0ce      	b.n	8001170 <__aeabi_ddiv+0x480>
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f001 f97a 	bl	80022cc <__clzsi2>
 8000fd8:	0001      	movs	r1, r0
 8000fda:	0002      	movs	r2, r0
 8000fdc:	390b      	subs	r1, #11
 8000fde:	231d      	movs	r3, #29
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	40d9      	lsrs	r1, r3
 8000fe8:	3808      	subs	r0, #8
 8000fea:	4084      	lsls	r4, r0
 8000fec:	000b      	movs	r3, r1
 8000fee:	464d      	mov	r5, r9
 8000ff0:	4323      	orrs	r3, r4
 8000ff2:	4698      	mov	r8, r3
 8000ff4:	4085      	lsls	r5, r0
 8000ff6:	4823      	ldr	r0, [pc, #140]	; (8001084 <__aeabi_ddiv+0x394>)
 8000ff8:	1a83      	subs	r3, r0, r2
 8000ffa:	469b      	mov	fp, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4699      	mov	r9, r3
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	e69a      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 8001004:	464b      	mov	r3, r9
 8001006:	4323      	orrs	r3, r4
 8001008:	4698      	mov	r8, r3
 800100a:	d11d      	bne.n	8001048 <__aeabi_ddiv+0x358>
 800100c:	2308      	movs	r3, #8
 800100e:	4699      	mov	r9, r3
 8001010:	3b06      	subs	r3, #6
 8001012:	2500      	movs	r5, #0
 8001014:	4683      	mov	fp, r0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	e68f      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 800101a:	4652      	mov	r2, sl
 800101c:	4322      	orrs	r2, r4
 800101e:	d109      	bne.n	8001034 <__aeabi_ddiv+0x344>
 8001020:	2302      	movs	r3, #2
 8001022:	4649      	mov	r1, r9
 8001024:	4319      	orrs	r1, r3
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <__aeabi_ddiv+0x398>)
 8001028:	4689      	mov	r9, r1
 800102a:	469c      	mov	ip, r3
 800102c:	2400      	movs	r4, #0
 800102e:	2002      	movs	r0, #2
 8001030:	44e3      	add	fp, ip
 8001032:	e69d      	b.n	8000d70 <__aeabi_ddiv+0x80>
 8001034:	2303      	movs	r3, #3
 8001036:	464a      	mov	r2, r9
 8001038:	431a      	orrs	r2, r3
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <__aeabi_ddiv+0x398>)
 800103c:	4691      	mov	r9, r2
 800103e:	469c      	mov	ip, r3
 8001040:	4652      	mov	r2, sl
 8001042:	2003      	movs	r0, #3
 8001044:	44e3      	add	fp, ip
 8001046:	e693      	b.n	8000d70 <__aeabi_ddiv+0x80>
 8001048:	230c      	movs	r3, #12
 800104a:	4699      	mov	r9, r3
 800104c:	3b09      	subs	r3, #9
 800104e:	46a0      	mov	r8, r4
 8001050:	4683      	mov	fp, r0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	e671      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 8001056:	2304      	movs	r3, #4
 8001058:	4699      	mov	r9, r3
 800105a:	2300      	movs	r3, #0
 800105c:	469b      	mov	fp, r3
 800105e:	3301      	adds	r3, #1
 8001060:	2500      	movs	r5, #0
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	e669      	b.n	8000d3a <__aeabi_ddiv+0x4a>
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	000007ff 	.word	0x000007ff
 800106c:	fffffc01 	.word	0xfffffc01
 8001070:	08009224 	.word	0x08009224
 8001074:	000003ff 	.word	0x000003ff
 8001078:	feffffff 	.word	0xfeffffff
 800107c:	000007fe 	.word	0x000007fe
 8001080:	000003f3 	.word	0x000003f3
 8001084:	fffffc0d 	.word	0xfffffc0d
 8001088:	fffff801 	.word	0xfffff801
 800108c:	4649      	mov	r1, r9
 800108e:	2301      	movs	r3, #1
 8001090:	4319      	orrs	r1, r3
 8001092:	4689      	mov	r9, r1
 8001094:	2400      	movs	r4, #0
 8001096:	2001      	movs	r0, #1
 8001098:	e66a      	b.n	8000d70 <__aeabi_ddiv+0x80>
 800109a:	2300      	movs	r3, #0
 800109c:	2480      	movs	r4, #128	; 0x80
 800109e:	469a      	mov	sl, r3
 80010a0:	2500      	movs	r5, #0
 80010a2:	4b8a      	ldr	r3, [pc, #552]	; (80012cc <__aeabi_ddiv+0x5dc>)
 80010a4:	0324      	lsls	r4, r4, #12
 80010a6:	e67a      	b.n	8000d9e <__aeabi_ddiv+0xae>
 80010a8:	2501      	movs	r5, #1
 80010aa:	426d      	negs	r5, r5
 80010ac:	2301      	movs	r3, #1
 80010ae:	1a9b      	subs	r3, r3, r2
 80010b0:	2b38      	cmp	r3, #56	; 0x38
 80010b2:	dd00      	ble.n	80010b6 <__aeabi_ddiv+0x3c6>
 80010b4:	e670      	b.n	8000d98 <__aeabi_ddiv+0xa8>
 80010b6:	2b1f      	cmp	r3, #31
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_ddiv+0x3cc>
 80010ba:	e0bf      	b.n	800123c <__aeabi_ddiv+0x54c>
 80010bc:	211f      	movs	r1, #31
 80010be:	4249      	negs	r1, r1
 80010c0:	1a8a      	subs	r2, r1, r2
 80010c2:	4641      	mov	r1, r8
 80010c4:	40d1      	lsrs	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	2b20      	cmp	r3, #32
 80010ca:	d004      	beq.n	80010d6 <__aeabi_ddiv+0x3e6>
 80010cc:	4641      	mov	r1, r8
 80010ce:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <__aeabi_ddiv+0x5e0>)
 80010d0:	445b      	add	r3, fp
 80010d2:	4099      	lsls	r1, r3
 80010d4:	430d      	orrs	r5, r1
 80010d6:	1e6b      	subs	r3, r5, #1
 80010d8:	419d      	sbcs	r5, r3
 80010da:	2307      	movs	r3, #7
 80010dc:	432a      	orrs	r2, r5
 80010de:	001d      	movs	r5, r3
 80010e0:	2400      	movs	r4, #0
 80010e2:	4015      	ands	r5, r2
 80010e4:	4213      	tst	r3, r2
 80010e6:	d100      	bne.n	80010ea <__aeabi_ddiv+0x3fa>
 80010e8:	e0d4      	b.n	8001294 <__aeabi_ddiv+0x5a4>
 80010ea:	210f      	movs	r1, #15
 80010ec:	2300      	movs	r3, #0
 80010ee:	4011      	ands	r1, r2
 80010f0:	2904      	cmp	r1, #4
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x406>
 80010f4:	e0cb      	b.n	800128e <__aeabi_ddiv+0x59e>
 80010f6:	1d11      	adds	r1, r2, #4
 80010f8:	4291      	cmp	r1, r2
 80010fa:	4192      	sbcs	r2, r2
 80010fc:	4252      	negs	r2, r2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	000a      	movs	r2, r1
 8001102:	0219      	lsls	r1, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_ddiv+0x418>
 8001106:	e0c2      	b.n	800128e <__aeabi_ddiv+0x59e>
 8001108:	2301      	movs	r3, #1
 800110a:	2400      	movs	r4, #0
 800110c:	2500      	movs	r5, #0
 800110e:	e646      	b.n	8000d9e <__aeabi_ddiv+0xae>
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	4641      	mov	r1, r8
 8001114:	031b      	lsls	r3, r3, #12
 8001116:	4219      	tst	r1, r3
 8001118:	d008      	beq.n	800112c <__aeabi_ddiv+0x43c>
 800111a:	421c      	tst	r4, r3
 800111c:	d106      	bne.n	800112c <__aeabi_ddiv+0x43c>
 800111e:	431c      	orrs	r4, r3
 8001120:	0324      	lsls	r4, r4, #12
 8001122:	46ba      	mov	sl, r7
 8001124:	0015      	movs	r5, r2
 8001126:	4b69      	ldr	r3, [pc, #420]	; (80012cc <__aeabi_ddiv+0x5dc>)
 8001128:	0b24      	lsrs	r4, r4, #12
 800112a:	e638      	b.n	8000d9e <__aeabi_ddiv+0xae>
 800112c:	2480      	movs	r4, #128	; 0x80
 800112e:	4643      	mov	r3, r8
 8001130:	0324      	lsls	r4, r4, #12
 8001132:	431c      	orrs	r4, r3
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	46b2      	mov	sl, r6
 8001138:	4b64      	ldr	r3, [pc, #400]	; (80012cc <__aeabi_ddiv+0x5dc>)
 800113a:	0b24      	lsrs	r4, r4, #12
 800113c:	e62f      	b.n	8000d9e <__aeabi_ddiv+0xae>
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x454>
 8001142:	e703      	b.n	8000f4c <__aeabi_ddiv+0x25c>
 8001144:	19a6      	adds	r6, r4, r6
 8001146:	1e68      	subs	r0, r5, #1
 8001148:	42a6      	cmp	r6, r4
 800114a:	d200      	bcs.n	800114e <__aeabi_ddiv+0x45e>
 800114c:	e08d      	b.n	800126a <__aeabi_ddiv+0x57a>
 800114e:	428e      	cmp	r6, r1
 8001150:	d200      	bcs.n	8001154 <__aeabi_ddiv+0x464>
 8001152:	e0a3      	b.n	800129c <__aeabi_ddiv+0x5ac>
 8001154:	d100      	bne.n	8001158 <__aeabi_ddiv+0x468>
 8001156:	e0b3      	b.n	80012c0 <__aeabi_ddiv+0x5d0>
 8001158:	0005      	movs	r5, r0
 800115a:	e6f5      	b.n	8000f48 <__aeabi_ddiv+0x258>
 800115c:	42aa      	cmp	r2, r5
 800115e:	d900      	bls.n	8001162 <__aeabi_ddiv+0x472>
 8001160:	e639      	b.n	8000dd6 <__aeabi_ddiv+0xe6>
 8001162:	4643      	mov	r3, r8
 8001164:	07de      	lsls	r6, r3, #31
 8001166:	0858      	lsrs	r0, r3, #1
 8001168:	086b      	lsrs	r3, r5, #1
 800116a:	431e      	orrs	r6, r3
 800116c:	07ed      	lsls	r5, r5, #31
 800116e:	e639      	b.n	8000de4 <__aeabi_ddiv+0xf4>
 8001170:	4648      	mov	r0, r9
 8001172:	f001 f8ab 	bl	80022cc <__clzsi2>
 8001176:	0001      	movs	r1, r0
 8001178:	0002      	movs	r2, r0
 800117a:	3115      	adds	r1, #21
 800117c:	3220      	adds	r2, #32
 800117e:	291c      	cmp	r1, #28
 8001180:	dc00      	bgt.n	8001184 <__aeabi_ddiv+0x494>
 8001182:	e72c      	b.n	8000fde <__aeabi_ddiv+0x2ee>
 8001184:	464b      	mov	r3, r9
 8001186:	3808      	subs	r0, #8
 8001188:	4083      	lsls	r3, r0
 800118a:	2500      	movs	r5, #0
 800118c:	4698      	mov	r8, r3
 800118e:	e732      	b.n	8000ff6 <__aeabi_ddiv+0x306>
 8001190:	f001 f89c 	bl	80022cc <__clzsi2>
 8001194:	0003      	movs	r3, r0
 8001196:	001a      	movs	r2, r3
 8001198:	3215      	adds	r2, #21
 800119a:	3020      	adds	r0, #32
 800119c:	2a1c      	cmp	r2, #28
 800119e:	dc00      	bgt.n	80011a2 <__aeabi_ddiv+0x4b2>
 80011a0:	e700      	b.n	8000fa4 <__aeabi_ddiv+0x2b4>
 80011a2:	4654      	mov	r4, sl
 80011a4:	3b08      	subs	r3, #8
 80011a6:	2200      	movs	r2, #0
 80011a8:	409c      	lsls	r4, r3
 80011aa:	e705      	b.n	8000fb8 <__aeabi_ddiv+0x2c8>
 80011ac:	1936      	adds	r6, r6, r4
 80011ae:	3b01      	subs	r3, #1
 80011b0:	42b4      	cmp	r4, r6
 80011b2:	d900      	bls.n	80011b6 <__aeabi_ddiv+0x4c6>
 80011b4:	e6a6      	b.n	8000f04 <__aeabi_ddiv+0x214>
 80011b6:	42b2      	cmp	r2, r6
 80011b8:	d800      	bhi.n	80011bc <__aeabi_ddiv+0x4cc>
 80011ba:	e6a3      	b.n	8000f04 <__aeabi_ddiv+0x214>
 80011bc:	1e83      	subs	r3, r0, #2
 80011be:	1936      	adds	r6, r6, r4
 80011c0:	e6a0      	b.n	8000f04 <__aeabi_ddiv+0x214>
 80011c2:	1909      	adds	r1, r1, r4
 80011c4:	3d01      	subs	r5, #1
 80011c6:	428c      	cmp	r4, r1
 80011c8:	d900      	bls.n	80011cc <__aeabi_ddiv+0x4dc>
 80011ca:	e68d      	b.n	8000ee8 <__aeabi_ddiv+0x1f8>
 80011cc:	428a      	cmp	r2, r1
 80011ce:	d800      	bhi.n	80011d2 <__aeabi_ddiv+0x4e2>
 80011d0:	e68a      	b.n	8000ee8 <__aeabi_ddiv+0x1f8>
 80011d2:	1e85      	subs	r5, r0, #2
 80011d4:	1909      	adds	r1, r1, r4
 80011d6:	e687      	b.n	8000ee8 <__aeabi_ddiv+0x1f8>
 80011d8:	230f      	movs	r3, #15
 80011da:	402b      	ands	r3, r5
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x4f2>
 80011e0:	e6bc      	b.n	8000f5c <__aeabi_ddiv+0x26c>
 80011e2:	2305      	movs	r3, #5
 80011e4:	425b      	negs	r3, r3
 80011e6:	42ab      	cmp	r3, r5
 80011e8:	419b      	sbcs	r3, r3
 80011ea:	3504      	adds	r5, #4
 80011ec:	425b      	negs	r3, r3
 80011ee:	08ed      	lsrs	r5, r5, #3
 80011f0:	4498      	add	r8, r3
 80011f2:	e6b4      	b.n	8000f5e <__aeabi_ddiv+0x26e>
 80011f4:	42af      	cmp	r7, r5
 80011f6:	d900      	bls.n	80011fa <__aeabi_ddiv+0x50a>
 80011f8:	e660      	b.n	8000ebc <__aeabi_ddiv+0x1cc>
 80011fa:	4282      	cmp	r2, r0
 80011fc:	d804      	bhi.n	8001208 <__aeabi_ddiv+0x518>
 80011fe:	d000      	beq.n	8001202 <__aeabi_ddiv+0x512>
 8001200:	e65c      	b.n	8000ebc <__aeabi_ddiv+0x1cc>
 8001202:	42ae      	cmp	r6, r5
 8001204:	d800      	bhi.n	8001208 <__aeabi_ddiv+0x518>
 8001206:	e659      	b.n	8000ebc <__aeabi_ddiv+0x1cc>
 8001208:	2302      	movs	r3, #2
 800120a:	425b      	negs	r3, r3
 800120c:	469c      	mov	ip, r3
 800120e:	9b00      	ldr	r3, [sp, #0]
 8001210:	44e0      	add	r8, ip
 8001212:	469c      	mov	ip, r3
 8001214:	4465      	add	r5, ip
 8001216:	429d      	cmp	r5, r3
 8001218:	419b      	sbcs	r3, r3
 800121a:	425b      	negs	r3, r3
 800121c:	191b      	adds	r3, r3, r4
 800121e:	18c0      	adds	r0, r0, r3
 8001220:	e64d      	b.n	8000ebe <__aeabi_ddiv+0x1ce>
 8001222:	428a      	cmp	r2, r1
 8001224:	d800      	bhi.n	8001228 <__aeabi_ddiv+0x538>
 8001226:	e60e      	b.n	8000e46 <__aeabi_ddiv+0x156>
 8001228:	1e83      	subs	r3, r0, #2
 800122a:	1909      	adds	r1, r1, r4
 800122c:	e60b      	b.n	8000e46 <__aeabi_ddiv+0x156>
 800122e:	428a      	cmp	r2, r1
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x544>
 8001232:	e5f4      	b.n	8000e1e <__aeabi_ddiv+0x12e>
 8001234:	1e83      	subs	r3, r0, #2
 8001236:	4698      	mov	r8, r3
 8001238:	1909      	adds	r1, r1, r4
 800123a:	e5f0      	b.n	8000e1e <__aeabi_ddiv+0x12e>
 800123c:	4925      	ldr	r1, [pc, #148]	; (80012d4 <__aeabi_ddiv+0x5e4>)
 800123e:	0028      	movs	r0, r5
 8001240:	4459      	add	r1, fp
 8001242:	408d      	lsls	r5, r1
 8001244:	4642      	mov	r2, r8
 8001246:	408a      	lsls	r2, r1
 8001248:	1e69      	subs	r1, r5, #1
 800124a:	418d      	sbcs	r5, r1
 800124c:	4641      	mov	r1, r8
 800124e:	40d8      	lsrs	r0, r3
 8001250:	40d9      	lsrs	r1, r3
 8001252:	4302      	orrs	r2, r0
 8001254:	432a      	orrs	r2, r5
 8001256:	000b      	movs	r3, r1
 8001258:	0751      	lsls	r1, r2, #29
 800125a:	d100      	bne.n	800125e <__aeabi_ddiv+0x56e>
 800125c:	e751      	b.n	8001102 <__aeabi_ddiv+0x412>
 800125e:	210f      	movs	r1, #15
 8001260:	4011      	ands	r1, r2
 8001262:	2904      	cmp	r1, #4
 8001264:	d000      	beq.n	8001268 <__aeabi_ddiv+0x578>
 8001266:	e746      	b.n	80010f6 <__aeabi_ddiv+0x406>
 8001268:	e74b      	b.n	8001102 <__aeabi_ddiv+0x412>
 800126a:	0005      	movs	r5, r0
 800126c:	428e      	cmp	r6, r1
 800126e:	d000      	beq.n	8001272 <__aeabi_ddiv+0x582>
 8001270:	e66a      	b.n	8000f48 <__aeabi_ddiv+0x258>
 8001272:	9a00      	ldr	r2, [sp, #0]
 8001274:	4293      	cmp	r3, r2
 8001276:	d000      	beq.n	800127a <__aeabi_ddiv+0x58a>
 8001278:	e666      	b.n	8000f48 <__aeabi_ddiv+0x258>
 800127a:	e667      	b.n	8000f4c <__aeabi_ddiv+0x25c>
 800127c:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <__aeabi_ddiv+0x5e8>)
 800127e:	445a      	add	r2, fp
 8001280:	2a00      	cmp	r2, #0
 8001282:	dc00      	bgt.n	8001286 <__aeabi_ddiv+0x596>
 8001284:	e710      	b.n	80010a8 <__aeabi_ddiv+0x3b8>
 8001286:	2301      	movs	r3, #1
 8001288:	2500      	movs	r5, #0
 800128a:	4498      	add	r8, r3
 800128c:	e667      	b.n	8000f5e <__aeabi_ddiv+0x26e>
 800128e:	075d      	lsls	r5, r3, #29
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	0b1c      	lsrs	r4, r3, #12
 8001294:	08d2      	lsrs	r2, r2, #3
 8001296:	2300      	movs	r3, #0
 8001298:	4315      	orrs	r5, r2
 800129a:	e580      	b.n	8000d9e <__aeabi_ddiv+0xae>
 800129c:	9800      	ldr	r0, [sp, #0]
 800129e:	3d02      	subs	r5, #2
 80012a0:	0042      	lsls	r2, r0, #1
 80012a2:	4282      	cmp	r2, r0
 80012a4:	41bf      	sbcs	r7, r7
 80012a6:	427f      	negs	r7, r7
 80012a8:	193c      	adds	r4, r7, r4
 80012aa:	1936      	adds	r6, r6, r4
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	e7dd      	b.n	800126c <__aeabi_ddiv+0x57c>
 80012b0:	2480      	movs	r4, #128	; 0x80
 80012b2:	4643      	mov	r3, r8
 80012b4:	0324      	lsls	r4, r4, #12
 80012b6:	431c      	orrs	r4, r3
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__aeabi_ddiv+0x5dc>)
 80012bc:	0b24      	lsrs	r4, r4, #12
 80012be:	e56e      	b.n	8000d9e <__aeabi_ddiv+0xae>
 80012c0:	9a00      	ldr	r2, [sp, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d3ea      	bcc.n	800129c <__aeabi_ddiv+0x5ac>
 80012c6:	0005      	movs	r5, r0
 80012c8:	e7d3      	b.n	8001272 <__aeabi_ddiv+0x582>
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	000007ff 	.word	0x000007ff
 80012d0:	0000043e 	.word	0x0000043e
 80012d4:	0000041e 	.word	0x0000041e
 80012d8:	000003ff 	.word	0x000003ff

080012dc <__eqdf2>:
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	464e      	mov	r6, r9
 80012e0:	4645      	mov	r5, r8
 80012e2:	46de      	mov	lr, fp
 80012e4:	4657      	mov	r7, sl
 80012e6:	4690      	mov	r8, r2
 80012e8:	b5e0      	push	{r5, r6, r7, lr}
 80012ea:	0017      	movs	r7, r2
 80012ec:	031a      	lsls	r2, r3, #12
 80012ee:	0b12      	lsrs	r2, r2, #12
 80012f0:	0005      	movs	r5, r0
 80012f2:	4684      	mov	ip, r0
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <__eqdf2+0x80>)
 80012f6:	030e      	lsls	r6, r1, #12
 80012f8:	004c      	lsls	r4, r1, #1
 80012fa:	4691      	mov	r9, r2
 80012fc:	005a      	lsls	r2, r3, #1
 80012fe:	0fdb      	lsrs	r3, r3, #31
 8001300:	469b      	mov	fp, r3
 8001302:	0b36      	lsrs	r6, r6, #12
 8001304:	0d64      	lsrs	r4, r4, #21
 8001306:	0fc9      	lsrs	r1, r1, #31
 8001308:	0d52      	lsrs	r2, r2, #21
 800130a:	4284      	cmp	r4, r0
 800130c:	d019      	beq.n	8001342 <__eqdf2+0x66>
 800130e:	4282      	cmp	r2, r0
 8001310:	d010      	beq.n	8001334 <__eqdf2+0x58>
 8001312:	2001      	movs	r0, #1
 8001314:	4294      	cmp	r4, r2
 8001316:	d10e      	bne.n	8001336 <__eqdf2+0x5a>
 8001318:	454e      	cmp	r6, r9
 800131a:	d10c      	bne.n	8001336 <__eqdf2+0x5a>
 800131c:	2001      	movs	r0, #1
 800131e:	45c4      	cmp	ip, r8
 8001320:	d109      	bne.n	8001336 <__eqdf2+0x5a>
 8001322:	4559      	cmp	r1, fp
 8001324:	d017      	beq.n	8001356 <__eqdf2+0x7a>
 8001326:	2c00      	cmp	r4, #0
 8001328:	d105      	bne.n	8001336 <__eqdf2+0x5a>
 800132a:	0030      	movs	r0, r6
 800132c:	4328      	orrs	r0, r5
 800132e:	1e43      	subs	r3, r0, #1
 8001330:	4198      	sbcs	r0, r3
 8001332:	e000      	b.n	8001336 <__eqdf2+0x5a>
 8001334:	2001      	movs	r0, #1
 8001336:	bcf0      	pop	{r4, r5, r6, r7}
 8001338:	46bb      	mov	fp, r7
 800133a:	46b2      	mov	sl, r6
 800133c:	46a9      	mov	r9, r5
 800133e:	46a0      	mov	r8, r4
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	0033      	movs	r3, r6
 8001344:	2001      	movs	r0, #1
 8001346:	432b      	orrs	r3, r5
 8001348:	d1f5      	bne.n	8001336 <__eqdf2+0x5a>
 800134a:	42a2      	cmp	r2, r4
 800134c:	d1f3      	bne.n	8001336 <__eqdf2+0x5a>
 800134e:	464b      	mov	r3, r9
 8001350:	433b      	orrs	r3, r7
 8001352:	d1f0      	bne.n	8001336 <__eqdf2+0x5a>
 8001354:	e7e2      	b.n	800131c <__eqdf2+0x40>
 8001356:	2000      	movs	r0, #0
 8001358:	e7ed      	b.n	8001336 <__eqdf2+0x5a>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	000007ff 	.word	0x000007ff

08001360 <__gedf2>:
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001362:	4647      	mov	r7, r8
 8001364:	46ce      	mov	lr, r9
 8001366:	0004      	movs	r4, r0
 8001368:	0018      	movs	r0, r3
 800136a:	0016      	movs	r6, r2
 800136c:	031b      	lsls	r3, r3, #12
 800136e:	0b1b      	lsrs	r3, r3, #12
 8001370:	4d2d      	ldr	r5, [pc, #180]	; (8001428 <__gedf2+0xc8>)
 8001372:	004a      	lsls	r2, r1, #1
 8001374:	4699      	mov	r9, r3
 8001376:	b580      	push	{r7, lr}
 8001378:	0043      	lsls	r3, r0, #1
 800137a:	030f      	lsls	r7, r1, #12
 800137c:	46a4      	mov	ip, r4
 800137e:	46b0      	mov	r8, r6
 8001380:	0b3f      	lsrs	r7, r7, #12
 8001382:	0d52      	lsrs	r2, r2, #21
 8001384:	0fc9      	lsrs	r1, r1, #31
 8001386:	0d5b      	lsrs	r3, r3, #21
 8001388:	0fc0      	lsrs	r0, r0, #31
 800138a:	42aa      	cmp	r2, r5
 800138c:	d021      	beq.n	80013d2 <__gedf2+0x72>
 800138e:	42ab      	cmp	r3, r5
 8001390:	d013      	beq.n	80013ba <__gedf2+0x5a>
 8001392:	2a00      	cmp	r2, #0
 8001394:	d122      	bne.n	80013dc <__gedf2+0x7c>
 8001396:	433c      	orrs	r4, r7
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <__gedf2+0x42>
 800139c:	464d      	mov	r5, r9
 800139e:	432e      	orrs	r6, r5
 80013a0:	d022      	beq.n	80013e8 <__gedf2+0x88>
 80013a2:	2c00      	cmp	r4, #0
 80013a4:	d010      	beq.n	80013c8 <__gedf2+0x68>
 80013a6:	4281      	cmp	r1, r0
 80013a8:	d022      	beq.n	80013f0 <__gedf2+0x90>
 80013aa:	2002      	movs	r0, #2
 80013ac:	3901      	subs	r1, #1
 80013ae:	4008      	ands	r0, r1
 80013b0:	3801      	subs	r0, #1
 80013b2:	bcc0      	pop	{r6, r7}
 80013b4:	46b9      	mov	r9, r7
 80013b6:	46b0      	mov	r8, r6
 80013b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ba:	464d      	mov	r5, r9
 80013bc:	432e      	orrs	r6, r5
 80013be:	d129      	bne.n	8001414 <__gedf2+0xb4>
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	d1f0      	bne.n	80013a6 <__gedf2+0x46>
 80013c4:	433c      	orrs	r4, r7
 80013c6:	d1ee      	bne.n	80013a6 <__gedf2+0x46>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d1f2      	bne.n	80013b2 <__gedf2+0x52>
 80013cc:	2001      	movs	r0, #1
 80013ce:	4240      	negs	r0, r0
 80013d0:	e7ef      	b.n	80013b2 <__gedf2+0x52>
 80013d2:	003d      	movs	r5, r7
 80013d4:	4325      	orrs	r5, r4
 80013d6:	d11d      	bne.n	8001414 <__gedf2+0xb4>
 80013d8:	4293      	cmp	r3, r2
 80013da:	d0ee      	beq.n	80013ba <__gedf2+0x5a>
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e2      	bne.n	80013a6 <__gedf2+0x46>
 80013e0:	464c      	mov	r4, r9
 80013e2:	4326      	orrs	r6, r4
 80013e4:	d1df      	bne.n	80013a6 <__gedf2+0x46>
 80013e6:	e7e0      	b.n	80013aa <__gedf2+0x4a>
 80013e8:	2000      	movs	r0, #0
 80013ea:	2c00      	cmp	r4, #0
 80013ec:	d0e1      	beq.n	80013b2 <__gedf2+0x52>
 80013ee:	e7dc      	b.n	80013aa <__gedf2+0x4a>
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dc0a      	bgt.n	800140a <__gedf2+0xaa>
 80013f4:	dbe8      	blt.n	80013c8 <__gedf2+0x68>
 80013f6:	454f      	cmp	r7, r9
 80013f8:	d8d7      	bhi.n	80013aa <__gedf2+0x4a>
 80013fa:	d00e      	beq.n	800141a <__gedf2+0xba>
 80013fc:	2000      	movs	r0, #0
 80013fe:	454f      	cmp	r7, r9
 8001400:	d2d7      	bcs.n	80013b2 <__gedf2+0x52>
 8001402:	2900      	cmp	r1, #0
 8001404:	d0e2      	beq.n	80013cc <__gedf2+0x6c>
 8001406:	0008      	movs	r0, r1
 8001408:	e7d3      	b.n	80013b2 <__gedf2+0x52>
 800140a:	4243      	negs	r3, r0
 800140c:	4158      	adcs	r0, r3
 800140e:	0040      	lsls	r0, r0, #1
 8001410:	3801      	subs	r0, #1
 8001412:	e7ce      	b.n	80013b2 <__gedf2+0x52>
 8001414:	2002      	movs	r0, #2
 8001416:	4240      	negs	r0, r0
 8001418:	e7cb      	b.n	80013b2 <__gedf2+0x52>
 800141a:	45c4      	cmp	ip, r8
 800141c:	d8c5      	bhi.n	80013aa <__gedf2+0x4a>
 800141e:	2000      	movs	r0, #0
 8001420:	45c4      	cmp	ip, r8
 8001422:	d2c6      	bcs.n	80013b2 <__gedf2+0x52>
 8001424:	e7ed      	b.n	8001402 <__gedf2+0xa2>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	000007ff 	.word	0x000007ff

0800142c <__ledf2>:
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	4647      	mov	r7, r8
 8001430:	46ce      	mov	lr, r9
 8001432:	0004      	movs	r4, r0
 8001434:	0018      	movs	r0, r3
 8001436:	0016      	movs	r6, r2
 8001438:	031b      	lsls	r3, r3, #12
 800143a:	0b1b      	lsrs	r3, r3, #12
 800143c:	4d2c      	ldr	r5, [pc, #176]	; (80014f0 <__ledf2+0xc4>)
 800143e:	004a      	lsls	r2, r1, #1
 8001440:	4699      	mov	r9, r3
 8001442:	b580      	push	{r7, lr}
 8001444:	0043      	lsls	r3, r0, #1
 8001446:	030f      	lsls	r7, r1, #12
 8001448:	46a4      	mov	ip, r4
 800144a:	46b0      	mov	r8, r6
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	0fc9      	lsrs	r1, r1, #31
 8001452:	0d5b      	lsrs	r3, r3, #21
 8001454:	0fc0      	lsrs	r0, r0, #31
 8001456:	42aa      	cmp	r2, r5
 8001458:	d00d      	beq.n	8001476 <__ledf2+0x4a>
 800145a:	42ab      	cmp	r3, r5
 800145c:	d010      	beq.n	8001480 <__ledf2+0x54>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d127      	bne.n	80014b2 <__ledf2+0x86>
 8001462:	433c      	orrs	r4, r7
 8001464:	2b00      	cmp	r3, #0
 8001466:	d111      	bne.n	800148c <__ledf2+0x60>
 8001468:	464d      	mov	r5, r9
 800146a:	432e      	orrs	r6, r5
 800146c:	d10e      	bne.n	800148c <__ledf2+0x60>
 800146e:	2000      	movs	r0, #0
 8001470:	2c00      	cmp	r4, #0
 8001472:	d015      	beq.n	80014a0 <__ledf2+0x74>
 8001474:	e00e      	b.n	8001494 <__ledf2+0x68>
 8001476:	003d      	movs	r5, r7
 8001478:	4325      	orrs	r5, r4
 800147a:	d110      	bne.n	800149e <__ledf2+0x72>
 800147c:	4293      	cmp	r3, r2
 800147e:	d118      	bne.n	80014b2 <__ledf2+0x86>
 8001480:	464d      	mov	r5, r9
 8001482:	432e      	orrs	r6, r5
 8001484:	d10b      	bne.n	800149e <__ledf2+0x72>
 8001486:	2a00      	cmp	r2, #0
 8001488:	d102      	bne.n	8001490 <__ledf2+0x64>
 800148a:	433c      	orrs	r4, r7
 800148c:	2c00      	cmp	r4, #0
 800148e:	d00b      	beq.n	80014a8 <__ledf2+0x7c>
 8001490:	4281      	cmp	r1, r0
 8001492:	d014      	beq.n	80014be <__ledf2+0x92>
 8001494:	2002      	movs	r0, #2
 8001496:	3901      	subs	r1, #1
 8001498:	4008      	ands	r0, r1
 800149a:	3801      	subs	r0, #1
 800149c:	e000      	b.n	80014a0 <__ledf2+0x74>
 800149e:	2002      	movs	r0, #2
 80014a0:	bcc0      	pop	{r6, r7}
 80014a2:	46b9      	mov	r9, r7
 80014a4:	46b0      	mov	r8, r6
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a8:	2800      	cmp	r0, #0
 80014aa:	d1f9      	bne.n	80014a0 <__ledf2+0x74>
 80014ac:	2001      	movs	r0, #1
 80014ae:	4240      	negs	r0, r0
 80014b0:	e7f6      	b.n	80014a0 <__ledf2+0x74>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ec      	bne.n	8001490 <__ledf2+0x64>
 80014b6:	464c      	mov	r4, r9
 80014b8:	4326      	orrs	r6, r4
 80014ba:	d1e9      	bne.n	8001490 <__ledf2+0x64>
 80014bc:	e7ea      	b.n	8001494 <__ledf2+0x68>
 80014be:	429a      	cmp	r2, r3
 80014c0:	dd04      	ble.n	80014cc <__ledf2+0xa0>
 80014c2:	4243      	negs	r3, r0
 80014c4:	4158      	adcs	r0, r3
 80014c6:	0040      	lsls	r0, r0, #1
 80014c8:	3801      	subs	r0, #1
 80014ca:	e7e9      	b.n	80014a0 <__ledf2+0x74>
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbeb      	blt.n	80014a8 <__ledf2+0x7c>
 80014d0:	454f      	cmp	r7, r9
 80014d2:	d8df      	bhi.n	8001494 <__ledf2+0x68>
 80014d4:	d006      	beq.n	80014e4 <__ledf2+0xb8>
 80014d6:	2000      	movs	r0, #0
 80014d8:	454f      	cmp	r7, r9
 80014da:	d2e1      	bcs.n	80014a0 <__ledf2+0x74>
 80014dc:	2900      	cmp	r1, #0
 80014de:	d0e5      	beq.n	80014ac <__ledf2+0x80>
 80014e0:	0008      	movs	r0, r1
 80014e2:	e7dd      	b.n	80014a0 <__ledf2+0x74>
 80014e4:	45c4      	cmp	ip, r8
 80014e6:	d8d5      	bhi.n	8001494 <__ledf2+0x68>
 80014e8:	2000      	movs	r0, #0
 80014ea:	45c4      	cmp	ip, r8
 80014ec:	d2d8      	bcs.n	80014a0 <__ledf2+0x74>
 80014ee:	e7f5      	b.n	80014dc <__ledf2+0xb0>
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__aeabi_dmul>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	4657      	mov	r7, sl
 80014f8:	464e      	mov	r6, r9
 80014fa:	4645      	mov	r5, r8
 80014fc:	46de      	mov	lr, fp
 80014fe:	b5e0      	push	{r5, r6, r7, lr}
 8001500:	4698      	mov	r8, r3
 8001502:	030c      	lsls	r4, r1, #12
 8001504:	004b      	lsls	r3, r1, #1
 8001506:	0006      	movs	r6, r0
 8001508:	4692      	mov	sl, r2
 800150a:	b087      	sub	sp, #28
 800150c:	0b24      	lsrs	r4, r4, #12
 800150e:	0d5b      	lsrs	r3, r3, #21
 8001510:	0fcf      	lsrs	r7, r1, #31
 8001512:	2b00      	cmp	r3, #0
 8001514:	d100      	bne.n	8001518 <__aeabi_dmul+0x24>
 8001516:	e15c      	b.n	80017d2 <__aeabi_dmul+0x2de>
 8001518:	4ad9      	ldr	r2, [pc, #868]	; (8001880 <__aeabi_dmul+0x38c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d100      	bne.n	8001520 <__aeabi_dmul+0x2c>
 800151e:	e175      	b.n	800180c <__aeabi_dmul+0x318>
 8001520:	0f42      	lsrs	r2, r0, #29
 8001522:	00e4      	lsls	r4, r4, #3
 8001524:	4314      	orrs	r4, r2
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0412      	lsls	r2, r2, #16
 800152a:	4314      	orrs	r4, r2
 800152c:	4ad5      	ldr	r2, [pc, #852]	; (8001884 <__aeabi_dmul+0x390>)
 800152e:	00c5      	lsls	r5, r0, #3
 8001530:	4694      	mov	ip, r2
 8001532:	4463      	add	r3, ip
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	4699      	mov	r9, r3
 800153a:	469b      	mov	fp, r3
 800153c:	4643      	mov	r3, r8
 800153e:	4642      	mov	r2, r8
 8001540:	031e      	lsls	r6, r3, #12
 8001542:	0fd2      	lsrs	r2, r2, #31
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4650      	mov	r0, sl
 8001548:	4690      	mov	r8, r2
 800154a:	0b36      	lsrs	r6, r6, #12
 800154c:	0d5b      	lsrs	r3, r3, #21
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x5e>
 8001550:	e120      	b.n	8001794 <__aeabi_dmul+0x2a0>
 8001552:	4acb      	ldr	r2, [pc, #812]	; (8001880 <__aeabi_dmul+0x38c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x66>
 8001558:	e162      	b.n	8001820 <__aeabi_dmul+0x32c>
 800155a:	49ca      	ldr	r1, [pc, #808]	; (8001884 <__aeabi_dmul+0x390>)
 800155c:	0f42      	lsrs	r2, r0, #29
 800155e:	468c      	mov	ip, r1
 8001560:	9900      	ldr	r1, [sp, #0]
 8001562:	4463      	add	r3, ip
 8001564:	00f6      	lsls	r6, r6, #3
 8001566:	468c      	mov	ip, r1
 8001568:	4316      	orrs	r6, r2
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	449c      	add	ip, r3
 800156e:	0412      	lsls	r2, r2, #16
 8001570:	4663      	mov	r3, ip
 8001572:	4316      	orrs	r6, r2
 8001574:	00c2      	lsls	r2, r0, #3
 8001576:	2000      	movs	r0, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	9900      	ldr	r1, [sp, #0]
 800157c:	4643      	mov	r3, r8
 800157e:	3101      	adds	r1, #1
 8001580:	468c      	mov	ip, r1
 8001582:	4649      	mov	r1, r9
 8001584:	407b      	eors	r3, r7
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	290f      	cmp	r1, #15
 800158a:	d826      	bhi.n	80015da <__aeabi_dmul+0xe6>
 800158c:	4bbe      	ldr	r3, [pc, #760]	; (8001888 <__aeabi_dmul+0x394>)
 800158e:	0089      	lsls	r1, r1, #2
 8001590:	5859      	ldr	r1, [r3, r1]
 8001592:	468f      	mov	pc, r1
 8001594:	4643      	mov	r3, r8
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	0034      	movs	r4, r6
 800159a:	0015      	movs	r5, r2
 800159c:	4683      	mov	fp, r0
 800159e:	465b      	mov	r3, fp
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d016      	beq.n	80015d2 <__aeabi_dmul+0xde>
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0xb6>
 80015a8:	e203      	b.n	80019b2 <__aeabi_dmul+0x4be>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xbc>
 80015ae:	e0cd      	b.n	800174c <__aeabi_dmul+0x258>
 80015b0:	2200      	movs	r2, #0
 80015b2:	2400      	movs	r4, #0
 80015b4:	2500      	movs	r5, #0
 80015b6:	9b01      	ldr	r3, [sp, #4]
 80015b8:	0512      	lsls	r2, r2, #20
 80015ba:	4322      	orrs	r2, r4
 80015bc:	07db      	lsls	r3, r3, #31
 80015be:	431a      	orrs	r2, r3
 80015c0:	0028      	movs	r0, r5
 80015c2:	0011      	movs	r1, r2
 80015c4:	b007      	add	sp, #28
 80015c6:	bcf0      	pop	{r4, r5, r6, r7}
 80015c8:	46bb      	mov	fp, r7
 80015ca:	46b2      	mov	sl, r6
 80015cc:	46a9      	mov	r9, r5
 80015ce:	46a0      	mov	r8, r4
 80015d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d2:	2400      	movs	r4, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	4aaa      	ldr	r2, [pc, #680]	; (8001880 <__aeabi_dmul+0x38c>)
 80015d8:	e7ed      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80015da:	0c28      	lsrs	r0, r5, #16
 80015dc:	042d      	lsls	r5, r5, #16
 80015de:	0c2d      	lsrs	r5, r5, #16
 80015e0:	002b      	movs	r3, r5
 80015e2:	0c11      	lsrs	r1, r2, #16
 80015e4:	0412      	lsls	r2, r2, #16
 80015e6:	0c12      	lsrs	r2, r2, #16
 80015e8:	4353      	muls	r3, r2
 80015ea:	4698      	mov	r8, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	002f      	movs	r7, r5
 80015f0:	4343      	muls	r3, r0
 80015f2:	4699      	mov	r9, r3
 80015f4:	434f      	muls	r7, r1
 80015f6:	444f      	add	r7, r9
 80015f8:	46bb      	mov	fp, r7
 80015fa:	4647      	mov	r7, r8
 80015fc:	000b      	movs	r3, r1
 80015fe:	0c3f      	lsrs	r7, r7, #16
 8001600:	46ba      	mov	sl, r7
 8001602:	4343      	muls	r3, r0
 8001604:	44da      	add	sl, fp
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	45d1      	cmp	r9, sl
 800160a:	d904      	bls.n	8001616 <__aeabi_dmul+0x122>
 800160c:	2780      	movs	r7, #128	; 0x80
 800160e:	027f      	lsls	r7, r7, #9
 8001610:	46b9      	mov	r9, r7
 8001612:	444b      	add	r3, r9
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	4653      	mov	r3, sl
 8001618:	0c1b      	lsrs	r3, r3, #16
 800161a:	469b      	mov	fp, r3
 800161c:	4653      	mov	r3, sl
 800161e:	041f      	lsls	r7, r3, #16
 8001620:	4643      	mov	r3, r8
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	4698      	mov	r8, r3
 8001628:	003b      	movs	r3, r7
 800162a:	4443      	add	r3, r8
 800162c:	9304      	str	r3, [sp, #16]
 800162e:	0c33      	lsrs	r3, r6, #16
 8001630:	0436      	lsls	r6, r6, #16
 8001632:	0c36      	lsrs	r6, r6, #16
 8001634:	4698      	mov	r8, r3
 8001636:	0033      	movs	r3, r6
 8001638:	4343      	muls	r3, r0
 800163a:	4699      	mov	r9, r3
 800163c:	4643      	mov	r3, r8
 800163e:	4343      	muls	r3, r0
 8001640:	002f      	movs	r7, r5
 8001642:	469a      	mov	sl, r3
 8001644:	4643      	mov	r3, r8
 8001646:	4377      	muls	r7, r6
 8001648:	435d      	muls	r5, r3
 800164a:	0c38      	lsrs	r0, r7, #16
 800164c:	444d      	add	r5, r9
 800164e:	1945      	adds	r5, r0, r5
 8001650:	45a9      	cmp	r9, r5
 8001652:	d903      	bls.n	800165c <__aeabi_dmul+0x168>
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	4699      	mov	r9, r3
 800165a:	44ca      	add	sl, r9
 800165c:	043f      	lsls	r7, r7, #16
 800165e:	0c28      	lsrs	r0, r5, #16
 8001660:	0c3f      	lsrs	r7, r7, #16
 8001662:	042d      	lsls	r5, r5, #16
 8001664:	19ed      	adds	r5, r5, r7
 8001666:	0c27      	lsrs	r7, r4, #16
 8001668:	0424      	lsls	r4, r4, #16
 800166a:	0c24      	lsrs	r4, r4, #16
 800166c:	0003      	movs	r3, r0
 800166e:	0020      	movs	r0, r4
 8001670:	4350      	muls	r0, r2
 8001672:	437a      	muls	r2, r7
 8001674:	4691      	mov	r9, r2
 8001676:	003a      	movs	r2, r7
 8001678:	4453      	add	r3, sl
 800167a:	9305      	str	r3, [sp, #20]
 800167c:	0c03      	lsrs	r3, r0, #16
 800167e:	469a      	mov	sl, r3
 8001680:	434a      	muls	r2, r1
 8001682:	4361      	muls	r1, r4
 8001684:	4449      	add	r1, r9
 8001686:	4451      	add	r1, sl
 8001688:	44ab      	add	fp, r5
 800168a:	4589      	cmp	r9, r1
 800168c:	d903      	bls.n	8001696 <__aeabi_dmul+0x1a2>
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	4699      	mov	r9, r3
 8001694:	444a      	add	r2, r9
 8001696:	0400      	lsls	r0, r0, #16
 8001698:	0c0b      	lsrs	r3, r1, #16
 800169a:	0c00      	lsrs	r0, r0, #16
 800169c:	0409      	lsls	r1, r1, #16
 800169e:	1809      	adds	r1, r1, r0
 80016a0:	0020      	movs	r0, r4
 80016a2:	4699      	mov	r9, r3
 80016a4:	4643      	mov	r3, r8
 80016a6:	4370      	muls	r0, r6
 80016a8:	435c      	muls	r4, r3
 80016aa:	437e      	muls	r6, r7
 80016ac:	435f      	muls	r7, r3
 80016ae:	0c03      	lsrs	r3, r0, #16
 80016b0:	4698      	mov	r8, r3
 80016b2:	19a4      	adds	r4, r4, r6
 80016b4:	4444      	add	r4, r8
 80016b6:	444a      	add	r2, r9
 80016b8:	9703      	str	r7, [sp, #12]
 80016ba:	42a6      	cmp	r6, r4
 80016bc:	d904      	bls.n	80016c8 <__aeabi_dmul+0x1d4>
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	025b      	lsls	r3, r3, #9
 80016c2:	4698      	mov	r8, r3
 80016c4:	4447      	add	r7, r8
 80016c6:	9703      	str	r7, [sp, #12]
 80016c8:	0423      	lsls	r3, r4, #16
 80016ca:	9e02      	ldr	r6, [sp, #8]
 80016cc:	469a      	mov	sl, r3
 80016ce:	9b05      	ldr	r3, [sp, #20]
 80016d0:	445e      	add	r6, fp
 80016d2:	4698      	mov	r8, r3
 80016d4:	42ae      	cmp	r6, r5
 80016d6:	41ad      	sbcs	r5, r5
 80016d8:	1876      	adds	r6, r6, r1
 80016da:	428e      	cmp	r6, r1
 80016dc:	4189      	sbcs	r1, r1
 80016de:	0400      	lsls	r0, r0, #16
 80016e0:	0c00      	lsrs	r0, r0, #16
 80016e2:	4450      	add	r0, sl
 80016e4:	4440      	add	r0, r8
 80016e6:	426d      	negs	r5, r5
 80016e8:	1947      	adds	r7, r0, r5
 80016ea:	46b8      	mov	r8, r7
 80016ec:	4693      	mov	fp, r2
 80016ee:	4249      	negs	r1, r1
 80016f0:	4689      	mov	r9, r1
 80016f2:	44c3      	add	fp, r8
 80016f4:	44d9      	add	r9, fp
 80016f6:	4298      	cmp	r0, r3
 80016f8:	4180      	sbcs	r0, r0
 80016fa:	45a8      	cmp	r8, r5
 80016fc:	41ad      	sbcs	r5, r5
 80016fe:	4593      	cmp	fp, r2
 8001700:	4192      	sbcs	r2, r2
 8001702:	4589      	cmp	r9, r1
 8001704:	4189      	sbcs	r1, r1
 8001706:	426d      	negs	r5, r5
 8001708:	4240      	negs	r0, r0
 800170a:	4328      	orrs	r0, r5
 800170c:	0c24      	lsrs	r4, r4, #16
 800170e:	4252      	negs	r2, r2
 8001710:	4249      	negs	r1, r1
 8001712:	430a      	orrs	r2, r1
 8001714:	9b03      	ldr	r3, [sp, #12]
 8001716:	1900      	adds	r0, r0, r4
 8001718:	1880      	adds	r0, r0, r2
 800171a:	18c7      	adds	r7, r0, r3
 800171c:	464b      	mov	r3, r9
 800171e:	0ddc      	lsrs	r4, r3, #23
 8001720:	9b04      	ldr	r3, [sp, #16]
 8001722:	0275      	lsls	r5, r6, #9
 8001724:	431d      	orrs	r5, r3
 8001726:	1e6a      	subs	r2, r5, #1
 8001728:	4195      	sbcs	r5, r2
 800172a:	464b      	mov	r3, r9
 800172c:	0df6      	lsrs	r6, r6, #23
 800172e:	027f      	lsls	r7, r7, #9
 8001730:	4335      	orrs	r5, r6
 8001732:	025a      	lsls	r2, r3, #9
 8001734:	433c      	orrs	r4, r7
 8001736:	4315      	orrs	r5, r2
 8001738:	01fb      	lsls	r3, r7, #7
 800173a:	d400      	bmi.n	800173e <__aeabi_dmul+0x24a>
 800173c:	e11c      	b.n	8001978 <__aeabi_dmul+0x484>
 800173e:	2101      	movs	r1, #1
 8001740:	086a      	lsrs	r2, r5, #1
 8001742:	400d      	ands	r5, r1
 8001744:	4315      	orrs	r5, r2
 8001746:	07e2      	lsls	r2, r4, #31
 8001748:	4315      	orrs	r5, r2
 800174a:	0864      	lsrs	r4, r4, #1
 800174c:	494f      	ldr	r1, [pc, #316]	; (800188c <__aeabi_dmul+0x398>)
 800174e:	4461      	add	r1, ip
 8001750:	2900      	cmp	r1, #0
 8001752:	dc00      	bgt.n	8001756 <__aeabi_dmul+0x262>
 8001754:	e0b0      	b.n	80018b8 <__aeabi_dmul+0x3c4>
 8001756:	076b      	lsls	r3, r5, #29
 8001758:	d009      	beq.n	800176e <__aeabi_dmul+0x27a>
 800175a:	220f      	movs	r2, #15
 800175c:	402a      	ands	r2, r5
 800175e:	2a04      	cmp	r2, #4
 8001760:	d005      	beq.n	800176e <__aeabi_dmul+0x27a>
 8001762:	1d2a      	adds	r2, r5, #4
 8001764:	42aa      	cmp	r2, r5
 8001766:	41ad      	sbcs	r5, r5
 8001768:	426d      	negs	r5, r5
 800176a:	1964      	adds	r4, r4, r5
 800176c:	0015      	movs	r5, r2
 800176e:	01e3      	lsls	r3, r4, #7
 8001770:	d504      	bpl.n	800177c <__aeabi_dmul+0x288>
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	4a46      	ldr	r2, [pc, #280]	; (8001890 <__aeabi_dmul+0x39c>)
 8001776:	00c9      	lsls	r1, r1, #3
 8001778:	4014      	ands	r4, r2
 800177a:	4461      	add	r1, ip
 800177c:	4a45      	ldr	r2, [pc, #276]	; (8001894 <__aeabi_dmul+0x3a0>)
 800177e:	4291      	cmp	r1, r2
 8001780:	dd00      	ble.n	8001784 <__aeabi_dmul+0x290>
 8001782:	e726      	b.n	80015d2 <__aeabi_dmul+0xde>
 8001784:	0762      	lsls	r2, r4, #29
 8001786:	08ed      	lsrs	r5, r5, #3
 8001788:	0264      	lsls	r4, r4, #9
 800178a:	0549      	lsls	r1, r1, #21
 800178c:	4315      	orrs	r5, r2
 800178e:	0b24      	lsrs	r4, r4, #12
 8001790:	0d4a      	lsrs	r2, r1, #21
 8001792:	e710      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001794:	4652      	mov	r2, sl
 8001796:	4332      	orrs	r2, r6
 8001798:	d100      	bne.n	800179c <__aeabi_dmul+0x2a8>
 800179a:	e07f      	b.n	800189c <__aeabi_dmul+0x3a8>
 800179c:	2e00      	cmp	r6, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dmul+0x2ae>
 80017a0:	e0dc      	b.n	800195c <__aeabi_dmul+0x468>
 80017a2:	0030      	movs	r0, r6
 80017a4:	f000 fd92 	bl	80022cc <__clzsi2>
 80017a8:	0002      	movs	r2, r0
 80017aa:	3a0b      	subs	r2, #11
 80017ac:	231d      	movs	r3, #29
 80017ae:	0001      	movs	r1, r0
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	4652      	mov	r2, sl
 80017b4:	3908      	subs	r1, #8
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	408e      	lsls	r6, r1
 80017ba:	4316      	orrs	r6, r2
 80017bc:	4652      	mov	r2, sl
 80017be:	408a      	lsls	r2, r1
 80017c0:	9b00      	ldr	r3, [sp, #0]
 80017c2:	4935      	ldr	r1, [pc, #212]	; (8001898 <__aeabi_dmul+0x3a4>)
 80017c4:	1a18      	subs	r0, r3, r0
 80017c6:	0003      	movs	r3, r0
 80017c8:	468c      	mov	ip, r1
 80017ca:	4463      	add	r3, ip
 80017cc:	2000      	movs	r0, #0
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	e6d3      	b.n	800157a <__aeabi_dmul+0x86>
 80017d2:	0025      	movs	r5, r4
 80017d4:	4305      	orrs	r5, r0
 80017d6:	d04a      	beq.n	800186e <__aeabi_dmul+0x37a>
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d100      	bne.n	80017de <__aeabi_dmul+0x2ea>
 80017dc:	e0b0      	b.n	8001940 <__aeabi_dmul+0x44c>
 80017de:	0020      	movs	r0, r4
 80017e0:	f000 fd74 	bl	80022cc <__clzsi2>
 80017e4:	0001      	movs	r1, r0
 80017e6:	0002      	movs	r2, r0
 80017e8:	390b      	subs	r1, #11
 80017ea:	231d      	movs	r3, #29
 80017ec:	0010      	movs	r0, r2
 80017ee:	1a5b      	subs	r3, r3, r1
 80017f0:	0031      	movs	r1, r6
 80017f2:	0035      	movs	r5, r6
 80017f4:	3808      	subs	r0, #8
 80017f6:	4084      	lsls	r4, r0
 80017f8:	40d9      	lsrs	r1, r3
 80017fa:	4085      	lsls	r5, r0
 80017fc:	430c      	orrs	r4, r1
 80017fe:	4826      	ldr	r0, [pc, #152]	; (8001898 <__aeabi_dmul+0x3a4>)
 8001800:	1a83      	subs	r3, r0, r2
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2300      	movs	r3, #0
 8001806:	4699      	mov	r9, r3
 8001808:	469b      	mov	fp, r3
 800180a:	e697      	b.n	800153c <__aeabi_dmul+0x48>
 800180c:	0005      	movs	r5, r0
 800180e:	4325      	orrs	r5, r4
 8001810:	d126      	bne.n	8001860 <__aeabi_dmul+0x36c>
 8001812:	2208      	movs	r2, #8
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2302      	movs	r3, #2
 8001818:	2400      	movs	r4, #0
 800181a:	4691      	mov	r9, r2
 800181c:	469b      	mov	fp, r3
 800181e:	e68d      	b.n	800153c <__aeabi_dmul+0x48>
 8001820:	4652      	mov	r2, sl
 8001822:	9b00      	ldr	r3, [sp, #0]
 8001824:	4332      	orrs	r2, r6
 8001826:	d110      	bne.n	800184a <__aeabi_dmul+0x356>
 8001828:	4915      	ldr	r1, [pc, #84]	; (8001880 <__aeabi_dmul+0x38c>)
 800182a:	2600      	movs	r6, #0
 800182c:	468c      	mov	ip, r1
 800182e:	4463      	add	r3, ip
 8001830:	4649      	mov	r1, r9
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	4319      	orrs	r1, r3
 8001838:	4689      	mov	r9, r1
 800183a:	2002      	movs	r0, #2
 800183c:	e69d      	b.n	800157a <__aeabi_dmul+0x86>
 800183e:	465b      	mov	r3, fp
 8001840:	9701      	str	r7, [sp, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d000      	beq.n	8001848 <__aeabi_dmul+0x354>
 8001846:	e6ad      	b.n	80015a4 <__aeabi_dmul+0xb0>
 8001848:	e6c3      	b.n	80015d2 <__aeabi_dmul+0xde>
 800184a:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <__aeabi_dmul+0x38c>)
 800184c:	2003      	movs	r0, #3
 800184e:	4694      	mov	ip, r2
 8001850:	4463      	add	r3, ip
 8001852:	464a      	mov	r2, r9
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2303      	movs	r3, #3
 8001858:	431a      	orrs	r2, r3
 800185a:	4691      	mov	r9, r2
 800185c:	4652      	mov	r2, sl
 800185e:	e68c      	b.n	800157a <__aeabi_dmul+0x86>
 8001860:	220c      	movs	r2, #12
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2303      	movs	r3, #3
 8001866:	0005      	movs	r5, r0
 8001868:	4691      	mov	r9, r2
 800186a:	469b      	mov	fp, r3
 800186c:	e666      	b.n	800153c <__aeabi_dmul+0x48>
 800186e:	2304      	movs	r3, #4
 8001870:	4699      	mov	r9, r3
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	2400      	movs	r4, #0
 800187a:	469b      	mov	fp, r3
 800187c:	e65e      	b.n	800153c <__aeabi_dmul+0x48>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff
 8001884:	fffffc01 	.word	0xfffffc01
 8001888:	08009264 	.word	0x08009264
 800188c:	000003ff 	.word	0x000003ff
 8001890:	feffffff 	.word	0xfeffffff
 8001894:	000007fe 	.word	0x000007fe
 8001898:	fffffc0d 	.word	0xfffffc0d
 800189c:	4649      	mov	r1, r9
 800189e:	2301      	movs	r3, #1
 80018a0:	4319      	orrs	r1, r3
 80018a2:	4689      	mov	r9, r1
 80018a4:	2600      	movs	r6, #0
 80018a6:	2001      	movs	r0, #1
 80018a8:	e667      	b.n	800157a <__aeabi_dmul+0x86>
 80018aa:	2300      	movs	r3, #0
 80018ac:	2480      	movs	r4, #128	; 0x80
 80018ae:	2500      	movs	r5, #0
 80018b0:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <__aeabi_dmul+0x4cc>)
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	0324      	lsls	r4, r4, #12
 80018b6:	e67e      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80018b8:	2001      	movs	r0, #1
 80018ba:	1a40      	subs	r0, r0, r1
 80018bc:	2838      	cmp	r0, #56	; 0x38
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dmul+0x3ce>
 80018c0:	e676      	b.n	80015b0 <__aeabi_dmul+0xbc>
 80018c2:	281f      	cmp	r0, #31
 80018c4:	dd5b      	ble.n	800197e <__aeabi_dmul+0x48a>
 80018c6:	221f      	movs	r2, #31
 80018c8:	0023      	movs	r3, r4
 80018ca:	4252      	negs	r2, r2
 80018cc:	1a51      	subs	r1, r2, r1
 80018ce:	40cb      	lsrs	r3, r1
 80018d0:	0019      	movs	r1, r3
 80018d2:	2820      	cmp	r0, #32
 80018d4:	d003      	beq.n	80018de <__aeabi_dmul+0x3ea>
 80018d6:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <__aeabi_dmul+0x4d0>)
 80018d8:	4462      	add	r2, ip
 80018da:	4094      	lsls	r4, r2
 80018dc:	4325      	orrs	r5, r4
 80018de:	1e6a      	subs	r2, r5, #1
 80018e0:	4195      	sbcs	r5, r2
 80018e2:	002a      	movs	r2, r5
 80018e4:	430a      	orrs	r2, r1
 80018e6:	2107      	movs	r1, #7
 80018e8:	000d      	movs	r5, r1
 80018ea:	2400      	movs	r4, #0
 80018ec:	4015      	ands	r5, r2
 80018ee:	4211      	tst	r1, r2
 80018f0:	d05b      	beq.n	80019aa <__aeabi_dmul+0x4b6>
 80018f2:	210f      	movs	r1, #15
 80018f4:	2400      	movs	r4, #0
 80018f6:	4011      	ands	r1, r2
 80018f8:	2904      	cmp	r1, #4
 80018fa:	d053      	beq.n	80019a4 <__aeabi_dmul+0x4b0>
 80018fc:	1d11      	adds	r1, r2, #4
 80018fe:	4291      	cmp	r1, r2
 8001900:	4192      	sbcs	r2, r2
 8001902:	4252      	negs	r2, r2
 8001904:	18a4      	adds	r4, r4, r2
 8001906:	000a      	movs	r2, r1
 8001908:	0223      	lsls	r3, r4, #8
 800190a:	d54b      	bpl.n	80019a4 <__aeabi_dmul+0x4b0>
 800190c:	2201      	movs	r2, #1
 800190e:	2400      	movs	r4, #0
 8001910:	2500      	movs	r5, #0
 8001912:	e650      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	031b      	lsls	r3, r3, #12
 8001918:	421c      	tst	r4, r3
 800191a:	d009      	beq.n	8001930 <__aeabi_dmul+0x43c>
 800191c:	421e      	tst	r6, r3
 800191e:	d107      	bne.n	8001930 <__aeabi_dmul+0x43c>
 8001920:	4333      	orrs	r3, r6
 8001922:	031c      	lsls	r4, r3, #12
 8001924:	4643      	mov	r3, r8
 8001926:	0015      	movs	r5, r2
 8001928:	0b24      	lsrs	r4, r4, #12
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <__aeabi_dmul+0x4cc>)
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	e642      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	0312      	lsls	r2, r2, #12
 8001934:	4314      	orrs	r4, r2
 8001936:	0324      	lsls	r4, r4, #12
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <__aeabi_dmul+0x4cc>)
 800193a:	0b24      	lsrs	r4, r4, #12
 800193c:	9701      	str	r7, [sp, #4]
 800193e:	e63a      	b.n	80015b6 <__aeabi_dmul+0xc2>
 8001940:	f000 fcc4 	bl	80022cc <__clzsi2>
 8001944:	0001      	movs	r1, r0
 8001946:	0002      	movs	r2, r0
 8001948:	3115      	adds	r1, #21
 800194a:	3220      	adds	r2, #32
 800194c:	291c      	cmp	r1, #28
 800194e:	dc00      	bgt.n	8001952 <__aeabi_dmul+0x45e>
 8001950:	e74b      	b.n	80017ea <__aeabi_dmul+0x2f6>
 8001952:	0034      	movs	r4, r6
 8001954:	3808      	subs	r0, #8
 8001956:	2500      	movs	r5, #0
 8001958:	4084      	lsls	r4, r0
 800195a:	e750      	b.n	80017fe <__aeabi_dmul+0x30a>
 800195c:	f000 fcb6 	bl	80022cc <__clzsi2>
 8001960:	0003      	movs	r3, r0
 8001962:	001a      	movs	r2, r3
 8001964:	3215      	adds	r2, #21
 8001966:	3020      	adds	r0, #32
 8001968:	2a1c      	cmp	r2, #28
 800196a:	dc00      	bgt.n	800196e <__aeabi_dmul+0x47a>
 800196c:	e71e      	b.n	80017ac <__aeabi_dmul+0x2b8>
 800196e:	4656      	mov	r6, sl
 8001970:	3b08      	subs	r3, #8
 8001972:	2200      	movs	r2, #0
 8001974:	409e      	lsls	r6, r3
 8001976:	e723      	b.n	80017c0 <__aeabi_dmul+0x2cc>
 8001978:	9b00      	ldr	r3, [sp, #0]
 800197a:	469c      	mov	ip, r3
 800197c:	e6e6      	b.n	800174c <__aeabi_dmul+0x258>
 800197e:	4912      	ldr	r1, [pc, #72]	; (80019c8 <__aeabi_dmul+0x4d4>)
 8001980:	0022      	movs	r2, r4
 8001982:	4461      	add	r1, ip
 8001984:	002e      	movs	r6, r5
 8001986:	408d      	lsls	r5, r1
 8001988:	408a      	lsls	r2, r1
 800198a:	40c6      	lsrs	r6, r0
 800198c:	1e69      	subs	r1, r5, #1
 800198e:	418d      	sbcs	r5, r1
 8001990:	4332      	orrs	r2, r6
 8001992:	432a      	orrs	r2, r5
 8001994:	40c4      	lsrs	r4, r0
 8001996:	0753      	lsls	r3, r2, #29
 8001998:	d0b6      	beq.n	8001908 <__aeabi_dmul+0x414>
 800199a:	210f      	movs	r1, #15
 800199c:	4011      	ands	r1, r2
 800199e:	2904      	cmp	r1, #4
 80019a0:	d1ac      	bne.n	80018fc <__aeabi_dmul+0x408>
 80019a2:	e7b1      	b.n	8001908 <__aeabi_dmul+0x414>
 80019a4:	0765      	lsls	r5, r4, #29
 80019a6:	0264      	lsls	r4, r4, #9
 80019a8:	0b24      	lsrs	r4, r4, #12
 80019aa:	08d2      	lsrs	r2, r2, #3
 80019ac:	4315      	orrs	r5, r2
 80019ae:	2200      	movs	r2, #0
 80019b0:	e601      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0312      	lsls	r2, r2, #12
 80019b6:	4314      	orrs	r4, r2
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	4a01      	ldr	r2, [pc, #4]	; (80019c0 <__aeabi_dmul+0x4cc>)
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	e5fa      	b.n	80015b6 <__aeabi_dmul+0xc2>
 80019c0:	000007ff 	.word	0x000007ff
 80019c4:	0000043e 	.word	0x0000043e
 80019c8:	0000041e 	.word	0x0000041e

080019cc <__aeabi_dsub>:
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	4657      	mov	r7, sl
 80019d0:	464e      	mov	r6, r9
 80019d2:	4645      	mov	r5, r8
 80019d4:	46de      	mov	lr, fp
 80019d6:	b5e0      	push	{r5, r6, r7, lr}
 80019d8:	001e      	movs	r6, r3
 80019da:	0017      	movs	r7, r2
 80019dc:	004a      	lsls	r2, r1, #1
 80019de:	030b      	lsls	r3, r1, #12
 80019e0:	0d52      	lsrs	r2, r2, #21
 80019e2:	0a5b      	lsrs	r3, r3, #9
 80019e4:	4690      	mov	r8, r2
 80019e6:	0f42      	lsrs	r2, r0, #29
 80019e8:	431a      	orrs	r2, r3
 80019ea:	0fcd      	lsrs	r5, r1, #31
 80019ec:	4ccd      	ldr	r4, [pc, #820]	; (8001d24 <__aeabi_dsub+0x358>)
 80019ee:	0331      	lsls	r1, r6, #12
 80019f0:	00c3      	lsls	r3, r0, #3
 80019f2:	4694      	mov	ip, r2
 80019f4:	0070      	lsls	r0, r6, #1
 80019f6:	0f7a      	lsrs	r2, r7, #29
 80019f8:	0a49      	lsrs	r1, r1, #9
 80019fa:	00ff      	lsls	r7, r7, #3
 80019fc:	469a      	mov	sl, r3
 80019fe:	46b9      	mov	r9, r7
 8001a00:	0d40      	lsrs	r0, r0, #21
 8001a02:	0ff6      	lsrs	r6, r6, #31
 8001a04:	4311      	orrs	r1, r2
 8001a06:	42a0      	cmp	r0, r4
 8001a08:	d100      	bne.n	8001a0c <__aeabi_dsub+0x40>
 8001a0a:	e0b1      	b.n	8001b70 <__aeabi_dsub+0x1a4>
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4056      	eors	r6, r2
 8001a10:	46b3      	mov	fp, r6
 8001a12:	42b5      	cmp	r5, r6
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x4c>
 8001a16:	e088      	b.n	8001b2a <__aeabi_dsub+0x15e>
 8001a18:	4642      	mov	r2, r8
 8001a1a:	1a12      	subs	r2, r2, r0
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	dc00      	bgt.n	8001a22 <__aeabi_dsub+0x56>
 8001a20:	e0ae      	b.n	8001b80 <__aeabi_dsub+0x1b4>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dsub+0x5c>
 8001a26:	e0c1      	b.n	8001bac <__aeabi_dsub+0x1e0>
 8001a28:	48be      	ldr	r0, [pc, #760]	; (8001d24 <__aeabi_dsub+0x358>)
 8001a2a:	4580      	cmp	r8, r0
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dsub+0x64>
 8001a2e:	e151      	b.n	8001cd4 <__aeabi_dsub+0x308>
 8001a30:	2080      	movs	r0, #128	; 0x80
 8001a32:	0400      	lsls	r0, r0, #16
 8001a34:	4301      	orrs	r1, r0
 8001a36:	2a38      	cmp	r2, #56	; 0x38
 8001a38:	dd00      	ble.n	8001a3c <__aeabi_dsub+0x70>
 8001a3a:	e17b      	b.n	8001d34 <__aeabi_dsub+0x368>
 8001a3c:	2a1f      	cmp	r2, #31
 8001a3e:	dd00      	ble.n	8001a42 <__aeabi_dsub+0x76>
 8001a40:	e1ee      	b.n	8001e20 <__aeabi_dsub+0x454>
 8001a42:	2020      	movs	r0, #32
 8001a44:	003e      	movs	r6, r7
 8001a46:	1a80      	subs	r0, r0, r2
 8001a48:	000c      	movs	r4, r1
 8001a4a:	40d6      	lsrs	r6, r2
 8001a4c:	40d1      	lsrs	r1, r2
 8001a4e:	4087      	lsls	r7, r0
 8001a50:	4662      	mov	r2, ip
 8001a52:	4084      	lsls	r4, r0
 8001a54:	1a52      	subs	r2, r2, r1
 8001a56:	1e78      	subs	r0, r7, #1
 8001a58:	4187      	sbcs	r7, r0
 8001a5a:	4694      	mov	ip, r2
 8001a5c:	4334      	orrs	r4, r6
 8001a5e:	4327      	orrs	r7, r4
 8001a60:	1bdc      	subs	r4, r3, r7
 8001a62:	42a3      	cmp	r3, r4
 8001a64:	419b      	sbcs	r3, r3
 8001a66:	4662      	mov	r2, ip
 8001a68:	425b      	negs	r3, r3
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4699      	mov	r9, r3
 8001a6e:	464b      	mov	r3, r9
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	d400      	bmi.n	8001a76 <__aeabi_dsub+0xaa>
 8001a74:	e118      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001a76:	464b      	mov	r3, r9
 8001a78:	0258      	lsls	r0, r3, #9
 8001a7a:	0a43      	lsrs	r3, r0, #9
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	464b      	mov	r3, r9
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dsub+0xba>
 8001a84:	e137      	b.n	8001cf6 <__aeabi_dsub+0x32a>
 8001a86:	4648      	mov	r0, r9
 8001a88:	f000 fc20 	bl	80022cc <__clzsi2>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	3908      	subs	r1, #8
 8001a90:	2320      	movs	r3, #32
 8001a92:	0022      	movs	r2, r4
 8001a94:	4648      	mov	r0, r9
 8001a96:	1a5b      	subs	r3, r3, r1
 8001a98:	40da      	lsrs	r2, r3
 8001a9a:	4088      	lsls	r0, r1
 8001a9c:	408c      	lsls	r4, r1
 8001a9e:	4643      	mov	r3, r8
 8001aa0:	4310      	orrs	r0, r2
 8001aa2:	4588      	cmp	r8, r1
 8001aa4:	dd00      	ble.n	8001aa8 <__aeabi_dsub+0xdc>
 8001aa6:	e136      	b.n	8001d16 <__aeabi_dsub+0x34a>
 8001aa8:	1ac9      	subs	r1, r1, r3
 8001aaa:	1c4b      	adds	r3, r1, #1
 8001aac:	2b1f      	cmp	r3, #31
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dsub+0xe6>
 8001ab0:	e0ea      	b.n	8001c88 <__aeabi_dsub+0x2bc>
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	0026      	movs	r6, r4
 8001ab6:	1ad2      	subs	r2, r2, r3
 8001ab8:	0001      	movs	r1, r0
 8001aba:	4094      	lsls	r4, r2
 8001abc:	40de      	lsrs	r6, r3
 8001abe:	40d8      	lsrs	r0, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4091      	lsls	r1, r2
 8001ac4:	1e62      	subs	r2, r4, #1
 8001ac6:	4194      	sbcs	r4, r2
 8001ac8:	4681      	mov	r9, r0
 8001aca:	4698      	mov	r8, r3
 8001acc:	4331      	orrs	r1, r6
 8001ace:	430c      	orrs	r4, r1
 8001ad0:	0763      	lsls	r3, r4, #29
 8001ad2:	d009      	beq.n	8001ae8 <__aeabi_dsub+0x11c>
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	4023      	ands	r3, r4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d005      	beq.n	8001ae8 <__aeabi_dsub+0x11c>
 8001adc:	1d23      	adds	r3, r4, #4
 8001ade:	42a3      	cmp	r3, r4
 8001ae0:	41a4      	sbcs	r4, r4
 8001ae2:	4264      	negs	r4, r4
 8001ae4:	44a1      	add	r9, r4
 8001ae6:	001c      	movs	r4, r3
 8001ae8:	464b      	mov	r3, r9
 8001aea:	021b      	lsls	r3, r3, #8
 8001aec:	d400      	bmi.n	8001af0 <__aeabi_dsub+0x124>
 8001aee:	e0de      	b.n	8001cae <__aeabi_dsub+0x2e2>
 8001af0:	4641      	mov	r1, r8
 8001af2:	4b8c      	ldr	r3, [pc, #560]	; (8001d24 <__aeabi_dsub+0x358>)
 8001af4:	3101      	adds	r1, #1
 8001af6:	4299      	cmp	r1, r3
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x130>
 8001afa:	e0e7      	b.n	8001ccc <__aeabi_dsub+0x300>
 8001afc:	464b      	mov	r3, r9
 8001afe:	488a      	ldr	r0, [pc, #552]	; (8001d28 <__aeabi_dsub+0x35c>)
 8001b00:	08e4      	lsrs	r4, r4, #3
 8001b02:	4003      	ands	r3, r0
 8001b04:	0018      	movs	r0, r3
 8001b06:	0549      	lsls	r1, r1, #21
 8001b08:	075b      	lsls	r3, r3, #29
 8001b0a:	0240      	lsls	r0, r0, #9
 8001b0c:	4323      	orrs	r3, r4
 8001b0e:	0d4a      	lsrs	r2, r1, #21
 8001b10:	0b04      	lsrs	r4, r0, #12
 8001b12:	0512      	lsls	r2, r2, #20
 8001b14:	07ed      	lsls	r5, r5, #31
 8001b16:	4322      	orrs	r2, r4
 8001b18:	432a      	orrs	r2, r5
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	0011      	movs	r1, r2
 8001b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b20:	46bb      	mov	fp, r7
 8001b22:	46b2      	mov	sl, r6
 8001b24:	46a9      	mov	r9, r5
 8001b26:	46a0      	mov	r8, r4
 8001b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2a:	4642      	mov	r2, r8
 8001b2c:	1a12      	subs	r2, r2, r0
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	dd52      	ble.n	8001bd8 <__aeabi_dsub+0x20c>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x16c>
 8001b36:	e09c      	b.n	8001c72 <__aeabi_dsub+0x2a6>
 8001b38:	45a0      	cmp	r8, r4
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x172>
 8001b3c:	e0ca      	b.n	8001cd4 <__aeabi_dsub+0x308>
 8001b3e:	2080      	movs	r0, #128	; 0x80
 8001b40:	0400      	lsls	r0, r0, #16
 8001b42:	4301      	orrs	r1, r0
 8001b44:	2a38      	cmp	r2, #56	; 0x38
 8001b46:	dd00      	ble.n	8001b4a <__aeabi_dsub+0x17e>
 8001b48:	e149      	b.n	8001dde <__aeabi_dsub+0x412>
 8001b4a:	2a1f      	cmp	r2, #31
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dsub+0x184>
 8001b4e:	e197      	b.n	8001e80 <__aeabi_dsub+0x4b4>
 8001b50:	0010      	movs	r0, r2
 8001b52:	000e      	movs	r6, r1
 8001b54:	3820      	subs	r0, #32
 8001b56:	40c6      	lsrs	r6, r0
 8001b58:	2a20      	cmp	r2, #32
 8001b5a:	d004      	beq.n	8001b66 <__aeabi_dsub+0x19a>
 8001b5c:	2040      	movs	r0, #64	; 0x40
 8001b5e:	1a82      	subs	r2, r0, r2
 8001b60:	4091      	lsls	r1, r2
 8001b62:	430f      	orrs	r7, r1
 8001b64:	46b9      	mov	r9, r7
 8001b66:	464c      	mov	r4, r9
 8001b68:	1e62      	subs	r2, r4, #1
 8001b6a:	4194      	sbcs	r4, r2
 8001b6c:	4334      	orrs	r4, r6
 8001b6e:	e13a      	b.n	8001de6 <__aeabi_dsub+0x41a>
 8001b70:	000a      	movs	r2, r1
 8001b72:	433a      	orrs	r2, r7
 8001b74:	d028      	beq.n	8001bc8 <__aeabi_dsub+0x1fc>
 8001b76:	46b3      	mov	fp, r6
 8001b78:	42b5      	cmp	r5, r6
 8001b7a:	d02b      	beq.n	8001bd4 <__aeabi_dsub+0x208>
 8001b7c:	4a6b      	ldr	r2, [pc, #428]	; (8001d2c <__aeabi_dsub+0x360>)
 8001b7e:	4442      	add	r2, r8
 8001b80:	2a00      	cmp	r2, #0
 8001b82:	d05d      	beq.n	8001c40 <__aeabi_dsub+0x274>
 8001b84:	4642      	mov	r2, r8
 8001b86:	4644      	mov	r4, r8
 8001b88:	1a82      	subs	r2, r0, r2
 8001b8a:	2c00      	cmp	r4, #0
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x1c4>
 8001b8e:	e0f5      	b.n	8001d7c <__aeabi_dsub+0x3b0>
 8001b90:	4665      	mov	r5, ip
 8001b92:	431d      	orrs	r5, r3
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dsub+0x1cc>
 8001b96:	e19c      	b.n	8001ed2 <__aeabi_dsub+0x506>
 8001b98:	1e55      	subs	r5, r2, #1
 8001b9a:	2a01      	cmp	r2, #1
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x1d4>
 8001b9e:	e1fb      	b.n	8001f98 <__aeabi_dsub+0x5cc>
 8001ba0:	4c60      	ldr	r4, [pc, #384]	; (8001d24 <__aeabi_dsub+0x358>)
 8001ba2:	42a2      	cmp	r2, r4
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x1dc>
 8001ba6:	e1bd      	b.n	8001f24 <__aeabi_dsub+0x558>
 8001ba8:	002a      	movs	r2, r5
 8001baa:	e0f0      	b.n	8001d8e <__aeabi_dsub+0x3c2>
 8001bac:	0008      	movs	r0, r1
 8001bae:	4338      	orrs	r0, r7
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x1e8>
 8001bb2:	e0c3      	b.n	8001d3c <__aeabi_dsub+0x370>
 8001bb4:	1e50      	subs	r0, r2, #1
 8001bb6:	2a01      	cmp	r2, #1
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x1f0>
 8001bba:	e1a8      	b.n	8001f0e <__aeabi_dsub+0x542>
 8001bbc:	4c59      	ldr	r4, [pc, #356]	; (8001d24 <__aeabi_dsub+0x358>)
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x1f8>
 8001bc2:	e087      	b.n	8001cd4 <__aeabi_dsub+0x308>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	e736      	b.n	8001a36 <__aeabi_dsub+0x6a>
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4056      	eors	r6, r2
 8001bcc:	46b3      	mov	fp, r6
 8001bce:	42b5      	cmp	r5, r6
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_dsub+0x208>
 8001bd2:	e721      	b.n	8001a18 <__aeabi_dsub+0x4c>
 8001bd4:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <__aeabi_dsub+0x360>)
 8001bd6:	4442      	add	r2, r8
 8001bd8:	2a00      	cmp	r2, #0
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x212>
 8001bdc:	e0b5      	b.n	8001d4a <__aeabi_dsub+0x37e>
 8001bde:	4642      	mov	r2, r8
 8001be0:	4644      	mov	r4, r8
 8001be2:	1a82      	subs	r2, r0, r2
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x21e>
 8001be8:	e138      	b.n	8001e5c <__aeabi_dsub+0x490>
 8001bea:	4e4e      	ldr	r6, [pc, #312]	; (8001d24 <__aeabi_dsub+0x358>)
 8001bec:	42b0      	cmp	r0, r6
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x226>
 8001bf0:	e1de      	b.n	8001fb0 <__aeabi_dsub+0x5e4>
 8001bf2:	2680      	movs	r6, #128	; 0x80
 8001bf4:	4664      	mov	r4, ip
 8001bf6:	0436      	lsls	r6, r6, #16
 8001bf8:	4334      	orrs	r4, r6
 8001bfa:	46a4      	mov	ip, r4
 8001bfc:	2a38      	cmp	r2, #56	; 0x38
 8001bfe:	dd00      	ble.n	8001c02 <__aeabi_dsub+0x236>
 8001c00:	e196      	b.n	8001f30 <__aeabi_dsub+0x564>
 8001c02:	2a1f      	cmp	r2, #31
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dsub+0x23c>
 8001c06:	e224      	b.n	8002052 <__aeabi_dsub+0x686>
 8001c08:	2620      	movs	r6, #32
 8001c0a:	1ab4      	subs	r4, r6, r2
 8001c0c:	46a2      	mov	sl, r4
 8001c0e:	4664      	mov	r4, ip
 8001c10:	4656      	mov	r6, sl
 8001c12:	40b4      	lsls	r4, r6
 8001c14:	46a1      	mov	r9, r4
 8001c16:	001c      	movs	r4, r3
 8001c18:	464e      	mov	r6, r9
 8001c1a:	40d4      	lsrs	r4, r2
 8001c1c:	4326      	orrs	r6, r4
 8001c1e:	0034      	movs	r4, r6
 8001c20:	4656      	mov	r6, sl
 8001c22:	40b3      	lsls	r3, r6
 8001c24:	1e5e      	subs	r6, r3, #1
 8001c26:	41b3      	sbcs	r3, r6
 8001c28:	431c      	orrs	r4, r3
 8001c2a:	4663      	mov	r3, ip
 8001c2c:	40d3      	lsrs	r3, r2
 8001c2e:	18c9      	adds	r1, r1, r3
 8001c30:	19e4      	adds	r4, r4, r7
 8001c32:	42bc      	cmp	r4, r7
 8001c34:	41bf      	sbcs	r7, r7
 8001c36:	427f      	negs	r7, r7
 8001c38:	46b9      	mov	r9, r7
 8001c3a:	4680      	mov	r8, r0
 8001c3c:	4489      	add	r9, r1
 8001c3e:	e0d8      	b.n	8001df2 <__aeabi_dsub+0x426>
 8001c40:	4640      	mov	r0, r8
 8001c42:	4c3b      	ldr	r4, [pc, #236]	; (8001d30 <__aeabi_dsub+0x364>)
 8001c44:	3001      	adds	r0, #1
 8001c46:	4220      	tst	r0, r4
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dsub+0x280>
 8001c4a:	e0b4      	b.n	8001db6 <__aeabi_dsub+0x3ea>
 8001c4c:	4640      	mov	r0, r8
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d000      	beq.n	8001c54 <__aeabi_dsub+0x288>
 8001c52:	e144      	b.n	8001ede <__aeabi_dsub+0x512>
 8001c54:	4660      	mov	r0, ip
 8001c56:	4318      	orrs	r0, r3
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x290>
 8001c5a:	e190      	b.n	8001f7e <__aeabi_dsub+0x5b2>
 8001c5c:	0008      	movs	r0, r1
 8001c5e:	4338      	orrs	r0, r7
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dsub+0x298>
 8001c62:	e1aa      	b.n	8001fba <__aeabi_dsub+0x5ee>
 8001c64:	4661      	mov	r1, ip
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	0749      	lsls	r1, r1, #29
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	4661      	mov	r1, ip
 8001c6e:	08cc      	lsrs	r4, r1, #3
 8001c70:	e027      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001c72:	0008      	movs	r0, r1
 8001c74:	4338      	orrs	r0, r7
 8001c76:	d061      	beq.n	8001d3c <__aeabi_dsub+0x370>
 8001c78:	1e50      	subs	r0, r2, #1
 8001c7a:	2a01      	cmp	r2, #1
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x2b4>
 8001c7e:	e139      	b.n	8001ef4 <__aeabi_dsub+0x528>
 8001c80:	42a2      	cmp	r2, r4
 8001c82:	d027      	beq.n	8001cd4 <__aeabi_dsub+0x308>
 8001c84:	0002      	movs	r2, r0
 8001c86:	e75d      	b.n	8001b44 <__aeabi_dsub+0x178>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	391f      	subs	r1, #31
 8001c8c:	40ca      	lsrs	r2, r1
 8001c8e:	0011      	movs	r1, r2
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d003      	beq.n	8001c9c <__aeabi_dsub+0x2d0>
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4098      	lsls	r0, r3
 8001c9a:	4304      	orrs	r4, r0
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	4698      	mov	r8, r3
 8001ca6:	430c      	orrs	r4, r1
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d000      	beq.n	8001cae <__aeabi_dsub+0x2e2>
 8001cac:	e712      	b.n	8001ad4 <__aeabi_dsub+0x108>
 8001cae:	464b      	mov	r3, r9
 8001cb0:	464a      	mov	r2, r9
 8001cb2:	08e4      	lsrs	r4, r4, #3
 8001cb4:	075b      	lsls	r3, r3, #29
 8001cb6:	4323      	orrs	r3, r4
 8001cb8:	08d4      	lsrs	r4, r2, #3
 8001cba:	4642      	mov	r2, r8
 8001cbc:	4919      	ldr	r1, [pc, #100]	; (8001d24 <__aeabi_dsub+0x358>)
 8001cbe:	428a      	cmp	r2, r1
 8001cc0:	d00e      	beq.n	8001ce0 <__aeabi_dsub+0x314>
 8001cc2:	0324      	lsls	r4, r4, #12
 8001cc4:	0552      	lsls	r2, r2, #21
 8001cc6:	0b24      	lsrs	r4, r4, #12
 8001cc8:	0d52      	lsrs	r2, r2, #21
 8001cca:	e722      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001ccc:	000a      	movs	r2, r1
 8001cce:	2400      	movs	r4, #0
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e71e      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	4662      	mov	r2, ip
 8001cd8:	0752      	lsls	r2, r2, #29
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	4662      	mov	r2, ip
 8001cde:	08d4      	lsrs	r4, r2, #3
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	4322      	orrs	r2, r4
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x31c>
 8001ce6:	e1fc      	b.n	80020e2 <__aeabi_dsub+0x716>
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0312      	lsls	r2, r2, #12
 8001cec:	4314      	orrs	r4, r2
 8001cee:	0324      	lsls	r4, r4, #12
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <__aeabi_dsub+0x358>)
 8001cf2:	0b24      	lsrs	r4, r4, #12
 8001cf4:	e70d      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001cf6:	0020      	movs	r0, r4
 8001cf8:	f000 fae8 	bl	80022cc <__clzsi2>
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	3118      	adds	r1, #24
 8001d00:	291f      	cmp	r1, #31
 8001d02:	dc00      	bgt.n	8001d06 <__aeabi_dsub+0x33a>
 8001d04:	e6c4      	b.n	8001a90 <__aeabi_dsub+0xc4>
 8001d06:	3808      	subs	r0, #8
 8001d08:	4084      	lsls	r4, r0
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	0020      	movs	r0, r4
 8001d0e:	2400      	movs	r4, #0
 8001d10:	4588      	cmp	r8, r1
 8001d12:	dc00      	bgt.n	8001d16 <__aeabi_dsub+0x34a>
 8001d14:	e6c8      	b.n	8001aa8 <__aeabi_dsub+0xdc>
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__aeabi_dsub+0x35c>)
 8001d18:	1a5b      	subs	r3, r3, r1
 8001d1a:	4010      	ands	r0, r2
 8001d1c:	4698      	mov	r8, r3
 8001d1e:	4681      	mov	r9, r0
 8001d20:	e6d6      	b.n	8001ad0 <__aeabi_dsub+0x104>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	000007ff 	.word	0x000007ff
 8001d28:	ff7fffff 	.word	0xff7fffff
 8001d2c:	fffff801 	.word	0xfffff801
 8001d30:	000007fe 	.word	0x000007fe
 8001d34:	430f      	orrs	r7, r1
 8001d36:	1e7a      	subs	r2, r7, #1
 8001d38:	4197      	sbcs	r7, r2
 8001d3a:	e691      	b.n	8001a60 <__aeabi_dsub+0x94>
 8001d3c:	4661      	mov	r1, ip
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	0749      	lsls	r1, r1, #29
 8001d42:	430b      	orrs	r3, r1
 8001d44:	4661      	mov	r1, ip
 8001d46:	08cc      	lsrs	r4, r1, #3
 8001d48:	e7b8      	b.n	8001cbc <__aeabi_dsub+0x2f0>
 8001d4a:	4640      	mov	r0, r8
 8001d4c:	4cd3      	ldr	r4, [pc, #844]	; (800209c <__aeabi_dsub+0x6d0>)
 8001d4e:	3001      	adds	r0, #1
 8001d50:	4220      	tst	r0, r4
 8001d52:	d000      	beq.n	8001d56 <__aeabi_dsub+0x38a>
 8001d54:	e0a2      	b.n	8001e9c <__aeabi_dsub+0x4d0>
 8001d56:	4640      	mov	r0, r8
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x392>
 8001d5c:	e101      	b.n	8001f62 <__aeabi_dsub+0x596>
 8001d5e:	4660      	mov	r0, ip
 8001d60:	4318      	orrs	r0, r3
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x39a>
 8001d64:	e15e      	b.n	8002024 <__aeabi_dsub+0x658>
 8001d66:	0008      	movs	r0, r1
 8001d68:	4338      	orrs	r0, r7
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_dsub+0x3a2>
 8001d6c:	e15f      	b.n	800202e <__aeabi_dsub+0x662>
 8001d6e:	4661      	mov	r1, ip
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	0749      	lsls	r1, r1, #29
 8001d74:	430b      	orrs	r3, r1
 8001d76:	4661      	mov	r1, ip
 8001d78:	08cc      	lsrs	r4, r1, #3
 8001d7a:	e7a2      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001d7c:	4dc8      	ldr	r5, [pc, #800]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001d7e:	42a8      	cmp	r0, r5
 8001d80:	d100      	bne.n	8001d84 <__aeabi_dsub+0x3b8>
 8001d82:	e0cf      	b.n	8001f24 <__aeabi_dsub+0x558>
 8001d84:	2580      	movs	r5, #128	; 0x80
 8001d86:	4664      	mov	r4, ip
 8001d88:	042d      	lsls	r5, r5, #16
 8001d8a:	432c      	orrs	r4, r5
 8001d8c:	46a4      	mov	ip, r4
 8001d8e:	2a38      	cmp	r2, #56	; 0x38
 8001d90:	dc56      	bgt.n	8001e40 <__aeabi_dsub+0x474>
 8001d92:	2a1f      	cmp	r2, #31
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x3cc>
 8001d96:	e0d1      	b.n	8001f3c <__aeabi_dsub+0x570>
 8001d98:	2520      	movs	r5, #32
 8001d9a:	001e      	movs	r6, r3
 8001d9c:	1aad      	subs	r5, r5, r2
 8001d9e:	4664      	mov	r4, ip
 8001da0:	40ab      	lsls	r3, r5
 8001da2:	40ac      	lsls	r4, r5
 8001da4:	40d6      	lsrs	r6, r2
 8001da6:	1e5d      	subs	r5, r3, #1
 8001da8:	41ab      	sbcs	r3, r5
 8001daa:	4334      	orrs	r4, r6
 8001dac:	4323      	orrs	r3, r4
 8001dae:	4664      	mov	r4, ip
 8001db0:	40d4      	lsrs	r4, r2
 8001db2:	1b09      	subs	r1, r1, r4
 8001db4:	e049      	b.n	8001e4a <__aeabi_dsub+0x47e>
 8001db6:	4660      	mov	r0, ip
 8001db8:	1bdc      	subs	r4, r3, r7
 8001dba:	1a46      	subs	r6, r0, r1
 8001dbc:	42a3      	cmp	r3, r4
 8001dbe:	4180      	sbcs	r0, r0
 8001dc0:	4240      	negs	r0, r0
 8001dc2:	4681      	mov	r9, r0
 8001dc4:	0030      	movs	r0, r6
 8001dc6:	464e      	mov	r6, r9
 8001dc8:	1b80      	subs	r0, r0, r6
 8001dca:	4681      	mov	r9, r0
 8001dcc:	0200      	lsls	r0, r0, #8
 8001dce:	d476      	bmi.n	8001ebe <__aeabi_dsub+0x4f2>
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	4323      	orrs	r3, r4
 8001dd4:	d000      	beq.n	8001dd8 <__aeabi_dsub+0x40c>
 8001dd6:	e652      	b.n	8001a7e <__aeabi_dsub+0xb2>
 8001dd8:	2400      	movs	r4, #0
 8001dda:	2500      	movs	r5, #0
 8001ddc:	e771      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001dde:	4339      	orrs	r1, r7
 8001de0:	000c      	movs	r4, r1
 8001de2:	1e62      	subs	r2, r4, #1
 8001de4:	4194      	sbcs	r4, r2
 8001de6:	18e4      	adds	r4, r4, r3
 8001de8:	429c      	cmp	r4, r3
 8001dea:	419b      	sbcs	r3, r3
 8001dec:	425b      	negs	r3, r3
 8001dee:	4463      	add	r3, ip
 8001df0:	4699      	mov	r9, r3
 8001df2:	464b      	mov	r3, r9
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	d400      	bmi.n	8001dfa <__aeabi_dsub+0x42e>
 8001df8:	e756      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	469c      	mov	ip, r3
 8001dfe:	4ba8      	ldr	r3, [pc, #672]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001e00:	44e0      	add	r8, ip
 8001e02:	4598      	cmp	r8, r3
 8001e04:	d038      	beq.n	8001e78 <__aeabi_dsub+0x4ac>
 8001e06:	464b      	mov	r3, r9
 8001e08:	48a6      	ldr	r0, [pc, #664]	; (80020a4 <__aeabi_dsub+0x6d8>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4003      	ands	r3, r0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	0863      	lsrs	r3, r4, #1
 8001e12:	4014      	ands	r4, r2
 8001e14:	431c      	orrs	r4, r3
 8001e16:	07c3      	lsls	r3, r0, #31
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	0843      	lsrs	r3, r0, #1
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	e657      	b.n	8001ad0 <__aeabi_dsub+0x104>
 8001e20:	0010      	movs	r0, r2
 8001e22:	000e      	movs	r6, r1
 8001e24:	3820      	subs	r0, #32
 8001e26:	40c6      	lsrs	r6, r0
 8001e28:	2a20      	cmp	r2, #32
 8001e2a:	d004      	beq.n	8001e36 <__aeabi_dsub+0x46a>
 8001e2c:	2040      	movs	r0, #64	; 0x40
 8001e2e:	1a82      	subs	r2, r0, r2
 8001e30:	4091      	lsls	r1, r2
 8001e32:	430f      	orrs	r7, r1
 8001e34:	46b9      	mov	r9, r7
 8001e36:	464f      	mov	r7, r9
 8001e38:	1e7a      	subs	r2, r7, #1
 8001e3a:	4197      	sbcs	r7, r2
 8001e3c:	4337      	orrs	r7, r6
 8001e3e:	e60f      	b.n	8001a60 <__aeabi_dsub+0x94>
 8001e40:	4662      	mov	r2, ip
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	1e5a      	subs	r2, r3, #1
 8001e48:	4193      	sbcs	r3, r2
 8001e4a:	1afc      	subs	r4, r7, r3
 8001e4c:	42a7      	cmp	r7, r4
 8001e4e:	41bf      	sbcs	r7, r7
 8001e50:	427f      	negs	r7, r7
 8001e52:	1bcb      	subs	r3, r1, r7
 8001e54:	4699      	mov	r9, r3
 8001e56:	465d      	mov	r5, fp
 8001e58:	4680      	mov	r8, r0
 8001e5a:	e608      	b.n	8001a6e <__aeabi_dsub+0xa2>
 8001e5c:	4666      	mov	r6, ip
 8001e5e:	431e      	orrs	r6, r3
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x498>
 8001e62:	e0be      	b.n	8001fe2 <__aeabi_dsub+0x616>
 8001e64:	1e56      	subs	r6, r2, #1
 8001e66:	2a01      	cmp	r2, #1
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x4a0>
 8001e6a:	e109      	b.n	8002080 <__aeabi_dsub+0x6b4>
 8001e6c:	4c8c      	ldr	r4, [pc, #560]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x4a8>
 8001e72:	e119      	b.n	80020a8 <__aeabi_dsub+0x6dc>
 8001e74:	0032      	movs	r2, r6
 8001e76:	e6c1      	b.n	8001bfc <__aeabi_dsub+0x230>
 8001e78:	4642      	mov	r2, r8
 8001e7a:	2400      	movs	r4, #0
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e648      	b.n	8001b12 <__aeabi_dsub+0x146>
 8001e80:	2020      	movs	r0, #32
 8001e82:	000c      	movs	r4, r1
 8001e84:	1a80      	subs	r0, r0, r2
 8001e86:	003e      	movs	r6, r7
 8001e88:	4087      	lsls	r7, r0
 8001e8a:	4084      	lsls	r4, r0
 8001e8c:	40d6      	lsrs	r6, r2
 8001e8e:	1e78      	subs	r0, r7, #1
 8001e90:	4187      	sbcs	r7, r0
 8001e92:	40d1      	lsrs	r1, r2
 8001e94:	4334      	orrs	r4, r6
 8001e96:	433c      	orrs	r4, r7
 8001e98:	448c      	add	ip, r1
 8001e9a:	e7a4      	b.n	8001de6 <__aeabi_dsub+0x41a>
 8001e9c:	4a80      	ldr	r2, [pc, #512]	; (80020a0 <__aeabi_dsub+0x6d4>)
 8001e9e:	4290      	cmp	r0, r2
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x4d8>
 8001ea2:	e0e9      	b.n	8002078 <__aeabi_dsub+0x6ac>
 8001ea4:	19df      	adds	r7, r3, r7
 8001ea6:	429f      	cmp	r7, r3
 8001ea8:	419b      	sbcs	r3, r3
 8001eaa:	4461      	add	r1, ip
 8001eac:	425b      	negs	r3, r3
 8001eae:	18c9      	adds	r1, r1, r3
 8001eb0:	07cc      	lsls	r4, r1, #31
 8001eb2:	087f      	lsrs	r7, r7, #1
 8001eb4:	084b      	lsrs	r3, r1, #1
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	4680      	mov	r8, r0
 8001eba:	433c      	orrs	r4, r7
 8001ebc:	e6f4      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001ebe:	1afc      	subs	r4, r7, r3
 8001ec0:	42a7      	cmp	r7, r4
 8001ec2:	41bf      	sbcs	r7, r7
 8001ec4:	4663      	mov	r3, ip
 8001ec6:	427f      	negs	r7, r7
 8001ec8:	1ac9      	subs	r1, r1, r3
 8001eca:	1bcb      	subs	r3, r1, r7
 8001ecc:	4699      	mov	r9, r3
 8001ece:	465d      	mov	r5, fp
 8001ed0:	e5d5      	b.n	8001a7e <__aeabi_dsub+0xb2>
 8001ed2:	08ff      	lsrs	r7, r7, #3
 8001ed4:	074b      	lsls	r3, r1, #29
 8001ed6:	465d      	mov	r5, fp
 8001ed8:	433b      	orrs	r3, r7
 8001eda:	08cc      	lsrs	r4, r1, #3
 8001edc:	e6ee      	b.n	8001cbc <__aeabi_dsub+0x2f0>
 8001ede:	4662      	mov	r2, ip
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x51a>
 8001ee4:	e082      	b.n	8001fec <__aeabi_dsub+0x620>
 8001ee6:	000b      	movs	r3, r1
 8001ee8:	433b      	orrs	r3, r7
 8001eea:	d11b      	bne.n	8001f24 <__aeabi_dsub+0x558>
 8001eec:	2480      	movs	r4, #128	; 0x80
 8001eee:	2500      	movs	r5, #0
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	e6f9      	b.n	8001ce8 <__aeabi_dsub+0x31c>
 8001ef4:	19dc      	adds	r4, r3, r7
 8001ef6:	429c      	cmp	r4, r3
 8001ef8:	419b      	sbcs	r3, r3
 8001efa:	4461      	add	r1, ip
 8001efc:	4689      	mov	r9, r1
 8001efe:	425b      	negs	r3, r3
 8001f00:	4499      	add	r9, r3
 8001f02:	464b      	mov	r3, r9
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	d444      	bmi.n	8001f92 <__aeabi_dsub+0x5c6>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	e6cc      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8001f0e:	1bdc      	subs	r4, r3, r7
 8001f10:	4662      	mov	r2, ip
 8001f12:	42a3      	cmp	r3, r4
 8001f14:	419b      	sbcs	r3, r3
 8001f16:	1a51      	subs	r1, r2, r1
 8001f18:	425b      	negs	r3, r3
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	4699      	mov	r9, r3
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4698      	mov	r8, r3
 8001f22:	e5a4      	b.n	8001a6e <__aeabi_dsub+0xa2>
 8001f24:	08ff      	lsrs	r7, r7, #3
 8001f26:	074b      	lsls	r3, r1, #29
 8001f28:	465d      	mov	r5, fp
 8001f2a:	433b      	orrs	r3, r7
 8001f2c:	08cc      	lsrs	r4, r1, #3
 8001f2e:	e6d7      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001f30:	4662      	mov	r2, ip
 8001f32:	431a      	orrs	r2, r3
 8001f34:	0014      	movs	r4, r2
 8001f36:	1e63      	subs	r3, r4, #1
 8001f38:	419c      	sbcs	r4, r3
 8001f3a:	e679      	b.n	8001c30 <__aeabi_dsub+0x264>
 8001f3c:	0015      	movs	r5, r2
 8001f3e:	4664      	mov	r4, ip
 8001f40:	3d20      	subs	r5, #32
 8001f42:	40ec      	lsrs	r4, r5
 8001f44:	46a0      	mov	r8, r4
 8001f46:	2a20      	cmp	r2, #32
 8001f48:	d005      	beq.n	8001f56 <__aeabi_dsub+0x58a>
 8001f4a:	2540      	movs	r5, #64	; 0x40
 8001f4c:	4664      	mov	r4, ip
 8001f4e:	1aaa      	subs	r2, r5, r2
 8001f50:	4094      	lsls	r4, r2
 8001f52:	4323      	orrs	r3, r4
 8001f54:	469a      	mov	sl, r3
 8001f56:	4654      	mov	r4, sl
 8001f58:	1e63      	subs	r3, r4, #1
 8001f5a:	419c      	sbcs	r4, r3
 8001f5c:	4643      	mov	r3, r8
 8001f5e:	4323      	orrs	r3, r4
 8001f60:	e773      	b.n	8001e4a <__aeabi_dsub+0x47e>
 8001f62:	4662      	mov	r2, ip
 8001f64:	431a      	orrs	r2, r3
 8001f66:	d023      	beq.n	8001fb0 <__aeabi_dsub+0x5e4>
 8001f68:	000a      	movs	r2, r1
 8001f6a:	433a      	orrs	r2, r7
 8001f6c:	d000      	beq.n	8001f70 <__aeabi_dsub+0x5a4>
 8001f6e:	e0a0      	b.n	80020b2 <__aeabi_dsub+0x6e6>
 8001f70:	4662      	mov	r2, ip
 8001f72:	08db      	lsrs	r3, r3, #3
 8001f74:	0752      	lsls	r2, r2, #29
 8001f76:	4313      	orrs	r3, r2
 8001f78:	4662      	mov	r2, ip
 8001f7a:	08d4      	lsrs	r4, r2, #3
 8001f7c:	e6b0      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001f7e:	000b      	movs	r3, r1
 8001f80:	433b      	orrs	r3, r7
 8001f82:	d100      	bne.n	8001f86 <__aeabi_dsub+0x5ba>
 8001f84:	e728      	b.n	8001dd8 <__aeabi_dsub+0x40c>
 8001f86:	08ff      	lsrs	r7, r7, #3
 8001f88:	074b      	lsls	r3, r1, #29
 8001f8a:	465d      	mov	r5, fp
 8001f8c:	433b      	orrs	r3, r7
 8001f8e:	08cc      	lsrs	r4, r1, #3
 8001f90:	e697      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 8001f92:	2302      	movs	r3, #2
 8001f94:	4698      	mov	r8, r3
 8001f96:	e736      	b.n	8001e06 <__aeabi_dsub+0x43a>
 8001f98:	1afc      	subs	r4, r7, r3
 8001f9a:	42a7      	cmp	r7, r4
 8001f9c:	41bf      	sbcs	r7, r7
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	427f      	negs	r7, r7
 8001fa2:	1ac9      	subs	r1, r1, r3
 8001fa4:	1bcb      	subs	r3, r1, r7
 8001fa6:	4699      	mov	r9, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	465d      	mov	r5, fp
 8001fac:	4698      	mov	r8, r3
 8001fae:	e55e      	b.n	8001a6e <__aeabi_dsub+0xa2>
 8001fb0:	074b      	lsls	r3, r1, #29
 8001fb2:	08ff      	lsrs	r7, r7, #3
 8001fb4:	433b      	orrs	r3, r7
 8001fb6:	08cc      	lsrs	r4, r1, #3
 8001fb8:	e692      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8001fba:	1bdc      	subs	r4, r3, r7
 8001fbc:	4660      	mov	r0, ip
 8001fbe:	42a3      	cmp	r3, r4
 8001fc0:	41b6      	sbcs	r6, r6
 8001fc2:	1a40      	subs	r0, r0, r1
 8001fc4:	4276      	negs	r6, r6
 8001fc6:	1b80      	subs	r0, r0, r6
 8001fc8:	4681      	mov	r9, r0
 8001fca:	0200      	lsls	r0, r0, #8
 8001fcc:	d560      	bpl.n	8002090 <__aeabi_dsub+0x6c4>
 8001fce:	1afc      	subs	r4, r7, r3
 8001fd0:	42a7      	cmp	r7, r4
 8001fd2:	41bf      	sbcs	r7, r7
 8001fd4:	4663      	mov	r3, ip
 8001fd6:	427f      	negs	r7, r7
 8001fd8:	1ac9      	subs	r1, r1, r3
 8001fda:	1bcb      	subs	r3, r1, r7
 8001fdc:	4699      	mov	r9, r3
 8001fde:	465d      	mov	r5, fp
 8001fe0:	e576      	b.n	8001ad0 <__aeabi_dsub+0x104>
 8001fe2:	08ff      	lsrs	r7, r7, #3
 8001fe4:	074b      	lsls	r3, r1, #29
 8001fe6:	433b      	orrs	r3, r7
 8001fe8:	08cc      	lsrs	r4, r1, #3
 8001fea:	e667      	b.n	8001cbc <__aeabi_dsub+0x2f0>
 8001fec:	000a      	movs	r2, r1
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	433a      	orrs	r2, r7
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x62a>
 8001ff4:	e66f      	b.n	8001cd6 <__aeabi_dsub+0x30a>
 8001ff6:	4662      	mov	r2, ip
 8001ff8:	0752      	lsls	r2, r2, #29
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	4662      	mov	r2, ip
 8001ffe:	08d4      	lsrs	r4, r2, #3
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	0312      	lsls	r2, r2, #12
 8002004:	4214      	tst	r4, r2
 8002006:	d007      	beq.n	8002018 <__aeabi_dsub+0x64c>
 8002008:	08c8      	lsrs	r0, r1, #3
 800200a:	4210      	tst	r0, r2
 800200c:	d104      	bne.n	8002018 <__aeabi_dsub+0x64c>
 800200e:	465d      	mov	r5, fp
 8002010:	0004      	movs	r4, r0
 8002012:	08fb      	lsrs	r3, r7, #3
 8002014:	0749      	lsls	r1, r1, #29
 8002016:	430b      	orrs	r3, r1
 8002018:	0f5a      	lsrs	r2, r3, #29
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	0752      	lsls	r2, r2, #29
 8002020:	4313      	orrs	r3, r2
 8002022:	e65d      	b.n	8001ce0 <__aeabi_dsub+0x314>
 8002024:	074b      	lsls	r3, r1, #29
 8002026:	08ff      	lsrs	r7, r7, #3
 8002028:	433b      	orrs	r3, r7
 800202a:	08cc      	lsrs	r4, r1, #3
 800202c:	e649      	b.n	8001cc2 <__aeabi_dsub+0x2f6>
 800202e:	19dc      	adds	r4, r3, r7
 8002030:	429c      	cmp	r4, r3
 8002032:	419b      	sbcs	r3, r3
 8002034:	4461      	add	r1, ip
 8002036:	4689      	mov	r9, r1
 8002038:	425b      	negs	r3, r3
 800203a:	4499      	add	r9, r3
 800203c:	464b      	mov	r3, r9
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	d400      	bmi.n	8002044 <__aeabi_dsub+0x678>
 8002042:	e631      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8002044:	464a      	mov	r2, r9
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <__aeabi_dsub+0x6d8>)
 8002048:	401a      	ands	r2, r3
 800204a:	2301      	movs	r3, #1
 800204c:	4691      	mov	r9, r2
 800204e:	4698      	mov	r8, r3
 8002050:	e62a      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 8002052:	0016      	movs	r6, r2
 8002054:	4664      	mov	r4, ip
 8002056:	3e20      	subs	r6, #32
 8002058:	40f4      	lsrs	r4, r6
 800205a:	46a0      	mov	r8, r4
 800205c:	2a20      	cmp	r2, #32
 800205e:	d005      	beq.n	800206c <__aeabi_dsub+0x6a0>
 8002060:	2640      	movs	r6, #64	; 0x40
 8002062:	4664      	mov	r4, ip
 8002064:	1ab2      	subs	r2, r6, r2
 8002066:	4094      	lsls	r4, r2
 8002068:	4323      	orrs	r3, r4
 800206a:	469a      	mov	sl, r3
 800206c:	4654      	mov	r4, sl
 800206e:	1e63      	subs	r3, r4, #1
 8002070:	419c      	sbcs	r4, r3
 8002072:	4643      	mov	r3, r8
 8002074:	431c      	orrs	r4, r3
 8002076:	e5db      	b.n	8001c30 <__aeabi_dsub+0x264>
 8002078:	0002      	movs	r2, r0
 800207a:	2400      	movs	r4, #0
 800207c:	2300      	movs	r3, #0
 800207e:	e548      	b.n	8001b12 <__aeabi_dsub+0x146>
 8002080:	19dc      	adds	r4, r3, r7
 8002082:	42bc      	cmp	r4, r7
 8002084:	41bf      	sbcs	r7, r7
 8002086:	4461      	add	r1, ip
 8002088:	4689      	mov	r9, r1
 800208a:	427f      	negs	r7, r7
 800208c:	44b9      	add	r9, r7
 800208e:	e738      	b.n	8001f02 <__aeabi_dsub+0x536>
 8002090:	464b      	mov	r3, r9
 8002092:	4323      	orrs	r3, r4
 8002094:	d100      	bne.n	8002098 <__aeabi_dsub+0x6cc>
 8002096:	e69f      	b.n	8001dd8 <__aeabi_dsub+0x40c>
 8002098:	e606      	b.n	8001ca8 <__aeabi_dsub+0x2dc>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007fe 	.word	0x000007fe
 80020a0:	000007ff 	.word	0x000007ff
 80020a4:	ff7fffff 	.word	0xff7fffff
 80020a8:	08ff      	lsrs	r7, r7, #3
 80020aa:	074b      	lsls	r3, r1, #29
 80020ac:	433b      	orrs	r3, r7
 80020ae:	08cc      	lsrs	r4, r1, #3
 80020b0:	e616      	b.n	8001ce0 <__aeabi_dsub+0x314>
 80020b2:	4662      	mov	r2, ip
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	0752      	lsls	r2, r2, #29
 80020b8:	4313      	orrs	r3, r2
 80020ba:	4662      	mov	r2, ip
 80020bc:	08d4      	lsrs	r4, r2, #3
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	0312      	lsls	r2, r2, #12
 80020c2:	4214      	tst	r4, r2
 80020c4:	d007      	beq.n	80020d6 <__aeabi_dsub+0x70a>
 80020c6:	08c8      	lsrs	r0, r1, #3
 80020c8:	4210      	tst	r0, r2
 80020ca:	d104      	bne.n	80020d6 <__aeabi_dsub+0x70a>
 80020cc:	465d      	mov	r5, fp
 80020ce:	0004      	movs	r4, r0
 80020d0:	08fb      	lsrs	r3, r7, #3
 80020d2:	0749      	lsls	r1, r1, #29
 80020d4:	430b      	orrs	r3, r1
 80020d6:	0f5a      	lsrs	r2, r3, #29
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	0752      	lsls	r2, r2, #29
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	4313      	orrs	r3, r2
 80020e0:	e5fe      	b.n	8001ce0 <__aeabi_dsub+0x314>
 80020e2:	2300      	movs	r3, #0
 80020e4:	4a01      	ldr	r2, [pc, #4]	; (80020ec <__aeabi_dsub+0x720>)
 80020e6:	001c      	movs	r4, r3
 80020e8:	e513      	b.n	8001b12 <__aeabi_dsub+0x146>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__aeabi_d2iz>:
 80020f0:	000a      	movs	r2, r1
 80020f2:	b530      	push	{r4, r5, lr}
 80020f4:	4c13      	ldr	r4, [pc, #76]	; (8002144 <__aeabi_d2iz+0x54>)
 80020f6:	0053      	lsls	r3, r2, #1
 80020f8:	0309      	lsls	r1, r1, #12
 80020fa:	0005      	movs	r5, r0
 80020fc:	0b09      	lsrs	r1, r1, #12
 80020fe:	2000      	movs	r0, #0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	0fd2      	lsrs	r2, r2, #31
 8002104:	42a3      	cmp	r3, r4
 8002106:	dd04      	ble.n	8002112 <__aeabi_d2iz+0x22>
 8002108:	480f      	ldr	r0, [pc, #60]	; (8002148 <__aeabi_d2iz+0x58>)
 800210a:	4283      	cmp	r3, r0
 800210c:	dd02      	ble.n	8002114 <__aeabi_d2iz+0x24>
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <__aeabi_d2iz+0x5c>)
 8002110:	18d0      	adds	r0, r2, r3
 8002112:	bd30      	pop	{r4, r5, pc}
 8002114:	2080      	movs	r0, #128	; 0x80
 8002116:	0340      	lsls	r0, r0, #13
 8002118:	4301      	orrs	r1, r0
 800211a:	480d      	ldr	r0, [pc, #52]	; (8002150 <__aeabi_d2iz+0x60>)
 800211c:	1ac0      	subs	r0, r0, r3
 800211e:	281f      	cmp	r0, #31
 8002120:	dd08      	ble.n	8002134 <__aeabi_d2iz+0x44>
 8002122:	480c      	ldr	r0, [pc, #48]	; (8002154 <__aeabi_d2iz+0x64>)
 8002124:	1ac3      	subs	r3, r0, r3
 8002126:	40d9      	lsrs	r1, r3
 8002128:	000b      	movs	r3, r1
 800212a:	4258      	negs	r0, r3
 800212c:	2a00      	cmp	r2, #0
 800212e:	d1f0      	bne.n	8002112 <__aeabi_d2iz+0x22>
 8002130:	0018      	movs	r0, r3
 8002132:	e7ee      	b.n	8002112 <__aeabi_d2iz+0x22>
 8002134:	4c08      	ldr	r4, [pc, #32]	; (8002158 <__aeabi_d2iz+0x68>)
 8002136:	40c5      	lsrs	r5, r0
 8002138:	46a4      	mov	ip, r4
 800213a:	4463      	add	r3, ip
 800213c:	4099      	lsls	r1, r3
 800213e:	000b      	movs	r3, r1
 8002140:	432b      	orrs	r3, r5
 8002142:	e7f2      	b.n	800212a <__aeabi_d2iz+0x3a>
 8002144:	000003fe 	.word	0x000003fe
 8002148:	0000041d 	.word	0x0000041d
 800214c:	7fffffff 	.word	0x7fffffff
 8002150:	00000433 	.word	0x00000433
 8002154:	00000413 	.word	0x00000413
 8002158:	fffffbed 	.word	0xfffffbed

0800215c <__aeabi_i2d>:
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	2800      	cmp	r0, #0
 8002160:	d016      	beq.n	8002190 <__aeabi_i2d+0x34>
 8002162:	17c3      	asrs	r3, r0, #31
 8002164:	18c5      	adds	r5, r0, r3
 8002166:	405d      	eors	r5, r3
 8002168:	0fc4      	lsrs	r4, r0, #31
 800216a:	0028      	movs	r0, r5
 800216c:	f000 f8ae 	bl	80022cc <__clzsi2>
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <__aeabi_i2d+0x5c>)
 8002172:	1a12      	subs	r2, r2, r0
 8002174:	280a      	cmp	r0, #10
 8002176:	dc16      	bgt.n	80021a6 <__aeabi_i2d+0x4a>
 8002178:	0003      	movs	r3, r0
 800217a:	002e      	movs	r6, r5
 800217c:	3315      	adds	r3, #21
 800217e:	409e      	lsls	r6, r3
 8002180:	230b      	movs	r3, #11
 8002182:	1a18      	subs	r0, r3, r0
 8002184:	40c5      	lsrs	r5, r0
 8002186:	0552      	lsls	r2, r2, #21
 8002188:	032d      	lsls	r5, r5, #12
 800218a:	0b2d      	lsrs	r5, r5, #12
 800218c:	0d53      	lsrs	r3, r2, #21
 800218e:	e003      	b.n	8002198 <__aeabi_i2d+0x3c>
 8002190:	2400      	movs	r4, #0
 8002192:	2300      	movs	r3, #0
 8002194:	2500      	movs	r5, #0
 8002196:	2600      	movs	r6, #0
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	432b      	orrs	r3, r5
 800219c:	07e4      	lsls	r4, r4, #31
 800219e:	4323      	orrs	r3, r4
 80021a0:	0030      	movs	r0, r6
 80021a2:	0019      	movs	r1, r3
 80021a4:	bd70      	pop	{r4, r5, r6, pc}
 80021a6:	380b      	subs	r0, #11
 80021a8:	4085      	lsls	r5, r0
 80021aa:	0552      	lsls	r2, r2, #21
 80021ac:	032d      	lsls	r5, r5, #12
 80021ae:	2600      	movs	r6, #0
 80021b0:	0b2d      	lsrs	r5, r5, #12
 80021b2:	0d53      	lsrs	r3, r2, #21
 80021b4:	e7f0      	b.n	8002198 <__aeabi_i2d+0x3c>
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	0000041e 	.word	0x0000041e

080021bc <__aeabi_d2f>:
 80021bc:	0002      	movs	r2, r0
 80021be:	004b      	lsls	r3, r1, #1
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	030c      	lsls	r4, r1, #12
 80021c6:	4e3d      	ldr	r6, [pc, #244]	; (80022bc <__aeabi_d2f+0x100>)
 80021c8:	0a64      	lsrs	r4, r4, #9
 80021ca:	0f40      	lsrs	r0, r0, #29
 80021cc:	1c5f      	adds	r7, r3, #1
 80021ce:	0fc9      	lsrs	r1, r1, #31
 80021d0:	4304      	orrs	r4, r0
 80021d2:	00d5      	lsls	r5, r2, #3
 80021d4:	4237      	tst	r7, r6
 80021d6:	d00a      	beq.n	80021ee <__aeabi_d2f+0x32>
 80021d8:	4839      	ldr	r0, [pc, #228]	; (80022c0 <__aeabi_d2f+0x104>)
 80021da:	181e      	adds	r6, r3, r0
 80021dc:	2efe      	cmp	r6, #254	; 0xfe
 80021de:	dd16      	ble.n	800220e <__aeabi_d2f+0x52>
 80021e0:	20ff      	movs	r0, #255	; 0xff
 80021e2:	2400      	movs	r4, #0
 80021e4:	05c0      	lsls	r0, r0, #23
 80021e6:	4320      	orrs	r0, r4
 80021e8:	07c9      	lsls	r1, r1, #31
 80021ea:	4308      	orrs	r0, r1
 80021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <__aeabi_d2f+0x44>
 80021f2:	432c      	orrs	r4, r5
 80021f4:	d026      	beq.n	8002244 <__aeabi_d2f+0x88>
 80021f6:	2205      	movs	r2, #5
 80021f8:	0192      	lsls	r2, r2, #6
 80021fa:	0a54      	lsrs	r4, r2, #9
 80021fc:	b2d8      	uxtb	r0, r3
 80021fe:	e7f1      	b.n	80021e4 <__aeabi_d2f+0x28>
 8002200:	4325      	orrs	r5, r4
 8002202:	d0ed      	beq.n	80021e0 <__aeabi_d2f+0x24>
 8002204:	2080      	movs	r0, #128	; 0x80
 8002206:	03c0      	lsls	r0, r0, #15
 8002208:	4304      	orrs	r4, r0
 800220a:	20ff      	movs	r0, #255	; 0xff
 800220c:	e7ea      	b.n	80021e4 <__aeabi_d2f+0x28>
 800220e:	2e00      	cmp	r6, #0
 8002210:	dd1b      	ble.n	800224a <__aeabi_d2f+0x8e>
 8002212:	0192      	lsls	r2, r2, #6
 8002214:	1e53      	subs	r3, r2, #1
 8002216:	419a      	sbcs	r2, r3
 8002218:	00e4      	lsls	r4, r4, #3
 800221a:	0f6d      	lsrs	r5, r5, #29
 800221c:	4322      	orrs	r2, r4
 800221e:	432a      	orrs	r2, r5
 8002220:	0753      	lsls	r3, r2, #29
 8002222:	d048      	beq.n	80022b6 <__aeabi_d2f+0xfa>
 8002224:	230f      	movs	r3, #15
 8002226:	4013      	ands	r3, r2
 8002228:	2b04      	cmp	r3, #4
 800222a:	d000      	beq.n	800222e <__aeabi_d2f+0x72>
 800222c:	3204      	adds	r2, #4
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	04db      	lsls	r3, r3, #19
 8002232:	4013      	ands	r3, r2
 8002234:	d03f      	beq.n	80022b6 <__aeabi_d2f+0xfa>
 8002236:	1c70      	adds	r0, r6, #1
 8002238:	2efe      	cmp	r6, #254	; 0xfe
 800223a:	d0d1      	beq.n	80021e0 <__aeabi_d2f+0x24>
 800223c:	0192      	lsls	r2, r2, #6
 800223e:	0a54      	lsrs	r4, r2, #9
 8002240:	b2c0      	uxtb	r0, r0
 8002242:	e7cf      	b.n	80021e4 <__aeabi_d2f+0x28>
 8002244:	2000      	movs	r0, #0
 8002246:	2400      	movs	r4, #0
 8002248:	e7cc      	b.n	80021e4 <__aeabi_d2f+0x28>
 800224a:	0032      	movs	r2, r6
 800224c:	3217      	adds	r2, #23
 800224e:	db22      	blt.n	8002296 <__aeabi_d2f+0xda>
 8002250:	2080      	movs	r0, #128	; 0x80
 8002252:	0400      	lsls	r0, r0, #16
 8002254:	4320      	orrs	r0, r4
 8002256:	241e      	movs	r4, #30
 8002258:	1ba4      	subs	r4, r4, r6
 800225a:	2c1f      	cmp	r4, #31
 800225c:	dd1d      	ble.n	800229a <__aeabi_d2f+0xde>
 800225e:	2202      	movs	r2, #2
 8002260:	4252      	negs	r2, r2
 8002262:	1b96      	subs	r6, r2, r6
 8002264:	0002      	movs	r2, r0
 8002266:	40f2      	lsrs	r2, r6
 8002268:	0016      	movs	r6, r2
 800226a:	2c20      	cmp	r4, #32
 800226c:	d004      	beq.n	8002278 <__aeabi_d2f+0xbc>
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <__aeabi_d2f+0x108>)
 8002270:	4694      	mov	ip, r2
 8002272:	4463      	add	r3, ip
 8002274:	4098      	lsls	r0, r3
 8002276:	4305      	orrs	r5, r0
 8002278:	002a      	movs	r2, r5
 800227a:	1e53      	subs	r3, r2, #1
 800227c:	419a      	sbcs	r2, r3
 800227e:	4332      	orrs	r2, r6
 8002280:	2600      	movs	r6, #0
 8002282:	0753      	lsls	r3, r2, #29
 8002284:	d1ce      	bne.n	8002224 <__aeabi_d2f+0x68>
 8002286:	2480      	movs	r4, #128	; 0x80
 8002288:	0013      	movs	r3, r2
 800228a:	04e4      	lsls	r4, r4, #19
 800228c:	2001      	movs	r0, #1
 800228e:	4023      	ands	r3, r4
 8002290:	4222      	tst	r2, r4
 8002292:	d1d3      	bne.n	800223c <__aeabi_d2f+0x80>
 8002294:	e7b0      	b.n	80021f8 <__aeabi_d2f+0x3c>
 8002296:	2300      	movs	r3, #0
 8002298:	e7ad      	b.n	80021f6 <__aeabi_d2f+0x3a>
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <__aeabi_d2f+0x10c>)
 800229c:	4694      	mov	ip, r2
 800229e:	002a      	movs	r2, r5
 80022a0:	40e2      	lsrs	r2, r4
 80022a2:	0014      	movs	r4, r2
 80022a4:	002a      	movs	r2, r5
 80022a6:	4463      	add	r3, ip
 80022a8:	409a      	lsls	r2, r3
 80022aa:	4098      	lsls	r0, r3
 80022ac:	1e55      	subs	r5, r2, #1
 80022ae:	41aa      	sbcs	r2, r5
 80022b0:	4302      	orrs	r2, r0
 80022b2:	4322      	orrs	r2, r4
 80022b4:	e7e4      	b.n	8002280 <__aeabi_d2f+0xc4>
 80022b6:	0033      	movs	r3, r6
 80022b8:	e79e      	b.n	80021f8 <__aeabi_d2f+0x3c>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	000007fe 	.word	0x000007fe
 80022c0:	fffffc80 	.word	0xfffffc80
 80022c4:	fffffca2 	.word	0xfffffca2
 80022c8:	fffffc82 	.word	0xfffffc82

080022cc <__clzsi2>:
 80022cc:	211c      	movs	r1, #28
 80022ce:	2301      	movs	r3, #1
 80022d0:	041b      	lsls	r3, r3, #16
 80022d2:	4298      	cmp	r0, r3
 80022d4:	d301      	bcc.n	80022da <__clzsi2+0xe>
 80022d6:	0c00      	lsrs	r0, r0, #16
 80022d8:	3910      	subs	r1, #16
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	4298      	cmp	r0, r3
 80022de:	d301      	bcc.n	80022e4 <__clzsi2+0x18>
 80022e0:	0a00      	lsrs	r0, r0, #8
 80022e2:	3908      	subs	r1, #8
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	4298      	cmp	r0, r3
 80022e8:	d301      	bcc.n	80022ee <__clzsi2+0x22>
 80022ea:	0900      	lsrs	r0, r0, #4
 80022ec:	3904      	subs	r1, #4
 80022ee:	a202      	add	r2, pc, #8	; (adr r2, 80022f8 <__clzsi2+0x2c>)
 80022f0:	5c10      	ldrb	r0, [r2, r0]
 80022f2:	1840      	adds	r0, r0, r1
 80022f4:	4770      	bx	lr
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	02020304 	.word	0x02020304
 80022fc:	01010101 	.word	0x01010101
	...

08002308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_DMA_Init+0x38>)
 8002310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <MX_DMA_Init+0x38>)
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	639a      	str	r2, [r3, #56]	; 0x38
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_DMA_Init+0x38>)
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2009      	movs	r0, #9
 800232c:	f000 fec6 	bl	80030bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002330:	2009      	movs	r0, #9
 8002332:	f000 fed8 	bl	80030e6 <HAL_NVIC_EnableIRQ>

}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b002      	add	sp, #8
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	40021000 	.word	0x40021000

08002344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	0018      	movs	r0, r3
 800234e:	2314      	movs	r3, #20
 8002350:	001a      	movs	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	f005 f9d6 	bl	8007704 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <MX_GPIO_Init+0x68>)
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <MX_GPIO_Init+0x68>)
 800235e:	2101      	movs	r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	635a      	str	r2, [r3, #52]	; 0x34
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_GPIO_Init+0x68>)
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	2201      	movs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002370:	23a0      	movs	r3, #160	; 0xa0
 8002372:	05db      	lsls	r3, r3, #23
 8002374:	2200      	movs	r2, #0
 8002376:	2120      	movs	r1, #32
 8002378:	0018      	movs	r0, r3
 800237a:	f001 fb53 	bl	8003a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2220      	movs	r2, #32
 8002382:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2201      	movs	r2, #1
 8002388:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	1d3a      	adds	r2, r7, #4
 8002398:	23a0      	movs	r3, #160	; 0xa0
 800239a:	05db      	lsls	r3, r3, #23
 800239c:	0011      	movs	r1, r2
 800239e:	0018      	movs	r0, r3
 80023a0:	f001 f9dc 	bl	800375c <HAL_GPIO_Init>

}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000

080023b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	b08d      	sub	sp, #52	; 0x34
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b6:	f000 fd15 	bl	8002de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023ba:	f000 f97b 	bl	80026b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023be:	f7ff ffc1 	bl	8002344 <MX_GPIO_Init>
  MX_DMA_Init();
 80023c2:	f7ff ffa1 	bl	8002308 <MX_DMA_Init>
  MX_TIM1_Init();
 80023c6:	f000 faf1 	bl	80029ac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80023ca:	f000 fc2b 	bl	8002c24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

    UARTSTATUS = RESET;
 80023ce:	4ba8      	ldr	r3, [pc, #672]	; (8002670 <main+0x2c0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]

    while(stateM == 0){
 80023d4:	e025      	b.n	8002422 <main+0x72>

  	  UARTSTATUS = RESET;
 80023d6:	4ba6      	ldr	r3, [pc, #664]	; (8002670 <main+0x2c0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]

  	  printf("Amplitude em Volts:\r\n");
 80023dc:	4ba5      	ldr	r3, [pc, #660]	; (8002674 <main+0x2c4>)
 80023de:	0018      	movs	r0, r3
 80023e0:	f005 fa0a 	bl	80077f8 <puts>

  	  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 80023e4:	49a4      	ldr	r1, [pc, #656]	; (8002678 <main+0x2c8>)
 80023e6:	4ba5      	ldr	r3, [pc, #660]	; (800267c <main+0x2cc>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	0018      	movs	r0, r3
 80023ec:	f003 fb23 	bl	8005a36 <HAL_UART_Receive_IT>

  	  while(!UARTSTATUS){
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	4b9f      	ldr	r3, [pc, #636]	; (8002670 <main+0x2c0>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0fa      	beq.n	80023f2 <main+0x42>
  	  }

  	  amplitude = rxBuffer[0] - 48;
 80023fc:	4b9e      	ldr	r3, [pc, #632]	; (8002678 <main+0x2c8>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b30      	subs	r3, #48	; 0x30
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <main+0x2d0>)
 800240a:	801a      	strh	r2, [r3, #0]

  	  if(amplitude > 0 && amplitude < 4){
 800240c:	4b9c      	ldr	r3, [pc, #624]	; (8002680 <main+0x2d0>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <main+0x72>
 8002414:	4b9a      	ldr	r3, [pc, #616]	; (8002680 <main+0x2d0>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d802      	bhi.n	8002422 <main+0x72>
  		  stateM = 1;
 800241c:	4b99      	ldr	r3, [pc, #612]	; (8002684 <main+0x2d4>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]
    while(stateM == 0){
 8002422:	4b98      	ldr	r3, [pc, #608]	; (8002684 <main+0x2d4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0d5      	beq.n	80023d6 <main+0x26>
  	  }

    }

    while(stateM == 1){
 800242a:	e042      	b.n	80024b2 <main+0x102>

  	  UARTSTATUS = RESET;
 800242c:	4b90      	ldr	r3, [pc, #576]	; (8002670 <main+0x2c0>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]

  	  printf("Offset em volts:\r\n");
 8002432:	4b95      	ldr	r3, [pc, #596]	; (8002688 <main+0x2d8>)
 8002434:	0018      	movs	r0, r3
 8002436:	f005 f9df 	bl	80077f8 <puts>

  	  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 2);
 800243a:	498f      	ldr	r1, [pc, #572]	; (8002678 <main+0x2c8>)
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <main+0x2cc>)
 800243e:	2202      	movs	r2, #2
 8002440:	0018      	movs	r0, r3
 8002442:	f003 faf8 	bl	8005a36 <HAL_UART_Receive_IT>

  	  while(!UARTSTATUS){
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	4b89      	ldr	r3, [pc, #548]	; (8002670 <main+0x2c0>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0fa      	beq.n	8002448 <main+0x98>
  	  }

  	  offset = (rxBuffer[0]-48)*1+(rxBuffer[1]-48)*0.1;
 8002452:	4b89      	ldr	r3, [pc, #548]	; (8002678 <main+0x2c8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3b30      	subs	r3, #48	; 0x30
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff fe7e 	bl	800215c <__aeabi_i2d>
 8002460:	6038      	str	r0, [r7, #0]
 8002462:	6079      	str	r1, [r7, #4]
 8002464:	4b84      	ldr	r3, [pc, #528]	; (8002678 <main+0x2c8>)
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3b30      	subs	r3, #48	; 0x30
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff fe75 	bl	800215c <__aeabi_i2d>
 8002472:	4a86      	ldr	r2, [pc, #536]	; (800268c <main+0x2dc>)
 8002474:	4b86      	ldr	r3, [pc, #536]	; (8002690 <main+0x2e0>)
 8002476:	f7ff f83d 	bl	80014f4 <__aeabi_dmul>
 800247a:	0002      	movs	r2, r0
 800247c:	000b      	movs	r3, r1
 800247e:	6838      	ldr	r0, [r7, #0]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	f7fe f8f9 	bl	8000678 <__aeabi_dadd>
 8002486:	0002      	movs	r2, r0
 8002488:	000b      	movs	r3, r1
 800248a:	0010      	movs	r0, r2
 800248c:	0019      	movs	r1, r3
 800248e:	f7ff fe95 	bl	80021bc <__aeabi_d2f>
 8002492:	1c02      	adds	r2, r0, #0
 8002494:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <main+0x2e4>)
 8002496:	601a      	str	r2, [r3, #0]

  	  if(offset > 2){
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <main+0x2e4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	05c9      	lsls	r1, r1, #23
 80024a0:	1c18      	adds	r0, r3, #0
 80024a2:	f7fe f807 	bl	80004b4 <__aeabi_fcmpgt>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d100      	bne.n	80024ac <main+0xfc>
 80024aa:	e002      	b.n	80024b2 <main+0x102>
  		  stateM = 2;
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <main+0x2d4>)
 80024ae:	2202      	movs	r2, #2
 80024b0:	601a      	str	r2, [r3, #0]
    while(stateM == 1){
 80024b2:	4b74      	ldr	r3, [pc, #464]	; (8002684 <main+0x2d4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d0b8      	beq.n	800242c <main+0x7c>
  	  }

    }

    while(stateM == 2){
 80024ba:	e032      	b.n	8002522 <main+0x172>

  	  UARTSTATUS = RESET;
 80024bc:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <main+0x2c0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]

  	  printf("Frequência em Hertz:\r\n");
 80024c2:	4b75      	ldr	r3, [pc, #468]	; (8002698 <main+0x2e8>)
 80024c4:	0018      	movs	r0, r3
 80024c6:	f005 f997 	bl	80077f8 <puts>

  	  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 3);
 80024ca:	496b      	ldr	r1, [pc, #428]	; (8002678 <main+0x2c8>)
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <main+0x2cc>)
 80024ce:	2203      	movs	r2, #3
 80024d0:	0018      	movs	r0, r3
 80024d2:	f003 fab0 	bl	8005a36 <HAL_UART_Receive_IT>

  	  while(!UARTSTATUS){
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	4b65      	ldr	r3, [pc, #404]	; (8002670 <main+0x2c0>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0fa      	beq.n	80024d8 <main+0x128>
  	  }

  	  frequencia = (rxBuffer[0] - 48)*100 + (rxBuffer[1] - 48)*10 + rxBuffer[2] - 48;
 80024e2:	4b65      	ldr	r3, [pc, #404]	; (8002678 <main+0x2c8>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2264      	movs	r2, #100	; 0x64
 80024ea:	4353      	muls	r3, r2
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b62      	ldr	r3, [pc, #392]	; (8002678 <main+0x2c8>)
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	1c19      	adds	r1, r3, #0
 80024f6:	0089      	lsls	r1, r1, #2
 80024f8:	18cb      	adds	r3, r1, r3
 80024fa:	18db      	adds	r3, r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	18d3      	adds	r3, r2, r3
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <main+0x2c8>)
 8002504:	789b      	ldrb	r3, [r3, #2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3330      	adds	r3, #48	; 0x30
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b62      	ldr	r3, [pc, #392]	; (800269c <main+0x2ec>)
 8002512:	701a      	strb	r2, [r3, #0]

  	  if(frequencia > 0 && frequencia < 300){
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <main+0x2ec>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <main+0x172>
  		  stateM = 3;
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <main+0x2d4>)
 800251e:	2203      	movs	r2, #3
 8002520:	601a      	str	r2, [r3, #0]
    while(stateM == 2){
 8002522:	4b58      	ldr	r3, [pc, #352]	; (8002684 <main+0x2d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d0c8      	beq.n	80024bc <main+0x10c>
  	  }
    }

    pontos = (uint16_t) (16000/frequencia);
 800252a:	4b5c      	ldr	r3, [pc, #368]	; (800269c <main+0x2ec>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	0019      	movs	r1, r3
 8002530:	23fa      	movs	r3, #250	; 0xfa
 8002532:	0198      	lsls	r0, r3, #6
 8002534:	f7fd fe6e 	bl	8000214 <__divsi3>
 8002538:	0003      	movs	r3, r0
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <main+0x2f0>)
 800253e:	801a      	strh	r2, [r3, #0]
    __IO uint32_t sinBuffer[pontos];
 8002540:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <main+0x2f0>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	001a      	movs	r2, r3
 8002546:	3a01      	subs	r2, #1
 8002548:	62ba      	str	r2, [r7, #40]	; 0x28
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	2200      	movs	r2, #0
 800254e:	617a      	str	r2, [r7, #20]
 8002550:	6938      	ldr	r0, [r7, #16]
 8002552:	6979      	ldr	r1, [r7, #20]
 8002554:	0002      	movs	r2, r0
 8002556:	0ed2      	lsrs	r2, r2, #27
 8002558:	000e      	movs	r6, r1
 800255a:	0176      	lsls	r6, r6, #5
 800255c:	61fe      	str	r6, [r7, #28]
 800255e:	69fe      	ldr	r6, [r7, #28]
 8002560:	4316      	orrs	r6, r2
 8002562:	61fe      	str	r6, [r7, #28]
 8002564:	0002      	movs	r2, r0
 8002566:	0152      	lsls	r2, r2, #5
 8002568:	61ba      	str	r2, [r7, #24]
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	2200      	movs	r2, #0
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	68b8      	ldr	r0, [r7, #8]
 8002572:	68f9      	ldr	r1, [r7, #12]
 8002574:	0002      	movs	r2, r0
 8002576:	0ed2      	lsrs	r2, r2, #27
 8002578:	000e      	movs	r6, r1
 800257a:	0175      	lsls	r5, r6, #5
 800257c:	4315      	orrs	r5, r2
 800257e:	0002      	movs	r2, r0
 8002580:	0154      	lsls	r4, r2, #5
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	3307      	adds	r3, #7
 8002586:	08db      	lsrs	r3, r3, #3
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	466a      	mov	r2, sp
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	469d      	mov	sp, r3
 8002590:	466b      	mov	r3, sp
 8002592:	3303      	adds	r3, #3
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	627b      	str	r3, [r7, #36]	; 0x24

    amplitude = (uint16_t)(1000*amplitude/6);
 800259a:	4b39      	ldr	r3, [pc, #228]	; (8002680 <main+0x2d0>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	001a      	movs	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	015b      	lsls	r3, r3, #5
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	2106      	movs	r1, #6
 80025ae:	0018      	movs	r0, r3
 80025b0:	f7fd fe30 	bl	8000214 <__divsi3>
 80025b4:	0003      	movs	r3, r0
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <main+0x2d0>)
 80025ba:	801a      	strh	r2, [r3, #0]

    int i;

    for(i = 0; i < pontos; i++){
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c0:	e03e      	b.n	8002640 <main+0x290>
  	  sinBuffer[i] = (uint32_t)(amplitude*sin(2*M_PI*i/pontos)+500);
 80025c2:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <main+0x2d0>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7ff fdc8 	bl	800215c <__aeabi_i2d>
 80025cc:	0004      	movs	r4, r0
 80025ce:	000d      	movs	r5, r1
 80025d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025d2:	f7ff fdc3 	bl	800215c <__aeabi_i2d>
 80025d6:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <main+0x2f4>)
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <main+0x2f8>)
 80025da:	f7fe ff8b 	bl	80014f4 <__aeabi_dmul>
 80025de:	0002      	movs	r2, r0
 80025e0:	000b      	movs	r3, r1
 80025e2:	61ba      	str	r2, [r7, #24]
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <main+0x2f0>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7ff fdb6 	bl	800215c <__aeabi_i2d>
 80025f0:	0002      	movs	r2, r0
 80025f2:	000b      	movs	r3, r1
 80025f4:	69b8      	ldr	r0, [r7, #24]
 80025f6:	69f9      	ldr	r1, [r7, #28]
 80025f8:	f7fe fb7a 	bl	8000cf0 <__aeabi_ddiv>
 80025fc:	0002      	movs	r2, r0
 80025fe:	000b      	movs	r3, r1
 8002600:	0010      	movs	r0, r2
 8002602:	0019      	movs	r1, r3
 8002604:	f005 fdd0 	bl	80081a8 <sin>
 8002608:	0002      	movs	r2, r0
 800260a:	000b      	movs	r3, r1
 800260c:	0020      	movs	r0, r4
 800260e:	0029      	movs	r1, r5
 8002610:	f7fe ff70 	bl	80014f4 <__aeabi_dmul>
 8002614:	0002      	movs	r2, r0
 8002616:	000b      	movs	r3, r1
 8002618:	0010      	movs	r0, r2
 800261a:	0019      	movs	r1, r3
 800261c:	2200      	movs	r2, #0
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <main+0x2fc>)
 8002620:	f7fe f82a 	bl	8000678 <__aeabi_dadd>
 8002624:	0002      	movs	r2, r0
 8002626:	000b      	movs	r3, r1
 8002628:	0010      	movs	r0, r2
 800262a:	0019      	movs	r1, r3
 800262c:	f7fd ff56 	bl	80004dc <__aeabi_d2uiz>
 8002630:	0001      	movs	r1, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	50d1      	str	r1, [r2, r3]
    for(i = 0; i < pontos; i++){
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	3301      	adds	r3, #1
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <main+0x2f0>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	001a      	movs	r2, r3
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	4293      	cmp	r3, r2
 800264a:	dbba      	blt.n	80025c2 <main+0x212>
    }

    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)sinBuffer, pontos);
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <main+0x2f0>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	4817      	ldr	r0, [pc, #92]	; (80026b0 <main+0x300>)
 8002654:	2100      	movs	r1, #0
 8002656:	f002 f8b5 	bl	80047c4 <HAL_TIM_PWM_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800265a:	23a0      	movs	r3, #160	; 0xa0
 800265c:	05db      	lsls	r3, r3, #23
 800265e:	2120      	movs	r1, #32
 8002660:	0018      	movs	r0, r3
 8002662:	f001 f9fc 	bl	8003a5e <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8002666:	20c8      	movs	r0, #200	; 0xc8
 8002668:	f000 fc42 	bl	8002ef0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800266c:	e7f5      	b.n	800265a <main+0x2aa>
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	20000000 	.word	0x20000000
 8002674:	080091e0 	.word	0x080091e0
 8002678:	20000090 	.word	0x20000090
 800267c:	20000154 	.word	0x20000154
 8002680:	2000009e 	.word	0x2000009e
 8002684:	20000098 	.word	0x20000098
 8002688:	080091f8 	.word	0x080091f8
 800268c:	9999999a 	.word	0x9999999a
 8002690:	3fb99999 	.word	0x3fb99999
 8002694:	200000a4 	.word	0x200000a4
 8002698:	0800920c 	.word	0x0800920c
 800269c:	2000009c 	.word	0x2000009c
 80026a0:	200000a0 	.word	0x200000a0
 80026a4:	54442d18 	.word	0x54442d18
 80026a8:	401921fb 	.word	0x401921fb
 80026ac:	407f4000 	.word	0x407f4000
 80026b0:	200000ac 	.word	0x200000ac

080026b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b093      	sub	sp, #76	; 0x4c
 80026b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ba:	2414      	movs	r4, #20
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	0018      	movs	r0, r3
 80026c0:	2334      	movs	r3, #52	; 0x34
 80026c2:	001a      	movs	r2, r3
 80026c4:	2100      	movs	r1, #0
 80026c6:	f005 f81d 	bl	8007704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	0018      	movs	r0, r3
 80026ce:	2310      	movs	r3, #16
 80026d0:	001a      	movs	r2, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	f005 f816 	bl	8007704 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	0018      	movs	r0, r3
 80026de:	f001 f9d9 	bl	8003a94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	2202      	movs	r2, #2
 80026e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	0052      	lsls	r2, r2, #1
 80026ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80026f0:	0021      	movs	r1, r4
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2240      	movs	r2, #64	; 0x40
 80026fc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2202      	movs	r2, #2
 8002702:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2202      	movs	r2, #2
 8002708:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002710:	187b      	adds	r3, r7, r1
 8002712:	2208      	movs	r2, #8
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0292      	lsls	r2, r2, #10
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	0592      	lsls	r2, r2, #22
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002726:	187b      	adds	r3, r7, r1
 8002728:	0018      	movs	r0, r3
 800272a:	f001 f9ff 	bl	8003b2c <HAL_RCC_OscConfig>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d001      	beq.n	8002736 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002732:	f000 f83b 	bl	80027ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2202      	movs	r2, #2
 8002740:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2102      	movs	r1, #2
 8002752:	0018      	movs	r0, r3
 8002754:	f001 fd00 	bl	8004158 <HAL_RCC_ClockConfig>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800275c:	f000 f826 	bl	80027ac <Error_Handler>
  }
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b013      	add	sp, #76	; 0x4c
 8002766:	bd90      	pop	{r4, r7, pc}

08002768 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	0002      	movs	r2, r0
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 200);
 8002774:	1df9      	adds	r1, r7, #7
 8002776:	4805      	ldr	r0, [pc, #20]	; (800278c <__io_putchar+0x24>)
 8002778:	23c8      	movs	r3, #200	; 0xc8
 800277a:	2201      	movs	r2, #1
 800277c:	f003 f8b0 	bl	80058e0 <HAL_UART_Transmit>
	return ch;
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	781b      	ldrb	r3, [r3, #0]
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000154 	.word	0x20000154

08002790 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	UARTSTATUS = SET;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_UART_RxCpltCallback+0x18>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	20000000 	.word	0x20000000

080027ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b0:	b672      	cpsid	i
}
 80027b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <Error_Handler+0x8>
	...

080027b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_MspInit+0x4c>)
 80027c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_MspInit+0x4c>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_MspInit+0x4c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2201      	movs	r2, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_MspInit+0x4c>)
 80027d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <HAL_MspInit+0x4c>)
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	0549      	lsls	r1, r1, #21
 80027e0:	430a      	orrs	r2, r1
 80027e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_MspInit+0x4c>)
 80027e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	055b      	lsls	r3, r3, #21
 80027ec:	4013      	ands	r3, r2
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fb9e 	bl	8002f38 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler+0x4>

0800280e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler+0x4>

08002814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282c:	f000 fb44 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <DMA1_Channel1_IRQHandler+0x14>)
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fe4a 	bl	80034d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	200000f8 	.word	0x200000f8

08002850 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <USART2_IRQHandler+0x14>)
 8002856:	0018      	movs	r0, r3
 8002858:	f003 f950 	bl	8005afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	20000154 	.word	0x20000154

08002868 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e00a      	b.n	8002890 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800287a:	e000      	b.n	800287e <_read+0x16>
 800287c:	bf00      	nop
 800287e:	0001      	movs	r1, r0
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	60ba      	str	r2, [r7, #8]
 8002886:	b2ca      	uxtb	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	dbf0      	blt.n	800287a <_read+0x12>
	}

return len;
 8002898:	687b      	ldr	r3, [r7, #4]
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b006      	add	sp, #24
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e009      	b.n	80028c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	60ba      	str	r2, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7ff ff53 	bl	8002768 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3301      	adds	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dbf1      	blt.n	80028b4 <_write+0x12>
	}
	return len;
 80028d0:	687b      	ldr	r3, [r7, #4]
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b006      	add	sp, #24
 80028d8:	bd80      	pop	{r7, pc}

080028da <_close>:

int _close(int file)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
	return -1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	425b      	negs	r3, r3
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b002      	add	sp, #8
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	0192      	lsls	r2, r2, #6
 80028fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002900:	2300      	movs	r3, #0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}

0800290a <_isatty>:

int _isatty(int file)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	return 1;
 8002912:	2301      	movs	r3, #1
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
	return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <_sbrk+0x5c>)
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <_sbrk+0x60>)
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <_sbrk+0x64>)
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <_sbrk+0x68>)
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <_sbrk+0x64>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	18d3      	adds	r3, r2, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d207      	bcs.n	8002974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002964:	f004 fea4 	bl	80076b0 <__errno>
 8002968:	0003      	movs	r3, r0
 800296a:	220c      	movs	r2, #12
 800296c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296e:	2301      	movs	r3, #1
 8002970:	425b      	negs	r3, r3
 8002972:	e009      	b.n	8002988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <_sbrk+0x64>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	18d2      	adds	r2, r2, r3
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <_sbrk+0x64>)
 8002984:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b006      	add	sp, #24
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20009000 	.word	0x20009000
 8002994:	00000400 	.word	0x00000400
 8002998:	200000a8 	.word	0x200000a8
 800299c:	200001f8 	.word	0x200001f8

080029a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b098      	sub	sp, #96	; 0x60
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b2:	2354      	movs	r3, #84	; 0x54
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	0018      	movs	r0, r3
 80029b8:	230c      	movs	r3, #12
 80029ba:	001a      	movs	r2, r3
 80029bc:	2100      	movs	r1, #0
 80029be:	f004 fea1 	bl	8007704 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c2:	2338      	movs	r3, #56	; 0x38
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	0018      	movs	r0, r3
 80029c8:	231c      	movs	r3, #28
 80029ca:	001a      	movs	r2, r3
 80029cc:	2100      	movs	r1, #0
 80029ce:	f004 fe99 	bl	8007704 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	0018      	movs	r0, r3
 80029d6:	2334      	movs	r3, #52	; 0x34
 80029d8:	001a      	movs	r2, r3
 80029da:	2100      	movs	r1, #0
 80029dc:	f004 fe92 	bl	8007704 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029e0:	4b46      	ldr	r3, [pc, #280]	; (8002afc <MX_TIM1_Init+0x150>)
 80029e2:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <MX_TIM1_Init+0x154>)
 80029e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80029e6:	4b45      	ldr	r3, [pc, #276]	; (8002afc <MX_TIM1_Init+0x150>)
 80029e8:	2203      	movs	r2, #3
 80029ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ec:	4b43      	ldr	r3, [pc, #268]	; (8002afc <MX_TIM1_Init+0x150>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <MX_TIM1_Init+0x150>)
 80029f4:	4a43      	ldr	r2, [pc, #268]	; (8002b04 <MX_TIM1_Init+0x158>)
 80029f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <MX_TIM1_Init+0x150>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <MX_TIM1_Init+0x150>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <MX_TIM1_Init+0x150>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <MX_TIM1_Init+0x150>)
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f001 fe81 	bl	8004714 <HAL_TIM_PWM_Init>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002a16:	f7ff fec9 	bl	80027ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1a:	2154      	movs	r1, #84	; 0x54
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a2e:	187a      	adds	r2, r7, r1
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <MX_TIM1_Init+0x150>)
 8002a32:	0011      	movs	r1, r2
 8002a34:	0018      	movs	r0, r3
 8002a36:	f002 fdef 	bl	8005618 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3a:	1e03      	subs	r3, r0, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a3e:	f7ff feb5 	bl	80027ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a42:	2138      	movs	r1, #56	; 0x38
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2260      	movs	r2, #96	; 0x60
 8002a48:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	22fa      	movs	r2, #250	; 0xfa
 8002a4e:	0052      	lsls	r2, r2, #1
 8002a50:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a52:	187b      	adds	r3, r7, r1
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a70:	1879      	adds	r1, r7, r1
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <MX_TIM1_Init+0x150>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	0018      	movs	r0, r3
 8002a78:	f002 f88e 	bl	8004b98 <HAL_TIM_PWM_ConfigChannel>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002a80:	f7ff fe94 	bl	80027ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0192      	lsls	r2, r2, #6
 8002aa8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002aaa:	1d3b      	adds	r3, r7, #4
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	0492      	lsls	r2, r2, #18
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ad6:	1d3a      	adds	r2, r7, #4
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <MX_TIM1_Init+0x150>)
 8002ada:	0011      	movs	r1, r2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f002 fe03 	bl	80056e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ae2:	1e03      	subs	r3, r0, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8002ae6:	f7ff fe61 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002aea:	4b04      	ldr	r3, [pc, #16]	; (8002afc <MX_TIM1_Init+0x150>)
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 f85b 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b018      	add	sp, #96	; 0x60
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	200000ac 	.word	0x200000ac
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	000003e7 	.word	0x000003e7

08002b08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <HAL_TIM_PWM_MspInit+0x90>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d139      	bne.n	8002b8e <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_TIM_PWM_MspInit+0x94>)
 8002b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_TIM_PWM_MspInit+0x94>)
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0109      	lsls	r1, r1, #4
 8002b24:	430a      	orrs	r2, r1
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_TIM_PWM_MspInit+0x94>)
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b38:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x9c>)
 8002b3a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b3e:	2214      	movs	r2, #20
 8002b40:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b42:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b44:	2210      	movs	r2, #16
 8002b46:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	0092      	lsls	r2, r2, #2
 8002b5a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b66:	2220      	movs	r2, #32
 8002b68:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b6c:	2280      	movs	r2, #128	; 0x80
 8002b6e:	0192      	lsls	r2, r2, #6
 8002b70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 fad3 	bl	8003120 <HAL_DMA_Init>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_TIM_PWM_MspInit+0x7a>
    {
      Error_Handler();
 8002b7e:	f7ff fe15 	bl	80027ac <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a06      	ldr	r2, [pc, #24]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x98>)
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	200000f8 	.word	0x200000f8
 8002ba4:	40020008 	.word	0x40020008

08002ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	240c      	movs	r4, #12
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	2314      	movs	r3, #20
 8002bb8:	001a      	movs	r2, r3
 8002bba:	2100      	movs	r1, #0
 8002bbc:	f004 fda2 	bl	8007704 <memset>
  if(timHandle->Instance==TIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_TIM_MspPostInit+0x74>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d123      	bne.n	8002c12 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_TIM_MspPostInit+0x78>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <HAL_TIM_MspPostInit+0x78>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_TIM_MspPostInit+0x78>)
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	0052      	lsls	r2, r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	0021      	movs	r1, r4
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	2202      	movs	r2, #2
 8002bf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	2202      	movs	r2, #2
 8002c02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	187a      	adds	r2, r7, r1
 8002c06:	23a0      	movs	r3, #160	; 0xa0
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	0011      	movs	r1, r2
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 fda5 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b009      	add	sp, #36	; 0x24
 8002c18:	bd90      	pop	{r4, r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	40012c00 	.word	0x40012c00
 8002c20:	40021000 	.word	0x40021000

08002c24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <MX_USART2_UART_Init+0x98>)
 8002c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c30:	22e1      	movs	r2, #225	; 0xe1
 8002c32:	0252      	lsls	r2, r2, #9
 8002c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f002 fde0 	bl	8005834 <HAL_UART_Init>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c78:	f7ff fd98 	bl	80027ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c7e:	2100      	movs	r1, #0
 8002c80:	0018      	movs	r0, r3
 8002c82:	f004 fc35 	bl	80074f0 <HAL_UARTEx_SetTxFifoThreshold>
 8002c86:	1e03      	subs	r3, r0, #0
 8002c88:	d001      	beq.n	8002c8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c8a:	f7ff fd8f 	bl	80027ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	0018      	movs	r0, r3
 8002c94:	f004 fc6c 	bl	8007570 <HAL_UARTEx_SetRxFifoThreshold>
 8002c98:	1e03      	subs	r3, r0, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c9c:	f7ff fd86 	bl	80027ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <MX_USART2_UART_Init+0x94>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f004 fbea 	bl	800747c <HAL_UARTEx_DisableFifoMode>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002cac:	f7ff fd7e 	bl	80027ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	20000154 	.word	0x20000154
 8002cbc:	40004400 	.word	0x40004400

08002cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b091      	sub	sp, #68	; 0x44
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	232c      	movs	r3, #44	; 0x2c
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	0018      	movs	r0, r3
 8002cce:	2314      	movs	r3, #20
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f004 fd16 	bl	8007704 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cd8:	2410      	movs	r4, #16
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	0018      	movs	r0, r3
 8002cde:	231c      	movs	r3, #28
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f004 fd0e 	bl	8007704 <memset>
  if(uartHandle->Instance==USART2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <HAL_UART_MspInit+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d146      	bne.n	8002d80 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	0018      	movs	r0, r3
 8002d02:	f001 fbd3 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d0a:	f7ff fd4f 	bl	80027ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <HAL_UART_MspInit+0xcc>)
 8002d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d12:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <HAL_UART_MspInit+0xcc>)
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	0289      	lsls	r1, r1, #10
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_UART_MspInit+0xcc>)
 8002d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	029b      	lsls	r3, r3, #10
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_UART_MspInit+0xcc>)
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_UART_MspInit+0xcc>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	430a      	orrs	r2, r1
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_UART_MspInit+0xcc>)
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	220c      	movs	r2, #12
 8002d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2201      	movs	r2, #1
 8002d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	187a      	adds	r2, r7, r1
 8002d64:	23a0      	movs	r3, #160	; 0xa0
 8002d66:	05db      	lsls	r3, r3, #23
 8002d68:	0011      	movs	r1, r2
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fcf6 	bl	800375c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	201c      	movs	r0, #28
 8002d76:	f000 f9a1 	bl	80030bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d7a:	201c      	movs	r0, #28
 8002d7c:	f000 f9b3 	bl	80030e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b011      	add	sp, #68	; 0x44
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	40021000 	.word	0x40021000

08002d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d90:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d94:	f7ff fe04 	bl	80029a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d98:	480c      	ldr	r0, [pc, #48]	; (8002dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8002d9a:	490d      	ldr	r1, [pc, #52]	; (8002dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <LoopForever+0xe>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <LoopForever+0x16>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dbe:	f004 fc7d 	bl	80076bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002dc2:	f7ff faf5 	bl	80023b0 <main>

08002dc6 <LoopForever>:

LoopForever:
  b LoopForever
 8002dc6:	e7fe      	b.n	8002dc6 <LoopForever>
  ldr   r0, =_estack
 8002dc8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002dd4:	080095c8 	.word	0x080095c8
  ldr r2, =_sbss
 8002dd8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002ddc:	200001f8 	.word	0x200001f8

08002de0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de0:	e7fe      	b.n	8002de0 <ADC1_IRQHandler>
	...

08002de4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_Init+0x3c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_Init+0x3c>)
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	0049      	lsls	r1, r1, #1
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dfe:	2003      	movs	r0, #3
 8002e00:	f000 f810 	bl	8002e24 <HAL_InitTick>
 8002e04:	1e03      	subs	r3, r0, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e001      	b.n	8002e14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e10:	f7ff fcd2 	bl	80027b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	781b      	ldrb	r3, [r3, #0]
}
 8002e18:	0018      	movs	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40022000 	.word	0x40022000

08002e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e2c:	230f      	movs	r3, #15
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_InitTick+0x88>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02b      	beq.n	8002e94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_InitTick+0x8c>)
 8002e3e:	681c      	ldr	r4, [r3, #0]
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_InitTick+0x88>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	0019      	movs	r1, r3
 8002e46:	23fa      	movs	r3, #250	; 0xfa
 8002e48:	0098      	lsls	r0, r3, #2
 8002e4a:	f7fd f959 	bl	8000100 <__udivsi3>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	0019      	movs	r1, r3
 8002e52:	0020      	movs	r0, r4
 8002e54:	f7fd f954 	bl	8000100 <__udivsi3>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 f953 	bl	8003106 <HAL_SYSTICK_Config>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d112      	bne.n	8002e8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d80a      	bhi.n	8002e80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	425b      	negs	r3, r3
 8002e70:	2200      	movs	r2, #0
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f922 	bl	80030bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_InitTick+0x90>)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e00d      	b.n	8002e9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e80:	230f      	movs	r3, #15
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	e008      	b.n	8002e9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e8a:	230f      	movs	r3, #15
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e003      	b.n	8002e9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e94:	230f      	movs	r3, #15
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2201      	movs	r2, #1
 8002e9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e9c:	230f      	movs	r3, #15
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b005      	add	sp, #20
 8002ea8:	bd90      	pop	{r4, r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	20000008 	.word	0x20000008

08002eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_IncTick+0x1c>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_IncTick+0x20>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	18d2      	adds	r2, r2, r3
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_IncTick+0x20>)
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	2000000c 	.word	0x2000000c
 8002ed8:	200001e4 	.word	0x200001e4

08002edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <HAL_GetTick+0x10>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	200001e4 	.word	0x200001e4

08002ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff fff0 	bl	8002edc <HAL_GetTick>
 8002efc:	0003      	movs	r3, r0
 8002efe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3301      	adds	r3, #1
 8002f08:	d005      	beq.n	8002f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_Delay+0x44>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	f7ff ffe0 	bl	8002edc <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d8f7      	bhi.n	8002f18 <HAL_Delay+0x28>
  {
  }
}
 8002f28:	46c0      	nop			; (mov r8, r8)
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	2000000c 	.word	0x2000000c

08002f38 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	fffff9ff 	.word	0xfffff9ff

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	1dfb      	adds	r3, r7, #7
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b7f      	cmp	r3, #127	; 0x7f
 8002f76:	d809      	bhi.n	8002f8c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f78:	1dfb      	adds	r3, r7, #7
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	231f      	movs	r3, #31
 8002f80:	401a      	ands	r2, r3
 8002f82:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <__NVIC_EnableIRQ+0x30>)
 8002f84:	2101      	movs	r1, #1
 8002f86:	4091      	lsls	r1, r2
 8002f88:	000a      	movs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b7f      	cmp	r3, #127	; 0x7f
 8002fac:	d828      	bhi.n	8003000 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fae:	4a2f      	ldr	r2, [pc, #188]	; (800306c <__NVIC_SetPriority+0xd4>)
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	33c0      	adds	r3, #192	; 0xc0
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	589b      	ldr	r3, [r3, r2]
 8002fbe:	1dfa      	adds	r2, r7, #7
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	400a      	ands	r2, r1
 8002fc8:	00d2      	lsls	r2, r2, #3
 8002fca:	21ff      	movs	r1, #255	; 0xff
 8002fcc:	4091      	lsls	r1, r2
 8002fce:	000a      	movs	r2, r1
 8002fd0:	43d2      	mvns	r2, r2
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	401a      	ands	r2, r3
 8002fde:	1dfb      	adds	r3, r7, #7
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	4003      	ands	r3, r0
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fec:	481f      	ldr	r0, [pc, #124]	; (800306c <__NVIC_SetPriority+0xd4>)
 8002fee:	1dfb      	adds	r3, r7, #7
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	33c0      	adds	r3, #192	; 0xc0
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ffe:	e031      	b.n	8003064 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <__NVIC_SetPriority+0xd8>)
 8003002:	1dfb      	adds	r3, r7, #7
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	0019      	movs	r1, r3
 8003008:	230f      	movs	r3, #15
 800300a:	400b      	ands	r3, r1
 800300c:	3b08      	subs	r3, #8
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3306      	adds	r3, #6
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	18d3      	adds	r3, r2, r3
 8003016:	3304      	adds	r3, #4
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1dfa      	adds	r2, r7, #7
 800301c:	7812      	ldrb	r2, [r2, #0]
 800301e:	0011      	movs	r1, r2
 8003020:	2203      	movs	r2, #3
 8003022:	400a      	ands	r2, r1
 8003024:	00d2      	lsls	r2, r2, #3
 8003026:	21ff      	movs	r1, #255	; 0xff
 8003028:	4091      	lsls	r1, r2
 800302a:	000a      	movs	r2, r1
 800302c:	43d2      	mvns	r2, r2
 800302e:	401a      	ands	r2, r3
 8003030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	22ff      	movs	r2, #255	; 0xff
 8003038:	401a      	ands	r2, r3
 800303a:	1dfb      	adds	r3, r7, #7
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	0018      	movs	r0, r3
 8003040:	2303      	movs	r3, #3
 8003042:	4003      	ands	r3, r0
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003048:	4809      	ldr	r0, [pc, #36]	; (8003070 <__NVIC_SetPriority+0xd8>)
 800304a:	1dfb      	adds	r3, r7, #7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	001c      	movs	r4, r3
 8003050:	230f      	movs	r3, #15
 8003052:	4023      	ands	r3, r4
 8003054:	3b08      	subs	r3, #8
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	430a      	orrs	r2, r1
 800305a:	3306      	adds	r3, #6
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	18c3      	adds	r3, r0, r3
 8003060:	3304      	adds	r3, #4
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b003      	add	sp, #12
 800306a:	bd90      	pop	{r4, r7, pc}
 800306c:	e000e100 	.word	0xe000e100
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	045b      	lsls	r3, r3, #17
 8003084:	429a      	cmp	r2, r3
 8003086:	d301      	bcc.n	800308c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003088:	2301      	movs	r3, #1
 800308a:	e010      	b.n	80030ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <SysTick_Config+0x44>)
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	3a01      	subs	r2, #1
 8003092:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003094:	2301      	movs	r3, #1
 8003096:	425b      	negs	r3, r3
 8003098:	2103      	movs	r1, #3
 800309a:	0018      	movs	r0, r3
 800309c:	f7ff ff7c 	bl	8002f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <SysTick_Config+0x44>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <SysTick_Config+0x44>)
 80030a8:	2207      	movs	r2, #7
 80030aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	e000e010 	.word	0xe000e010

080030bc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	210f      	movs	r1, #15
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	1c02      	adds	r2, r0, #0
 80030cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	187b      	adds	r3, r7, r1
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	0011      	movs	r1, r2
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff ff5d 	bl	8002f98 <__NVIC_SetPriority>
}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b004      	add	sp, #16
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	0002      	movs	r2, r0
 80030ee:	1dfb      	adds	r3, r7, #7
 80030f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b25b      	sxtb	r3, r3
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff ff33 	bl	8002f64 <__NVIC_EnableIRQ>
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff ffaf 	bl	8003074 <SysTick_Config>
 8003116:	0003      	movs	r3, r0
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e077      	b.n	8003222 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a3d      	ldr	r2, [pc, #244]	; (800322c <HAL_DMA_Init+0x10c>)
 8003138:	4694      	mov	ip, r2
 800313a:	4463      	add	r3, ip
 800313c:	2114      	movs	r1, #20
 800313e:	0018      	movs	r0, r3
 8003140:	f7fc ffde 	bl	8000100 <__udivsi3>
 8003144:	0003      	movs	r3, r0
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2225      	movs	r2, #37	; 0x25
 8003150:	2102      	movs	r1, #2
 8003152:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4934      	ldr	r1, [pc, #208]	; (8003230 <HAL_DMA_Init+0x110>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	0018      	movs	r0, r3
 800319e:	f000 fa8d 	bl	80036bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	01db      	lsls	r3, r3, #7
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d102      	bne.n	80031b4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	213f      	movs	r1, #63	; 0x3f
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80031ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <HAL_DMA_Init+0xd8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d80d      	bhi.n	80031f8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 fa98 	bl	8003714 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	e008      	b.n	800320a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2225      	movs	r2, #37	; 0x25
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2224      	movs	r2, #36	; 0x24
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	bffdfff8 	.word	0xbffdfff8
 8003230:	ffff800f 	.word	0xffff800f

08003234 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2317      	movs	r3, #23
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2224      	movs	r2, #36	; 0x24
 800324e:	5c9b      	ldrb	r3, [r3, r2]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_DMA_Start_IT+0x24>
 8003254:	2302      	movs	r3, #2
 8003256:	e06f      	b.n	8003338 <HAL_DMA_Start_IT+0x104>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	2101      	movs	r1, #1
 800325e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2225      	movs	r2, #37	; 0x25
 8003264:	5c9b      	ldrb	r3, [r3, r2]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d157      	bne.n	800331c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2225      	movs	r2, #37	; 0x25
 8003270:	2102      	movs	r1, #2
 8003272:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	438a      	bics	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f9d3 	bl	800363c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	210e      	movs	r1, #14
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00f      	b.n	80032d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2104      	movs	r1, #4
 80032bc:	438a      	bics	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	210a      	movs	r1, #10
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	025b      	lsls	r3, r3, #9
 80032da:	4013      	ands	r3, r2
 80032dc:	d008      	beq.n	80032f0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	2180      	movs	r1, #128	; 0x80
 80032ea:	0049      	lsls	r1, r1, #1
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	0049      	lsls	r1, r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2101      	movs	r1, #1
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e00a      	b.n	8003332 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2224      	movs	r2, #36	; 0x24
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800332a:	2317      	movs	r3, #23
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003332:	2317      	movs	r3, #23
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	781b      	ldrb	r3, [r3, #0]
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e050      	b.n	80033f4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2225      	movs	r2, #37	; 0x25
 8003356:	5c9b      	ldrb	r3, [r3, r2]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d008      	beq.n	8003370 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	2100      	movs	r1, #0
 800336a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e041      	b.n	80033f4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	210e      	movs	r1, #14
 800337c:	438a      	bics	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	491c      	ldr	r1, [pc, #112]	; (80033fc <HAL_DMA_Abort+0xbc>)
 800338c:	400a      	ands	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2101      	movs	r1, #1
 800339c:	438a      	bics	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_DMA_Abort+0xc0>)
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	221c      	movs	r2, #28
 80033aa:	4013      	ands	r3, r2
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_DMA_Abort+0xc0>)
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00c      	beq.n	80033e2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	490a      	ldr	r1, [pc, #40]	; (80033fc <HAL_DMA_Abort+0xbc>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80033e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2225      	movs	r2, #37	; 0x25
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2224      	movs	r2, #36	; 0x24
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	fffffeff 	.word	0xfffffeff
 8003400:	40020000 	.word	0x40020000

08003404 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800340c:	210f      	movs	r1, #15
 800340e:	187b      	adds	r3, r7, r1
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2225      	movs	r2, #37	; 0x25
 8003418:	5c9b      	ldrb	r3, [r3, r2]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d006      	beq.n	800342e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2204      	movs	r2, #4
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003426:	187b      	adds	r3, r7, r1
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e049      	b.n	80034c2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	210e      	movs	r1, #14
 800343a:	438a      	bics	r2, r1
 800343c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	491d      	ldr	r1, [pc, #116]	; (80034d0 <HAL_DMA_Abort_IT+0xcc>)
 800345a:	400a      	ands	r2, r1
 800345c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_DMA_Abort_IT+0xd0>)
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	221c      	movs	r2, #28
 8003468:	4013      	ands	r3, r2
 800346a:	2201      	movs	r2, #1
 800346c:	409a      	lsls	r2, r3
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_DMA_Abort_IT+0xd0>)
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800347c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	490f      	ldr	r1, [pc, #60]	; (80034d0 <HAL_DMA_Abort_IT+0xcc>)
 8003492:	400a      	ands	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800349e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2225      	movs	r2, #37	; 0x25
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	2100      	movs	r1, #0
 80034ae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	0010      	movs	r0, r2
 80034c0:	4798      	blx	r3
    }
  }
  return status;
 80034c2:	230f      	movs	r3, #15
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	781b      	ldrb	r3, [r3, #0]
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	fffffeff 	.word	0xfffffeff
 80034d4:	40020000 	.word	0x40020000

080034d8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80034e0:	4b55      	ldr	r3, [pc, #340]	; (8003638 <HAL_DMA_IRQHandler+0x160>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	221c      	movs	r2, #28
 80034f4:	4013      	ands	r3, r2
 80034f6:	2204      	movs	r2, #4
 80034f8:	409a      	lsls	r2, r3
 80034fa:	0013      	movs	r3, r2
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	d027      	beq.n	8003552 <HAL_DMA_IRQHandler+0x7a>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2204      	movs	r2, #4
 8003506:	4013      	ands	r3, r2
 8003508:	d023      	beq.n	8003552 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2220      	movs	r2, #32
 8003512:	4013      	ands	r3, r2
 8003514:	d107      	bne.n	8003526 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2104      	movs	r1, #4
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003526:	4b44      	ldr	r3, [pc, #272]	; (8003638 <HAL_DMA_IRQHandler+0x160>)
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	221c      	movs	r2, #28
 8003530:	4013      	ands	r3, r2
 8003532:	2204      	movs	r2, #4
 8003534:	409a      	lsls	r2, r3
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <HAL_DMA_IRQHandler+0x160>)
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	2b00      	cmp	r3, #0
 8003542:	d100      	bne.n	8003546 <HAL_DMA_IRQHandler+0x6e>
 8003544:	e073      	b.n	800362e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	0010      	movs	r0, r2
 800354e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003550:	e06d      	b.n	800362e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	221c      	movs	r2, #28
 8003558:	4013      	ands	r3, r2
 800355a:	2202      	movs	r2, #2
 800355c:	409a      	lsls	r2, r3
 800355e:	0013      	movs	r3, r2
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4013      	ands	r3, r2
 8003564:	d02e      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xec>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d02a      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2220      	movs	r2, #32
 8003576:	4013      	ands	r3, r2
 8003578:	d10b      	bne.n	8003592 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	210a      	movs	r1, #10
 8003586:	438a      	bics	r2, r1
 8003588:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2225      	movs	r2, #37	; 0x25
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_DMA_IRQHandler+0x160>)
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	221c      	movs	r2, #28
 800359c:	4013      	ands	r3, r2
 800359e:	2202      	movs	r2, #2
 80035a0:	409a      	lsls	r2, r3
 80035a2:	4b25      	ldr	r3, [pc, #148]	; (8003638 <HAL_DMA_IRQHandler+0x160>)
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03a      	beq.n	800362e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	0010      	movs	r0, r2
 80035c0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80035c2:	e034      	b.n	800362e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	221c      	movs	r2, #28
 80035ca:	4013      	ands	r3, r2
 80035cc:	2208      	movs	r2, #8
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4013      	ands	r3, r2
 80035d6:	d02b      	beq.n	8003630 <HAL_DMA_IRQHandler+0x158>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2208      	movs	r2, #8
 80035dc:	4013      	ands	r3, r2
 80035de:	d027      	beq.n	8003630 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	210e      	movs	r1, #14
 80035ec:	438a      	bics	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_DMA_IRQHandler+0x160>)
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	221c      	movs	r2, #28
 80035fa:	4013      	ands	r3, r2
 80035fc:	2201      	movs	r2, #1
 80035fe:	409a      	lsls	r2, r3
 8003600:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <HAL_DMA_IRQHandler+0x160>)
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2225      	movs	r2, #37	; 0x25
 8003610:	2101      	movs	r1, #1
 8003612:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	; 0x24
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	0010      	movs	r0, r2
 800362c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46c0      	nop			; (mov r8, r8)
}
 8003632:	46bd      	mov	sp, r7
 8003634:	b004      	add	sp, #16
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40020000 	.word	0x40020000

0800363c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003652:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003664:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <DMA_SetConfig+0x7c>)
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	221c      	movs	r2, #28
 8003670:	4013      	ands	r3, r2
 8003672:	2201      	movs	r2, #1
 8003674:	409a      	lsls	r2, r3
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <DMA_SetConfig+0x7c>)
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b10      	cmp	r3, #16
 800368a:	d108      	bne.n	800369e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800369c:	e007      	b.n	80036ae <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	60da      	str	r2, [r3, #12]
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	40020000 	.word	0x40020000

080036bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	4a10      	ldr	r2, [pc, #64]	; (800370c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80036cc:	4694      	mov	ip, r2
 80036ce:	4463      	add	r3, ip
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	001a      	movs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	001a      	movs	r2, r3
 80036de:	23ff      	movs	r3, #255	; 0xff
 80036e0:	4013      	ands	r3, r2
 80036e2:	3b08      	subs	r3, #8
 80036e4:	2114      	movs	r1, #20
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fc fd0a 	bl	8000100 <__udivsi3>
 80036ec:	0003      	movs	r3, r0
 80036ee:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a07      	ldr	r2, [pc, #28]	; (8003710 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80036f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	221f      	movs	r2, #31
 80036fa:	4013      	ands	r3, r2
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b004      	add	sp, #16
 800370a:	bd80      	pop	{r7, pc}
 800370c:	10008200 	.word	0x10008200
 8003710:	40020880 	.word	0x40020880

08003714 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	223f      	movs	r2, #63	; 0x3f
 8003722:	4013      	ands	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800372a:	4694      	mov	ip, r2
 800372c:	4463      	add	r3, ip
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	001a      	movs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a07      	ldr	r2, [pc, #28]	; (8003758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800373a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3b01      	subs	r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	4013      	ands	r3, r2
 8003744:	2201      	movs	r2, #1
 8003746:	409a      	lsls	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}
 8003754:	1000823f 	.word	0x1000823f
 8003758:	40020940 	.word	0x40020940

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376a:	e147      	b.n	80039fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4091      	lsls	r1, r2
 8003776:	000a      	movs	r2, r1
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d100      	bne.n	8003784 <HAL_GPIO_Init+0x28>
 8003782:	e138      	b.n	80039f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	4013      	ands	r3, r2
 800378c:	2b01      	cmp	r3, #1
 800378e:	d005      	beq.n	800379c <HAL_GPIO_Init+0x40>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2203      	movs	r2, #3
 8003796:	4013      	ands	r3, r2
 8003798:	2b02      	cmp	r3, #2
 800379a:	d130      	bne.n	80037fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	409a      	lsls	r2, r3
 80037aa:	0013      	movs	r3, r2
 80037ac:	43da      	mvns	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	0013      	movs	r3, r2
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037d2:	2201      	movs	r2, #1
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	409a      	lsls	r2, r3
 80037d8:	0013      	movs	r3, r2
 80037da:	43da      	mvns	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	2201      	movs	r2, #1
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2203      	movs	r2, #3
 8003804:	4013      	ands	r3, r2
 8003806:	2b03      	cmp	r3, #3
 8003808:	d017      	beq.n	800383a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	43da      	mvns	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	0013      	movs	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	4013      	ands	r3, r2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d123      	bne.n	800388e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	58d3      	ldr	r3, [r2, r3]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2207      	movs	r2, #7
 8003858:	4013      	ands	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	409a      	lsls	r2, r3
 8003860:	0013      	movs	r3, r2
 8003862:	43da      	mvns	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2107      	movs	r1, #7
 8003872:	400b      	ands	r3, r1
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	409a      	lsls	r2, r3
 8003878:	0013      	movs	r3, r2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	6939      	ldr	r1, [r7, #16]
 800388c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	409a      	lsls	r2, r3
 800389c:	0013      	movs	r3, r2
 800389e:	43da      	mvns	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2203      	movs	r2, #3
 80038ac:	401a      	ands	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	0013      	movs	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	23c0      	movs	r3, #192	; 0xc0
 80038c8:	029b      	lsls	r3, r3, #10
 80038ca:	4013      	ands	r3, r2
 80038cc:	d100      	bne.n	80038d0 <HAL_GPIO_Init+0x174>
 80038ce:	e092      	b.n	80039f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80038d0:	4a50      	ldr	r2, [pc, #320]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3318      	adds	r3, #24
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2203      	movs	r2, #3
 80038e2:	4013      	ands	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	220f      	movs	r2, #15
 80038e8:	409a      	lsls	r2, r3
 80038ea:	0013      	movs	r3, r2
 80038ec:	43da      	mvns	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	23a0      	movs	r3, #160	; 0xa0
 80038f8:	05db      	lsls	r3, r3, #23
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_Init+0x1ca>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a45      	ldr	r2, [pc, #276]	; (8003a18 <HAL_GPIO_Init+0x2bc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_Init+0x1c6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a44      	ldr	r2, [pc, #272]	; (8003a1c <HAL_GPIO_Init+0x2c0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_Init+0x1c2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a43      	ldr	r2, [pc, #268]	; (8003a20 <HAL_GPIO_Init+0x2c4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_Init+0x1be>
 8003916:	2303      	movs	r3, #3
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x1cc>
 800391a:	2305      	movs	r3, #5
 800391c:	e004      	b.n	8003928 <HAL_GPIO_Init+0x1cc>
 800391e:	2302      	movs	r3, #2
 8003920:	e002      	b.n	8003928 <HAL_GPIO_Init+0x1cc>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_GPIO_Init+0x1cc>
 8003926:	2300      	movs	r3, #0
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	2103      	movs	r1, #3
 800392c:	400a      	ands	r2, r1
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	4093      	lsls	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003938:	4936      	ldr	r1, [pc, #216]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3318      	adds	r3, #24
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003946:	4a33      	ldr	r2, [pc, #204]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	58d3      	ldr	r3, [r2, r3]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43da      	mvns	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	025b      	lsls	r3, r3, #9
 8003960:	4013      	ands	r3, r2
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800396c:	4929      	ldr	r1, [pc, #164]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 8003976:	2384      	movs	r3, #132	; 0x84
 8003978:	58d3      	ldr	r3, [r2, r3]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	029b      	lsls	r3, r3, #10
 800398e:	4013      	ands	r3, r2
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800399a:	491e      	ldr	r1, [pc, #120]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 800399c:	2284      	movs	r2, #132	; 0x84
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	035b      	lsls	r3, r3, #13
 80039ba:	4013      	ands	r3, r2
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43da      	mvns	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	039b      	lsls	r3, r3, #14
 80039e4:	4013      	ands	r3, r2
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_GPIO_Init+0x2b8>)
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3301      	adds	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	40da      	lsrs	r2, r3
 8003a04:	1e13      	subs	r3, r2, #0
 8003a06:	d000      	beq.n	8003a0a <HAL_GPIO_Init+0x2ae>
 8003a08:	e6b0      	b.n	800376c <HAL_GPIO_Init+0x10>
  }
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b006      	add	sp, #24
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021800 	.word	0x40021800
 8003a18:	50000400 	.word	0x50000400
 8003a1c:	50000800 	.word	0x50000800
 8003a20:	50000c00 	.word	0x50000c00

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	0008      	movs	r0, r1
 8003a2e:	0011      	movs	r1, r2
 8003a30:	1cbb      	adds	r3, r7, #2
 8003a32:	1c02      	adds	r2, r0, #0
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	1c7b      	adds	r3, r7, #1
 8003a38:	1c0a      	adds	r2, r1, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a3c:	1c7b      	adds	r3, r7, #1
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a44:	1cbb      	adds	r3, r7, #2
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4c:	e003      	b.n	8003a56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4e:	1cbb      	adds	r3, r7, #2
 8003a50:	881a      	ldrh	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	000a      	movs	r2, r1
 8003a68:	1cbb      	adds	r3, r7, #2
 8003a6a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a72:	1cbb      	adds	r3, r7, #2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	041a      	lsls	r2, r3, #16
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	1cb9      	adds	r1, r7, #2
 8003a82:	8809      	ldrh	r1, [r1, #0]
 8003a84:	400b      	ands	r3, r1
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	2380      	movs	r3, #128	; 0x80
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d11f      	bne.n	8003af8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	0013      	movs	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	4912      	ldr	r1, [pc, #72]	; (8003b10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f7fc fb1a 	bl	8000100 <__udivsi3>
 8003acc:	0003      	movs	r3, r0
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ad2:	e008      	b.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e001      	b.n	8003ae6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e009      	b.n	8003afa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	401a      	ands	r2, r3
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d0ed      	beq.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	40007000 	.word	0x40007000
 8003b08:	fffff9ff 	.word	0xfffff9ff
 8003b0c:	20000004 	.word	0x20000004
 8003b10:	000f4240 	.word	0x000f4240

08003b14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	23e0      	movs	r3, #224	; 0xe0
 8003b1e:	01db      	lsls	r3, r3, #7
 8003b20:	4013      	ands	r3, r2
}
 8003b22:	0018      	movs	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e2f9      	b.n	8004132 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2201      	movs	r2, #1
 8003b44:	4013      	ands	r3, r2
 8003b46:	d100      	bne.n	8003b4a <HAL_RCC_OscConfig+0x1e>
 8003b48:	e07c      	b.n	8003c44 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4a:	4bc3      	ldr	r3, [pc, #780]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2238      	movs	r2, #56	; 0x38
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b54:	4bc0      	ldr	r3, [pc, #768]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_OscConfig+0x3e>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d002      	beq.n	8003b70 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	4bb9      	ldr	r3, [pc, #740]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	029b      	lsls	r3, r3, #10
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d062      	beq.n	8003c42 <HAL_RCC_OscConfig+0x116>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d15e      	bne.n	8003c42 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e2d4      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	025b      	lsls	r3, r3, #9
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x78>
 8003b94:	4bb0      	ldr	r3, [pc, #704]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4baf      	ldr	r3, [pc, #700]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	2180      	movs	r1, #128	; 0x80
 8003b9c:	0249      	lsls	r1, r1, #9
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e020      	b.n	8003be6 <HAL_RCC_OscConfig+0xba>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	23a0      	movs	r3, #160	; 0xa0
 8003baa:	02db      	lsls	r3, r3, #11
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d10e      	bne.n	8003bce <HAL_RCC_OscConfig+0xa2>
 8003bb0:	4ba9      	ldr	r3, [pc, #676]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4ba8      	ldr	r3, [pc, #672]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	02c9      	lsls	r1, r1, #11
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4ba6      	ldr	r3, [pc, #664]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4ba5      	ldr	r3, [pc, #660]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0249      	lsls	r1, r1, #9
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCC_OscConfig+0xba>
 8003bce:	4ba2      	ldr	r3, [pc, #648]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4ba1      	ldr	r3, [pc, #644]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bd4:	49a1      	ldr	r1, [pc, #644]	; (8003e5c <HAL_RCC_OscConfig+0x330>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	4b9f      	ldr	r3, [pc, #636]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b9e      	ldr	r3, [pc, #632]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003be0:	499f      	ldr	r1, [pc, #636]	; (8003e60 <HAL_RCC_OscConfig+0x334>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d014      	beq.n	8003c18 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7ff f975 	bl	8002edc <HAL_GetTick>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7ff f970 	bl	8002edc <HAL_GetTick>
 8003bfc:	0002      	movs	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e293      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c0a:	4b93      	ldr	r3, [pc, #588]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	029b      	lsls	r3, r3, #10
 8003c12:	4013      	ands	r3, r2
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xcc>
 8003c16:	e015      	b.n	8003c44 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7ff f960 	bl	8002edc <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c22:	f7ff f95b 	bl	8002edc <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e27e      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c34:	4b88      	ldr	r3, [pc, #544]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0xf6>
 8003c40:	e000      	b.n	8003c44 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d100      	bne.n	8003c50 <HAL_RCC_OscConfig+0x124>
 8003c4e:	e099      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c50:	4b81      	ldr	r3, [pc, #516]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2238      	movs	r2, #56	; 0x38
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	4013      	ands	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_OscConfig+0x144>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d002      	beq.n	8003c76 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d135      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c76:	4b78      	ldr	r3, [pc, #480]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x162>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e251      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4a74      	ldr	r2, [pc, #464]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	021a      	lsls	r2, r3, #8
 8003c9e:	4b6e      	ldr	r3, [pc, #440]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d112      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003caa:	4b6b      	ldr	r3, [pc, #428]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6e      	ldr	r2, [pc, #440]	; (8003e68 <HAL_RCC_OscConfig+0x33c>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0adb      	lsrs	r3, r3, #11
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	4a68      	ldr	r2, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x340>)
 8003cca:	40da      	lsrs	r2, r3
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x344>)
 8003cce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cd0:	4b68      	ldr	r3, [pc, #416]	; (8003e74 <HAL_RCC_OscConfig+0x348>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff f8a5 	bl	8002e24 <HAL_InitTick>
 8003cda:	1e03      	subs	r3, r0, #0
 8003cdc:	d051      	beq.n	8003d82 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e227      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d030      	beq.n	8003d4c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003cea:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a5e      	ldr	r2, [pc, #376]	; (8003e68 <HAL_RCC_OscConfig+0x33c>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	4b57      	ldr	r3, [pc, #348]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003cfe:	4b56      	ldr	r3, [pc, #344]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b55      	ldr	r3, [pc, #340]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0049      	lsls	r1, r1, #1
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7ff f8e6 	bl	8002edc <HAL_GetTick>
 8003d10:	0003      	movs	r3, r0
 8003d12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d16:	f7ff f8e1 	bl	8002edc <HAL_GetTick>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e204      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d28:	4b4b      	ldr	r3, [pc, #300]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d34:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <HAL_RCC_OscConfig+0x338>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	021a      	lsls	r2, r3, #8
 8003d44:	4b44      	ldr	r3, [pc, #272]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	e01b      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d52:	4949      	ldr	r1, [pc, #292]	; (8003e78 <HAL_RCC_OscConfig+0x34c>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7ff f8c0 	bl	8002edc <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d62:	f7ff f8bb 	bl	8002edc <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1de      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x236>
 8003d80:	e000      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d047      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d8e:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2238      	movs	r2, #56	; 0x38
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b18      	cmp	r3, #24
 8003d98:	d10a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d9a:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	d03c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d138      	bne.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e1c0      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d019      	beq.n	8003dec <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003dba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dbc:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7ff f88a 	bl	8002edc <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dce:	f7ff f885 	bl	8002edc <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1a8      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de4:	2202      	movs	r2, #2
 8003de6:	4013      	ands	r3, r2
 8003de8:	d0f1      	beq.n	8003dce <HAL_RCC_OscConfig+0x2a2>
 8003dea:	e018      	b.n	8003e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003dee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003df2:	2101      	movs	r1, #1
 8003df4:	438a      	bics	r2, r1
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7ff f870 	bl	8002edc <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e02:	f7ff f86b 	bl	8002edc <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e18e      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	2202      	movs	r2, #2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d1f1      	bne.n	8003e02 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2204      	movs	r2, #4
 8003e24:	4013      	ands	r3, r2
 8003e26:	d100      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2fe>
 8003e28:	e0c6      	b.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	231f      	movs	r3, #31
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2238      	movs	r2, #56	; 0x38
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d11e      	bne.n	8003e7c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_OscConfig+0x32c>)
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	2202      	movs	r2, #2
 8003e44:	4013      	ands	r3, r2
 8003e46:	d100      	bne.n	8003e4a <HAL_RCC_OscConfig+0x31e>
 8003e48:	e0b6      	b.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d000      	beq.n	8003e54 <HAL_RCC_OscConfig+0x328>
 8003e52:	e0b1      	b.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e16c      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	fffeffff 	.word	0xfffeffff
 8003e60:	fffbffff 	.word	0xfffbffff
 8003e64:	ffff80ff 	.word	0xffff80ff
 8003e68:	ffffc7ff 	.word	0xffffc7ff
 8003e6c:	00f42400 	.word	0x00f42400
 8003e70:	20000004 	.word	0x20000004
 8003e74:	20000008 	.word	0x20000008
 8003e78:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e7c:	4baf      	ldr	r3, [pc, #700]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	055b      	lsls	r3, r3, #21
 8003e84:	4013      	ands	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_OscConfig+0x360>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x362>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d011      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4baa      	ldr	r3, [pc, #680]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e96:	4ba9      	ldr	r3, [pc, #676]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0549      	lsls	r1, r1, #21
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ea0:	4ba6      	ldr	r3, [pc, #664]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	055b      	lsls	r3, r3, #21
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003eae:	231f      	movs	r3, #31
 8003eb0:	18fb      	adds	r3, r7, r3
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb6:	4ba2      	ldr	r3, [pc, #648]	; (8004140 <HAL_RCC_OscConfig+0x614>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d11a      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec2:	4b9f      	ldr	r3, [pc, #636]	; (8004140 <HAL_RCC_OscConfig+0x614>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b9e      	ldr	r3, [pc, #632]	; (8004140 <HAL_RCC_OscConfig+0x614>)
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	0049      	lsls	r1, r1, #1
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003ed0:	f7ff f804 	bl	8002edc <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eda:	f7fe ffff 	bl	8002edc <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e122      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eec:	4b94      	ldr	r3, [pc, #592]	; (8004140 <HAL_RCC_OscConfig+0x614>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d106      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3e2>
 8003f00:	4b8e      	ldr	r3, [pc, #568]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f04:	4b8d      	ldr	r3, [pc, #564]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f06:	2101      	movs	r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f0c:	e01c      	b.n	8003f48 <HAL_RCC_OscConfig+0x41c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x404>
 8003f16:	4b89      	ldr	r3, [pc, #548]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f1a:	4b88      	ldr	r3, [pc, #544]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f22:	4b86      	ldr	r3, [pc, #536]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f26:	4b85      	ldr	r3, [pc, #532]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f28:	2101      	movs	r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0x41c>
 8003f30:	4b82      	ldr	r3, [pc, #520]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f34:	4b81      	ldr	r3, [pc, #516]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	438a      	bics	r2, r1
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f3c:	4b7f      	ldr	r3, [pc, #508]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f40:	4b7e      	ldr	r3, [pc, #504]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f42:	2104      	movs	r1, #4
 8003f44:	438a      	bics	r2, r1
 8003f46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d014      	beq.n	8003f7a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe ffc4 	bl	8002edc <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f58:	e009      	b.n	8003f6e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5a:	f7fe ffbf 	bl	8002edc <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	4a77      	ldr	r2, [pc, #476]	; (8004144 <HAL_RCC_OscConfig+0x618>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0e1      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6e:	4b73      	ldr	r3, [pc, #460]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	2202      	movs	r2, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x42e>
 8003f78:	e013      	b.n	8003fa2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe ffaf 	bl	8002edc <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f82:	e009      	b.n	8003f98 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fe ffaa 	bl	8002edc <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	4a6d      	ldr	r2, [pc, #436]	; (8004144 <HAL_RCC_OscConfig+0x618>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e0cc      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f98:	4b68      	ldr	r3, [pc, #416]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003fa2:	231f      	movs	r3, #31
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d105      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003fac:	4b63      	ldr	r3, [pc, #396]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb0:	4b62      	ldr	r3, [pc, #392]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003fb2:	4965      	ldr	r1, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x61c>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d100      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x496>
 8003fc0:	e0b6      	b.n	8004130 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fc2:	4b5e      	ldr	r3, [pc, #376]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2238      	movs	r2, #56	; 0x38
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d100      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4a4>
 8003fce:	e07e      	b.n	80040ce <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d153      	bne.n	8004080 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b58      	ldr	r3, [pc, #352]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b57      	ldr	r3, [pc, #348]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8003fde:	495b      	ldr	r1, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x620>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe ff7a 	bl	8002edc <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe ff75 	bl	8002edc <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e098      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004000:	4b4e      	ldr	r3, [pc, #312]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	049b      	lsls	r3, r3, #18
 8004008:	4013      	ands	r3, r2
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b4b      	ldr	r3, [pc, #300]	; (800413c <HAL_RCC_OscConfig+0x610>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a4f      	ldr	r2, [pc, #316]	; (8004150 <HAL_RCC_OscConfig+0x624>)
 8004012:	4013      	ands	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	021b      	lsls	r3, r3, #8
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	431a      	orrs	r2, r3
 8004034:	4b41      	ldr	r3, [pc, #260]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8004036:	430a      	orrs	r2, r1
 8004038:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403a:	4b40      	ldr	r3, [pc, #256]	; (800413c <HAL_RCC_OscConfig+0x610>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b3f      	ldr	r3, [pc, #252]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	0449      	lsls	r1, r1, #17
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004048:	4b3c      	ldr	r3, [pc, #240]	; (800413c <HAL_RCC_OscConfig+0x610>)
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	4b3b      	ldr	r3, [pc, #236]	; (800413c <HAL_RCC_OscConfig+0x610>)
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	0549      	lsls	r1, r1, #21
 8004052:	430a      	orrs	r2, r1
 8004054:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fe ff41 	bl	8002edc <HAL_GetTick>
 800405a:	0003      	movs	r3, r0
 800405c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe ff3c 	bl	8002edc <HAL_GetTick>
 8004064:	0002      	movs	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e05f      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004072:	4b32      	ldr	r3, [pc, #200]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	049b      	lsls	r3, r3, #18
 800407a:	4013      	ands	r3, r2
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x534>
 800407e:	e057      	b.n	8004130 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b2d      	ldr	r3, [pc, #180]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8004086:	4931      	ldr	r1, [pc, #196]	; (800414c <HAL_RCC_OscConfig+0x620>)
 8004088:	400a      	ands	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800408c:	4b2b      	ldr	r3, [pc, #172]	; (800413c <HAL_RCC_OscConfig+0x610>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4b2a      	ldr	r3, [pc, #168]	; (800413c <HAL_RCC_OscConfig+0x610>)
 8004092:	2103      	movs	r1, #3
 8004094:	438a      	bics	r2, r1
 8004096:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004098:	4b28      	ldr	r3, [pc, #160]	; (800413c <HAL_RCC_OscConfig+0x610>)
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_RCC_OscConfig+0x610>)
 800409e:	492d      	ldr	r1, [pc, #180]	; (8004154 <HAL_RCC_OscConfig+0x628>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fe ff1a 	bl	8002edc <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fe ff15 	bl	8002edc <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e038      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCC_OscConfig+0x610>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	4013      	ands	r3, r2
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x582>
 80040cc:	e030      	b.n	8004130 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e02b      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_RCC_OscConfig+0x610>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2203      	movs	r2, #3
 80040e4:	401a      	ands	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d11e      	bne.n	800412c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2270      	movs	r2, #112	; 0x70
 80040f2:	401a      	ands	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d117      	bne.n	800412c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	23fe      	movs	r3, #254	; 0xfe
 8004100:	01db      	lsls	r3, r3, #7
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d10e      	bne.n	800412c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	23f8      	movs	r3, #248	; 0xf8
 8004112:	039b      	lsls	r3, r3, #14
 8004114:	401a      	ands	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d106      	bne.n	800412c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	0f5b      	lsrs	r3, r3, #29
 8004122:	075a      	lsls	r2, r3, #29
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	0018      	movs	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	b008      	add	sp, #32
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	40021000 	.word	0x40021000
 8004140:	40007000 	.word	0x40007000
 8004144:	00001388 	.word	0x00001388
 8004148:	efffffff 	.word	0xefffffff
 800414c:	feffffff 	.word	0xfeffffff
 8004150:	1fc1808c 	.word	0x1fc1808c
 8004154:	effeffff 	.word	0xeffeffff

08004158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0e9      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b76      	ldr	r3, [pc, #472]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2207      	movs	r2, #7
 8004172:	4013      	ands	r3, r2
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d91e      	bls.n	80041b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b73      	ldr	r3, [pc, #460]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2207      	movs	r2, #7
 8004180:	4393      	bics	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	4b70      	ldr	r3, [pc, #448]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800418c:	f7fe fea6 	bl	8002edc <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004194:	e009      	b.n	80041aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004196:	f7fe fea1 	bl	8002edc <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	4a6a      	ldr	r2, [pc, #424]	; (800434c <HAL_RCC_ClockConfig+0x1f4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0ca      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041aa:	4b67      	ldr	r3, [pc, #412]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2207      	movs	r2, #7
 80041b0:	4013      	ands	r3, r2
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1ee      	bne.n	8004196 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2202      	movs	r2, #2
 80041be:	4013      	ands	r3, r2
 80041c0:	d015      	beq.n	80041ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2204      	movs	r2, #4
 80041c8:	4013      	ands	r3, r2
 80041ca:	d006      	beq.n	80041da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041cc:	4b60      	ldr	r3, [pc, #384]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	4b5f      	ldr	r3, [pc, #380]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 80041d2:	21e0      	movs	r1, #224	; 0xe0
 80041d4:	01c9      	lsls	r1, r1, #7
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041da:	4b5d      	ldr	r3, [pc, #372]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4a5d      	ldr	r2, [pc, #372]	; (8004354 <HAL_RCC_ClockConfig+0x1fc>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	4b59      	ldr	r3, [pc, #356]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	4013      	ands	r3, r2
 80041f6:	d057      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	4013      	ands	r3, r2
 800420a:	d12b      	bne.n	8004264 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e097      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d107      	bne.n	8004228 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004218:	4b4d      	ldr	r3, [pc, #308]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	049b      	lsls	r3, r3, #18
 8004220:	4013      	ands	r3, r2
 8004222:	d11f      	bne.n	8004264 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e08b      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004230:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4013      	ands	r3, r2
 800423a:	d113      	bne.n	8004264 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e07f      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d106      	bne.n	8004256 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004248:	4b41      	ldr	r3, [pc, #260]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	2202      	movs	r2, #2
 800424e:	4013      	ands	r3, r2
 8004250:	d108      	bne.n	8004264 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e074      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	2202      	movs	r2, #2
 800425c:	4013      	ands	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e06d      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004264:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2207      	movs	r2, #7
 800426a:	4393      	bics	r3, r2
 800426c:	0019      	movs	r1, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	4b37      	ldr	r3, [pc, #220]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 8004274:	430a      	orrs	r2, r1
 8004276:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004278:	f7fe fe30 	bl	8002edc <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004280:	e009      	b.n	8004296 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004282:	f7fe fe2b 	bl	8002edc <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <HAL_RCC_ClockConfig+0x1f4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e054      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b2e      	ldr	r3, [pc, #184]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2238      	movs	r2, #56	; 0x38
 800429c:	401a      	ands	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1ec      	bne.n	8004282 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a8:	4b27      	ldr	r3, [pc, #156]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2207      	movs	r2, #7
 80042ae:	4013      	ands	r3, r2
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d21e      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2207      	movs	r2, #7
 80042bc:	4393      	bics	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	4b21      	ldr	r3, [pc, #132]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042c8:	f7fe fe08 	bl	8002edc <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042d0:	e009      	b.n	80042e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d2:	f7fe fe03 	bl	8002edc <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_RCC_ClockConfig+0x1f4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e02c      	b.n	8004340 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2207      	movs	r2, #7
 80042ec:	4013      	ands	r3, r2
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1ee      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2204      	movs	r2, #4
 80042fa:	4013      	ands	r3, r2
 80042fc:	d009      	beq.n	8004312 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80042fe:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <HAL_RCC_ClockConfig+0x200>)
 8004304:	4013      	ands	r3, r2
 8004306:	0019      	movs	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800430e:	430a      	orrs	r2, r1
 8004310:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004312:	f000 f829 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8004316:	0001      	movs	r1, r0
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	220f      	movs	r2, #15
 8004320:	401a      	ands	r2, r3
 8004322:	4b0e      	ldr	r3, [pc, #56]	; (800435c <HAL_RCC_ClockConfig+0x204>)
 8004324:	0092      	lsls	r2, r2, #2
 8004326:	58d3      	ldr	r3, [r2, r3]
 8004328:	221f      	movs	r2, #31
 800432a:	4013      	ands	r3, r2
 800432c:	000a      	movs	r2, r1
 800432e:	40da      	lsrs	r2, r3
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_ClockConfig+0x208>)
 8004332:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCC_ClockConfig+0x20c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0018      	movs	r0, r3
 800433a:	f7fe fd73 	bl	8002e24 <HAL_InitTick>
 800433e:	0003      	movs	r3, r0
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b004      	add	sp, #16
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40022000 	.word	0x40022000
 800434c:	00001388 	.word	0x00001388
 8004350:	40021000 	.word	0x40021000
 8004354:	fffff0ff 	.word	0xfffff0ff
 8004358:	ffff8fff 	.word	0xffff8fff
 800435c:	080092a4 	.word	0x080092a4
 8004360:	20000004 	.word	0x20000004
 8004364:	20000008 	.word	0x20000008

08004368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800436e:	4b3c      	ldr	r3, [pc, #240]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2238      	movs	r2, #56	; 0x38
 8004374:	4013      	ands	r3, r2
 8004376:	d10f      	bne.n	8004398 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004378:	4b39      	ldr	r3, [pc, #228]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0adb      	lsrs	r3, r3, #11
 800437e:	2207      	movs	r2, #7
 8004380:	4013      	ands	r3, r2
 8004382:	2201      	movs	r2, #1
 8004384:	409a      	lsls	r2, r3
 8004386:	0013      	movs	r3, r2
 8004388:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	4835      	ldr	r0, [pc, #212]	; (8004464 <HAL_RCC_GetSysClockFreq+0xfc>)
 800438e:	f7fb feb7 	bl	8000100 <__udivsi3>
 8004392:	0003      	movs	r3, r0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	e05d      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004398:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2238      	movs	r2, #56	; 0x38
 800439e:	4013      	ands	r3, r2
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a4:	4b30      	ldr	r3, [pc, #192]	; (8004468 <HAL_RCC_GetSysClockFreq+0x100>)
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e054      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043aa:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2238      	movs	r2, #56	; 0x38
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d138      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80043b6:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2203      	movs	r2, #3
 80043bc:	4013      	ands	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043c0:	4b27      	ldr	r3, [pc, #156]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	2207      	movs	r2, #7
 80043c8:	4013      	ands	r3, r2
 80043ca:	3301      	adds	r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4824      	ldr	r0, [pc, #144]	; (8004468 <HAL_RCC_GetSysClockFreq+0x100>)
 80043d8:	f7fb fe92 	bl	8000100 <__udivsi3>
 80043dc:	0003      	movs	r3, r0
 80043de:	0019      	movs	r1, r3
 80043e0:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	227f      	movs	r2, #127	; 0x7f
 80043e8:	4013      	ands	r3, r2
 80043ea:	434b      	muls	r3, r1
 80043ec:	617b      	str	r3, [r7, #20]
        break;
 80043ee:	e00d      	b.n	800440c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	481c      	ldr	r0, [pc, #112]	; (8004464 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043f4:	f7fb fe84 	bl	8000100 <__udivsi3>
 80043f8:	0003      	movs	r3, r0
 80043fa:	0019      	movs	r1, r3
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	0a1b      	lsrs	r3, r3, #8
 8004402:	227f      	movs	r2, #127	; 0x7f
 8004404:	4013      	ands	r3, r2
 8004406:	434b      	muls	r3, r1
 8004408:	617b      	str	r3, [r7, #20]
        break;
 800440a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	0f5b      	lsrs	r3, r3, #29
 8004412:	2207      	movs	r2, #7
 8004414:	4013      	ands	r3, r2
 8004416:	3301      	adds	r3, #1
 8004418:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	6978      	ldr	r0, [r7, #20]
 800441e:	f7fb fe6f 	bl	8000100 <__udivsi3>
 8004422:	0003      	movs	r3, r0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	e015      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2238      	movs	r2, #56	; 0x38
 800442e:	4013      	ands	r3, r2
 8004430:	2b20      	cmp	r3, #32
 8004432:	d103      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800443c:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_RCC_GetSysClockFreq+0xf8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2238      	movs	r2, #56	; 0x38
 8004442:	4013      	ands	r3, r2
 8004444:	2b18      	cmp	r3, #24
 8004446:	d103      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004448:	23fa      	movs	r3, #250	; 0xfa
 800444a:	01db      	lsls	r3, r3, #7
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e001      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004454:	693b      	ldr	r3, [r7, #16]
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b006      	add	sp, #24
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	40021000 	.word	0x40021000
 8004464:	00f42400 	.word	0x00f42400
 8004468:	007a1200 	.word	0x007a1200

0800446c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004470:	4b02      	ldr	r3, [pc, #8]	; (800447c <HAL_RCC_GetHCLKFreq+0x10>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	20000004 	.word	0x20000004

08004480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004484:	f7ff fff2 	bl	800446c <HAL_RCC_GetHCLKFreq>
 8004488:	0004      	movs	r4, r0
 800448a:	f7ff fb43 	bl	8003b14 <LL_RCC_GetAPB1Prescaler>
 800448e:	0003      	movs	r3, r0
 8004490:	0b1a      	lsrs	r2, r3, #12
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004494:	0092      	lsls	r2, r2, #2
 8004496:	58d3      	ldr	r3, [r2, r3]
 8004498:	221f      	movs	r2, #31
 800449a:	4013      	ands	r3, r2
 800449c:	40dc      	lsrs	r4, r3
 800449e:	0023      	movs	r3, r4
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bdb0      	pop	{r4, r5, r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	080092e4 	.word	0x080092e4

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80044b4:	2313      	movs	r3, #19
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044bc:	2312      	movs	r3, #18
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	4013      	ands	r3, r2
 80044ce:	d100      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80044d0:	e0a3      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d2:	2011      	movs	r0, #17
 80044d4:	183b      	adds	r3, r7, r0
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044da:	4b86      	ldr	r3, [pc, #536]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044de:	2380      	movs	r3, #128	; 0x80
 80044e0:	055b      	lsls	r3, r3, #21
 80044e2:	4013      	ands	r3, r2
 80044e4:	d110      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e6:	4b83      	ldr	r3, [pc, #524]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ea:	4b82      	ldr	r3, [pc, #520]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	0549      	lsls	r1, r1, #21
 80044f0:	430a      	orrs	r2, r1
 80044f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80044f4:	4b7f      	ldr	r3, [pc, #508]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	055b      	lsls	r3, r3, #21
 80044fc:	4013      	ands	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004502:	183b      	adds	r3, r7, r0
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004508:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	0049      	lsls	r1, r1, #1
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004516:	f7fe fce1 	bl	8002edc <HAL_GetTick>
 800451a:	0003      	movs	r3, r0
 800451c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451e:	e00b      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f7fe fcdc 	bl	8002edc <HAL_GetTick>
 8004524:	0002      	movs	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d904      	bls.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800452e:	2313      	movs	r3, #19
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	2203      	movs	r2, #3
 8004534:	701a      	strb	r2, [r3, #0]
        break;
 8004536:	e005      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004538:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4013      	ands	r3, r2
 8004542:	d0ed      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004544:	2313      	movs	r3, #19
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d154      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800454e:	4b69      	ldr	r3, [pc, #420]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004550:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004552:	23c0      	movs	r3, #192	; 0xc0
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4013      	ands	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d019      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	429a      	cmp	r2, r3
 8004568:	d014      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800456a:	4b62      	ldr	r3, [pc, #392]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	4a63      	ldr	r2, [pc, #396]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004570:	4013      	ands	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004574:	4b5f      	ldr	r3, [pc, #380]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004578:	4b5e      	ldr	r3, [pc, #376]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	0249      	lsls	r1, r1, #9
 800457e:	430a      	orrs	r2, r1
 8004580:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004582:	4b5c      	ldr	r3, [pc, #368]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004586:	4b5b      	ldr	r3, [pc, #364]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004588:	495d      	ldr	r1, [pc, #372]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800458a:	400a      	ands	r2, r1
 800458c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800458e:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	d016      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe fc9e 	bl	8002edc <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a4:	e00c      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fe fc99 	bl	8002edc <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	4a54      	ldr	r2, [pc, #336]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d904      	bls.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80045b6:	2313      	movs	r3, #19
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	2203      	movs	r2, #3
 80045bc:	701a      	strb	r2, [r3, #0]
            break;
 80045be:	e004      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c0:	4b4c      	ldr	r3, [pc, #304]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c4:	2202      	movs	r2, #2
 80045c6:	4013      	ands	r3, r2
 80045c8:	d0ed      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80045ca:	2313      	movs	r3, #19
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d4:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	4a48      	ldr	r2, [pc, #288]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80045da:	4013      	ands	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	4b44      	ldr	r3, [pc, #272]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045e4:	430a      	orrs	r2, r1
 80045e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045e8:	e00c      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045ea:	2312      	movs	r3, #18
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	2213      	movs	r2, #19
 80045f0:	18ba      	adds	r2, r7, r2
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	e005      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	2312      	movs	r3, #18
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	2213      	movs	r2, #19
 80045fe:	18ba      	adds	r2, r7, r2
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004604:	2311      	movs	r3, #17
 8004606:	18fb      	adds	r3, r7, r3
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004612:	4b38      	ldr	r3, [pc, #224]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004614:	493c      	ldr	r1, [pc, #240]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004616:	400a      	ands	r2, r1
 8004618:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2201      	movs	r2, #1
 8004620:	4013      	ands	r3, r2
 8004622:	d009      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004624:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	2203      	movs	r2, #3
 800462a:	4393      	bics	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	4b30      	ldr	r3, [pc, #192]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004634:	430a      	orrs	r2, r1
 8004636:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2202      	movs	r2, #2
 800463e:	4013      	ands	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	220c      	movs	r2, #12
 8004648:	4393      	bics	r3, r2
 800464a:	0019      	movs	r1, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004652:	430a      	orrs	r2, r1
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2220      	movs	r2, #32
 800465c:	4013      	ands	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004660:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	4a29      	ldr	r2, [pc, #164]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	4013      	ands	r3, r2
 8004668:	0019      	movs	r1, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	4b21      	ldr	r3, [pc, #132]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004670:	430a      	orrs	r2, r1
 8004672:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	01db      	lsls	r3, r3, #7
 800467c:	4013      	ands	r3, r2
 800467e:	d015      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004680:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	0899      	lsrs	r1, r3, #2
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800468e:	430a      	orrs	r2, r1
 8004690:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	05db      	lsls	r3, r3, #23
 800469a:	429a      	cmp	r2, r3
 800469c:	d106      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	0249      	lsls	r1, r1, #9
 80046a8:	430a      	orrs	r2, r1
 80046aa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	4013      	ands	r3, r2
 80046b6:	d016      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046b8:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046be:	4013      	ands	r3, r2
 80046c0:	0019      	movs	r1, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046c8:	430a      	orrs	r2, r1
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	01db      	lsls	r3, r3, #7
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d106      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0249      	lsls	r1, r1, #9
 80046e2:	430a      	orrs	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046e6:	2312      	movs	r3, #18
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	781b      	ldrb	r3, [r3, #0]
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b006      	add	sp, #24
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
 80046fc:	fffffcff 	.word	0xfffffcff
 8004700:	fffeffff 	.word	0xfffeffff
 8004704:	00001388 	.word	0x00001388
 8004708:	efffffff 	.word	0xefffffff
 800470c:	ffffcfff 	.word	0xffffcfff
 8004710:	ffff3fff 	.word	0xffff3fff

08004714 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e04a      	b.n	80047bc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	223d      	movs	r2, #61	; 0x3d
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d107      	bne.n	8004742 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	223c      	movs	r2, #60	; 0x3c
 8004736:	2100      	movs	r1, #0
 8004738:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f7fe f9e3 	bl	8002b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	223d      	movs	r2, #61	; 0x3d
 8004746:	2102      	movs	r1, #2
 8004748:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	0019      	movs	r1, r3
 8004754:	0010      	movs	r0, r2
 8004756:	f000 fc01 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2248      	movs	r2, #72	; 0x48
 800475e:	2101      	movs	r1, #1
 8004760:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	223e      	movs	r2, #62	; 0x3e
 8004766:	2101      	movs	r1, #1
 8004768:	5499      	strb	r1, [r3, r2]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	223f      	movs	r2, #63	; 0x3f
 800476e:	2101      	movs	r1, #1
 8004770:	5499      	strb	r1, [r3, r2]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2240      	movs	r2, #64	; 0x40
 8004776:	2101      	movs	r1, #1
 8004778:	5499      	strb	r1, [r3, r2]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2241      	movs	r2, #65	; 0x41
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2242      	movs	r2, #66	; 0x42
 8004786:	2101      	movs	r1, #1
 8004788:	5499      	strb	r1, [r3, r2]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2243      	movs	r2, #67	; 0x43
 800478e:	2101      	movs	r1, #1
 8004790:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2244      	movs	r2, #68	; 0x44
 8004796:	2101      	movs	r1, #1
 8004798:	5499      	strb	r1, [r3, r2]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2245      	movs	r2, #69	; 0x45
 800479e:	2101      	movs	r1, #1
 80047a0:	5499      	strb	r1, [r3, r2]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2246      	movs	r2, #70	; 0x46
 80047a6:	2101      	movs	r1, #1
 80047a8:	5499      	strb	r1, [r3, r2]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2247      	movs	r2, #71	; 0x47
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	223d      	movs	r2, #61	; 0x3d
 80047b6:	2101      	movs	r1, #1
 80047b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	001a      	movs	r2, r3
 80047d2:	1cbb      	adds	r3, r7, #2
 80047d4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d108      	bne.n	80047ee <HAL_TIM_PWM_Start_DMA+0x2a>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	223e      	movs	r2, #62	; 0x3e
 80047e0:	5c9b      	ldrb	r3, [r3, r2]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3b02      	subs	r3, #2
 80047e6:	425a      	negs	r2, r3
 80047e8:	4153      	adcs	r3, r2
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e037      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x9a>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d108      	bne.n	8004806 <HAL_TIM_PWM_Start_DMA+0x42>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	223f      	movs	r2, #63	; 0x3f
 80047f8:	5c9b      	ldrb	r3, [r3, r2]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3b02      	subs	r3, #2
 80047fe:	425a      	negs	r2, r3
 8004800:	4153      	adcs	r3, r2
 8004802:	b2db      	uxtb	r3, r3
 8004804:	e02b      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x9a>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d108      	bne.n	800481e <HAL_TIM_PWM_Start_DMA+0x5a>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	5c9b      	ldrb	r3, [r3, r2]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3b02      	subs	r3, #2
 8004816:	425a      	negs	r2, r3
 8004818:	4153      	adcs	r3, r2
 800481a:	b2db      	uxtb	r3, r3
 800481c:	e01f      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x9a>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d108      	bne.n	8004836 <HAL_TIM_PWM_Start_DMA+0x72>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2241      	movs	r2, #65	; 0x41
 8004828:	5c9b      	ldrb	r3, [r3, r2]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	3b02      	subs	r3, #2
 800482e:	425a      	negs	r2, r3
 8004830:	4153      	adcs	r3, r2
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e013      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x9a>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b10      	cmp	r3, #16
 800483a:	d108      	bne.n	800484e <HAL_TIM_PWM_Start_DMA+0x8a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2242      	movs	r2, #66	; 0x42
 8004840:	5c9b      	ldrb	r3, [r3, r2]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3b02      	subs	r3, #2
 8004846:	425a      	negs	r2, r3
 8004848:	4153      	adcs	r3, r2
 800484a:	b2db      	uxtb	r3, r3
 800484c:	e007      	b.n	800485e <HAL_TIM_PWM_Start_DMA+0x9a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2243      	movs	r2, #67	; 0x43
 8004852:	5c9b      	ldrb	r3, [r3, r2]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	3b02      	subs	r3, #2
 8004858:	425a      	negs	r2, r3
 800485a:	4153      	adcs	r3, r2
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_TIM_PWM_Start_DMA+0xa2>
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
 8004864:	e182      	b.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x3a8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d108      	bne.n	800487e <HAL_TIM_PWM_Start_DMA+0xba>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	223e      	movs	r2, #62	; 0x3e
 8004870:	5c9b      	ldrb	r3, [r3, r2]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	425a      	negs	r2, r3
 8004878:	4153      	adcs	r3, r2
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e037      	b.n	80048ee <HAL_TIM_PWM_Start_DMA+0x12a>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d108      	bne.n	8004896 <HAL_TIM_PWM_Start_DMA+0xd2>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	223f      	movs	r2, #63	; 0x3f
 8004888:	5c9b      	ldrb	r3, [r3, r2]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	425a      	negs	r2, r3
 8004890:	4153      	adcs	r3, r2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e02b      	b.n	80048ee <HAL_TIM_PWM_Start_DMA+0x12a>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b08      	cmp	r3, #8
 800489a:	d108      	bne.n	80048ae <HAL_TIM_PWM_Start_DMA+0xea>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2240      	movs	r2, #64	; 0x40
 80048a0:	5c9b      	ldrb	r3, [r3, r2]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	425a      	negs	r2, r3
 80048a8:	4153      	adcs	r3, r2
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e01f      	b.n	80048ee <HAL_TIM_PWM_Start_DMA+0x12a>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d108      	bne.n	80048c6 <HAL_TIM_PWM_Start_DMA+0x102>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2241      	movs	r2, #65	; 0x41
 80048b8:	5c9b      	ldrb	r3, [r3, r2]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	425a      	negs	r2, r3
 80048c0:	4153      	adcs	r3, r2
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	e013      	b.n	80048ee <HAL_TIM_PWM_Start_DMA+0x12a>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d108      	bne.n	80048de <HAL_TIM_PWM_Start_DMA+0x11a>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2242      	movs	r2, #66	; 0x42
 80048d0:	5c9b      	ldrb	r3, [r3, r2]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	425a      	negs	r2, r3
 80048d8:	4153      	adcs	r3, r2
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	e007      	b.n	80048ee <HAL_TIM_PWM_Start_DMA+0x12a>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2243      	movs	r2, #67	; 0x43
 80048e2:	5c9b      	ldrb	r3, [r3, r2]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	425a      	negs	r2, r3
 80048ea:	4153      	adcs	r3, r2
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d035      	beq.n	800495e <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    if ((pData == NULL) && (Length > 0U))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_TIM_PWM_Start_DMA+0x140>
 80048f8:	1cbb      	adds	r3, r7, #2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_TIM_PWM_Start_DMA+0x140>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e133      	b.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x3a8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <HAL_TIM_PWM_Start_DMA+0x150>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	223e      	movs	r2, #62	; 0x3e
 800490e:	2102      	movs	r1, #2
 8004910:	5499      	strb	r1, [r3, r2]
 8004912:	e026      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b04      	cmp	r3, #4
 8004918:	d104      	bne.n	8004924 <HAL_TIM_PWM_Start_DMA+0x160>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	223f      	movs	r2, #63	; 0x3f
 800491e:	2102      	movs	r1, #2
 8004920:	5499      	strb	r1, [r3, r2]
 8004922:	e01e      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b08      	cmp	r3, #8
 8004928:	d104      	bne.n	8004934 <HAL_TIM_PWM_Start_DMA+0x170>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2240      	movs	r2, #64	; 0x40
 800492e:	2102      	movs	r1, #2
 8004930:	5499      	strb	r1, [r3, r2]
 8004932:	e016      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d104      	bne.n	8004944 <HAL_TIM_PWM_Start_DMA+0x180>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2241      	movs	r2, #65	; 0x41
 800493e:	2102      	movs	r1, #2
 8004940:	5499      	strb	r1, [r3, r2]
 8004942:	e00e      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b10      	cmp	r3, #16
 8004948:	d104      	bne.n	8004954 <HAL_TIM_PWM_Start_DMA+0x190>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2242      	movs	r2, #66	; 0x42
 800494e:	2102      	movs	r1, #2
 8004950:	5499      	strb	r1, [r3, r2]
 8004952:	e006      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2243      	movs	r2, #67	; 0x43
 8004958:	2102      	movs	r1, #2
 800495a:	5499      	strb	r1, [r3, r2]
 800495c:	e001      	b.n	8004962 <HAL_TIM_PWM_Start_DMA+0x19e>
    }
  }
  else
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e104      	b.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x3a8>
  }

  switch (Channel)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b0c      	cmp	r3, #12
 8004966:	d100      	bne.n	800496a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004968:	e080      	b.n	8004a6c <HAL_TIM_PWM_Start_DMA+0x2a8>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d900      	bls.n	8004972 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8004970:	e0a1      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b08      	cmp	r3, #8
 8004976:	d054      	beq.n	8004a22 <HAL_TIM_PWM_Start_DMA+0x25e>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b08      	cmp	r3, #8
 800497c:	d900      	bls.n	8004980 <HAL_TIM_PWM_Start_DMA+0x1bc>
 800497e:	e09a      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_PWM_Start_DMA+0x1ca>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b04      	cmp	r3, #4
 800498a:	d025      	beq.n	80049d8 <HAL_TIM_PWM_Start_DMA+0x214>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 800498c:	e093      	b.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x2f2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	4a77      	ldr	r2, [pc, #476]	; (8004b78 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	4a76      	ldr	r2, [pc, #472]	; (8004b7c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3334      	adds	r3, #52	; 0x34
 80049b2:	001a      	movs	r2, r3
 80049b4:	1cbb      	adds	r3, r7, #2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	f7fe fc3c 	bl	8003234 <HAL_DMA_Start_IT>
 80049bc:	1e03      	subs	r3, r0, #0
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_PWM_Start_DMA+0x200>
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0d3      	b.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2180      	movs	r1, #128	; 0x80
 80049d0:	0089      	lsls	r1, r1, #2
 80049d2:	430a      	orrs	r2, r1
 80049d4:	60da      	str	r2, [r3, #12]
      break;
 80049d6:	e06f      	b.n	8004ab8 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	4a65      	ldr	r2, [pc, #404]	; (8004b74 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	4a64      	ldr	r2, [pc, #400]	; (8004b78 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	4a63      	ldr	r2, [pc, #396]	; (8004b7c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80049ee:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3338      	adds	r3, #56	; 0x38
 80049fc:	001a      	movs	r2, r3
 80049fe:	1cbb      	adds	r3, r7, #2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	f7fe fc17 	bl	8003234 <HAL_DMA_Start_IT>
 8004a06:	1e03      	subs	r3, r0, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_TIM_PWM_Start_DMA+0x24a>
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e0ae      	b.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2180      	movs	r1, #128	; 0x80
 8004a1a:	00c9      	lsls	r1, r1, #3
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	60da      	str	r2, [r3, #12]
      break;
 8004a20:	e04a      	b.n	8004ab8 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	4a53      	ldr	r2, [pc, #332]	; (8004b74 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8004a28:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	4a51      	ldr	r2, [pc, #324]	; (8004b7c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	333c      	adds	r3, #60	; 0x3c
 8004a46:	001a      	movs	r2, r3
 8004a48:	1cbb      	adds	r3, r7, #2
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	f7fe fbf2 	bl	8003234 <HAL_DMA_Start_IT>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_PWM_Start_DMA+0x294>
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e089      	b.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2180      	movs	r1, #128	; 0x80
 8004a64:	0109      	lsls	r1, r1, #4
 8004a66:	430a      	orrs	r2, r1
 8004a68:	60da      	str	r2, [r3, #12]
      break;
 8004a6a:	e025      	b.n	8004ab8 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	4a40      	ldr	r2, [pc, #256]	; (8004b74 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	4a3e      	ldr	r2, [pc, #248]	; (8004b7c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3340      	adds	r3, #64	; 0x40
 8004a90:	001a      	movs	r2, r3
 8004a92:	1cbb      	adds	r3, r7, #2
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	f7fe fbcd 	bl	8003234 <HAL_DMA_Start_IT>
 8004a9a:	1e03      	subs	r3, r0, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_TIM_PWM_Start_DMA+0x2de>
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e064      	b.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x3a8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2180      	movs	r1, #128	; 0x80
 8004aae:	0149      	lsls	r1, r1, #5
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	60da      	str	r2, [r3, #12]
      break;
 8004ab4:	e000      	b.n	8004ab8 <HAL_TIM_PWM_Start_DMA+0x2f4>
      break;
 8004ab6:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fd85 	bl	80055d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2d      	ldr	r2, [pc, #180]	; (8004b80 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00e      	beq.n	8004aee <HAL_TIM_PWM_Start_DMA+0x32a>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2b      	ldr	r2, [pc, #172]	; (8004b84 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d009      	beq.n	8004aee <HAL_TIM_PWM_Start_DMA+0x32a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_TIM_PWM_Start_DMA+0x32a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_PWM_Start_DMA+0x32e>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_TIM_PWM_Start_DMA+0x330>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_TIM_PWM_Start_DMA+0x346>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2180      	movs	r1, #128	; 0x80
 8004b04:	0209      	lsls	r1, r1, #8
 8004b06:	430a      	orrs	r2, r1
 8004b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_TIM_PWM_Start_DMA+0x364>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_PWM_Start_DMA+0x364>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d116      	bne.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x392>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d016      	beq.n	8004b68 <HAL_TIM_PWM_Start_DMA+0x3a4>
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	025b      	lsls	r3, r3, #9
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d011      	beq.n	8004b68 <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2101      	movs	r1, #1
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	e008      	b.n	8004b68 <HAL_TIM_PWM_Start_DMA+0x3a4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2101      	movs	r1, #1
 8004b62:	430a      	orrs	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e000      	b.n	8004b6a <HAL_TIM_PWM_Start_DMA+0x3a6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b68:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b006      	add	sp, #24
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	08004e49 	.word	0x08004e49
 8004b78:	08004ef3 	.word	0x08004ef3
 8004b7c:	08004db5 	.word	0x08004db5
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800
 8004b90:	40000400 	.word	0x40000400
 8004b94:	00010007 	.word	0x00010007

08004b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	223c      	movs	r2, #60	; 0x3c
 8004ba8:	5c9b      	ldrb	r3, [r3, r2]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0df      	b.n	8004d72 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	223c      	movs	r2, #60	; 0x3c
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b14      	cmp	r3, #20
 8004bbe:	d900      	bls.n	8004bc2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004bc0:	e0d1      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	009a      	lsls	r2, r3, #2
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8004bc8:	18d3      	adds	r3, r2, r3
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 fa36 	bl	8005048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2108      	movs	r1, #8
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6999      	ldr	r1, [r3, #24]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	619a      	str	r2, [r3, #24]
      break;
 8004c0e:	e0ab      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	0011      	movs	r1, r2
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fa9f 	bl	800515c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	0109      	lsls	r1, r1, #4
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4951      	ldr	r1, [pc, #324]	; (8004d80 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004c3c:	400a      	ands	r2, r1
 8004c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6999      	ldr	r1, [r3, #24]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	619a      	str	r2, [r3, #24]
      break;
 8004c54:	e088      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	0011      	movs	r1, r2
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f000 fb00 	bl	8005264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2108      	movs	r1, #8
 8004c70:	430a      	orrs	r2, r1
 8004c72:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2104      	movs	r1, #4
 8004c80:	438a      	bics	r2, r1
 8004c82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69d9      	ldr	r1, [r3, #28]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	61da      	str	r2, [r3, #28]
      break;
 8004c96:	e067      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	0011      	movs	r1, r2
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f000 fb67 	bl	8005374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	0109      	lsls	r1, r1, #4
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	492f      	ldr	r1, [pc, #188]	; (8004d80 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69d9      	ldr	r1, [r3, #28]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	61da      	str	r2, [r3, #28]
      break;
 8004cdc:	e044      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	0011      	movs	r1, r2
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 fbae 	bl	8005448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2108      	movs	r1, #8
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2104      	movs	r1, #4
 8004d08:	438a      	bics	r2, r1
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d1e:	e023      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	0011      	movs	r1, r2
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 fbed 	bl	8005508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	0109      	lsls	r1, r1, #4
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	490d      	ldr	r1, [pc, #52]	; (8004d80 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004d4c:	400a      	ands	r2, r1
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	021a      	lsls	r2, r3, #8
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8004d66:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	223c      	movs	r2, #60	; 0x3c
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	08009304 	.word	0x08009304
 8004d80:	fffffbff 	.word	0xfffffbff

08004d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b002      	add	sp, #8
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004d9c:	46c0      	nop			; (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b002      	add	sp, #8
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b002      	add	sp, #8
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d107      	bne.n	8004ddc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	223e      	movs	r2, #62	; 0x3e
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]
 8004dda:	e02a      	b.n	8004e32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d107      	bne.n	8004df6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2202      	movs	r2, #2
 8004dea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	223f      	movs	r2, #63	; 0x3f
 8004df0:	2101      	movs	r1, #1
 8004df2:	5499      	strb	r1, [r3, r2]
 8004df4:	e01d      	b.n	8004e32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d107      	bne.n	8004e10 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2204      	movs	r2, #4
 8004e04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2240      	movs	r2, #64	; 0x40
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	5499      	strb	r1, [r3, r2]
 8004e0e:	e010      	b.n	8004e32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d107      	bne.n	8004e2a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2241      	movs	r2, #65	; 0x41
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]
 8004e28:	e003      	b.n	8004e32 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	223d      	movs	r2, #61	; 0x3d
 8004e2e:	2101      	movs	r1, #1
 8004e30:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7ff ffb5 	bl	8004da4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b004      	add	sp, #16
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d10b      	bne.n	8004e78 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d136      	bne.n	8004edc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	223e      	movs	r2, #62	; 0x3e
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]
 8004e76:	e031      	b.n	8004edc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d10b      	bne.n	8004e9a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2202      	movs	r2, #2
 8004e86:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d125      	bne.n	8004edc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	223f      	movs	r2, #63	; 0x3f
 8004e94:	2101      	movs	r1, #1
 8004e96:	5499      	strb	r1, [r3, r2]
 8004e98:	e020      	b.n	8004edc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d10b      	bne.n	8004ebc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d114      	bne.n	8004edc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2240      	movs	r2, #64	; 0x40
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	5499      	strb	r1, [r3, r2]
 8004eba:	e00f      	b.n	8004edc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d10a      	bne.n	8004edc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2241      	movs	r2, #65	; 0x41
 8004ed8:	2101      	movs	r1, #1
 8004eda:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f7ff ff50 	bl	8004d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	771a      	strb	r2, [r3, #28]
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d103      	bne.n	8004f12 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	771a      	strb	r2, [r3, #28]
 8004f10:	e019      	b.n	8004f46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d103      	bne.n	8004f24 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	771a      	strb	r2, [r3, #28]
 8004f22:	e010      	b.n	8004f46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d103      	bne.n	8004f36 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2204      	movs	r2, #4
 8004f32:	771a      	strb	r2, [r3, #28]
 8004f34:	e007      	b.n	8004f46 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d102      	bne.n	8004f46 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2208      	movs	r2, #8
 8004f44:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff ff23 	bl	8004d94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b004      	add	sp, #16
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a2f      	ldr	r2, [pc, #188]	; (800502c <TIM_Base_SetConfig+0xd0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x20>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a2e      	ldr	r2, [pc, #184]	; (8005030 <TIM_Base_SetConfig+0xd4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2270      	movs	r2, #112	; 0x70
 8004f80:	4393      	bics	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a26      	ldr	r2, [pc, #152]	; (800502c <TIM_Base_SetConfig+0xd0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <TIM_Base_SetConfig+0xd4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00f      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a24      	ldr	r2, [pc, #144]	; (8005034 <TIM_Base_SetConfig+0xd8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a23      	ldr	r2, [pc, #140]	; (8005038 <TIM_Base_SetConfig+0xdc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a22      	ldr	r2, [pc, #136]	; (800503c <TIM_Base_SetConfig+0xe0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a21      	ldr	r2, [pc, #132]	; (8005040 <TIM_Base_SetConfig+0xe4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4a20      	ldr	r2, [pc, #128]	; (8005044 <TIM_Base_SetConfig+0xe8>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2280      	movs	r2, #128	; 0x80
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	001a      	movs	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a0c      	ldr	r2, [pc, #48]	; (800502c <TIM_Base_SetConfig+0xd0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00b      	beq.n	8005016 <TIM_Base_SetConfig+0xba>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <TIM_Base_SetConfig+0xdc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d007      	beq.n	8005016 <TIM_Base_SetConfig+0xba>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a0c      	ldr	r2, [pc, #48]	; (800503c <TIM_Base_SetConfig+0xe0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_Base_SetConfig+0xba>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a0b      	ldr	r2, [pc, #44]	; (8005040 <TIM_Base_SetConfig+0xe4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d103      	bne.n	800501e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	615a      	str	r2, [r3, #20]
}
 8005024:	46c0      	nop			; (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40000400 	.word	0x40000400
 8005034:	40002000 	.word	0x40002000
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800
 8005044:	fffffcff 	.word	0xfffffcff

08005048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	2201      	movs	r2, #1
 8005058:	4393      	bics	r3, r2
 800505a:	001a      	movs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a32      	ldr	r2, [pc, #200]	; (8005140 <TIM_OC1_SetConfig+0xf8>)
 8005076:	4013      	ands	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2203      	movs	r2, #3
 800507e:	4393      	bics	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2202      	movs	r2, #2
 8005090:	4393      	bics	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a28      	ldr	r2, [pc, #160]	; (8005144 <TIM_OC1_SetConfig+0xfc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_OC1_SetConfig+0x76>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a27      	ldr	r2, [pc, #156]	; (8005148 <TIM_OC1_SetConfig+0x100>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_OC1_SetConfig+0x76>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a26      	ldr	r2, [pc, #152]	; (800514c <TIM_OC1_SetConfig+0x104>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_OC1_SetConfig+0x76>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a25      	ldr	r2, [pc, #148]	; (8005150 <TIM_OC1_SetConfig+0x108>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d10c      	bne.n	80050d8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2208      	movs	r2, #8
 80050c2:	4393      	bics	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	2204      	movs	r2, #4
 80050d4:	4393      	bics	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <TIM_OC1_SetConfig+0xfc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_OC1_SetConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a19      	ldr	r2, [pc, #100]	; (8005148 <TIM_OC1_SetConfig+0x100>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_OC1_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a18      	ldr	r2, [pc, #96]	; (800514c <TIM_OC1_SetConfig+0x104>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC1_SetConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a17      	ldr	r2, [pc, #92]	; (8005150 <TIM_OC1_SetConfig+0x108>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d111      	bne.n	800511c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4a16      	ldr	r2, [pc, #88]	; (8005154 <TIM_OC1_SetConfig+0x10c>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4a15      	ldr	r2, [pc, #84]	; (8005158 <TIM_OC1_SetConfig+0x110>)
 8005104:	4013      	ands	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	b006      	add	sp, #24
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	fffeff8f 	.word	0xfffeff8f
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800
 8005154:	fffffeff 	.word	0xfffffeff
 8005158:	fffffdff 	.word	0xfffffdff

0800515c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	2210      	movs	r2, #16
 800516c:	4393      	bics	r3, r2
 800516e:	001a      	movs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4a2e      	ldr	r2, [pc, #184]	; (8005244 <TIM_OC2_SetConfig+0xe8>)
 800518a:	4013      	ands	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a2d      	ldr	r2, [pc, #180]	; (8005248 <TIM_OC2_SetConfig+0xec>)
 8005192:	4013      	ands	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2220      	movs	r2, #32
 80051a6:	4393      	bics	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a24      	ldr	r2, [pc, #144]	; (800524c <TIM_OC2_SetConfig+0xf0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10d      	bne.n	80051da <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2280      	movs	r2, #128	; 0x80
 80051c2:	4393      	bics	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2240      	movs	r2, #64	; 0x40
 80051d6:	4393      	bics	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	; (800524c <TIM_OC2_SetConfig+0xf0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <TIM_OC2_SetConfig+0x9e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1a      	ldr	r2, [pc, #104]	; (8005250 <TIM_OC2_SetConfig+0xf4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <TIM_OC2_SetConfig+0x9e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a19      	ldr	r2, [pc, #100]	; (8005254 <TIM_OC2_SetConfig+0xf8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <TIM_OC2_SetConfig+0x9e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a18      	ldr	r2, [pc, #96]	; (8005258 <TIM_OC2_SetConfig+0xfc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d113      	bne.n	8005222 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4a17      	ldr	r2, [pc, #92]	; (800525c <TIM_OC2_SetConfig+0x100>)
 80051fe:	4013      	ands	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4a16      	ldr	r2, [pc, #88]	; (8005260 <TIM_OC2_SetConfig+0x104>)
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	46c0      	nop			; (mov r8, r8)
 800523e:	46bd      	mov	sp, r7
 8005240:	b006      	add	sp, #24
 8005242:	bd80      	pop	{r7, pc}
 8005244:	feff8fff 	.word	0xfeff8fff
 8005248:	fffffcff 	.word	0xfffffcff
 800524c:	40012c00 	.word	0x40012c00
 8005250:	40014000 	.word	0x40014000
 8005254:	40014400 	.word	0x40014400
 8005258:	40014800 	.word	0x40014800
 800525c:	fffffbff 	.word	0xfffffbff
 8005260:	fffff7ff 	.word	0xfffff7ff

08005264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	4a35      	ldr	r2, [pc, #212]	; (8005348 <TIM_OC3_SetConfig+0xe4>)
 8005274:	401a      	ands	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a2f      	ldr	r2, [pc, #188]	; (800534c <TIM_OC3_SetConfig+0xe8>)
 8005290:	4013      	ands	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2203      	movs	r2, #3
 8005298:	4393      	bics	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4a29      	ldr	r2, [pc, #164]	; (8005350 <TIM_OC3_SetConfig+0xec>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <TIM_OC3_SetConfig+0xf0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d10d      	bne.n	80052de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4a24      	ldr	r2, [pc, #144]	; (8005358 <TIM_OC3_SetConfig+0xf4>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4a20      	ldr	r2, [pc, #128]	; (800535c <TIM_OC3_SetConfig+0xf8>)
 80052da:	4013      	ands	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <TIM_OC3_SetConfig+0xf0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_OC3_SetConfig+0x9a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <TIM_OC3_SetConfig+0xfc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_OC3_SetConfig+0x9a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <TIM_OC3_SetConfig+0x100>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0x9a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <TIM_OC3_SetConfig+0x104>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <TIM_OC3_SetConfig+0x108>)
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4a19      	ldr	r2, [pc, #100]	; (8005370 <TIM_OC3_SetConfig+0x10c>)
 800530a:	4013      	ands	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	46c0      	nop			; (mov r8, r8)
 8005342:	46bd      	mov	sp, r7
 8005344:	b006      	add	sp, #24
 8005346:	bd80      	pop	{r7, pc}
 8005348:	fffffeff 	.word	0xfffffeff
 800534c:	fffeff8f 	.word	0xfffeff8f
 8005350:	fffffdff 	.word	0xfffffdff
 8005354:	40012c00 	.word	0x40012c00
 8005358:	fffff7ff 	.word	0xfffff7ff
 800535c:	fffffbff 	.word	0xfffffbff
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800
 800536c:	ffffefff 	.word	0xffffefff
 8005370:	ffffdfff 	.word	0xffffdfff

08005374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	4a28      	ldr	r2, [pc, #160]	; (8005424 <TIM_OC4_SetConfig+0xb0>)
 8005384:	401a      	ands	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4a22      	ldr	r2, [pc, #136]	; (8005428 <TIM_OC4_SetConfig+0xb4>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4a21      	ldr	r2, [pc, #132]	; (800542c <TIM_OC4_SetConfig+0xb8>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4a1d      	ldr	r2, [pc, #116]	; (8005430 <TIM_OC4_SetConfig+0xbc>)
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a19      	ldr	r2, [pc, #100]	; (8005434 <TIM_OC4_SetConfig+0xc0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00b      	beq.n	80053ec <TIM_OC4_SetConfig+0x78>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <TIM_OC4_SetConfig+0xc4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d007      	beq.n	80053ec <TIM_OC4_SetConfig+0x78>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a17      	ldr	r2, [pc, #92]	; (800543c <TIM_OC4_SetConfig+0xc8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC4_SetConfig+0x78>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a16      	ldr	r2, [pc, #88]	; (8005440 <TIM_OC4_SetConfig+0xcc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d109      	bne.n	8005400 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <TIM_OC4_SetConfig+0xd0>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b006      	add	sp, #24
 8005420:	bd80      	pop	{r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	ffffefff 	.word	0xffffefff
 8005428:	feff8fff 	.word	0xfeff8fff
 800542c:	fffffcff 	.word	0xfffffcff
 8005430:	ffffdfff 	.word	0xffffdfff
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800
 8005444:	ffffbfff 	.word	0xffffbfff

08005448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	4a25      	ldr	r2, [pc, #148]	; (80054ec <TIM_OC5_SetConfig+0xa4>)
 8005458:	401a      	ands	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <TIM_OC5_SetConfig+0xa8>)
 8005474:	4013      	ands	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <TIM_OC5_SetConfig+0xac>)
 8005486:	4013      	ands	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <TIM_OC5_SetConfig+0xb0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00b      	beq.n	80054b6 <TIM_OC5_SetConfig+0x6e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a16      	ldr	r2, [pc, #88]	; (80054fc <TIM_OC5_SetConfig+0xb4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <TIM_OC5_SetConfig+0x6e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a15      	ldr	r2, [pc, #84]	; (8005500 <TIM_OC5_SetConfig+0xb8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_OC5_SetConfig+0x6e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a14      	ldr	r2, [pc, #80]	; (8005504 <TIM_OC5_SetConfig+0xbc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d109      	bne.n	80054ca <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4a0c      	ldr	r2, [pc, #48]	; (80054ec <TIM_OC5_SetConfig+0xa4>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	621a      	str	r2, [r3, #32]
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b006      	add	sp, #24
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	fffeffff 	.word	0xfffeffff
 80054f0:	fffeff8f 	.word	0xfffeff8f
 80054f4:	fffdffff 	.word	0xfffdffff
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	4a26      	ldr	r2, [pc, #152]	; (80055b0 <TIM_OC6_SetConfig+0xa8>)
 8005518:	401a      	ands	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a20      	ldr	r2, [pc, #128]	; (80055b4 <TIM_OC6_SetConfig+0xac>)
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <TIM_OC6_SetConfig+0xb0>)
 8005548:	4013      	ands	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	051b      	lsls	r3, r3, #20
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <TIM_OC6_SetConfig+0xb4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00b      	beq.n	8005578 <TIM_OC6_SetConfig+0x70>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC6_SetConfig+0xb8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <TIM_OC6_SetConfig+0x70>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC6_SetConfig+0xbc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <TIM_OC6_SetConfig+0x70>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC6_SetConfig+0xc0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d109      	bne.n	800558c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC6_SetConfig+0xc4>)
 800557c:	4013      	ands	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b006      	add	sp, #24
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	ffefffff 	.word	0xffefffff
 80055b4:	feff8fff 	.word	0xfeff8fff
 80055b8:	ffdfffff 	.word	0xffdfffff
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800
 80055cc:	fffbffff 	.word	0xfffbffff

080055d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	221f      	movs	r2, #31
 80055e0:	4013      	ands	r3, r2
 80055e2:	2201      	movs	r2, #1
 80055e4:	409a      	lsls	r2, r3
 80055e6:	0013      	movs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	43d2      	mvns	r2, r2
 80055f2:	401a      	ands	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1a      	ldr	r2, [r3, #32]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	211f      	movs	r1, #31
 8005600:	400b      	ands	r3, r1
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4099      	lsls	r1, r3
 8005606:	000b      	movs	r3, r1
 8005608:	431a      	orrs	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b006      	add	sp, #24
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	223c      	movs	r2, #60	; 0x3c
 8005626:	5c9b      	ldrb	r3, [r3, r2]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800562c:	2302      	movs	r3, #2
 800562e:	e04f      	b.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	223c      	movs	r2, #60	; 0x3c
 8005634:	2101      	movs	r1, #1
 8005636:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	223d      	movs	r2, #61	; 0x3d
 800563c:	2102      	movs	r1, #2
 800563e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a20      	ldr	r2, [pc, #128]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d108      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800565e:	4013      	ands	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2270      	movs	r2, #112	; 0x70
 8005670:	4393      	bics	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a13      	ldr	r2, [pc, #76]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d009      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d004      	beq.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10c      	bne.n	80056be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2280      	movs	r2, #128	; 0x80
 80056a8:	4393      	bics	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	223d      	movs	r2, #61	; 0x3d
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	223c      	movs	r2, #60	; 0x3c
 80056ca:	2100      	movs	r1, #0
 80056cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b004      	add	sp, #16
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	ff0fffff 	.word	0xff0fffff
 80056e0:	40000400 	.word	0x40000400
 80056e4:	40014000 	.word	0x40014000

080056e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	223c      	movs	r2, #60	; 0x3c
 80056fa:	5c9b      	ldrb	r3, [r3, r2]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e079      	b.n	80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	223c      	movs	r2, #60	; 0x3c
 8005708:	2101      	movs	r1, #1
 800570a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	22ff      	movs	r2, #255	; 0xff
 8005710:	4393      	bics	r3, r2
 8005712:	001a      	movs	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a38      	ldr	r2, [pc, #224]	; (8005800 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005720:	401a      	ands	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a35      	ldr	r2, [pc, #212]	; (8005804 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800572e:	401a      	ands	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a33      	ldr	r2, [pc, #204]	; (8005808 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800573c:	401a      	ands	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a30      	ldr	r2, [pc, #192]	; (800580c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800574a:	401a      	ands	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4a2e      	ldr	r2, [pc, #184]	; (8005810 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005758:	401a      	ands	r2, r3
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4a2b      	ldr	r2, [pc, #172]	; (8005814 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005766:	401a      	ands	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a29      	ldr	r2, [pc, #164]	; (8005818 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005774:	401a      	ands	r2, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a25      	ldr	r2, [pc, #148]	; (800581c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d106      	bne.n	8005798 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a24      	ldr	r2, [pc, #144]	; (8005820 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800578e:	401a      	ands	r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d121      	bne.n	80057e6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80057a6:	401a      	ands	r2, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	051b      	lsls	r3, r3, #20
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80057b6:	401a      	ands	r2, r3
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	; (800582c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80057c4:	401a      	ands	r2, r3
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d106      	bne.n	80057e6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a15      	ldr	r2, [pc, #84]	; (8005830 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80057dc:	401a      	ands	r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	223c      	movs	r2, #60	; 0x3c
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b004      	add	sp, #16
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	fffffcff 	.word	0xfffffcff
 8005804:	fffffbff 	.word	0xfffffbff
 8005808:	fffff7ff 	.word	0xfffff7ff
 800580c:	ffffefff 	.word	0xffffefff
 8005810:	ffffdfff 	.word	0xffffdfff
 8005814:	ffffbfff 	.word	0xffffbfff
 8005818:	fff0ffff 	.word	0xfff0ffff
 800581c:	40012c00 	.word	0x40012c00
 8005820:	efffffff 	.word	0xefffffff
 8005824:	ff0fffff 	.word	0xff0fffff
 8005828:	feffffff 	.word	0xfeffffff
 800582c:	fdffffff 	.word	0xfdffffff
 8005830:	dfffffff 	.word	0xdfffffff

08005834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e046      	b.n	80058d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2284      	movs	r2, #132	; 0x84
 800584a:	589b      	ldr	r3, [r3, r2]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2280      	movs	r2, #128	; 0x80
 8005854:	2100      	movs	r1, #0
 8005856:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	0018      	movs	r0, r3
 800585c:	f7fd fa30 	bl	8002cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2284      	movs	r2, #132	; 0x84
 8005864:	2124      	movs	r1, #36	; 0x24
 8005866:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2101      	movs	r1, #1
 8005874:	438a      	bics	r2, r1
 8005876:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 fc74 	bl	8006168 <UART_SetConfig>
 8005880:	0003      	movs	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e024      	b.n	80058d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0018      	movs	r0, r3
 8005896:	f000 fe0d 	bl	80064b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	490d      	ldr	r1, [pc, #52]	; (80058dc <HAL_UART_Init+0xa8>)
 80058a6:	400a      	ands	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	212a      	movs	r1, #42	; 0x2a
 80058b6:	438a      	bics	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2101      	movs	r1, #1
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f000 fea5 	bl	800661c <UART_CheckIdleState>
 80058d2:	0003      	movs	r3, r0
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	ffffb7ff 	.word	0xffffb7ff

080058e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	603b      	str	r3, [r7, #0]
 80058ec:	1dbb      	adds	r3, r7, #6
 80058ee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2284      	movs	r2, #132	; 0x84
 80058f4:	589b      	ldr	r3, [r3, r2]
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d000      	beq.n	80058fc <HAL_UART_Transmit+0x1c>
 80058fa:	e097      	b.n	8005a2c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_UART_Transmit+0x2a>
 8005902:	1dbb      	adds	r3, r7, #6
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e08f      	b.n	8005a2e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	015b      	lsls	r3, r3, #5
 8005916:	429a      	cmp	r2, r3
 8005918:	d109      	bne.n	800592e <HAL_UART_Transmit+0x4e>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d105      	bne.n	800592e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2201      	movs	r2, #1
 8005926:	4013      	ands	r3, r2
 8005928:	d001      	beq.n	800592e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07f      	b.n	8005a2e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	5c9b      	ldrb	r3, [r3, r2]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_UART_Transmit+0x5c>
 8005938:	2302      	movs	r3, #2
 800593a:	e078      	b.n	8005a2e <HAL_UART_Transmit+0x14e>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2280      	movs	r2, #128	; 0x80
 8005940:	2101      	movs	r1, #1
 8005942:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	228c      	movs	r2, #140	; 0x8c
 8005948:	2100      	movs	r1, #0
 800594a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2284      	movs	r2, #132	; 0x84
 8005950:	2121      	movs	r1, #33	; 0x21
 8005952:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005954:	f7fd fac2 	bl	8002edc <HAL_GetTick>
 8005958:	0003      	movs	r3, r0
 800595a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1dba      	adds	r2, r7, #6
 8005960:	2154      	movs	r1, #84	; 0x54
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1dba      	adds	r2, r7, #6
 800596a:	2156      	movs	r1, #86	; 0x56
 800596c:	8812      	ldrh	r2, [r2, #0]
 800596e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	015b      	lsls	r3, r3, #5
 8005978:	429a      	cmp	r2, r3
 800597a:	d108      	bne.n	800598e <HAL_UART_Transmit+0xae>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	e003      	b.n	8005996 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2280      	movs	r2, #128	; 0x80
 800599a:	2100      	movs	r1, #0
 800599c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800599e:	e02c      	b.n	80059fa <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	0013      	movs	r3, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	f000 fe7f 	bl	80066b0 <UART_WaitOnFlagUntilTimeout>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d001      	beq.n	80059ba <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e039      	b.n	8005a2e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	001a      	movs	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	05d2      	lsls	r2, r2, #23
 80059cc:	0dd2      	lsrs	r2, r2, #23
 80059ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	3302      	adds	r3, #2
 80059d4:	61bb      	str	r3, [r7, #24]
 80059d6:	e007      	b.n	80059e8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3301      	adds	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2256      	movs	r2, #86	; 0x56
 80059ec:	5a9b      	ldrh	r3, [r3, r2]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b299      	uxth	r1, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2256      	movs	r2, #86	; 0x56
 80059f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2256      	movs	r2, #86	; 0x56
 80059fe:	5a9b      	ldrh	r3, [r3, r2]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1cc      	bne.n	80059a0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	0013      	movs	r3, r2
 8005a10:	2200      	movs	r2, #0
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	f000 fe4c 	bl	80066b0 <UART_WaitOnFlagUntilTimeout>
 8005a18:	1e03      	subs	r3, r0, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e006      	b.n	8005a2e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2284      	movs	r2, #132	; 0x84
 8005a24:	2120      	movs	r1, #32
 8005a26:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b008      	add	sp, #32
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	1dbb      	adds	r3, r7, #6
 8005a42:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2288      	movs	r2, #136	; 0x88
 8005a48:	589b      	ldr	r3, [r3, r2]
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d150      	bne.n	8005af0 <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_UART_Receive_IT+0x26>
 8005a54:	1dbb      	adds	r3, r7, #6
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e048      	b.n	8005af2 <HAL_UART_Receive_IT+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	015b      	lsls	r3, r3, #5
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d109      	bne.n	8005a80 <HAL_UART_Receive_IT+0x4a>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2201      	movs	r2, #1
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d001      	beq.n	8005a80 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e038      	b.n	8005af2 <HAL_UART_Receive_IT+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2280      	movs	r2, #128	; 0x80
 8005a84:	5c9b      	ldrb	r3, [r3, r2]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Receive_IT+0x58>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e031      	b.n	8005af2 <HAL_UART_Receive_IT+0xbc>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	2101      	movs	r1, #1
 8005a94:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d019      	beq.n	8005ade <HAL_UART_Receive_IT+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005aae:	613b      	str	r3, [r7, #16]
  return(result);
 8005ab0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f383 8810 	msr	PRIMASK, r3
}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	04c9      	lsls	r1, r1, #19
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ade:	1dbb      	adds	r3, r7, #6
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 feaa 	bl	8006840 <UART_Start_Receive_IT>
 8005aec:	0003      	movs	r3, r0
 8005aee:	e000      	b.n	8005af2 <HAL_UART_Receive_IT+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
  }
}
 8005af2:	0018      	movs	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	b008      	add	sp, #32
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005afc:	b5b0      	push	{r4, r5, r7, lr}
 8005afe:	b0aa      	sub	sp, #168	; 0xa8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	22a4      	movs	r2, #164	; 0xa4
 8005b0c:	18b9      	adds	r1, r7, r2
 8005b0e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	20a0      	movs	r0, #160	; 0xa0
 8005b18:	1839      	adds	r1, r7, r0
 8005b1a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	249c      	movs	r4, #156	; 0x9c
 8005b24:	1939      	adds	r1, r7, r4
 8005b26:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b28:	0011      	movs	r1, r2
 8005b2a:	18bb      	adds	r3, r7, r2
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4aa0      	ldr	r2, [pc, #640]	; (8005db0 <HAL_UART_IRQHandler+0x2b4>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	2298      	movs	r2, #152	; 0x98
 8005b34:	18bd      	adds	r5, r7, r2
 8005b36:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005b38:	18bb      	adds	r3, r7, r2
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11a      	bne.n	8005b76 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2220      	movs	r2, #32
 8005b46:	4013      	ands	r3, r2
 8005b48:	d015      	beq.n	8005b76 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b4a:	183b      	adds	r3, r7, r0
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	4013      	ands	r3, r2
 8005b52:	d105      	bne.n	8005b60 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b54:	193b      	adds	r3, r7, r4
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	055b      	lsls	r3, r3, #21
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d00a      	beq.n	8005b76 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d100      	bne.n	8005b6a <HAL_UART_IRQHandler+0x6e>
 8005b68:	e2cf      	b.n	800610a <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	0010      	movs	r0, r2
 8005b72:	4798      	blx	r3
      }
      return;
 8005b74:	e2c9      	b.n	800610a <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b76:	2398      	movs	r3, #152	; 0x98
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d100      	bne.n	8005b82 <HAL_UART_IRQHandler+0x86>
 8005b80:	e11e      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b82:	239c      	movs	r3, #156	; 0x9c
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a8a      	ldr	r2, [pc, #552]	; (8005db4 <HAL_UART_IRQHandler+0x2b8>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d106      	bne.n	8005b9c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b8e:	23a0      	movs	r3, #160	; 0xa0
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a88      	ldr	r2, [pc, #544]	; (8005db8 <HAL_UART_IRQHandler+0x2bc>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	d100      	bne.n	8005b9c <HAL_UART_IRQHandler+0xa0>
 8005b9a:	e111      	b.n	8005dc0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b9c:	23a4      	movs	r3, #164	; 0xa4
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d012      	beq.n	8005bce <HAL_UART_IRQHandler+0xd2>
 8005ba8:	23a0      	movs	r3, #160	; 0xa0
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	228c      	movs	r2, #140	; 0x8c
 8005bc2:	589b      	ldr	r3, [r3, r2]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	218c      	movs	r1, #140	; 0x8c
 8005bcc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bce:	23a4      	movs	r3, #164	; 0xa4
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d011      	beq.n	8005bfe <HAL_UART_IRQHandler+0x102>
 8005bda:	239c      	movs	r3, #156	; 0x9c
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	4013      	ands	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2202      	movs	r2, #2
 8005bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	228c      	movs	r2, #140	; 0x8c
 8005bf2:	589b      	ldr	r3, [r3, r2]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	218c      	movs	r1, #140	; 0x8c
 8005bfc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bfe:	23a4      	movs	r3, #164	; 0xa4
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2204      	movs	r2, #4
 8005c06:	4013      	ands	r3, r2
 8005c08:	d011      	beq.n	8005c2e <HAL_UART_IRQHandler+0x132>
 8005c0a:	239c      	movs	r3, #156	; 0x9c
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2201      	movs	r2, #1
 8005c12:	4013      	ands	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	228c      	movs	r2, #140	; 0x8c
 8005c22:	589b      	ldr	r3, [r3, r2]
 8005c24:	2202      	movs	r2, #2
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	218c      	movs	r1, #140	; 0x8c
 8005c2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c2e:	23a4      	movs	r3, #164	; 0xa4
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	4013      	ands	r3, r2
 8005c38:	d017      	beq.n	8005c6a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c3a:	23a0      	movs	r3, #160	; 0xa0
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2220      	movs	r2, #32
 8005c42:	4013      	ands	r3, r2
 8005c44:	d105      	bne.n	8005c52 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c46:	239c      	movs	r3, #156	; 0x9c
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a59      	ldr	r2, [pc, #356]	; (8005db4 <HAL_UART_IRQHandler+0x2b8>)
 8005c4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c50:	d00b      	beq.n	8005c6a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2208      	movs	r2, #8
 8005c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	228c      	movs	r2, #140	; 0x8c
 8005c5e:	589b      	ldr	r3, [r3, r2]
 8005c60:	2208      	movs	r2, #8
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	218c      	movs	r1, #140	; 0x8c
 8005c68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c6a:	23a4      	movs	r3, #164	; 0xa4
 8005c6c:	18fb      	adds	r3, r7, r3
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	4013      	ands	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x1a4>
 8005c78:	23a0      	movs	r3, #160	; 0xa0
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	04db      	lsls	r3, r3, #19
 8005c82:	4013      	ands	r3, r2
 8005c84:	d00c      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2280      	movs	r2, #128	; 0x80
 8005c8c:	0112      	lsls	r2, r2, #4
 8005c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	228c      	movs	r2, #140	; 0x8c
 8005c94:	589b      	ldr	r3, [r3, r2]
 8005c96:	2220      	movs	r2, #32
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	218c      	movs	r1, #140	; 0x8c
 8005c9e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	228c      	movs	r2, #140	; 0x8c
 8005ca4:	589b      	ldr	r3, [r3, r2]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d100      	bne.n	8005cac <HAL_UART_IRQHandler+0x1b0>
 8005caa:	e230      	b.n	800610e <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cac:	23a4      	movs	r3, #164	; 0xa4
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d015      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cb8:	23a0      	movs	r3, #160	; 0xa0
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d106      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cc4:	239c      	movs	r3, #156	; 0x9c
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	055b      	lsls	r3, r3, #21
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d008      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	0010      	movs	r0, r2
 8005ce2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	228c      	movs	r2, #140	; 0x8c
 8005ce8:	589b      	ldr	r3, [r3, r2]
 8005cea:	2194      	movs	r1, #148	; 0x94
 8005cec:	187a      	adds	r2, r7, r1
 8005cee:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2240      	movs	r2, #64	; 0x40
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	d004      	beq.n	8005d08 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cfe:	187b      	adds	r3, r7, r1
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2228      	movs	r2, #40	; 0x28
 8005d04:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d06:	d047      	beq.n	8005d98 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f000 fea4 	bl	8006a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2240      	movs	r2, #64	; 0x40
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d137      	bne.n	8005d8e <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d22:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d26:	2090      	movs	r0, #144	; 0x90
 8005d28:	183a      	adds	r2, r7, r0
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d32:	f383 8810 	msr	PRIMASK, r3
}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2140      	movs	r1, #64	; 0x40
 8005d44:	438a      	bics	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	183b      	adds	r3, r7, r0
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d50:	f383 8810 	msr	PRIMASK, r3
}
 8005d54:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d012      	beq.n	8005d84 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d62:	4a16      	ldr	r2, [pc, #88]	; (8005dbc <HAL_UART_IRQHandler+0x2c0>)
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7fd fb4a 	bl	8003404 <HAL_DMA_Abort_IT>
 8005d70:	1e03      	subs	r3, r0, #0
 8005d72:	d01a      	beq.n	8005daa <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7e:	0018      	movs	r0, r3
 8005d80:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d82:	e012      	b.n	8005daa <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 f9da 	bl	8006140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e00d      	b.n	8005daa <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 f9d5 	bl	8006140 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d96:	e008      	b.n	8005daa <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f000 f9d0 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	228c      	movs	r2, #140	; 0x8c
 8005da4:	2100      	movs	r1, #0
 8005da6:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005da8:	e1b1      	b.n	800610e <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005daa:	46c0      	nop			; (mov r8, r8)
    return;
 8005dac:	e1af      	b.n	800610e <HAL_UART_IRQHandler+0x612>
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	0000080f 	.word	0x0000080f
 8005db4:	10000001 	.word	0x10000001
 8005db8:	04000120 	.word	0x04000120
 8005dbc:	08006b25 	.word	0x08006b25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d000      	beq.n	8005dca <HAL_UART_IRQHandler+0x2ce>
 8005dc8:	e135      	b.n	8006036 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dca:	23a4      	movs	r3, #164	; 0xa4
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d100      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x2dc>
 8005dd6:	e12e      	b.n	8006036 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dd8:	23a0      	movs	r3, #160	; 0xa0
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2210      	movs	r2, #16
 8005de0:	4013      	ands	r3, r2
 8005de2:	d100      	bne.n	8005de6 <HAL_UART_IRQHandler+0x2ea>
 8005de4:	e127      	b.n	8006036 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2210      	movs	r2, #16
 8005dec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2240      	movs	r2, #64	; 0x40
 8005df6:	4013      	ands	r3, r2
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d000      	beq.n	8005dfe <HAL_UART_IRQHandler+0x302>
 8005dfc:	e09e      	b.n	8005f3c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	217e      	movs	r1, #126	; 0x7e
 8005e08:	187b      	adds	r3, r7, r1
 8005e0a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d100      	bne.n	8005e16 <HAL_UART_IRQHandler+0x31a>
 8005e14:	e17d      	b.n	8006112 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	225c      	movs	r2, #92	; 0x5c
 8005e1a:	5a9b      	ldrh	r3, [r3, r2]
 8005e1c:	187a      	adds	r2, r7, r1
 8005e1e:	8812      	ldrh	r2, [r2, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d300      	bcc.n	8005e26 <HAL_UART_IRQHandler+0x32a>
 8005e24:	e175      	b.n	8006112 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	187a      	adds	r2, r7, r1
 8005e2a:	215e      	movs	r1, #94	; 0x5e
 8005e2c:	8812      	ldrh	r2, [r2, #0]
 8005e2e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d16f      	bne.n	8005f1e <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e46:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e48:	2301      	movs	r3, #1
 8005e4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4e:	f383 8810 	msr	PRIMASK, r3
}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	49b1      	ldr	r1, [pc, #708]	; (8006124 <HAL_UART_IRQHandler+0x628>)
 8005e60:	400a      	ands	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f383 8810 	msr	PRIMASK, r3
}
 8005e6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e70:	f3ef 8310 	mrs	r3, PRIMASK
 8005e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e78:	677b      	str	r3, [r7, #116]	; 0x74
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e80:	f383 8810 	msr	PRIMASK, r3
}
 8005e84:	46c0      	nop			; (mov r8, r8)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2101      	movs	r1, #1
 8005e92:	438a      	bics	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]
 8005e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e98:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	f383 8810 	msr	PRIMASK, r3
}
 8005ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8005eac:	2301      	movs	r3, #1
 8005eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb2:	f383 8810 	msr	PRIMASK, r3
}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2140      	movs	r1, #64	; 0x40
 8005ec4:	438a      	bics	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ece:	f383 8810 	msr	PRIMASK, r3
}
 8005ed2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2288      	movs	r2, #136	; 0x88
 8005ed8:	2120      	movs	r1, #32
 8005eda:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eec:	2301      	movs	r3, #1
 8005eee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef2:	f383 8810 	msr	PRIMASK, r3
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2110      	movs	r1, #16
 8005f04:	438a      	bics	r2, r1
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0e:	f383 8810 	msr	PRIMASK, r3
}
 8005f12:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fd fa11 	bl	8003340 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	225c      	movs	r2, #92	; 0x5c
 8005f22:	5a9a      	ldrh	r2, [r3, r2]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	215e      	movs	r1, #94	; 0x5e
 8005f28:	5a5b      	ldrh	r3, [r3, r1]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	0011      	movs	r1, r2
 8005f34:	0018      	movs	r0, r3
 8005f36:	f000 f90b 	bl	8006150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f3a:	e0ea      	b.n	8006112 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	225c      	movs	r2, #92	; 0x5c
 8005f40:	5a99      	ldrh	r1, [r3, r2]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	225e      	movs	r2, #94	; 0x5e
 8005f46:	5a9b      	ldrh	r3, [r3, r2]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	208e      	movs	r0, #142	; 0x8e
 8005f4c:	183b      	adds	r3, r7, r0
 8005f4e:	1a8a      	subs	r2, r1, r2
 8005f50:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	225e      	movs	r2, #94	; 0x5e
 8005f56:	5a9b      	ldrh	r3, [r3, r2]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d100      	bne.n	8005f60 <HAL_UART_IRQHandler+0x464>
 8005f5e:	e0da      	b.n	8006116 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8005f60:	183b      	adds	r3, r7, r0
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d100      	bne.n	8005f6a <HAL_UART_IRQHandler+0x46e>
 8005f68:	e0d5      	b.n	8006116 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f70:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f72:	2488      	movs	r4, #136	; 0x88
 8005f74:	193a      	adds	r2, r7, r4
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f383 8810 	msr	PRIMASK, r3
}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4966      	ldr	r1, [pc, #408]	; (8006128 <HAL_UART_IRQHandler+0x62c>)
 8005f90:	400a      	ands	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	193b      	adds	r3, r7, r4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f383 8810 	msr	PRIMASK, r3
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fa8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005faa:	2484      	movs	r4, #132	; 0x84
 8005fac:	193a      	adds	r2, r7, r4
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f383 8810 	msr	PRIMASK, r3
}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4959      	ldr	r1, [pc, #356]	; (800612c <HAL_UART_IRQHandler+0x630>)
 8005fc8:	400a      	ands	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	193b      	adds	r3, r7, r4
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f383 8810 	msr	PRIMASK, r3
}
 8005fd8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2288      	movs	r2, #136	; 0x88
 8005fde:	2120      	movs	r1, #32
 8005fe0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fee:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	2480      	movs	r4, #128	; 0x80
 8005ff8:	193a      	adds	r2, r7, r4
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	f383 8810 	msr	PRIMASK, r3
}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2110      	movs	r1, #16
 8006014:	438a      	bics	r2, r1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	193b      	adds	r3, r7, r4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	f383 8810 	msr	PRIMASK, r3
}
 8006024:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006026:	183b      	adds	r3, r7, r0
 8006028:	881a      	ldrh	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	0011      	movs	r1, r2
 800602e:	0018      	movs	r0, r3
 8006030:	f000 f88e 	bl	8006150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006034:	e06f      	b.n	8006116 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006036:	23a4      	movs	r3, #164	; 0xa4
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	035b      	lsls	r3, r3, #13
 8006040:	4013      	ands	r3, r2
 8006042:	d010      	beq.n	8006066 <HAL_UART_IRQHandler+0x56a>
 8006044:	239c      	movs	r3, #156	; 0x9c
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	2380      	movs	r3, #128	; 0x80
 800604c:	03db      	lsls	r3, r3, #15
 800604e:	4013      	ands	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	0352      	lsls	r2, r2, #13
 800605a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	0018      	movs	r0, r3
 8006060:	f001 f9f4 	bl	800744c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006064:	e05a      	b.n	800611c <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006066:	23a4      	movs	r3, #164	; 0xa4
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2280      	movs	r2, #128	; 0x80
 800606e:	4013      	ands	r3, r2
 8006070:	d016      	beq.n	80060a0 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006072:	23a0      	movs	r3, #160	; 0xa0
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	4013      	ands	r3, r2
 800607c:	d106      	bne.n	800608c <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800607e:	239c      	movs	r3, #156	; 0x9c
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	4013      	ands	r3, r2
 800608a:	d009      	beq.n	80060a0 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006090:	2b00      	cmp	r3, #0
 8006092:	d042      	beq.n	800611a <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	0010      	movs	r0, r2
 800609c:	4798      	blx	r3
    }
    return;
 800609e:	e03c      	b.n	800611a <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060a0:	23a4      	movs	r3, #164	; 0xa4
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2240      	movs	r2, #64	; 0x40
 80060a8:	4013      	ands	r3, r2
 80060aa:	d00a      	beq.n	80060c2 <HAL_UART_IRQHandler+0x5c6>
 80060ac:	23a0      	movs	r3, #160	; 0xa0
 80060ae:	18fb      	adds	r3, r7, r3
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	4013      	ands	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	0018      	movs	r0, r3
 80060bc:	f000 fd49 	bl	8006b52 <UART_EndTransmit_IT>
    return;
 80060c0:	e02c      	b.n	800611c <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060c2:	23a4      	movs	r3, #164	; 0xa4
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	4013      	ands	r3, r2
 80060ce:	d00b      	beq.n	80060e8 <HAL_UART_IRQHandler+0x5ec>
 80060d0:	23a0      	movs	r3, #160	; 0xa0
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	05db      	lsls	r3, r3, #23
 80060da:	4013      	ands	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	0018      	movs	r0, r3
 80060e2:	f001 f9c3 	bl	800746c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060e6:	e019      	b.n	800611c <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060e8:	23a4      	movs	r3, #164	; 0xa4
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	2380      	movs	r3, #128	; 0x80
 80060f0:	045b      	lsls	r3, r3, #17
 80060f2:	4013      	ands	r3, r2
 80060f4:	d012      	beq.n	800611c <HAL_UART_IRQHandler+0x620>
 80060f6:	23a0      	movs	r3, #160	; 0xa0
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da0d      	bge.n	800611c <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0018      	movs	r0, r3
 8006104:	f001 f9aa 	bl	800745c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006108:	e008      	b.n	800611c <HAL_UART_IRQHandler+0x620>
      return;
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	e006      	b.n	800611c <HAL_UART_IRQHandler+0x620>
    return;
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	e004      	b.n	800611c <HAL_UART_IRQHandler+0x620>
      return;
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	e002      	b.n	800611c <HAL_UART_IRQHandler+0x620>
      return;
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	e000      	b.n	800611c <HAL_UART_IRQHandler+0x620>
    return;
 800611a:	46c0      	nop			; (mov r8, r8)
  }
}
 800611c:	46bd      	mov	sp, r7
 800611e:	b02a      	add	sp, #168	; 0xa8
 8006120:	bdb0      	pop	{r4, r5, r7, pc}
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	fffffeff 	.word	0xfffffeff
 8006128:	fffffedf 	.word	0xfffffedf
 800612c:	effffffe 	.word	0xeffffffe

08006130 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b002      	add	sp, #8
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b002      	add	sp, #8
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	000a      	movs	r2, r1
 800615a:	1cbb      	adds	r3, r7, #2
 800615c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	46bd      	mov	sp, r7
 8006162:	b002      	add	sp, #8
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006170:	231a      	movs	r3, #26
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2200      	movs	r2, #0
 8006176:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	4313      	orrs	r3, r2
 800618e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4abd      	ldr	r2, [pc, #756]	; (800648c <UART_SetConfig+0x324>)
 8006198:	4013      	ands	r3, r2
 800619a:	0019      	movs	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4ab8      	ldr	r2, [pc, #736]	; (8006490 <UART_SetConfig+0x328>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	0019      	movs	r1, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4aaf      	ldr	r2, [pc, #700]	; (8006494 <UART_SetConfig+0x32c>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	0019      	movs	r1, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	220f      	movs	r2, #15
 80061ec:	4393      	bics	r3, r2
 80061ee:	0019      	movs	r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4aa5      	ldr	r2, [pc, #660]	; (8006498 <UART_SetConfig+0x330>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d127      	bne.n	8006256 <UART_SetConfig+0xee>
 8006206:	4ba5      	ldr	r3, [pc, #660]	; (800649c <UART_SetConfig+0x334>)
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	2203      	movs	r2, #3
 800620c:	4013      	ands	r3, r2
 800620e:	2b03      	cmp	r3, #3
 8006210:	d017      	beq.n	8006242 <UART_SetConfig+0xda>
 8006212:	d81b      	bhi.n	800624c <UART_SetConfig+0xe4>
 8006214:	2b02      	cmp	r3, #2
 8006216:	d00a      	beq.n	800622e <UART_SetConfig+0xc6>
 8006218:	d818      	bhi.n	800624c <UART_SetConfig+0xe4>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <UART_SetConfig+0xbc>
 800621e:	2b01      	cmp	r3, #1
 8006220:	d00a      	beq.n	8006238 <UART_SetConfig+0xd0>
 8006222:	e013      	b.n	800624c <UART_SetConfig+0xe4>
 8006224:	231b      	movs	r3, #27
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e058      	b.n	80062e0 <UART_SetConfig+0x178>
 800622e:	231b      	movs	r3, #27
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	2202      	movs	r2, #2
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	e053      	b.n	80062e0 <UART_SetConfig+0x178>
 8006238:	231b      	movs	r3, #27
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	2204      	movs	r2, #4
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e04e      	b.n	80062e0 <UART_SetConfig+0x178>
 8006242:	231b      	movs	r3, #27
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	2208      	movs	r2, #8
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e049      	b.n	80062e0 <UART_SetConfig+0x178>
 800624c:	231b      	movs	r3, #27
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	2210      	movs	r2, #16
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e044      	b.n	80062e0 <UART_SetConfig+0x178>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a91      	ldr	r2, [pc, #580]	; (80064a0 <UART_SetConfig+0x338>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d127      	bne.n	80062b0 <UART_SetConfig+0x148>
 8006260:	4b8e      	ldr	r3, [pc, #568]	; (800649c <UART_SetConfig+0x334>)
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	220c      	movs	r2, #12
 8006266:	4013      	ands	r3, r2
 8006268:	2b0c      	cmp	r3, #12
 800626a:	d017      	beq.n	800629c <UART_SetConfig+0x134>
 800626c:	d81b      	bhi.n	80062a6 <UART_SetConfig+0x13e>
 800626e:	2b08      	cmp	r3, #8
 8006270:	d00a      	beq.n	8006288 <UART_SetConfig+0x120>
 8006272:	d818      	bhi.n	80062a6 <UART_SetConfig+0x13e>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <UART_SetConfig+0x116>
 8006278:	2b04      	cmp	r3, #4
 800627a:	d00a      	beq.n	8006292 <UART_SetConfig+0x12a>
 800627c:	e013      	b.n	80062a6 <UART_SetConfig+0x13e>
 800627e:	231b      	movs	r3, #27
 8006280:	18fb      	adds	r3, r7, r3
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e02b      	b.n	80062e0 <UART_SetConfig+0x178>
 8006288:	231b      	movs	r3, #27
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	2202      	movs	r2, #2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e026      	b.n	80062e0 <UART_SetConfig+0x178>
 8006292:	231b      	movs	r3, #27
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	2204      	movs	r2, #4
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e021      	b.n	80062e0 <UART_SetConfig+0x178>
 800629c:	231b      	movs	r3, #27
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	2208      	movs	r2, #8
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	e01c      	b.n	80062e0 <UART_SetConfig+0x178>
 80062a6:	231b      	movs	r3, #27
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	2210      	movs	r2, #16
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e017      	b.n	80062e0 <UART_SetConfig+0x178>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a7b      	ldr	r2, [pc, #492]	; (80064a4 <UART_SetConfig+0x33c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d104      	bne.n	80062c4 <UART_SetConfig+0x15c>
 80062ba:	231b      	movs	r3, #27
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e00d      	b.n	80062e0 <UART_SetConfig+0x178>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a77      	ldr	r2, [pc, #476]	; (80064a8 <UART_SetConfig+0x340>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d104      	bne.n	80062d8 <UART_SetConfig+0x170>
 80062ce:	231b      	movs	r3, #27
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	2200      	movs	r2, #0
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	e003      	b.n	80062e0 <UART_SetConfig+0x178>
 80062d8:	231b      	movs	r3, #27
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	2210      	movs	r2, #16
 80062de:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d000      	beq.n	80062ee <UART_SetConfig+0x186>
 80062ec:	e066      	b.n	80063bc <UART_SetConfig+0x254>
  {
    switch (clocksource)
 80062ee:	231b      	movs	r3, #27
 80062f0:	18fb      	adds	r3, r7, r3
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d015      	beq.n	8006324 <UART_SetConfig+0x1bc>
 80062f8:	dc18      	bgt.n	800632c <UART_SetConfig+0x1c4>
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d00d      	beq.n	800631a <UART_SetConfig+0x1b2>
 80062fe:	dc15      	bgt.n	800632c <UART_SetConfig+0x1c4>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <UART_SetConfig+0x1a2>
 8006304:	2b02      	cmp	r3, #2
 8006306:	d005      	beq.n	8006314 <UART_SetConfig+0x1ac>
 8006308:	e010      	b.n	800632c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630a:	f7fe f8b9 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 800630e:	0003      	movs	r3, r0
 8006310:	617b      	str	r3, [r7, #20]
        break;
 8006312:	e012      	b.n	800633a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006314:	4b65      	ldr	r3, [pc, #404]	; (80064ac <UART_SetConfig+0x344>)
 8006316:	617b      	str	r3, [r7, #20]
        break;
 8006318:	e00f      	b.n	800633a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631a:	f7fe f825 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 800631e:	0003      	movs	r3, r0
 8006320:	617b      	str	r3, [r7, #20]
        break;
 8006322:	e00a      	b.n	800633a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	617b      	str	r3, [r7, #20]
        break;
 800632a:	e006      	b.n	800633a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006330:	231a      	movs	r3, #26
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2201      	movs	r2, #1
 8006336:	701a      	strb	r2, [r3, #0]
        break;
 8006338:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d100      	bne.n	8006342 <UART_SetConfig+0x1da>
 8006340:	e08e      	b.n	8006460 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006346:	4b5a      	ldr	r3, [pc, #360]	; (80064b0 <UART_SetConfig+0x348>)
 8006348:	0052      	lsls	r2, r2, #1
 800634a:	5ad3      	ldrh	r3, [r2, r3]
 800634c:	0019      	movs	r1, r3
 800634e:	6978      	ldr	r0, [r7, #20]
 8006350:	f7f9 fed6 	bl	8000100 <__udivsi3>
 8006354:	0003      	movs	r3, r0
 8006356:	005a      	lsls	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	18d2      	adds	r2, r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	0019      	movs	r1, r3
 8006366:	0010      	movs	r0, r2
 8006368:	f7f9 feca 	bl	8000100 <__udivsi3>
 800636c:	0003      	movs	r3, r0
 800636e:	b29b      	uxth	r3, r3
 8006370:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b0f      	cmp	r3, #15
 8006376:	d91c      	bls.n	80063b2 <UART_SetConfig+0x24a>
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	025b      	lsls	r3, r3, #9
 800637e:	429a      	cmp	r2, r3
 8006380:	d217      	bcs.n	80063b2 <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	b29a      	uxth	r2, r3
 8006386:	200e      	movs	r0, #14
 8006388:	183b      	adds	r3, r7, r0
 800638a:	210f      	movs	r1, #15
 800638c:	438a      	bics	r2, r1
 800638e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	2207      	movs	r2, #7
 8006398:	4013      	ands	r3, r2
 800639a:	b299      	uxth	r1, r3
 800639c:	183b      	adds	r3, r7, r0
 800639e:	183a      	adds	r2, r7, r0
 80063a0:	8812      	ldrh	r2, [r2, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	183a      	adds	r2, r7, r0
 80063ac:	8812      	ldrh	r2, [r2, #0]
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	e056      	b.n	8006460 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 80063b2:	231a      	movs	r3, #26
 80063b4:	18fb      	adds	r3, r7, r3
 80063b6:	2201      	movs	r2, #1
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	e051      	b.n	8006460 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063bc:	231b      	movs	r3, #27
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d015      	beq.n	80063f2 <UART_SetConfig+0x28a>
 80063c6:	dc18      	bgt.n	80063fa <UART_SetConfig+0x292>
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d00d      	beq.n	80063e8 <UART_SetConfig+0x280>
 80063cc:	dc15      	bgt.n	80063fa <UART_SetConfig+0x292>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <UART_SetConfig+0x270>
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d005      	beq.n	80063e2 <UART_SetConfig+0x27a>
 80063d6:	e010      	b.n	80063fa <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7fe f852 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 80063dc:	0003      	movs	r3, r0
 80063de:	617b      	str	r3, [r7, #20]
        break;
 80063e0:	e012      	b.n	8006408 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e2:	4b32      	ldr	r3, [pc, #200]	; (80064ac <UART_SetConfig+0x344>)
 80063e4:	617b      	str	r3, [r7, #20]
        break;
 80063e6:	e00f      	b.n	8006408 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e8:	f7fd ffbe 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 80063ec:	0003      	movs	r3, r0
 80063ee:	617b      	str	r3, [r7, #20]
        break;
 80063f0:	e00a      	b.n	8006408 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	617b      	str	r3, [r7, #20]
        break;
 80063f8:	e006      	b.n	8006408 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063fe:	231a      	movs	r3, #26
 8006400:	18fb      	adds	r3, r7, r3
 8006402:	2201      	movs	r2, #1
 8006404:	701a      	strb	r2, [r3, #0]
        break;
 8006406:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d028      	beq.n	8006460 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006412:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <UART_SetConfig+0x348>)
 8006414:	0052      	lsls	r2, r2, #1
 8006416:	5ad3      	ldrh	r3, [r2, r3]
 8006418:	0019      	movs	r1, r3
 800641a:	6978      	ldr	r0, [r7, #20]
 800641c:	f7f9 fe70 	bl	8000100 <__udivsi3>
 8006420:	0003      	movs	r3, r0
 8006422:	001a      	movs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	18d2      	adds	r2, r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	0019      	movs	r1, r3
 8006432:	0010      	movs	r0, r2
 8006434:	f7f9 fe64 	bl	8000100 <__udivsi3>
 8006438:	0003      	movs	r3, r0
 800643a:	b29b      	uxth	r3, r3
 800643c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b0f      	cmp	r3, #15
 8006442:	d909      	bls.n	8006458 <UART_SetConfig+0x2f0>
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	2380      	movs	r3, #128	; 0x80
 8006448:	025b      	lsls	r3, r3, #9
 800644a:	429a      	cmp	r2, r3
 800644c:	d204      	bcs.n	8006458 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	e003      	b.n	8006460 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006458:	231a      	movs	r3, #26
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	2201      	movs	r2, #1
 800645e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	226a      	movs	r2, #106	; 0x6a
 8006464:	2101      	movs	r1, #1
 8006466:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2268      	movs	r2, #104	; 0x68
 800646c:	2101      	movs	r1, #1
 800646e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800647c:	231a      	movs	r3, #26
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781b      	ldrb	r3, [r3, #0]
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	b008      	add	sp, #32
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	cfff69f3 	.word	0xcfff69f3
 8006490:	ffffcfff 	.word	0xffffcfff
 8006494:	11fff4ff 	.word	0x11fff4ff
 8006498:	40013800 	.word	0x40013800
 800649c:	40021000 	.word	0x40021000
 80064a0:	40004400 	.word	0x40004400
 80064a4:	40004800 	.word	0x40004800
 80064a8:	40004c00 	.word	0x40004c00
 80064ac:	00f42400 	.word	0x00f42400
 80064b0:	08009358 	.word	0x08009358

080064b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	2201      	movs	r2, #1
 80064c2:	4013      	ands	r3, r2
 80064c4:	d00b      	beq.n	80064de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4a4a      	ldr	r2, [pc, #296]	; (80065f8 <UART_AdvFeatureConfig+0x144>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	0019      	movs	r1, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	2202      	movs	r2, #2
 80064e4:	4013      	ands	r3, r2
 80064e6:	d00b      	beq.n	8006500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4a43      	ldr	r2, [pc, #268]	; (80065fc <UART_AdvFeatureConfig+0x148>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	0019      	movs	r1, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	2204      	movs	r2, #4
 8006506:	4013      	ands	r3, r2
 8006508:	d00b      	beq.n	8006522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4a3b      	ldr	r2, [pc, #236]	; (8006600 <UART_AdvFeatureConfig+0x14c>)
 8006512:	4013      	ands	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	2208      	movs	r2, #8
 8006528:	4013      	ands	r3, r2
 800652a:	d00b      	beq.n	8006544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4a34      	ldr	r2, [pc, #208]	; (8006604 <UART_AdvFeatureConfig+0x150>)
 8006534:	4013      	ands	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	2210      	movs	r2, #16
 800654a:	4013      	ands	r3, r2
 800654c:	d00b      	beq.n	8006566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	4a2c      	ldr	r2, [pc, #176]	; (8006608 <UART_AdvFeatureConfig+0x154>)
 8006556:	4013      	ands	r3, r2
 8006558:	0019      	movs	r1, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	2220      	movs	r2, #32
 800656c:	4013      	ands	r3, r2
 800656e:	d00b      	beq.n	8006588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	4a25      	ldr	r2, [pc, #148]	; (800660c <UART_AdvFeatureConfig+0x158>)
 8006578:	4013      	ands	r3, r2
 800657a:	0019      	movs	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658c:	2240      	movs	r2, #64	; 0x40
 800658e:	4013      	ands	r3, r2
 8006590:	d01d      	beq.n	80065ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <UART_AdvFeatureConfig+0x15c>)
 800659a:	4013      	ands	r3, r2
 800659c:	0019      	movs	r1, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	035b      	lsls	r3, r3, #13
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d10b      	bne.n	80065ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <UART_AdvFeatureConfig+0x160>)
 80065be:	4013      	ands	r3, r2
 80065c0:	0019      	movs	r1, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d2:	2280      	movs	r2, #128	; 0x80
 80065d4:	4013      	ands	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4a0e      	ldr	r2, [pc, #56]	; (8006618 <UART_AdvFeatureConfig+0x164>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	0019      	movs	r1, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	605a      	str	r2, [r3, #4]
  }
}
 80065f0:	46c0      	nop			; (mov r8, r8)
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b002      	add	sp, #8
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	fffdffff 	.word	0xfffdffff
 80065fc:	fffeffff 	.word	0xfffeffff
 8006600:	fffbffff 	.word	0xfffbffff
 8006604:	ffff7fff 	.word	0xffff7fff
 8006608:	ffffefff 	.word	0xffffefff
 800660c:	ffffdfff 	.word	0xffffdfff
 8006610:	ffefffff 	.word	0xffefffff
 8006614:	ff9fffff 	.word	0xff9fffff
 8006618:	fff7ffff 	.word	0xfff7ffff

0800661c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	228c      	movs	r2, #140	; 0x8c
 8006628:	2100      	movs	r1, #0
 800662a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800662c:	f7fc fc56 	bl	8002edc <HAL_GetTick>
 8006630:	0003      	movs	r3, r0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2208      	movs	r2, #8
 800663c:	4013      	ands	r3, r2
 800663e:	2b08      	cmp	r3, #8
 8006640:	d10c      	bne.n	800665c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2280      	movs	r2, #128	; 0x80
 8006646:	0391      	lsls	r1, r2, #14
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4a18      	ldr	r2, [pc, #96]	; (80066ac <UART_CheckIdleState+0x90>)
 800664c:	9200      	str	r2, [sp, #0]
 800664e:	2200      	movs	r2, #0
 8006650:	f000 f82e 	bl	80066b0 <UART_WaitOnFlagUntilTimeout>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d001      	beq.n	800665c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e023      	b.n	80066a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2204      	movs	r2, #4
 8006664:	4013      	ands	r3, r2
 8006666:	2b04      	cmp	r3, #4
 8006668:	d10c      	bne.n	8006684 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2280      	movs	r2, #128	; 0x80
 800666e:	03d1      	lsls	r1, r2, #15
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4a0e      	ldr	r2, [pc, #56]	; (80066ac <UART_CheckIdleState+0x90>)
 8006674:	9200      	str	r2, [sp, #0]
 8006676:	2200      	movs	r2, #0
 8006678:	f000 f81a 	bl	80066b0 <UART_WaitOnFlagUntilTimeout>
 800667c:	1e03      	subs	r3, r0, #0
 800667e:	d001      	beq.n	8006684 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e00f      	b.n	80066a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2284      	movs	r2, #132	; 0x84
 8006688:	2120      	movs	r1, #32
 800668a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2288      	movs	r2, #136	; 0x88
 8006690:	2120      	movs	r1, #32
 8006692:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2280      	movs	r2, #128	; 0x80
 800669e:	2100      	movs	r1, #0
 80066a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	0018      	movs	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b004      	add	sp, #16
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	01ffffff 	.word	0x01ffffff

080066b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b094      	sub	sp, #80	; 0x50
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	1dfb      	adds	r3, r7, #7
 80066be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c0:	e0a7      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c4:	3301      	adds	r3, #1
 80066c6:	d100      	bne.n	80066ca <UART_WaitOnFlagUntilTimeout+0x1a>
 80066c8:	e0a3      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ca:	f7fc fc07 	bl	8002edc <HAL_GetTick>
 80066ce:	0002      	movs	r2, r0
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d302      	bcc.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d13f      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066e8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ea:	2301      	movs	r3, #1
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	f383 8810 	msr	PRIMASK, r3
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	494e      	ldr	r1, [pc, #312]	; (800683c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006702:	400a      	ands	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006712:	f3ef 8310 	mrs	r3, PRIMASK
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	643b      	str	r3, [r7, #64]	; 0x40
 800671c:	2301      	movs	r3, #1
 800671e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f383 8810 	msr	PRIMASK, r3
}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2101      	movs	r1, #1
 8006734:	438a      	bics	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800673e:	f383 8810 	msr	PRIMASK, r3
}
 8006742:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2284      	movs	r2, #132	; 0x84
 8006748:	2120      	movs	r1, #32
 800674a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2288      	movs	r2, #136	; 0x88
 8006750:	2120      	movs	r1, #32
 8006752:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2280      	movs	r2, #128	; 0x80
 8006758:	2100      	movs	r1, #0
 800675a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e069      	b.n	8006834 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2204      	movs	r2, #4
 8006768:	4013      	ands	r3, r2
 800676a:	d052      	beq.n	8006812 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	401a      	ands	r2, r3
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	429a      	cmp	r2, r3
 800677e:	d148      	bne.n	8006812 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2280      	movs	r2, #128	; 0x80
 8006786:	0112      	lsls	r2, r2, #4
 8006788:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800678a:	f3ef 8310 	mrs	r3, PRIMASK
 800678e:	613b      	str	r3, [r7, #16]
  return(result);
 8006790:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006794:	2301      	movs	r3, #1
 8006796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f383 8810 	msr	PRIMASK, r3
}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4924      	ldr	r1, [pc, #144]	; (800683c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80067ac:	400a      	ands	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f383 8810 	msr	PRIMASK, r3
}
 80067ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067bc:	f3ef 8310 	mrs	r3, PRIMASK
 80067c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80067c2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c6:	2301      	movs	r3, #1
 80067c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	f383 8810 	msr	PRIMASK, r3
}
 80067d0:	46c0      	nop			; (mov r8, r8)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2101      	movs	r1, #1
 80067de:	438a      	bics	r2, r1
 80067e0:	609a      	str	r2, [r3, #8]
 80067e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	f383 8810 	msr	PRIMASK, r3
}
 80067ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2284      	movs	r2, #132	; 0x84
 80067f2:	2120      	movs	r1, #32
 80067f4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2288      	movs	r2, #136	; 0x88
 80067fa:	2120      	movs	r1, #32
 80067fc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	228c      	movs	r2, #140	; 0x8c
 8006802:	2120      	movs	r1, #32
 8006804:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2280      	movs	r2, #128	; 0x80
 800680a:	2100      	movs	r1, #0
 800680c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e010      	b.n	8006834 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4013      	ands	r3, r2
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	425a      	negs	r2, r3
 8006822:	4153      	adcs	r3, r2
 8006824:	b2db      	uxtb	r3, r3
 8006826:	001a      	movs	r2, r3
 8006828:	1dfb      	adds	r3, r7, #7
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d100      	bne.n	8006832 <UART_WaitOnFlagUntilTimeout+0x182>
 8006830:	e747      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	0018      	movs	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	b014      	add	sp, #80	; 0x50
 800683a:	bd80      	pop	{r7, pc}
 800683c:	fffffe5f 	.word	0xfffffe5f

08006840 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b094      	sub	sp, #80	; 0x50
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	1dbb      	adds	r3, r7, #6
 800684c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1dba      	adds	r2, r7, #6
 8006858:	215c      	movs	r1, #92	; 0x5c
 800685a:	8812      	ldrh	r2, [r2, #0]
 800685c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1dba      	adds	r2, r7, #6
 8006862:	215e      	movs	r1, #94	; 0x5e
 8006864:	8812      	ldrh	r2, [r2, #0]
 8006866:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	015b      	lsls	r3, r3, #5
 8006876:	429a      	cmp	r2, r3
 8006878:	d10d      	bne.n	8006896 <UART_Start_Receive_IT+0x56>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <UART_Start_Receive_IT+0x4c>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2260      	movs	r2, #96	; 0x60
 8006886:	496f      	ldr	r1, [pc, #444]	; (8006a44 <UART_Start_Receive_IT+0x204>)
 8006888:	5299      	strh	r1, [r3, r2]
 800688a:	e02e      	b.n	80068ea <UART_Start_Receive_IT+0xaa>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2260      	movs	r2, #96	; 0x60
 8006890:	21ff      	movs	r1, #255	; 0xff
 8006892:	5299      	strh	r1, [r3, r2]
 8006894:	e029      	b.n	80068ea <UART_Start_Receive_IT+0xaa>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10d      	bne.n	80068ba <UART_Start_Receive_IT+0x7a>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <UART_Start_Receive_IT+0x70>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2260      	movs	r2, #96	; 0x60
 80068aa:	21ff      	movs	r1, #255	; 0xff
 80068ac:	5299      	strh	r1, [r3, r2]
 80068ae:	e01c      	b.n	80068ea <UART_Start_Receive_IT+0xaa>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2260      	movs	r2, #96	; 0x60
 80068b4:	217f      	movs	r1, #127	; 0x7f
 80068b6:	5299      	strh	r1, [r3, r2]
 80068b8:	e017      	b.n	80068ea <UART_Start_Receive_IT+0xaa>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	2380      	movs	r3, #128	; 0x80
 80068c0:	055b      	lsls	r3, r3, #21
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d10d      	bne.n	80068e2 <UART_Start_Receive_IT+0xa2>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d104      	bne.n	80068d8 <UART_Start_Receive_IT+0x98>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2260      	movs	r2, #96	; 0x60
 80068d2:	217f      	movs	r1, #127	; 0x7f
 80068d4:	5299      	strh	r1, [r3, r2]
 80068d6:	e008      	b.n	80068ea <UART_Start_Receive_IT+0xaa>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2260      	movs	r2, #96	; 0x60
 80068dc:	213f      	movs	r1, #63	; 0x3f
 80068de:	5299      	strh	r1, [r3, r2]
 80068e0:	e003      	b.n	80068ea <UART_Start_Receive_IT+0xaa>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2260      	movs	r2, #96	; 0x60
 80068e6:	2100      	movs	r1, #0
 80068e8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	228c      	movs	r2, #140	; 0x8c
 80068ee:	2100      	movs	r1, #0
 80068f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2288      	movs	r2, #136	; 0x88
 80068f6:	2122      	movs	r1, #34	; 0x22
 80068f8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fa:	f3ef 8310 	mrs	r3, PRIMASK
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006900:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006904:	2301      	movs	r3, #1
 8006906:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2101      	movs	r1, #1
 800691c:	430a      	orrs	r2, r1
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	f383 8810 	msr	PRIMASK, r3
}
 800692a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	059b      	lsls	r3, r3, #22
 8006934:	429a      	cmp	r2, r3
 8006936:	d150      	bne.n	80069da <UART_Start_Receive_IT+0x19a>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2268      	movs	r2, #104	; 0x68
 800693c:	5a9b      	ldrh	r3, [r3, r2]
 800693e:	1dba      	adds	r2, r7, #6
 8006940:	8812      	ldrh	r2, [r2, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d349      	bcc.n	80069da <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	2380      	movs	r3, #128	; 0x80
 800694c:	015b      	lsls	r3, r3, #5
 800694e:	429a      	cmp	r2, r3
 8006950:	d107      	bne.n	8006962 <UART_Start_Receive_IT+0x122>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4a3a      	ldr	r2, [pc, #232]	; (8006a48 <UART_Start_Receive_IT+0x208>)
 800695e:	671a      	str	r2, [r3, #112]	; 0x70
 8006960:	e002      	b.n	8006968 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a39      	ldr	r2, [pc, #228]	; (8006a4c <UART_Start_Receive_IT+0x20c>)
 8006966:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2280      	movs	r2, #128	; 0x80
 800696c:	2100      	movs	r1, #0
 800696e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006970:	f3ef 8310 	mrs	r3, PRIMASK
 8006974:	61fb      	str	r3, [r7, #28]
  return(result);
 8006976:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006978:	64bb      	str	r3, [r7, #72]	; 0x48
 800697a:	2301      	movs	r3, #1
 800697c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	f383 8810 	msr	PRIMASK, r3
}
 8006984:	46c0      	nop			; (mov r8, r8)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2180      	movs	r1, #128	; 0x80
 8006992:	0049      	lsls	r1, r1, #1
 8006994:	430a      	orrs	r2, r1
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	f383 8810 	msr	PRIMASK, r3
}
 80069a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a4:	f3ef 8310 	mrs	r3, PRIMASK
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069ac:	647b      	str	r3, [r7, #68]	; 0x44
 80069ae:	2301      	movs	r3, #1
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	f383 8810 	msr	PRIMASK, r3
}
 80069b8:	46c0      	nop			; (mov r8, r8)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	0549      	lsls	r1, r1, #21
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	f383 8810 	msr	PRIMASK, r3
}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	e02e      	b.n	8006a38 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	2380      	movs	r3, #128	; 0x80
 80069e0:	015b      	lsls	r3, r3, #5
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d107      	bne.n	80069f6 <UART_Start_Receive_IT+0x1b6>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <UART_Start_Receive_IT+0x210>)
 80069f2:	671a      	str	r2, [r3, #112]	; 0x70
 80069f4:	e002      	b.n	80069fc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <UART_Start_Receive_IT+0x214>)
 80069fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2280      	movs	r2, #128	; 0x80
 8006a00:	2100      	movs	r1, #0
 8006a02:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a04:	f3ef 8310 	mrs	r3, PRIMASK
 8006a08:	613b      	str	r3, [r7, #16]
  return(result);
 8006a0a:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a0e:	2301      	movs	r3, #1
 8006a10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f383 8810 	msr	PRIMASK, r3
}
 8006a18:	46c0      	nop			; (mov r8, r8)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2190      	movs	r1, #144	; 0x90
 8006a26:	0049      	lsls	r1, r1, #1
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f383 8810 	msr	PRIMASK, r3
}
 8006a36:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b014      	add	sp, #80	; 0x50
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	000001ff 	.word	0x000001ff
 8006a48:	08007169 	.word	0x08007169
 8006a4c:	08006e85 	.word	0x08006e85
 8006a50:	08006d19 	.word	0x08006d19
 8006a54:	08006bad 	.word	0x08006bad

08006a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08e      	sub	sp, #56	; 0x38
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a60:	f3ef 8310 	mrs	r3, PRIMASK
 8006a64:	617b      	str	r3, [r7, #20]
  return(result);
 8006a66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f383 8810 	msr	PRIMASK, r3
}
 8006a74:	46c0      	nop			; (mov r8, r8)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4926      	ldr	r1, [pc, #152]	; (8006b1c <UART_EndRxTransfer+0xc4>)
 8006a82:	400a      	ands	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f383 8810 	msr	PRIMASK, r3
}
 8006a90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a92:	f3ef 8310 	mrs	r3, PRIMASK
 8006a96:	623b      	str	r3, [r7, #32]
  return(result);
 8006a98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	f383 8810 	msr	PRIMASK, r3
}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	491b      	ldr	r1, [pc, #108]	; (8006b20 <UART_EndRxTransfer+0xc8>)
 8006ab4:	400a      	ands	r2, r1
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	f383 8810 	msr	PRIMASK, r3
}
 8006ac2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d118      	bne.n	8006afe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006acc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f383 8810 	msr	PRIMASK, r3
}
 8006ae0:	46c0      	nop			; (mov r8, r8)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2110      	movs	r1, #16
 8006aee:	438a      	bics	r2, r1
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f383 8810 	msr	PRIMASK, r3
}
 8006afc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2288      	movs	r2, #136	; 0x88
 8006b02:	2120      	movs	r1, #32
 8006b04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b00e      	add	sp, #56	; 0x38
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	fffffedf 	.word	0xfffffedf
 8006b20:	effffffe 	.word	0xeffffffe

08006b24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	225e      	movs	r2, #94	; 0x5e
 8006b36:	2100      	movs	r1, #0
 8006b38:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2256      	movs	r2, #86	; 0x56
 8006b3e:	2100      	movs	r1, #0
 8006b40:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	0018      	movs	r0, r3
 8006b46:	f7ff fafb 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b004      	add	sp, #16
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b086      	sub	sp, #24
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b60:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	2301      	movs	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f383 8810 	msr	PRIMASK, r3
}
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2140      	movs	r1, #64	; 0x40
 8006b7c:	438a      	bics	r2, r1
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f383 8810 	msr	PRIMASK, r3
}
 8006b8a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2284      	movs	r2, #132	; 0x84
 8006b90:	2120      	movs	r1, #32
 8006b92:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7ff fac7 	bl	8006130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b006      	add	sp, #24
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b090      	sub	sp, #64	; 0x40
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bb4:	203e      	movs	r0, #62	; 0x3e
 8006bb6:	183b      	adds	r3, r7, r0
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	2160      	movs	r1, #96	; 0x60
 8006bbc:	5a52      	ldrh	r2, [r2, r1]
 8006bbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2288      	movs	r2, #136	; 0x88
 8006bc4:	589b      	ldr	r3, [r3, r2]
 8006bc6:	2b22      	cmp	r3, #34	; 0x22
 8006bc8:	d000      	beq.n	8006bcc <UART_RxISR_8BIT+0x20>
 8006bca:	e097      	b.n	8006cfc <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bd2:	213c      	movs	r1, #60	; 0x3c
 8006bd4:	187b      	adds	r3, r7, r1
 8006bd6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bd8:	187b      	adds	r3, r7, r1
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	183b      	adds	r3, r7, r0
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b2d9      	uxtb	r1, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be8:	400a      	ands	r2, r1
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	225e      	movs	r2, #94	; 0x5e
 8006bfc:	5a9b      	ldrh	r3, [r3, r2]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b299      	uxth	r1, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	225e      	movs	r2, #94	; 0x5e
 8006c08:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	225e      	movs	r2, #94	; 0x5e
 8006c0e:	5a9b      	ldrh	r3, [r3, r2]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d000      	beq.n	8006c18 <UART_RxISR_8BIT+0x6c>
 8006c16:	e079      	b.n	8006d0c <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c18:	f3ef 8310 	mrs	r3, PRIMASK
 8006c1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c22:	2301      	movs	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	f383 8810 	msr	PRIMASK, r3
}
 8006c2c:	46c0      	nop			; (mov r8, r8)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4936      	ldr	r1, [pc, #216]	; (8006d14 <UART_RxISR_8BIT+0x168>)
 8006c3a:	400a      	ands	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	f383 8810 	msr	PRIMASK, r3
}
 8006c48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	637b      	str	r3, [r7, #52]	; 0x34
 8006c54:	2301      	movs	r3, #1
 8006c56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f383 8810 	msr	PRIMASK, r3
}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	438a      	bics	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	f383 8810 	msr	PRIMASK, r3
}
 8006c7a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2288      	movs	r2, #136	; 0x88
 8006c80:	2120      	movs	r1, #32
 8006c82:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d12f      	bne.n	8006cf2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c98:	f3ef 8310 	mrs	r3, PRIMASK
 8006c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c9e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f383 8810 	msr	PRIMASK, r3
}
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2110      	movs	r1, #16
 8006cba:	438a      	bics	r2, r1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f383 8810 	msr	PRIMASK, r3
}
 8006cc8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	2210      	movs	r2, #16
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b10      	cmp	r3, #16
 8006cd6:	d103      	bne.n	8006ce0 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2210      	movs	r2, #16
 8006cde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	225c      	movs	r2, #92	; 0x5c
 8006ce4:	5a9a      	ldrh	r2, [r3, r2]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0011      	movs	r1, r2
 8006cea:	0018      	movs	r0, r3
 8006cec:	f7ff fa30 	bl	8006150 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cf0:	e00c      	b.n	8006d0c <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f7fb fd4b 	bl	8002790 <HAL_UART_RxCpltCallback>
}
 8006cfa:	e007      	b.n	8006d0c <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2108      	movs	r1, #8
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	619a      	str	r2, [r3, #24]
}
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b010      	add	sp, #64	; 0x40
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	fffffedf 	.word	0xfffffedf

08006d18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b090      	sub	sp, #64	; 0x40
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d20:	203e      	movs	r0, #62	; 0x3e
 8006d22:	183b      	adds	r3, r7, r0
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	2160      	movs	r1, #96	; 0x60
 8006d28:	5a52      	ldrh	r2, [r2, r1]
 8006d2a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2288      	movs	r2, #136	; 0x88
 8006d30:	589b      	ldr	r3, [r3, r2]
 8006d32:	2b22      	cmp	r3, #34	; 0x22
 8006d34:	d000      	beq.n	8006d38 <UART_RxISR_16BIT+0x20>
 8006d36:	e097      	b.n	8006e68 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d3e:	213c      	movs	r1, #60	; 0x3c
 8006d40:	187b      	adds	r3, r7, r1
 8006d42:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	183a      	adds	r2, r7, r0
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	8812      	ldrh	r2, [r2, #0]
 8006d52:	4013      	ands	r3, r2
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	1c9a      	adds	r2, r3, #2
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	225e      	movs	r2, #94	; 0x5e
 8006d68:	5a9b      	ldrh	r3, [r3, r2]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b299      	uxth	r1, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	225e      	movs	r2, #94	; 0x5e
 8006d74:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	225e      	movs	r2, #94	; 0x5e
 8006d7a:	5a9b      	ldrh	r3, [r3, r2]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d000      	beq.n	8006d84 <UART_RxISR_16BIT+0x6c>
 8006d82:	e079      	b.n	8006e78 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d84:	f3ef 8310 	mrs	r3, PRIMASK
 8006d88:	617b      	str	r3, [r7, #20]
  return(result);
 8006d8a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8e:	2301      	movs	r3, #1
 8006d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f383 8810 	msr	PRIMASK, r3
}
 8006d98:	46c0      	nop			; (mov r8, r8)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4936      	ldr	r1, [pc, #216]	; (8006e80 <UART_RxISR_16BIT+0x168>)
 8006da6:	400a      	ands	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	f383 8810 	msr	PRIMASK, r3
}
 8006db4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dba:	623b      	str	r3, [r7, #32]
  return(result);
 8006dbc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	f383 8810 	msr	PRIMASK, r3
}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	438a      	bics	r2, r1
 8006dda:	609a      	str	r2, [r3, #8]
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	f383 8810 	msr	PRIMASK, r3
}
 8006de6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2288      	movs	r2, #136	; 0x88
 8006dec:	2120      	movs	r1, #32
 8006dee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d12f      	bne.n	8006e5e <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e04:	f3ef 8310 	mrs	r3, PRIMASK
 8006e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e0a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e0e:	2301      	movs	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f383 8810 	msr	PRIMASK, r3
}
 8006e18:	46c0      	nop			; (mov r8, r8)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2110      	movs	r1, #16
 8006e26:	438a      	bics	r2, r1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f383 8810 	msr	PRIMASK, r3
}
 8006e34:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	2210      	movs	r2, #16
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d103      	bne.n	8006e4c <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2210      	movs	r2, #16
 8006e4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	225c      	movs	r2, #92	; 0x5c
 8006e50:	5a9a      	ldrh	r2, [r3, r2]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	0011      	movs	r1, r2
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7ff f97a 	bl	8006150 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e5c:	e00c      	b.n	8006e78 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7fb fc95 	bl	8002790 <HAL_UART_RxCpltCallback>
}
 8006e66:	e007      	b.n	8006e78 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2108      	movs	r1, #8
 8006e74:	430a      	orrs	r2, r1
 8006e76:	619a      	str	r2, [r3, #24]
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b010      	add	sp, #64	; 0x40
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	fffffedf 	.word	0xfffffedf

08006e84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b09c      	sub	sp, #112	; 0x70
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e8c:	236a      	movs	r3, #106	; 0x6a
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	2160      	movs	r1, #96	; 0x60
 8006e94:	5a52      	ldrh	r2, [r2, r1]
 8006e96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2288      	movs	r2, #136	; 0x88
 8006eb4:	589b      	ldr	r3, [r3, r2]
 8006eb6:	2b22      	cmp	r3, #34	; 0x22
 8006eb8:	d000      	beq.n	8006ebc <UART_RxISR_8BIT_FIFOEN+0x38>
 8006eba:	e141      	b.n	8007140 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ebc:	235e      	movs	r3, #94	; 0x5e
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	2168      	movs	r1, #104	; 0x68
 8006ec4:	5a52      	ldrh	r2, [r2, r1]
 8006ec6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ec8:	e0e8      	b.n	800709c <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed0:	215c      	movs	r1, #92	; 0x5c
 8006ed2:	187b      	adds	r3, r7, r1
 8006ed4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ed6:	187b      	adds	r3, r7, r1
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	236a      	movs	r3, #106	; 0x6a
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b2d9      	uxtb	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee8:	400a      	ands	r2, r1
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	225e      	movs	r2, #94	; 0x5e
 8006efc:	5a9b      	ldrh	r3, [r3, r2]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b299      	uxth	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	225e      	movs	r2, #94	; 0x5e
 8006f08:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f14:	2207      	movs	r2, #7
 8006f16:	4013      	ands	r3, r2
 8006f18:	d049      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d010      	beq.n	8006f44 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006f22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f24:	2380      	movs	r3, #128	; 0x80
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d00b      	beq.n	8006f44 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2201      	movs	r2, #1
 8006f32:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	228c      	movs	r2, #140	; 0x8c
 8006f38:	589b      	ldr	r3, [r3, r2]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	218c      	movs	r1, #140	; 0x8c
 8006f42:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f46:	2202      	movs	r2, #2
 8006f48:	4013      	ands	r3, r2
 8006f4a:	d00f      	beq.n	8006f6c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4013      	ands	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	228c      	movs	r2, #140	; 0x8c
 8006f60:	589b      	ldr	r3, [r3, r2]
 8006f62:	2204      	movs	r2, #4
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	218c      	movs	r1, #140	; 0x8c
 8006f6a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6e:	2204      	movs	r2, #4
 8006f70:	4013      	ands	r3, r2
 8006f72:	d00f      	beq.n	8006f94 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f76:	2201      	movs	r2, #1
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d00b      	beq.n	8006f94 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2204      	movs	r2, #4
 8006f82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	228c      	movs	r2, #140	; 0x8c
 8006f88:	589b      	ldr	r3, [r3, r2]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	218c      	movs	r1, #140	; 0x8c
 8006f92:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	228c      	movs	r2, #140	; 0x8c
 8006f98:	589b      	ldr	r3, [r3, r2]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff f8cd 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	228c      	movs	r2, #140	; 0x8c
 8006faa:	2100      	movs	r1, #0
 8006fac:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	225e      	movs	r2, #94	; 0x5e
 8006fb2:	5a9b      	ldrh	r3, [r3, r2]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d170      	bne.n	800709c <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fba:	f3ef 8310 	mrs	r3, PRIMASK
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	f383 8810 	msr	PRIMASK, r3
}
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	495f      	ldr	r1, [pc, #380]	; (8007158 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8006fdc:	400a      	ands	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe6:	f383 8810 	msr	PRIMASK, r3
}
 8006fea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fec:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ff4:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	f383 8810 	msr	PRIMASK, r3
}
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4953      	ldr	r1, [pc, #332]	; (800715c <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800700e:	400a      	ands	r2, r1
 8007010:	609a      	str	r2, [r3, #8]
 8007012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007014:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007018:	f383 8810 	msr	PRIMASK, r3
}
 800701c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2288      	movs	r2, #136	; 0x88
 8007022:	2120      	movs	r1, #32
 8007024:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d12f      	bne.n	8007094 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703a:	f3ef 8310 	mrs	r3, PRIMASK
 800703e:	623b      	str	r3, [r7, #32]
  return(result);
 8007040:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007042:	653b      	str	r3, [r7, #80]	; 0x50
 8007044:	2301      	movs	r3, #1
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	f383 8810 	msr	PRIMASK, r3
}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2110      	movs	r1, #16
 800705c:	438a      	bics	r2, r1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	f383 8810 	msr	PRIMASK, r3
}
 800706a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	2210      	movs	r2, #16
 8007074:	4013      	ands	r3, r2
 8007076:	2b10      	cmp	r3, #16
 8007078:	d103      	bne.n	8007082 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2210      	movs	r2, #16
 8007080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	225c      	movs	r2, #92	; 0x5c
 8007086:	5a9a      	ldrh	r2, [r3, r2]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	0011      	movs	r1, r2
 800708c:	0018      	movs	r0, r3
 800708e:	f7ff f85f 	bl	8006150 <HAL_UARTEx_RxEventCallback>
 8007092:	e003      	b.n	800709c <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	0018      	movs	r0, r3
 8007098:	f7fb fb7a 	bl	8002790 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800709c:	235e      	movs	r3, #94	; 0x5e
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d004      	beq.n	80070b0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80070a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a8:	2220      	movs	r2, #32
 80070aa:	4013      	ands	r3, r2
 80070ac:	d000      	beq.n	80070b0 <UART_RxISR_8BIT_FIFOEN+0x22c>
 80070ae:	e70c      	b.n	8006eca <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070b0:	204e      	movs	r0, #78	; 0x4e
 80070b2:	183b      	adds	r3, r7, r0
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	215e      	movs	r1, #94	; 0x5e
 80070b8:	5a52      	ldrh	r2, [r2, r1]
 80070ba:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070bc:	0001      	movs	r1, r0
 80070be:	187b      	adds	r3, r7, r1
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d044      	beq.n	8007150 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2268      	movs	r2, #104	; 0x68
 80070ca:	5a9b      	ldrh	r3, [r3, r2]
 80070cc:	187a      	adds	r2, r7, r1
 80070ce:	8812      	ldrh	r2, [r2, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d23d      	bcs.n	8007150 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d4:	f3ef 8310 	mrs	r3, PRIMASK
 80070d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80070da:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070de:	2301      	movs	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f383 8810 	msr	PRIMASK, r3
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	491a      	ldr	r1, [pc, #104]	; (8007160 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80070f6:	400a      	ands	r2, r1
 80070f8:	609a      	str	r2, [r3, #8]
 80070fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f383 8810 	msr	PRIMASK, r3
}
 8007104:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a16      	ldr	r2, [pc, #88]	; (8007164 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800710a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710c:	f3ef 8310 	mrs	r3, PRIMASK
 8007110:	617b      	str	r3, [r7, #20]
  return(result);
 8007112:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007114:	647b      	str	r3, [r7, #68]	; 0x44
 8007116:	2301      	movs	r3, #1
 8007118:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f383 8810 	msr	PRIMASK, r3
}
 8007120:	46c0      	nop			; (mov r8, r8)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2120      	movs	r1, #32
 800712e:	430a      	orrs	r2, r1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f383 8810 	msr	PRIMASK, r3
}
 800713c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800713e:	e007      	b.n	8007150 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2108      	movs	r1, #8
 800714c:	430a      	orrs	r2, r1
 800714e:	619a      	str	r2, [r3, #24]
}
 8007150:	46c0      	nop			; (mov r8, r8)
 8007152:	46bd      	mov	sp, r7
 8007154:	b01c      	add	sp, #112	; 0x70
 8007156:	bd80      	pop	{r7, pc}
 8007158:	fffffeff 	.word	0xfffffeff
 800715c:	effffffe 	.word	0xeffffffe
 8007160:	efffffff 	.word	0xefffffff
 8007164:	08006bad 	.word	0x08006bad

08007168 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b09e      	sub	sp, #120	; 0x78
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007170:	2372      	movs	r3, #114	; 0x72
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	2160      	movs	r1, #96	; 0x60
 8007178:	5a52      	ldrh	r2, [r2, r1]
 800717a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2288      	movs	r2, #136	; 0x88
 8007198:	589b      	ldr	r3, [r3, r2]
 800719a:	2b22      	cmp	r3, #34	; 0x22
 800719c:	d000      	beq.n	80071a0 <UART_RxISR_16BIT_FIFOEN+0x38>
 800719e:	e141      	b.n	8007424 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071a0:	2366      	movs	r3, #102	; 0x66
 80071a2:	18fb      	adds	r3, r7, r3
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	2168      	movs	r1, #104	; 0x68
 80071a8:	5a52      	ldrh	r2, [r2, r1]
 80071aa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071ac:	e0e8      	b.n	8007380 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071b4:	2164      	movs	r1, #100	; 0x64
 80071b6:	187b      	adds	r3, r7, r1
 80071b8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071be:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80071c0:	187b      	adds	r3, r7, r1
 80071c2:	2272      	movs	r2, #114	; 0x72
 80071c4:	18ba      	adds	r2, r7, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	8812      	ldrh	r2, [r2, #0]
 80071ca:	4013      	ands	r3, r2
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d6:	1c9a      	adds	r2, r3, #2
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	225e      	movs	r2, #94	; 0x5e
 80071e0:	5a9b      	ldrh	r3, [r3, r2]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b299      	uxth	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	225e      	movs	r2, #94	; 0x5e
 80071ec:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f8:	2207      	movs	r2, #7
 80071fa:	4013      	ands	r3, r2
 80071fc:	d049      	beq.n	8007292 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007200:	2201      	movs	r2, #1
 8007202:	4013      	ands	r3, r2
 8007204:	d010      	beq.n	8007228 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007206:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4013      	ands	r3, r2
 800720e:	d00b      	beq.n	8007228 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2201      	movs	r2, #1
 8007216:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	228c      	movs	r2, #140	; 0x8c
 800721c:	589b      	ldr	r3, [r3, r2]
 800721e:	2201      	movs	r2, #1
 8007220:	431a      	orrs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	218c      	movs	r1, #140	; 0x8c
 8007226:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722a:	2202      	movs	r2, #2
 800722c:	4013      	ands	r3, r2
 800722e:	d00f      	beq.n	8007250 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007230:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007232:	2201      	movs	r2, #1
 8007234:	4013      	ands	r3, r2
 8007236:	d00b      	beq.n	8007250 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2202      	movs	r2, #2
 800723e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	228c      	movs	r2, #140	; 0x8c
 8007244:	589b      	ldr	r3, [r3, r2]
 8007246:	2204      	movs	r2, #4
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	218c      	movs	r1, #140	; 0x8c
 800724e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007252:	2204      	movs	r2, #4
 8007254:	4013      	ands	r3, r2
 8007256:	d00f      	beq.n	8007278 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800725a:	2201      	movs	r2, #1
 800725c:	4013      	ands	r3, r2
 800725e:	d00b      	beq.n	8007278 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2204      	movs	r2, #4
 8007266:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	228c      	movs	r2, #140	; 0x8c
 800726c:	589b      	ldr	r3, [r3, r2]
 800726e:	2202      	movs	r2, #2
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	218c      	movs	r1, #140	; 0x8c
 8007276:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	228c      	movs	r2, #140	; 0x8c
 800727c:	589b      	ldr	r3, [r3, r2]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0018      	movs	r0, r3
 8007286:	f7fe ff5b 	bl	8006140 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	228c      	movs	r2, #140	; 0x8c
 800728e:	2100      	movs	r1, #0
 8007290:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	225e      	movs	r2, #94	; 0x5e
 8007296:	5a9b      	ldrh	r3, [r3, r2]
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d170      	bne.n	8007380 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729e:	f3ef 8310 	mrs	r3, PRIMASK
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a8:	2301      	movs	r3, #1
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	495f      	ldr	r1, [pc, #380]	; (800743c <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 80072c0:	400a      	ands	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	f383 8810 	msr	PRIMASK, r3
}
 80072ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d0:	f3ef 8310 	mrs	r3, PRIMASK
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80072da:	2301      	movs	r3, #1
 80072dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e0:	f383 8810 	msr	PRIMASK, r3
}
 80072e4:	46c0      	nop			; (mov r8, r8)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4953      	ldr	r1, [pc, #332]	; (8007440 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80072f2:	400a      	ands	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]
 80072f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fc:	f383 8810 	msr	PRIMASK, r3
}
 8007300:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2288      	movs	r2, #136	; 0x88
 8007306:	2120      	movs	r1, #32
 8007308:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007314:	2b01      	cmp	r3, #1
 8007316:	d12f      	bne.n	8007378 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800731e:	f3ef 8310 	mrs	r3, PRIMASK
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007326:	657b      	str	r3, [r7, #84]	; 0x54
 8007328:	2301      	movs	r3, #1
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	f383 8810 	msr	PRIMASK, r3
}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2110      	movs	r1, #16
 8007340:	438a      	bics	r2, r1
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	f383 8810 	msr	PRIMASK, r3
}
 800734e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	2210      	movs	r2, #16
 8007358:	4013      	ands	r3, r2
 800735a:	2b10      	cmp	r3, #16
 800735c:	d103      	bne.n	8007366 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2210      	movs	r2, #16
 8007364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	225c      	movs	r2, #92	; 0x5c
 800736a:	5a9a      	ldrh	r2, [r3, r2]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	0011      	movs	r1, r2
 8007370:	0018      	movs	r0, r3
 8007372:	f7fe feed 	bl	8006150 <HAL_UARTEx_RxEventCallback>
 8007376:	e003      	b.n	8007380 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	0018      	movs	r0, r3
 800737c:	f7fb fa08 	bl	8002790 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007380:	2366      	movs	r3, #102	; 0x66
 8007382:	18fb      	adds	r3, r7, r3
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d004      	beq.n	8007394 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800738a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738c:	2220      	movs	r2, #32
 800738e:	4013      	ands	r3, r2
 8007390:	d000      	beq.n	8007394 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8007392:	e70c      	b.n	80071ae <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007394:	2052      	movs	r0, #82	; 0x52
 8007396:	183b      	adds	r3, r7, r0
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	215e      	movs	r1, #94	; 0x5e
 800739c:	5a52      	ldrh	r2, [r2, r1]
 800739e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073a0:	0001      	movs	r1, r0
 80073a2:	187b      	adds	r3, r7, r1
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d044      	beq.n	8007434 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2268      	movs	r2, #104	; 0x68
 80073ae:	5a9b      	ldrh	r3, [r3, r2]
 80073b0:	187a      	adds	r2, r7, r1
 80073b2:	8812      	ldrh	r2, [r2, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d23d      	bcs.n	8007434 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b8:	f3ef 8310 	mrs	r3, PRIMASK
 80073bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80073be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c2:	2301      	movs	r3, #1
 80073c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f383 8810 	msr	PRIMASK, r3
}
 80073cc:	46c0      	nop			; (mov r8, r8)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	491a      	ldr	r1, [pc, #104]	; (8007444 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80073da:	400a      	ands	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]
 80073de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f383 8810 	msr	PRIMASK, r3
}
 80073e8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a16      	ldr	r2, [pc, #88]	; (8007448 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80073ee:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073f0:	f3ef 8310 	mrs	r3, PRIMASK
 80073f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80073f6:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073fa:	2301      	movs	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f383 8810 	msr	PRIMASK, r3
}
 8007404:	46c0      	nop			; (mov r8, r8)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2120      	movs	r1, #32
 8007412:	430a      	orrs	r2, r1
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007418:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f383 8810 	msr	PRIMASK, r3
}
 8007420:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007422:	e007      	b.n	8007434 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2108      	movs	r1, #8
 8007430:	430a      	orrs	r2, r1
 8007432:	619a      	str	r2, [r3, #24]
}
 8007434:	46c0      	nop			; (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	b01e      	add	sp, #120	; 0x78
 800743a:	bd80      	pop	{r7, pc}
 800743c:	fffffeff 	.word	0xfffffeff
 8007440:	effffffe 	.word	0xeffffffe
 8007444:	efffffff 	.word	0xefffffff
 8007448:	08006d19 	.word	0x08006d19

0800744c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007474:	46c0      	nop			; (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2280      	movs	r2, #128	; 0x80
 8007488:	5c9b      	ldrb	r3, [r3, r2]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_UARTEx_DisableFifoMode+0x16>
 800748e:	2302      	movs	r3, #2
 8007490:	e027      	b.n	80074e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2280      	movs	r2, #128	; 0x80
 8007496:	2101      	movs	r1, #1
 8007498:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2284      	movs	r2, #132	; 0x84
 800749e:	2124      	movs	r1, #36	; 0x24
 80074a0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2101      	movs	r1, #1
 80074b6:	438a      	bics	r2, r1
 80074b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <HAL_UARTEx_DisableFifoMode+0x70>)
 80074be:	4013      	ands	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2284      	movs	r2, #132	; 0x84
 80074d4:	2120      	movs	r1, #32
 80074d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	2100      	movs	r1, #0
 80074de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	0018      	movs	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	b004      	add	sp, #16
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	dfffffff 	.word	0xdfffffff

080074f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2280      	movs	r2, #128	; 0x80
 80074fe:	5c9b      	ldrb	r3, [r3, r2]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007504:	2302      	movs	r3, #2
 8007506:	e02e      	b.n	8007566 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2280      	movs	r2, #128	; 0x80
 800750c:	2101      	movs	r1, #1
 800750e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2284      	movs	r2, #132	; 0x84
 8007514:	2124      	movs	r1, #36	; 0x24
 8007516:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2101      	movs	r1, #1
 800752c:	438a      	bics	r2, r1
 800752e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	08d9      	lsrs	r1, r3, #3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	0018      	movs	r0, r3
 8007548:	f000 f854 	bl	80075f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2284      	movs	r2, #132	; 0x84
 8007558:	2120      	movs	r1, #32
 800755a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2280      	movs	r2, #128	; 0x80
 8007560:	2100      	movs	r1, #0
 8007562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	0018      	movs	r0, r3
 8007568:	46bd      	mov	sp, r7
 800756a:	b004      	add	sp, #16
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2280      	movs	r2, #128	; 0x80
 800757e:	5c9b      	ldrb	r3, [r3, r2]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007584:	2302      	movs	r3, #2
 8007586:	e02f      	b.n	80075e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2280      	movs	r2, #128	; 0x80
 800758c:	2101      	movs	r1, #1
 800758e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2284      	movs	r2, #132	; 0x84
 8007594:	2124      	movs	r1, #36	; 0x24
 8007596:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2101      	movs	r1, #1
 80075ac:	438a      	bics	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	4a0e      	ldr	r2, [pc, #56]	; (80075f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	0019      	movs	r1, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	0018      	movs	r0, r3
 80075ca:	f000 f813 	bl	80075f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2284      	movs	r2, #132	; 0x84
 80075da:	2120      	movs	r1, #32
 80075dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2280      	movs	r2, #128	; 0x80
 80075e2:	2100      	movs	r1, #0
 80075e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	0018      	movs	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	b004      	add	sp, #16
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	f1ffffff 	.word	0xf1ffffff

080075f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007600:	2b00      	cmp	r3, #0
 8007602:	d108      	bne.n	8007616 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	226a      	movs	r2, #106	; 0x6a
 8007608:	2101      	movs	r1, #1
 800760a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2268      	movs	r2, #104	; 0x68
 8007610:	2101      	movs	r1, #1
 8007612:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007614:	e043      	b.n	800769e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007616:	260f      	movs	r6, #15
 8007618:	19bb      	adds	r3, r7, r6
 800761a:	2208      	movs	r2, #8
 800761c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800761e:	200e      	movs	r0, #14
 8007620:	183b      	adds	r3, r7, r0
 8007622:	2208      	movs	r2, #8
 8007624:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	0e5b      	lsrs	r3, r3, #25
 800762e:	b2da      	uxtb	r2, r3
 8007630:	240d      	movs	r4, #13
 8007632:	193b      	adds	r3, r7, r4
 8007634:	2107      	movs	r1, #7
 8007636:	400a      	ands	r2, r1
 8007638:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	0f5b      	lsrs	r3, r3, #29
 8007642:	b2da      	uxtb	r2, r3
 8007644:	250c      	movs	r5, #12
 8007646:	197b      	adds	r3, r7, r5
 8007648:	2107      	movs	r1, #7
 800764a:	400a      	ands	r2, r1
 800764c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800764e:	183b      	adds	r3, r7, r0
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	197a      	adds	r2, r7, r5
 8007654:	7812      	ldrb	r2, [r2, #0]
 8007656:	4914      	ldr	r1, [pc, #80]	; (80076a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8007658:	5c8a      	ldrb	r2, [r1, r2]
 800765a:	435a      	muls	r2, r3
 800765c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800765e:	197b      	adds	r3, r7, r5
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	4a12      	ldr	r2, [pc, #72]	; (80076ac <UARTEx_SetNbDataToProcess+0xb8>)
 8007664:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007666:	0019      	movs	r1, r3
 8007668:	f7f8 fdd4 	bl	8000214 <__divsi3>
 800766c:	0003      	movs	r3, r0
 800766e:	b299      	uxth	r1, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	226a      	movs	r2, #106	; 0x6a
 8007674:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007676:	19bb      	adds	r3, r7, r6
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	193a      	adds	r2, r7, r4
 800767c:	7812      	ldrb	r2, [r2, #0]
 800767e:	490a      	ldr	r1, [pc, #40]	; (80076a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8007680:	5c8a      	ldrb	r2, [r1, r2]
 8007682:	435a      	muls	r2, r3
 8007684:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007686:	193b      	adds	r3, r7, r4
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	4a08      	ldr	r2, [pc, #32]	; (80076ac <UARTEx_SetNbDataToProcess+0xb8>)
 800768c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800768e:	0019      	movs	r1, r3
 8007690:	f7f8 fdc0 	bl	8000214 <__divsi3>
 8007694:	0003      	movs	r3, r0
 8007696:	b299      	uxth	r1, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2268      	movs	r2, #104	; 0x68
 800769c:	5299      	strh	r1, [r3, r2]
}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b005      	add	sp, #20
 80076a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	08009370 	.word	0x08009370
 80076ac:	08009378 	.word	0x08009378

080076b0 <__errno>:
 80076b0:	4b01      	ldr	r3, [pc, #4]	; (80076b8 <__errno+0x8>)
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	4770      	bx	lr
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	20000010 	.word	0x20000010

080076bc <__libc_init_array>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	2600      	movs	r6, #0
 80076c0:	4d0c      	ldr	r5, [pc, #48]	; (80076f4 <__libc_init_array+0x38>)
 80076c2:	4c0d      	ldr	r4, [pc, #52]	; (80076f8 <__libc_init_array+0x3c>)
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	42a6      	cmp	r6, r4
 80076ca:	d109      	bne.n	80076e0 <__libc_init_array+0x24>
 80076cc:	2600      	movs	r6, #0
 80076ce:	f001 fd79 	bl	80091c4 <_init>
 80076d2:	4d0a      	ldr	r5, [pc, #40]	; (80076fc <__libc_init_array+0x40>)
 80076d4:	4c0a      	ldr	r4, [pc, #40]	; (8007700 <__libc_init_array+0x44>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	42a6      	cmp	r6, r4
 80076dc:	d105      	bne.n	80076ea <__libc_init_array+0x2e>
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	00b3      	lsls	r3, r6, #2
 80076e2:	58eb      	ldr	r3, [r5, r3]
 80076e4:	4798      	blx	r3
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7ee      	b.n	80076c8 <__libc_init_array+0xc>
 80076ea:	00b3      	lsls	r3, r6, #2
 80076ec:	58eb      	ldr	r3, [r5, r3]
 80076ee:	4798      	blx	r3
 80076f0:	3601      	adds	r6, #1
 80076f2:	e7f2      	b.n	80076da <__libc_init_array+0x1e>
 80076f4:	080095c0 	.word	0x080095c0
 80076f8:	080095c0 	.word	0x080095c0
 80076fc:	080095c0 	.word	0x080095c0
 8007700:	080095c4 	.word	0x080095c4

08007704 <memset>:
 8007704:	0003      	movs	r3, r0
 8007706:	1882      	adds	r2, r0, r2
 8007708:	4293      	cmp	r3, r2
 800770a:	d100      	bne.n	800770e <memset+0xa>
 800770c:	4770      	bx	lr
 800770e:	7019      	strb	r1, [r3, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	e7f9      	b.n	8007708 <memset+0x4>

08007714 <_puts_r>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	0005      	movs	r5, r0
 8007718:	000e      	movs	r6, r1
 800771a:	2800      	cmp	r0, #0
 800771c:	d004      	beq.n	8007728 <_puts_r+0x14>
 800771e:	6983      	ldr	r3, [r0, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <_puts_r+0x14>
 8007724:	f000 fa6e 	bl	8007c04 <__sinit>
 8007728:	69ab      	ldr	r3, [r5, #24]
 800772a:	68ac      	ldr	r4, [r5, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <_puts_r+0x22>
 8007730:	0028      	movs	r0, r5
 8007732:	f000 fa67 	bl	8007c04 <__sinit>
 8007736:	4b2d      	ldr	r3, [pc, #180]	; (80077ec <_puts_r+0xd8>)
 8007738:	429c      	cmp	r4, r3
 800773a:	d122      	bne.n	8007782 <_puts_r+0x6e>
 800773c:	686c      	ldr	r4, [r5, #4]
 800773e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007740:	07db      	lsls	r3, r3, #31
 8007742:	d405      	bmi.n	8007750 <_puts_r+0x3c>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	059b      	lsls	r3, r3, #22
 8007748:	d402      	bmi.n	8007750 <_puts_r+0x3c>
 800774a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800774c:	f000 fafb 	bl	8007d46 <__retarget_lock_acquire_recursive>
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	071b      	lsls	r3, r3, #28
 8007754:	d502      	bpl.n	800775c <_puts_r+0x48>
 8007756:	6923      	ldr	r3, [r4, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d129      	bne.n	80077b0 <_puts_r+0x9c>
 800775c:	0021      	movs	r1, r4
 800775e:	0028      	movs	r0, r5
 8007760:	f000 f8aa 	bl	80078b8 <__swsetup_r>
 8007764:	2800      	cmp	r0, #0
 8007766:	d023      	beq.n	80077b0 <_puts_r+0x9c>
 8007768:	2501      	movs	r5, #1
 800776a:	426d      	negs	r5, r5
 800776c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800776e:	07db      	lsls	r3, r3, #31
 8007770:	d405      	bmi.n	800777e <_puts_r+0x6a>
 8007772:	89a3      	ldrh	r3, [r4, #12]
 8007774:	059b      	lsls	r3, r3, #22
 8007776:	d402      	bmi.n	800777e <_puts_r+0x6a>
 8007778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800777a:	f000 fae5 	bl	8007d48 <__retarget_lock_release_recursive>
 800777e:	0028      	movs	r0, r5
 8007780:	bd70      	pop	{r4, r5, r6, pc}
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <_puts_r+0xdc>)
 8007784:	429c      	cmp	r4, r3
 8007786:	d101      	bne.n	800778c <_puts_r+0x78>
 8007788:	68ac      	ldr	r4, [r5, #8]
 800778a:	e7d8      	b.n	800773e <_puts_r+0x2a>
 800778c:	4b19      	ldr	r3, [pc, #100]	; (80077f4 <_puts_r+0xe0>)
 800778e:	429c      	cmp	r4, r3
 8007790:	d1d5      	bne.n	800773e <_puts_r+0x2a>
 8007792:	68ec      	ldr	r4, [r5, #12]
 8007794:	e7d3      	b.n	800773e <_puts_r+0x2a>
 8007796:	3601      	adds	r6, #1
 8007798:	60a3      	str	r3, [r4, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	da04      	bge.n	80077a8 <_puts_r+0x94>
 800779e:	69a2      	ldr	r2, [r4, #24]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	dc16      	bgt.n	80077d2 <_puts_r+0xbe>
 80077a4:	290a      	cmp	r1, #10
 80077a6:	d014      	beq.n	80077d2 <_puts_r+0xbe>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	6022      	str	r2, [r4, #0]
 80077ae:	7019      	strb	r1, [r3, #0]
 80077b0:	68a3      	ldr	r3, [r4, #8]
 80077b2:	7831      	ldrb	r1, [r6, #0]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	2900      	cmp	r1, #0
 80077b8:	d1ed      	bne.n	8007796 <_puts_r+0x82>
 80077ba:	60a3      	str	r3, [r4, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	da0f      	bge.n	80077e0 <_puts_r+0xcc>
 80077c0:	0028      	movs	r0, r5
 80077c2:	0022      	movs	r2, r4
 80077c4:	310a      	adds	r1, #10
 80077c6:	f000 f821 	bl	800780c <__swbuf_r>
 80077ca:	250a      	movs	r5, #10
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d1cd      	bne.n	800776c <_puts_r+0x58>
 80077d0:	e7ca      	b.n	8007768 <_puts_r+0x54>
 80077d2:	0022      	movs	r2, r4
 80077d4:	0028      	movs	r0, r5
 80077d6:	f000 f819 	bl	800780c <__swbuf_r>
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d1e8      	bne.n	80077b0 <_puts_r+0x9c>
 80077de:	e7c3      	b.n	8007768 <_puts_r+0x54>
 80077e0:	250a      	movs	r5, #10
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	6022      	str	r2, [r4, #0]
 80077e8:	701d      	strb	r5, [r3, #0]
 80077ea:	e7bf      	b.n	800776c <_puts_r+0x58>
 80077ec:	080093a4 	.word	0x080093a4
 80077f0:	080093c4 	.word	0x080093c4
 80077f4:	08009384 	.word	0x08009384

080077f8 <puts>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	4b03      	ldr	r3, [pc, #12]	; (8007808 <puts+0x10>)
 80077fc:	0001      	movs	r1, r0
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	f7ff ff88 	bl	8007714 <_puts_r>
 8007804:	bd10      	pop	{r4, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	20000010 	.word	0x20000010

0800780c <__swbuf_r>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	0005      	movs	r5, r0
 8007810:	000e      	movs	r6, r1
 8007812:	0014      	movs	r4, r2
 8007814:	2800      	cmp	r0, #0
 8007816:	d004      	beq.n	8007822 <__swbuf_r+0x16>
 8007818:	6983      	ldr	r3, [r0, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <__swbuf_r+0x16>
 800781e:	f000 f9f1 	bl	8007c04 <__sinit>
 8007822:	4b22      	ldr	r3, [pc, #136]	; (80078ac <__swbuf_r+0xa0>)
 8007824:	429c      	cmp	r4, r3
 8007826:	d12e      	bne.n	8007886 <__swbuf_r+0x7a>
 8007828:	686c      	ldr	r4, [r5, #4]
 800782a:	69a3      	ldr	r3, [r4, #24]
 800782c:	60a3      	str	r3, [r4, #8]
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	071b      	lsls	r3, r3, #28
 8007832:	d532      	bpl.n	800789a <__swbuf_r+0x8e>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d02f      	beq.n	800789a <__swbuf_r+0x8e>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	6922      	ldr	r2, [r4, #16]
 800783e:	b2f7      	uxtb	r7, r6
 8007840:	1a98      	subs	r0, r3, r2
 8007842:	6963      	ldr	r3, [r4, #20]
 8007844:	b2f6      	uxtb	r6, r6
 8007846:	4283      	cmp	r3, r0
 8007848:	dc05      	bgt.n	8007856 <__swbuf_r+0x4a>
 800784a:	0021      	movs	r1, r4
 800784c:	0028      	movs	r0, r5
 800784e:	f000 f937 	bl	8007ac0 <_fflush_r>
 8007852:	2800      	cmp	r0, #0
 8007854:	d127      	bne.n	80078a6 <__swbuf_r+0x9a>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	3001      	adds	r0, #1
 800785a:	3b01      	subs	r3, #1
 800785c:	60a3      	str	r3, [r4, #8]
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	701f      	strb	r7, [r3, #0]
 8007866:	6963      	ldr	r3, [r4, #20]
 8007868:	4283      	cmp	r3, r0
 800786a:	d004      	beq.n	8007876 <__swbuf_r+0x6a>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d507      	bpl.n	8007882 <__swbuf_r+0x76>
 8007872:	2e0a      	cmp	r6, #10
 8007874:	d105      	bne.n	8007882 <__swbuf_r+0x76>
 8007876:	0021      	movs	r1, r4
 8007878:	0028      	movs	r0, r5
 800787a:	f000 f921 	bl	8007ac0 <_fflush_r>
 800787e:	2800      	cmp	r0, #0
 8007880:	d111      	bne.n	80078a6 <__swbuf_r+0x9a>
 8007882:	0030      	movs	r0, r6
 8007884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007886:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <__swbuf_r+0xa4>)
 8007888:	429c      	cmp	r4, r3
 800788a:	d101      	bne.n	8007890 <__swbuf_r+0x84>
 800788c:	68ac      	ldr	r4, [r5, #8]
 800788e:	e7cc      	b.n	800782a <__swbuf_r+0x1e>
 8007890:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <__swbuf_r+0xa8>)
 8007892:	429c      	cmp	r4, r3
 8007894:	d1c9      	bne.n	800782a <__swbuf_r+0x1e>
 8007896:	68ec      	ldr	r4, [r5, #12]
 8007898:	e7c7      	b.n	800782a <__swbuf_r+0x1e>
 800789a:	0021      	movs	r1, r4
 800789c:	0028      	movs	r0, r5
 800789e:	f000 f80b 	bl	80078b8 <__swsetup_r>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d0c9      	beq.n	800783a <__swbuf_r+0x2e>
 80078a6:	2601      	movs	r6, #1
 80078a8:	4276      	negs	r6, r6
 80078aa:	e7ea      	b.n	8007882 <__swbuf_r+0x76>
 80078ac:	080093a4 	.word	0x080093a4
 80078b0:	080093c4 	.word	0x080093c4
 80078b4:	08009384 	.word	0x08009384

080078b8 <__swsetup_r>:
 80078b8:	4b37      	ldr	r3, [pc, #220]	; (8007998 <__swsetup_r+0xe0>)
 80078ba:	b570      	push	{r4, r5, r6, lr}
 80078bc:	681d      	ldr	r5, [r3, #0]
 80078be:	0006      	movs	r6, r0
 80078c0:	000c      	movs	r4, r1
 80078c2:	2d00      	cmp	r5, #0
 80078c4:	d005      	beq.n	80078d2 <__swsetup_r+0x1a>
 80078c6:	69ab      	ldr	r3, [r5, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <__swsetup_r+0x1a>
 80078cc:	0028      	movs	r0, r5
 80078ce:	f000 f999 	bl	8007c04 <__sinit>
 80078d2:	4b32      	ldr	r3, [pc, #200]	; (800799c <__swsetup_r+0xe4>)
 80078d4:	429c      	cmp	r4, r3
 80078d6:	d10f      	bne.n	80078f8 <__swsetup_r+0x40>
 80078d8:	686c      	ldr	r4, [r5, #4]
 80078da:	230c      	movs	r3, #12
 80078dc:	5ee2      	ldrsh	r2, [r4, r3]
 80078de:	b293      	uxth	r3, r2
 80078e0:	0711      	lsls	r1, r2, #28
 80078e2:	d42d      	bmi.n	8007940 <__swsetup_r+0x88>
 80078e4:	06d9      	lsls	r1, r3, #27
 80078e6:	d411      	bmi.n	800790c <__swsetup_r+0x54>
 80078e8:	2309      	movs	r3, #9
 80078ea:	2001      	movs	r0, #1
 80078ec:	6033      	str	r3, [r6, #0]
 80078ee:	3337      	adds	r3, #55	; 0x37
 80078f0:	4313      	orrs	r3, r2
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	4240      	negs	r0, r0
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	4b29      	ldr	r3, [pc, #164]	; (80079a0 <__swsetup_r+0xe8>)
 80078fa:	429c      	cmp	r4, r3
 80078fc:	d101      	bne.n	8007902 <__swsetup_r+0x4a>
 80078fe:	68ac      	ldr	r4, [r5, #8]
 8007900:	e7eb      	b.n	80078da <__swsetup_r+0x22>
 8007902:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <__swsetup_r+0xec>)
 8007904:	429c      	cmp	r4, r3
 8007906:	d1e8      	bne.n	80078da <__swsetup_r+0x22>
 8007908:	68ec      	ldr	r4, [r5, #12]
 800790a:	e7e6      	b.n	80078da <__swsetup_r+0x22>
 800790c:	075b      	lsls	r3, r3, #29
 800790e:	d513      	bpl.n	8007938 <__swsetup_r+0x80>
 8007910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007912:	2900      	cmp	r1, #0
 8007914:	d008      	beq.n	8007928 <__swsetup_r+0x70>
 8007916:	0023      	movs	r3, r4
 8007918:	3344      	adds	r3, #68	; 0x44
 800791a:	4299      	cmp	r1, r3
 800791c:	d002      	beq.n	8007924 <__swsetup_r+0x6c>
 800791e:	0030      	movs	r0, r6
 8007920:	f000 fa80 	bl	8007e24 <_free_r>
 8007924:	2300      	movs	r3, #0
 8007926:	6363      	str	r3, [r4, #52]	; 0x34
 8007928:	2224      	movs	r2, #36	; 0x24
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	4393      	bics	r3, r2
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	2300      	movs	r3, #0
 8007932:	6063      	str	r3, [r4, #4]
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	2308      	movs	r3, #8
 800793a:	89a2      	ldrh	r2, [r4, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <__swsetup_r+0xa6>
 8007946:	21a0      	movs	r1, #160	; 0xa0
 8007948:	2280      	movs	r2, #128	; 0x80
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	0089      	lsls	r1, r1, #2
 800794e:	0092      	lsls	r2, r2, #2
 8007950:	400b      	ands	r3, r1
 8007952:	4293      	cmp	r3, r2
 8007954:	d003      	beq.n	800795e <__swsetup_r+0xa6>
 8007956:	0021      	movs	r1, r4
 8007958:	0030      	movs	r0, r6
 800795a:	f000 fa1f 	bl	8007d9c <__smakebuf_r>
 800795e:	220c      	movs	r2, #12
 8007960:	5ea3      	ldrsh	r3, [r4, r2]
 8007962:	2001      	movs	r0, #1
 8007964:	001a      	movs	r2, r3
 8007966:	b299      	uxth	r1, r3
 8007968:	4002      	ands	r2, r0
 800796a:	4203      	tst	r3, r0
 800796c:	d00f      	beq.n	800798e <__swsetup_r+0xd6>
 800796e:	2200      	movs	r2, #0
 8007970:	60a2      	str	r2, [r4, #8]
 8007972:	6962      	ldr	r2, [r4, #20]
 8007974:	4252      	negs	r2, r2
 8007976:	61a2      	str	r2, [r4, #24]
 8007978:	2000      	movs	r0, #0
 800797a:	6922      	ldr	r2, [r4, #16]
 800797c:	4282      	cmp	r2, r0
 800797e:	d1ba      	bne.n	80078f6 <__swsetup_r+0x3e>
 8007980:	060a      	lsls	r2, r1, #24
 8007982:	d5b8      	bpl.n	80078f6 <__swsetup_r+0x3e>
 8007984:	2240      	movs	r2, #64	; 0x40
 8007986:	4313      	orrs	r3, r2
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	3801      	subs	r0, #1
 800798c:	e7b3      	b.n	80078f6 <__swsetup_r+0x3e>
 800798e:	0788      	lsls	r0, r1, #30
 8007990:	d400      	bmi.n	8007994 <__swsetup_r+0xdc>
 8007992:	6962      	ldr	r2, [r4, #20]
 8007994:	60a2      	str	r2, [r4, #8]
 8007996:	e7ef      	b.n	8007978 <__swsetup_r+0xc0>
 8007998:	20000010 	.word	0x20000010
 800799c:	080093a4 	.word	0x080093a4
 80079a0:	080093c4 	.word	0x080093c4
 80079a4:	08009384 	.word	0x08009384

080079a8 <__sflush_r>:
 80079a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079aa:	898b      	ldrh	r3, [r1, #12]
 80079ac:	0005      	movs	r5, r0
 80079ae:	000c      	movs	r4, r1
 80079b0:	071a      	lsls	r2, r3, #28
 80079b2:	d45f      	bmi.n	8007a74 <__sflush_r+0xcc>
 80079b4:	684a      	ldr	r2, [r1, #4]
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	dc04      	bgt.n	80079c4 <__sflush_r+0x1c>
 80079ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80079bc:	2a00      	cmp	r2, #0
 80079be:	dc01      	bgt.n	80079c4 <__sflush_r+0x1c>
 80079c0:	2000      	movs	r0, #0
 80079c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80079c6:	2f00      	cmp	r7, #0
 80079c8:	d0fa      	beq.n	80079c0 <__sflush_r+0x18>
 80079ca:	2200      	movs	r2, #0
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	682e      	ldr	r6, [r5, #0]
 80079d0:	602a      	str	r2, [r5, #0]
 80079d2:	001a      	movs	r2, r3
 80079d4:	0149      	lsls	r1, r1, #5
 80079d6:	400a      	ands	r2, r1
 80079d8:	420b      	tst	r3, r1
 80079da:	d034      	beq.n	8007a46 <__sflush_r+0x9e>
 80079dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	075b      	lsls	r3, r3, #29
 80079e2:	d506      	bpl.n	80079f2 <__sflush_r+0x4a>
 80079e4:	6863      	ldr	r3, [r4, #4]
 80079e6:	1ac0      	subs	r0, r0, r3
 80079e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <__sflush_r+0x4a>
 80079ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079f0:	1ac0      	subs	r0, r0, r3
 80079f2:	0002      	movs	r2, r0
 80079f4:	6a21      	ldr	r1, [r4, #32]
 80079f6:	2300      	movs	r3, #0
 80079f8:	0028      	movs	r0, r5
 80079fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80079fc:	47b8      	blx	r7
 80079fe:	89a1      	ldrh	r1, [r4, #12]
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d106      	bne.n	8007a12 <__sflush_r+0x6a>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	2b1d      	cmp	r3, #29
 8007a08:	d831      	bhi.n	8007a6e <__sflush_r+0xc6>
 8007a0a:	4a2c      	ldr	r2, [pc, #176]	; (8007abc <__sflush_r+0x114>)
 8007a0c:	40da      	lsrs	r2, r3
 8007a0e:	07d3      	lsls	r3, r2, #31
 8007a10:	d52d      	bpl.n	8007a6e <__sflush_r+0xc6>
 8007a12:	2300      	movs	r3, #0
 8007a14:	6063      	str	r3, [r4, #4]
 8007a16:	6923      	ldr	r3, [r4, #16]
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	04cb      	lsls	r3, r1, #19
 8007a1c:	d505      	bpl.n	8007a2a <__sflush_r+0x82>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d102      	bne.n	8007a28 <__sflush_r+0x80>
 8007a22:	682b      	ldr	r3, [r5, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d100      	bne.n	8007a2a <__sflush_r+0x82>
 8007a28:	6560      	str	r0, [r4, #84]	; 0x54
 8007a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a2c:	602e      	str	r6, [r5, #0]
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	d0c6      	beq.n	80079c0 <__sflush_r+0x18>
 8007a32:	0023      	movs	r3, r4
 8007a34:	3344      	adds	r3, #68	; 0x44
 8007a36:	4299      	cmp	r1, r3
 8007a38:	d002      	beq.n	8007a40 <__sflush_r+0x98>
 8007a3a:	0028      	movs	r0, r5
 8007a3c:	f000 f9f2 	bl	8007e24 <_free_r>
 8007a40:	2000      	movs	r0, #0
 8007a42:	6360      	str	r0, [r4, #52]	; 0x34
 8007a44:	e7bd      	b.n	80079c2 <__sflush_r+0x1a>
 8007a46:	2301      	movs	r3, #1
 8007a48:	0028      	movs	r0, r5
 8007a4a:	6a21      	ldr	r1, [r4, #32]
 8007a4c:	47b8      	blx	r7
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d1c5      	bne.n	80079de <__sflush_r+0x36>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0c2      	beq.n	80079de <__sflush_r+0x36>
 8007a58:	2b1d      	cmp	r3, #29
 8007a5a:	d001      	beq.n	8007a60 <__sflush_r+0xb8>
 8007a5c:	2b16      	cmp	r3, #22
 8007a5e:	d101      	bne.n	8007a64 <__sflush_r+0xbc>
 8007a60:	602e      	str	r6, [r5, #0]
 8007a62:	e7ad      	b.n	80079c0 <__sflush_r+0x18>
 8007a64:	2340      	movs	r3, #64	; 0x40
 8007a66:	89a2      	ldrh	r2, [r4, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	81a3      	strh	r3, [r4, #12]
 8007a6c:	e7a9      	b.n	80079c2 <__sflush_r+0x1a>
 8007a6e:	2340      	movs	r3, #64	; 0x40
 8007a70:	430b      	orrs	r3, r1
 8007a72:	e7fa      	b.n	8007a6a <__sflush_r+0xc2>
 8007a74:	690f      	ldr	r7, [r1, #16]
 8007a76:	2f00      	cmp	r7, #0
 8007a78:	d0a2      	beq.n	80079c0 <__sflush_r+0x18>
 8007a7a:	680a      	ldr	r2, [r1, #0]
 8007a7c:	600f      	str	r7, [r1, #0]
 8007a7e:	1bd2      	subs	r2, r2, r7
 8007a80:	9201      	str	r2, [sp, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	079b      	lsls	r3, r3, #30
 8007a86:	d100      	bne.n	8007a8a <__sflush_r+0xe2>
 8007a88:	694a      	ldr	r2, [r1, #20]
 8007a8a:	60a2      	str	r2, [r4, #8]
 8007a8c:	9b01      	ldr	r3, [sp, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dc00      	bgt.n	8007a94 <__sflush_r+0xec>
 8007a92:	e795      	b.n	80079c0 <__sflush_r+0x18>
 8007a94:	003a      	movs	r2, r7
 8007a96:	0028      	movs	r0, r5
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	6a21      	ldr	r1, [r4, #32]
 8007a9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a9e:	47b0      	blx	r6
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	dc06      	bgt.n	8007ab2 <__sflush_r+0x10a>
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	89a2      	ldrh	r2, [r4, #12]
 8007aaa:	4240      	negs	r0, r0
 8007aac:	4313      	orrs	r3, r2
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	e787      	b.n	80079c2 <__sflush_r+0x1a>
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	183f      	adds	r7, r7, r0
 8007ab6:	1a1b      	subs	r3, r3, r0
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	e7e7      	b.n	8007a8c <__sflush_r+0xe4>
 8007abc:	20400001 	.word	0x20400001

08007ac0 <_fflush_r>:
 8007ac0:	690b      	ldr	r3, [r1, #16]
 8007ac2:	b570      	push	{r4, r5, r6, lr}
 8007ac4:	0005      	movs	r5, r0
 8007ac6:	000c      	movs	r4, r1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <_fflush_r+0x12>
 8007acc:	2500      	movs	r5, #0
 8007ace:	0028      	movs	r0, r5
 8007ad0:	bd70      	pop	{r4, r5, r6, pc}
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d004      	beq.n	8007ae0 <_fflush_r+0x20>
 8007ad6:	6983      	ldr	r3, [r0, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <_fflush_r+0x20>
 8007adc:	f000 f892 	bl	8007c04 <__sinit>
 8007ae0:	4b14      	ldr	r3, [pc, #80]	; (8007b34 <_fflush_r+0x74>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d11b      	bne.n	8007b1e <_fflush_r+0x5e>
 8007ae6:	686c      	ldr	r4, [r5, #4]
 8007ae8:	220c      	movs	r2, #12
 8007aea:	5ea3      	ldrsh	r3, [r4, r2]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0ed      	beq.n	8007acc <_fflush_r+0xc>
 8007af0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007af2:	07d2      	lsls	r2, r2, #31
 8007af4:	d404      	bmi.n	8007b00 <_fflush_r+0x40>
 8007af6:	059b      	lsls	r3, r3, #22
 8007af8:	d402      	bmi.n	8007b00 <_fflush_r+0x40>
 8007afa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afc:	f000 f923 	bl	8007d46 <__retarget_lock_acquire_recursive>
 8007b00:	0028      	movs	r0, r5
 8007b02:	0021      	movs	r1, r4
 8007b04:	f7ff ff50 	bl	80079a8 <__sflush_r>
 8007b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b0a:	0005      	movs	r5, r0
 8007b0c:	07db      	lsls	r3, r3, #31
 8007b0e:	d4de      	bmi.n	8007ace <_fflush_r+0xe>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	059b      	lsls	r3, r3, #22
 8007b14:	d4db      	bmi.n	8007ace <_fflush_r+0xe>
 8007b16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b18:	f000 f916 	bl	8007d48 <__retarget_lock_release_recursive>
 8007b1c:	e7d7      	b.n	8007ace <_fflush_r+0xe>
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <_fflush_r+0x78>)
 8007b20:	429c      	cmp	r4, r3
 8007b22:	d101      	bne.n	8007b28 <_fflush_r+0x68>
 8007b24:	68ac      	ldr	r4, [r5, #8]
 8007b26:	e7df      	b.n	8007ae8 <_fflush_r+0x28>
 8007b28:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <_fflush_r+0x7c>)
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	d1dc      	bne.n	8007ae8 <_fflush_r+0x28>
 8007b2e:	68ec      	ldr	r4, [r5, #12]
 8007b30:	e7da      	b.n	8007ae8 <_fflush_r+0x28>
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	080093a4 	.word	0x080093a4
 8007b38:	080093c4 	.word	0x080093c4
 8007b3c:	08009384 	.word	0x08009384

08007b40 <std>:
 8007b40:	2300      	movs	r3, #0
 8007b42:	b510      	push	{r4, lr}
 8007b44:	0004      	movs	r4, r0
 8007b46:	6003      	str	r3, [r0, #0]
 8007b48:	6043      	str	r3, [r0, #4]
 8007b4a:	6083      	str	r3, [r0, #8]
 8007b4c:	8181      	strh	r1, [r0, #12]
 8007b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b50:	0019      	movs	r1, r3
 8007b52:	81c2      	strh	r2, [r0, #14]
 8007b54:	6103      	str	r3, [r0, #16]
 8007b56:	6143      	str	r3, [r0, #20]
 8007b58:	6183      	str	r3, [r0, #24]
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	305c      	adds	r0, #92	; 0x5c
 8007b5e:	f7ff fdd1 	bl	8007704 <memset>
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <std+0x38>)
 8007b64:	6224      	str	r4, [r4, #32]
 8007b66:	6263      	str	r3, [r4, #36]	; 0x24
 8007b68:	4b04      	ldr	r3, [pc, #16]	; (8007b7c <std+0x3c>)
 8007b6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b6c:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <std+0x40>)
 8007b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b70:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <std+0x44>)
 8007b72:	6323      	str	r3, [r4, #48]	; 0x30
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	0800800d 	.word	0x0800800d
 8007b7c:	08008035 	.word	0x08008035
 8007b80:	0800806d 	.word	0x0800806d
 8007b84:	08008099 	.word	0x08008099

08007b88 <_cleanup_r>:
 8007b88:	b510      	push	{r4, lr}
 8007b8a:	4902      	ldr	r1, [pc, #8]	; (8007b94 <_cleanup_r+0xc>)
 8007b8c:	f000 f8ba 	bl	8007d04 <_fwalk_reent>
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	08007ac1 	.word	0x08007ac1

08007b98 <__sfmoreglue>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	2568      	movs	r5, #104	; 0x68
 8007b9c:	1e4a      	subs	r2, r1, #1
 8007b9e:	4355      	muls	r5, r2
 8007ba0:	000e      	movs	r6, r1
 8007ba2:	0029      	movs	r1, r5
 8007ba4:	3174      	adds	r1, #116	; 0x74
 8007ba6:	f000 f9a9 	bl	8007efc <_malloc_r>
 8007baa:	1e04      	subs	r4, r0, #0
 8007bac:	d008      	beq.n	8007bc0 <__sfmoreglue+0x28>
 8007bae:	2100      	movs	r1, #0
 8007bb0:	002a      	movs	r2, r5
 8007bb2:	6001      	str	r1, [r0, #0]
 8007bb4:	6046      	str	r6, [r0, #4]
 8007bb6:	300c      	adds	r0, #12
 8007bb8:	60a0      	str	r0, [r4, #8]
 8007bba:	3268      	adds	r2, #104	; 0x68
 8007bbc:	f7ff fda2 	bl	8007704 <memset>
 8007bc0:	0020      	movs	r0, r4
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}

08007bc4 <__sfp_lock_acquire>:
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	4802      	ldr	r0, [pc, #8]	; (8007bd0 <__sfp_lock_acquire+0xc>)
 8007bc8:	f000 f8bd 	bl	8007d46 <__retarget_lock_acquire_recursive>
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	200001e9 	.word	0x200001e9

08007bd4 <__sfp_lock_release>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	4802      	ldr	r0, [pc, #8]	; (8007be0 <__sfp_lock_release+0xc>)
 8007bd8:	f000 f8b6 	bl	8007d48 <__retarget_lock_release_recursive>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	200001e9 	.word	0x200001e9

08007be4 <__sinit_lock_acquire>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	4802      	ldr	r0, [pc, #8]	; (8007bf0 <__sinit_lock_acquire+0xc>)
 8007be8:	f000 f8ad 	bl	8007d46 <__retarget_lock_acquire_recursive>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	200001ea 	.word	0x200001ea

08007bf4 <__sinit_lock_release>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4802      	ldr	r0, [pc, #8]	; (8007c00 <__sinit_lock_release+0xc>)
 8007bf8:	f000 f8a6 	bl	8007d48 <__retarget_lock_release_recursive>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	200001ea 	.word	0x200001ea

08007c04 <__sinit>:
 8007c04:	b513      	push	{r0, r1, r4, lr}
 8007c06:	0004      	movs	r4, r0
 8007c08:	f7ff ffec 	bl	8007be4 <__sinit_lock_acquire>
 8007c0c:	69a3      	ldr	r3, [r4, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <__sinit+0x14>
 8007c12:	f7ff ffef 	bl	8007bf4 <__sinit_lock_release>
 8007c16:	bd13      	pop	{r0, r1, r4, pc}
 8007c18:	64a3      	str	r3, [r4, #72]	; 0x48
 8007c1a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007c1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c1e:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <__sinit+0x68>)
 8007c20:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <__sinit+0x6c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d101      	bne.n	8007c30 <__sinit+0x2c>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	61a3      	str	r3, [r4, #24]
 8007c30:	0020      	movs	r0, r4
 8007c32:	f000 f81f 	bl	8007c74 <__sfp>
 8007c36:	6060      	str	r0, [r4, #4]
 8007c38:	0020      	movs	r0, r4
 8007c3a:	f000 f81b 	bl	8007c74 <__sfp>
 8007c3e:	60a0      	str	r0, [r4, #8]
 8007c40:	0020      	movs	r0, r4
 8007c42:	f000 f817 	bl	8007c74 <__sfp>
 8007c46:	2200      	movs	r2, #0
 8007c48:	2104      	movs	r1, #4
 8007c4a:	60e0      	str	r0, [r4, #12]
 8007c4c:	6860      	ldr	r0, [r4, #4]
 8007c4e:	f7ff ff77 	bl	8007b40 <std>
 8007c52:	2201      	movs	r2, #1
 8007c54:	2109      	movs	r1, #9
 8007c56:	68a0      	ldr	r0, [r4, #8]
 8007c58:	f7ff ff72 	bl	8007b40 <std>
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	2112      	movs	r1, #18
 8007c60:	68e0      	ldr	r0, [r4, #12]
 8007c62:	f7ff ff6d 	bl	8007b40 <std>
 8007c66:	2301      	movs	r3, #1
 8007c68:	61a3      	str	r3, [r4, #24]
 8007c6a:	e7d2      	b.n	8007c12 <__sinit+0xe>
 8007c6c:	08009380 	.word	0x08009380
 8007c70:	08007b89 	.word	0x08007b89

08007c74 <__sfp>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	0007      	movs	r7, r0
 8007c78:	f7ff ffa4 	bl	8007bc4 <__sfp_lock_acquire>
 8007c7c:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <__sfp+0x88>)
 8007c7e:	681e      	ldr	r6, [r3, #0]
 8007c80:	69b3      	ldr	r3, [r6, #24]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <__sfp+0x18>
 8007c86:	0030      	movs	r0, r6
 8007c88:	f7ff ffbc 	bl	8007c04 <__sinit>
 8007c8c:	3648      	adds	r6, #72	; 0x48
 8007c8e:	68b4      	ldr	r4, [r6, #8]
 8007c90:	6873      	ldr	r3, [r6, #4]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	d504      	bpl.n	8007ca0 <__sfp+0x2c>
 8007c96:	6833      	ldr	r3, [r6, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d022      	beq.n	8007ce2 <__sfp+0x6e>
 8007c9c:	6836      	ldr	r6, [r6, #0]
 8007c9e:	e7f6      	b.n	8007c8e <__sfp+0x1a>
 8007ca0:	220c      	movs	r2, #12
 8007ca2:	5ea5      	ldrsh	r5, [r4, r2]
 8007ca4:	2d00      	cmp	r5, #0
 8007ca6:	d11a      	bne.n	8007cde <__sfp+0x6a>
 8007ca8:	0020      	movs	r0, r4
 8007caa:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <__sfp+0x8c>)
 8007cac:	3058      	adds	r0, #88	; 0x58
 8007cae:	60e3      	str	r3, [r4, #12]
 8007cb0:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb2:	f000 f847 	bl	8007d44 <__retarget_lock_init_recursive>
 8007cb6:	f7ff ff8d 	bl	8007bd4 <__sfp_lock_release>
 8007cba:	0020      	movs	r0, r4
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	0029      	movs	r1, r5
 8007cc0:	6025      	str	r5, [r4, #0]
 8007cc2:	60a5      	str	r5, [r4, #8]
 8007cc4:	6065      	str	r5, [r4, #4]
 8007cc6:	6125      	str	r5, [r4, #16]
 8007cc8:	6165      	str	r5, [r4, #20]
 8007cca:	61a5      	str	r5, [r4, #24]
 8007ccc:	305c      	adds	r0, #92	; 0x5c
 8007cce:	f7ff fd19 	bl	8007704 <memset>
 8007cd2:	6365      	str	r5, [r4, #52]	; 0x34
 8007cd4:	63a5      	str	r5, [r4, #56]	; 0x38
 8007cd6:	64a5      	str	r5, [r4, #72]	; 0x48
 8007cd8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007cda:	0020      	movs	r0, r4
 8007cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cde:	3468      	adds	r4, #104	; 0x68
 8007ce0:	e7d7      	b.n	8007c92 <__sfp+0x1e>
 8007ce2:	2104      	movs	r1, #4
 8007ce4:	0038      	movs	r0, r7
 8007ce6:	f7ff ff57 	bl	8007b98 <__sfmoreglue>
 8007cea:	1e04      	subs	r4, r0, #0
 8007cec:	6030      	str	r0, [r6, #0]
 8007cee:	d1d5      	bne.n	8007c9c <__sfp+0x28>
 8007cf0:	f7ff ff70 	bl	8007bd4 <__sfp_lock_release>
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	e7ef      	b.n	8007cda <__sfp+0x66>
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	08009380 	.word	0x08009380
 8007d00:	ffff0001 	.word	0xffff0001

08007d04 <_fwalk_reent>:
 8007d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d06:	0004      	movs	r4, r0
 8007d08:	0006      	movs	r6, r0
 8007d0a:	2700      	movs	r7, #0
 8007d0c:	9101      	str	r1, [sp, #4]
 8007d0e:	3448      	adds	r4, #72	; 0x48
 8007d10:	6863      	ldr	r3, [r4, #4]
 8007d12:	68a5      	ldr	r5, [r4, #8]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	d504      	bpl.n	8007d28 <_fwalk_reent+0x24>
 8007d1e:	6824      	ldr	r4, [r4, #0]
 8007d20:	2c00      	cmp	r4, #0
 8007d22:	d1f5      	bne.n	8007d10 <_fwalk_reent+0xc>
 8007d24:	0038      	movs	r0, r7
 8007d26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d28:	89ab      	ldrh	r3, [r5, #12]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d908      	bls.n	8007d40 <_fwalk_reent+0x3c>
 8007d2e:	220e      	movs	r2, #14
 8007d30:	5eab      	ldrsh	r3, [r5, r2]
 8007d32:	3301      	adds	r3, #1
 8007d34:	d004      	beq.n	8007d40 <_fwalk_reent+0x3c>
 8007d36:	0029      	movs	r1, r5
 8007d38:	0030      	movs	r0, r6
 8007d3a:	9b01      	ldr	r3, [sp, #4]
 8007d3c:	4798      	blx	r3
 8007d3e:	4307      	orrs	r7, r0
 8007d40:	3568      	adds	r5, #104	; 0x68
 8007d42:	e7e8      	b.n	8007d16 <_fwalk_reent+0x12>

08007d44 <__retarget_lock_init_recursive>:
 8007d44:	4770      	bx	lr

08007d46 <__retarget_lock_acquire_recursive>:
 8007d46:	4770      	bx	lr

08007d48 <__retarget_lock_release_recursive>:
 8007d48:	4770      	bx	lr
	...

08007d4c <__swhatbuf_r>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	000e      	movs	r6, r1
 8007d50:	001d      	movs	r5, r3
 8007d52:	230e      	movs	r3, #14
 8007d54:	5ec9      	ldrsh	r1, [r1, r3]
 8007d56:	0014      	movs	r4, r2
 8007d58:	b096      	sub	sp, #88	; 0x58
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	da08      	bge.n	8007d70 <__swhatbuf_r+0x24>
 8007d5e:	220c      	movs	r2, #12
 8007d60:	5eb3      	ldrsh	r3, [r6, r2]
 8007d62:	2200      	movs	r2, #0
 8007d64:	602a      	str	r2, [r5, #0]
 8007d66:	061b      	lsls	r3, r3, #24
 8007d68:	d411      	bmi.n	8007d8e <__swhatbuf_r+0x42>
 8007d6a:	2380      	movs	r3, #128	; 0x80
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	e00f      	b.n	8007d90 <__swhatbuf_r+0x44>
 8007d70:	466a      	mov	r2, sp
 8007d72:	f000 f9bd 	bl	80080f0 <_fstat_r>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	dbf1      	blt.n	8007d5e <__swhatbuf_r+0x12>
 8007d7a:	23f0      	movs	r3, #240	; 0xf0
 8007d7c:	9901      	ldr	r1, [sp, #4]
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	4019      	ands	r1, r3
 8007d82:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <__swhatbuf_r+0x4c>)
 8007d84:	18c9      	adds	r1, r1, r3
 8007d86:	424b      	negs	r3, r1
 8007d88:	4159      	adcs	r1, r3
 8007d8a:	6029      	str	r1, [r5, #0]
 8007d8c:	e7ed      	b.n	8007d6a <__swhatbuf_r+0x1e>
 8007d8e:	2340      	movs	r3, #64	; 0x40
 8007d90:	2000      	movs	r0, #0
 8007d92:	6023      	str	r3, [r4, #0]
 8007d94:	b016      	add	sp, #88	; 0x58
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	ffffe000 	.word	0xffffe000

08007d9c <__smakebuf_r>:
 8007d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9e:	2602      	movs	r6, #2
 8007da0:	898b      	ldrh	r3, [r1, #12]
 8007da2:	0005      	movs	r5, r0
 8007da4:	000c      	movs	r4, r1
 8007da6:	4233      	tst	r3, r6
 8007da8:	d006      	beq.n	8007db8 <__smakebuf_r+0x1c>
 8007daa:	0023      	movs	r3, r4
 8007dac:	3347      	adds	r3, #71	; 0x47
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	2301      	movs	r3, #1
 8007db4:	6163      	str	r3, [r4, #20]
 8007db6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007db8:	466a      	mov	r2, sp
 8007dba:	ab01      	add	r3, sp, #4
 8007dbc:	f7ff ffc6 	bl	8007d4c <__swhatbuf_r>
 8007dc0:	9900      	ldr	r1, [sp, #0]
 8007dc2:	0007      	movs	r7, r0
 8007dc4:	0028      	movs	r0, r5
 8007dc6:	f000 f899 	bl	8007efc <_malloc_r>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d108      	bne.n	8007de0 <__smakebuf_r+0x44>
 8007dce:	220c      	movs	r2, #12
 8007dd0:	5ea3      	ldrsh	r3, [r4, r2]
 8007dd2:	059a      	lsls	r2, r3, #22
 8007dd4:	d4ef      	bmi.n	8007db6 <__smakebuf_r+0x1a>
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	4393      	bics	r3, r2
 8007dda:	431e      	orrs	r6, r3
 8007ddc:	81a6      	strh	r6, [r4, #12]
 8007dde:	e7e4      	b.n	8007daa <__smakebuf_r+0xe>
 8007de0:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <__smakebuf_r+0x84>)
 8007de2:	62ab      	str	r3, [r5, #40]	; 0x28
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	89a2      	ldrh	r2, [r4, #12]
 8007de8:	6020      	str	r0, [r4, #0]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	6120      	str	r0, [r4, #16]
 8007df2:	6163      	str	r3, [r4, #20]
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00d      	beq.n	8007e16 <__smakebuf_r+0x7a>
 8007dfa:	0028      	movs	r0, r5
 8007dfc:	230e      	movs	r3, #14
 8007dfe:	5ee1      	ldrsh	r1, [r4, r3]
 8007e00:	f000 f988 	bl	8008114 <_isatty_r>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d006      	beq.n	8007e16 <__smakebuf_r+0x7a>
 8007e08:	2203      	movs	r2, #3
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	4393      	bics	r3, r2
 8007e0e:	001a      	movs	r2, r3
 8007e10:	2301      	movs	r3, #1
 8007e12:	4313      	orrs	r3, r2
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	89a0      	ldrh	r0, [r4, #12]
 8007e18:	4307      	orrs	r7, r0
 8007e1a:	81a7      	strh	r7, [r4, #12]
 8007e1c:	e7cb      	b.n	8007db6 <__smakebuf_r+0x1a>
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	08007b89 	.word	0x08007b89

08007e24 <_free_r>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	0005      	movs	r5, r0
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d010      	beq.n	8007e4e <_free_r+0x2a>
 8007e2c:	1f0c      	subs	r4, r1, #4
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	da00      	bge.n	8007e36 <_free_r+0x12>
 8007e34:	18e4      	adds	r4, r4, r3
 8007e36:	0028      	movs	r0, r5
 8007e38:	f000 f992 	bl	8008160 <__malloc_lock>
 8007e3c:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <_free_r+0x90>)
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d105      	bne.n	8007e50 <_free_r+0x2c>
 8007e44:	6063      	str	r3, [r4, #4]
 8007e46:	6014      	str	r4, [r2, #0]
 8007e48:	0028      	movs	r0, r5
 8007e4a:	f000 f991 	bl	8008170 <__malloc_unlock>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d908      	bls.n	8007e66 <_free_r+0x42>
 8007e54:	6821      	ldr	r1, [r4, #0]
 8007e56:	1860      	adds	r0, r4, r1
 8007e58:	4283      	cmp	r3, r0
 8007e5a:	d1f3      	bne.n	8007e44 <_free_r+0x20>
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	1841      	adds	r1, r0, r1
 8007e62:	6021      	str	r1, [r4, #0]
 8007e64:	e7ee      	b.n	8007e44 <_free_r+0x20>
 8007e66:	001a      	movs	r2, r3
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <_free_r+0x4e>
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	d9f9      	bls.n	8007e66 <_free_r+0x42>
 8007e72:	6811      	ldr	r1, [r2, #0]
 8007e74:	1850      	adds	r0, r2, r1
 8007e76:	42a0      	cmp	r0, r4
 8007e78:	d10b      	bne.n	8007e92 <_free_r+0x6e>
 8007e7a:	6820      	ldr	r0, [r4, #0]
 8007e7c:	1809      	adds	r1, r1, r0
 8007e7e:	1850      	adds	r0, r2, r1
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	4283      	cmp	r3, r0
 8007e84:	d1e0      	bne.n	8007e48 <_free_r+0x24>
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	1841      	adds	r1, r0, r1
 8007e8c:	6011      	str	r1, [r2, #0]
 8007e8e:	6053      	str	r3, [r2, #4]
 8007e90:	e7da      	b.n	8007e48 <_free_r+0x24>
 8007e92:	42a0      	cmp	r0, r4
 8007e94:	d902      	bls.n	8007e9c <_free_r+0x78>
 8007e96:	230c      	movs	r3, #12
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	e7d5      	b.n	8007e48 <_free_r+0x24>
 8007e9c:	6821      	ldr	r1, [r4, #0]
 8007e9e:	1860      	adds	r0, r4, r1
 8007ea0:	4283      	cmp	r3, r0
 8007ea2:	d103      	bne.n	8007eac <_free_r+0x88>
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	1841      	adds	r1, r0, r1
 8007eaa:	6021      	str	r1, [r4, #0]
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	6054      	str	r4, [r2, #4]
 8007eb0:	e7ca      	b.n	8007e48 <_free_r+0x24>
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	200001ec 	.word	0x200001ec

08007eb8 <sbrk_aligned>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4e0f      	ldr	r6, [pc, #60]	; (8007ef8 <sbrk_aligned+0x40>)
 8007ebc:	000d      	movs	r5, r1
 8007ebe:	6831      	ldr	r1, [r6, #0]
 8007ec0:	0004      	movs	r4, r0
 8007ec2:	2900      	cmp	r1, #0
 8007ec4:	d102      	bne.n	8007ecc <sbrk_aligned+0x14>
 8007ec6:	f000 f88f 	bl	8007fe8 <_sbrk_r>
 8007eca:	6030      	str	r0, [r6, #0]
 8007ecc:	0029      	movs	r1, r5
 8007ece:	0020      	movs	r0, r4
 8007ed0:	f000 f88a 	bl	8007fe8 <_sbrk_r>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d00a      	beq.n	8007eee <sbrk_aligned+0x36>
 8007ed8:	2303      	movs	r3, #3
 8007eda:	1cc5      	adds	r5, r0, #3
 8007edc:	439d      	bics	r5, r3
 8007ede:	42a8      	cmp	r0, r5
 8007ee0:	d007      	beq.n	8007ef2 <sbrk_aligned+0x3a>
 8007ee2:	1a29      	subs	r1, r5, r0
 8007ee4:	0020      	movs	r0, r4
 8007ee6:	f000 f87f 	bl	8007fe8 <_sbrk_r>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	d101      	bne.n	8007ef2 <sbrk_aligned+0x3a>
 8007eee:	2501      	movs	r5, #1
 8007ef0:	426d      	negs	r5, r5
 8007ef2:	0028      	movs	r0, r5
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	200001f0 	.word	0x200001f0

08007efc <_malloc_r>:
 8007efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007efe:	2203      	movs	r2, #3
 8007f00:	1ccb      	adds	r3, r1, #3
 8007f02:	4393      	bics	r3, r2
 8007f04:	3308      	adds	r3, #8
 8007f06:	0006      	movs	r6, r0
 8007f08:	001f      	movs	r7, r3
 8007f0a:	2b0c      	cmp	r3, #12
 8007f0c:	d232      	bcs.n	8007f74 <_malloc_r+0x78>
 8007f0e:	270c      	movs	r7, #12
 8007f10:	42b9      	cmp	r1, r7
 8007f12:	d831      	bhi.n	8007f78 <_malloc_r+0x7c>
 8007f14:	0030      	movs	r0, r6
 8007f16:	f000 f923 	bl	8008160 <__malloc_lock>
 8007f1a:	4d32      	ldr	r5, [pc, #200]	; (8007fe4 <_malloc_r+0xe8>)
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	001c      	movs	r4, r3
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	d12e      	bne.n	8007f82 <_malloc_r+0x86>
 8007f24:	0039      	movs	r1, r7
 8007f26:	0030      	movs	r0, r6
 8007f28:	f7ff ffc6 	bl	8007eb8 <sbrk_aligned>
 8007f2c:	0004      	movs	r4, r0
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	d11e      	bne.n	8007f70 <_malloc_r+0x74>
 8007f32:	682c      	ldr	r4, [r5, #0]
 8007f34:	0025      	movs	r5, r4
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	d14a      	bne.n	8007fd0 <_malloc_r+0xd4>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	0029      	movs	r1, r5
 8007f3e:	18e3      	adds	r3, r4, r3
 8007f40:	0030      	movs	r0, r6
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	f000 f850 	bl	8007fe8 <_sbrk_r>
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	4283      	cmp	r3, r0
 8007f4c:	d143      	bne.n	8007fd6 <_malloc_r+0xda>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	3703      	adds	r7, #3
 8007f52:	1aff      	subs	r7, r7, r3
 8007f54:	2303      	movs	r3, #3
 8007f56:	439f      	bics	r7, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	2f0c      	cmp	r7, #12
 8007f5c:	d200      	bcs.n	8007f60 <_malloc_r+0x64>
 8007f5e:	270c      	movs	r7, #12
 8007f60:	0039      	movs	r1, r7
 8007f62:	0030      	movs	r0, r6
 8007f64:	f7ff ffa8 	bl	8007eb8 <sbrk_aligned>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d034      	beq.n	8007fd6 <_malloc_r+0xda>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	19df      	adds	r7, r3, r7
 8007f70:	6027      	str	r7, [r4, #0]
 8007f72:	e013      	b.n	8007f9c <_malloc_r+0xa0>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dacb      	bge.n	8007f10 <_malloc_r+0x14>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	0028      	movs	r0, r5
 8007f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f82:	6822      	ldr	r2, [r4, #0]
 8007f84:	1bd1      	subs	r1, r2, r7
 8007f86:	d420      	bmi.n	8007fca <_malloc_r+0xce>
 8007f88:	290b      	cmp	r1, #11
 8007f8a:	d917      	bls.n	8007fbc <_malloc_r+0xc0>
 8007f8c:	19e2      	adds	r2, r4, r7
 8007f8e:	6027      	str	r7, [r4, #0]
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d111      	bne.n	8007fb8 <_malloc_r+0xbc>
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	6863      	ldr	r3, [r4, #4]
 8007f98:	6011      	str	r1, [r2, #0]
 8007f9a:	6053      	str	r3, [r2, #4]
 8007f9c:	0030      	movs	r0, r6
 8007f9e:	0025      	movs	r5, r4
 8007fa0:	f000 f8e6 	bl	8008170 <__malloc_unlock>
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	350b      	adds	r5, #11
 8007fa8:	1d23      	adds	r3, r4, #4
 8007faa:	4395      	bics	r5, r2
 8007fac:	1aea      	subs	r2, r5, r3
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	d0e5      	beq.n	8007f7e <_malloc_r+0x82>
 8007fb2:	1b5b      	subs	r3, r3, r5
 8007fb4:	50a3      	str	r3, [r4, r2]
 8007fb6:	e7e2      	b.n	8007f7e <_malloc_r+0x82>
 8007fb8:	605a      	str	r2, [r3, #4]
 8007fba:	e7ec      	b.n	8007f96 <_malloc_r+0x9a>
 8007fbc:	6862      	ldr	r2, [r4, #4]
 8007fbe:	42a3      	cmp	r3, r4
 8007fc0:	d101      	bne.n	8007fc6 <_malloc_r+0xca>
 8007fc2:	602a      	str	r2, [r5, #0]
 8007fc4:	e7ea      	b.n	8007f9c <_malloc_r+0xa0>
 8007fc6:	605a      	str	r2, [r3, #4]
 8007fc8:	e7e8      	b.n	8007f9c <_malloc_r+0xa0>
 8007fca:	0023      	movs	r3, r4
 8007fcc:	6864      	ldr	r4, [r4, #4]
 8007fce:	e7a7      	b.n	8007f20 <_malloc_r+0x24>
 8007fd0:	002c      	movs	r4, r5
 8007fd2:	686d      	ldr	r5, [r5, #4]
 8007fd4:	e7af      	b.n	8007f36 <_malloc_r+0x3a>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	0030      	movs	r0, r6
 8007fda:	6033      	str	r3, [r6, #0]
 8007fdc:	f000 f8c8 	bl	8008170 <__malloc_unlock>
 8007fe0:	e7cd      	b.n	8007f7e <_malloc_r+0x82>
 8007fe2:	46c0      	nop			; (mov r8, r8)
 8007fe4:	200001ec 	.word	0x200001ec

08007fe8 <_sbrk_r>:
 8007fe8:	2300      	movs	r3, #0
 8007fea:	b570      	push	{r4, r5, r6, lr}
 8007fec:	4d06      	ldr	r5, [pc, #24]	; (8008008 <_sbrk_r+0x20>)
 8007fee:	0004      	movs	r4, r0
 8007ff0:	0008      	movs	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7fa fc9e 	bl	8002934 <_sbrk>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d103      	bne.n	8008004 <_sbrk_r+0x1c>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d000      	beq.n	8008004 <_sbrk_r+0x1c>
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	200001f4 	.word	0x200001f4

0800800c <__sread>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	000c      	movs	r4, r1
 8008010:	250e      	movs	r5, #14
 8008012:	5f49      	ldrsh	r1, [r1, r5]
 8008014:	f000 f8b4 	bl	8008180 <_read_r>
 8008018:	2800      	cmp	r0, #0
 800801a:	db03      	blt.n	8008024 <__sread+0x18>
 800801c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800801e:	181b      	adds	r3, r3, r0
 8008020:	6563      	str	r3, [r4, #84]	; 0x54
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	4a02      	ldr	r2, [pc, #8]	; (8008030 <__sread+0x24>)
 8008028:	4013      	ands	r3, r2
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	e7f9      	b.n	8008022 <__sread+0x16>
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	ffffefff 	.word	0xffffefff

08008034 <__swrite>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	001f      	movs	r7, r3
 8008038:	898b      	ldrh	r3, [r1, #12]
 800803a:	0005      	movs	r5, r0
 800803c:	000c      	movs	r4, r1
 800803e:	0016      	movs	r6, r2
 8008040:	05db      	lsls	r3, r3, #23
 8008042:	d505      	bpl.n	8008050 <__swrite+0x1c>
 8008044:	230e      	movs	r3, #14
 8008046:	5ec9      	ldrsh	r1, [r1, r3]
 8008048:	2200      	movs	r2, #0
 800804a:	2302      	movs	r3, #2
 800804c:	f000 f874 	bl	8008138 <_lseek_r>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	4a05      	ldr	r2, [pc, #20]	; (8008068 <__swrite+0x34>)
 8008054:	0028      	movs	r0, r5
 8008056:	4013      	ands	r3, r2
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	0032      	movs	r2, r6
 800805c:	230e      	movs	r3, #14
 800805e:	5ee1      	ldrsh	r1, [r4, r3]
 8008060:	003b      	movs	r3, r7
 8008062:	f000 f81f 	bl	80080a4 <_write_r>
 8008066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008068:	ffffefff 	.word	0xffffefff

0800806c <__sseek>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	000c      	movs	r4, r1
 8008070:	250e      	movs	r5, #14
 8008072:	5f49      	ldrsh	r1, [r1, r5]
 8008074:	f000 f860 	bl	8008138 <_lseek_r>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	1c42      	adds	r2, r0, #1
 800807c:	d103      	bne.n	8008086 <__sseek+0x1a>
 800807e:	4a05      	ldr	r2, [pc, #20]	; (8008094 <__sseek+0x28>)
 8008080:	4013      	ands	r3, r2
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	bd70      	pop	{r4, r5, r6, pc}
 8008086:	2280      	movs	r2, #128	; 0x80
 8008088:	0152      	lsls	r2, r2, #5
 800808a:	4313      	orrs	r3, r2
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	6560      	str	r0, [r4, #84]	; 0x54
 8008090:	e7f8      	b.n	8008084 <__sseek+0x18>
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	ffffefff 	.word	0xffffefff

08008098 <__sclose>:
 8008098:	b510      	push	{r4, lr}
 800809a:	230e      	movs	r3, #14
 800809c:	5ec9      	ldrsh	r1, [r1, r3]
 800809e:	f000 f815 	bl	80080cc <_close_r>
 80080a2:	bd10      	pop	{r4, pc}

080080a4 <_write_r>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	0004      	movs	r4, r0
 80080a8:	0008      	movs	r0, r1
 80080aa:	0011      	movs	r1, r2
 80080ac:	001a      	movs	r2, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	4d05      	ldr	r5, [pc, #20]	; (80080c8 <_write_r+0x24>)
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7fa fbf5 	bl	80028a2 <_write>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d103      	bne.n	80080c4 <_write_r+0x20>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d000      	beq.n	80080c4 <_write_r+0x20>
 80080c2:	6023      	str	r3, [r4, #0]
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	200001f4 	.word	0x200001f4

080080cc <_close_r>:
 80080cc:	2300      	movs	r3, #0
 80080ce:	b570      	push	{r4, r5, r6, lr}
 80080d0:	4d06      	ldr	r5, [pc, #24]	; (80080ec <_close_r+0x20>)
 80080d2:	0004      	movs	r4, r0
 80080d4:	0008      	movs	r0, r1
 80080d6:	602b      	str	r3, [r5, #0]
 80080d8:	f7fa fbff 	bl	80028da <_close>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d103      	bne.n	80080e8 <_close_r+0x1c>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d000      	beq.n	80080e8 <_close_r+0x1c>
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	200001f4 	.word	0x200001f4

080080f0 <_fstat_r>:
 80080f0:	2300      	movs	r3, #0
 80080f2:	b570      	push	{r4, r5, r6, lr}
 80080f4:	4d06      	ldr	r5, [pc, #24]	; (8008110 <_fstat_r+0x20>)
 80080f6:	0004      	movs	r4, r0
 80080f8:	0008      	movs	r0, r1
 80080fa:	0011      	movs	r1, r2
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f7fa fbf6 	bl	80028ee <_fstat>
 8008102:	1c43      	adds	r3, r0, #1
 8008104:	d103      	bne.n	800810e <_fstat_r+0x1e>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d000      	beq.n	800810e <_fstat_r+0x1e>
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	200001f4 	.word	0x200001f4

08008114 <_isatty_r>:
 8008114:	2300      	movs	r3, #0
 8008116:	b570      	push	{r4, r5, r6, lr}
 8008118:	4d06      	ldr	r5, [pc, #24]	; (8008134 <_isatty_r+0x20>)
 800811a:	0004      	movs	r4, r0
 800811c:	0008      	movs	r0, r1
 800811e:	602b      	str	r3, [r5, #0]
 8008120:	f7fa fbf3 	bl	800290a <_isatty>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d103      	bne.n	8008130 <_isatty_r+0x1c>
 8008128:	682b      	ldr	r3, [r5, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d000      	beq.n	8008130 <_isatty_r+0x1c>
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	200001f4 	.word	0x200001f4

08008138 <_lseek_r>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	0004      	movs	r4, r0
 800813c:	0008      	movs	r0, r1
 800813e:	0011      	movs	r1, r2
 8008140:	001a      	movs	r2, r3
 8008142:	2300      	movs	r3, #0
 8008144:	4d05      	ldr	r5, [pc, #20]	; (800815c <_lseek_r+0x24>)
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7fa fbe8 	bl	800291c <_lseek>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d103      	bne.n	8008158 <_lseek_r+0x20>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d000      	beq.n	8008158 <_lseek_r+0x20>
 8008156:	6023      	str	r3, [r4, #0]
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	46c0      	nop			; (mov r8, r8)
 800815c:	200001f4 	.word	0x200001f4

08008160 <__malloc_lock>:
 8008160:	b510      	push	{r4, lr}
 8008162:	4802      	ldr	r0, [pc, #8]	; (800816c <__malloc_lock+0xc>)
 8008164:	f7ff fdef 	bl	8007d46 <__retarget_lock_acquire_recursive>
 8008168:	bd10      	pop	{r4, pc}
 800816a:	46c0      	nop			; (mov r8, r8)
 800816c:	200001e8 	.word	0x200001e8

08008170 <__malloc_unlock>:
 8008170:	b510      	push	{r4, lr}
 8008172:	4802      	ldr	r0, [pc, #8]	; (800817c <__malloc_unlock+0xc>)
 8008174:	f7ff fde8 	bl	8007d48 <__retarget_lock_release_recursive>
 8008178:	bd10      	pop	{r4, pc}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	200001e8 	.word	0x200001e8

08008180 <_read_r>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	0004      	movs	r4, r0
 8008184:	0008      	movs	r0, r1
 8008186:	0011      	movs	r1, r2
 8008188:	001a      	movs	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	4d05      	ldr	r5, [pc, #20]	; (80081a4 <_read_r+0x24>)
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	f7fa fb6a 	bl	8002868 <_read>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d103      	bne.n	80081a0 <_read_r+0x20>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d000      	beq.n	80081a0 <_read_r+0x20>
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	bd70      	pop	{r4, r5, r6, pc}
 80081a2:	46c0      	nop			; (mov r8, r8)
 80081a4:	200001f4 	.word	0x200001f4

080081a8 <sin>:
 80081a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081aa:	4a20      	ldr	r2, [pc, #128]	; (800822c <sin+0x84>)
 80081ac:	004b      	lsls	r3, r1, #1
 80081ae:	b087      	sub	sp, #28
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	4293      	cmp	r3, r2
 80081b4:	dc06      	bgt.n	80081c4 <sin+0x1c>
 80081b6:	2300      	movs	r3, #0
 80081b8:	2200      	movs	r2, #0
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2300      	movs	r3, #0
 80081be:	f000 fe53 	bl	8008e68 <__kernel_sin>
 80081c2:	e006      	b.n	80081d2 <sin+0x2a>
 80081c4:	4a1a      	ldr	r2, [pc, #104]	; (8008230 <sin+0x88>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	dd05      	ble.n	80081d6 <sin+0x2e>
 80081ca:	0002      	movs	r2, r0
 80081cc:	000b      	movs	r3, r1
 80081ce:	f7f9 fbfd 	bl	80019cc <__aeabi_dsub>
 80081d2:	b007      	add	sp, #28
 80081d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d6:	aa02      	add	r2, sp, #8
 80081d8:	f000 f82c 	bl	8008234 <__ieee754_rem_pio2>
 80081dc:	9c04      	ldr	r4, [sp, #16]
 80081de:	9d05      	ldr	r5, [sp, #20]
 80081e0:	2303      	movs	r3, #3
 80081e2:	4003      	ands	r3, r0
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d00a      	beq.n	80081fe <sin+0x56>
 80081e8:	9802      	ldr	r0, [sp, #8]
 80081ea:	9903      	ldr	r1, [sp, #12]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d00d      	beq.n	800820c <sin+0x64>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d115      	bne.n	8008220 <sin+0x78>
 80081f4:	3301      	adds	r3, #1
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	0022      	movs	r2, r4
 80081fa:	002b      	movs	r3, r5
 80081fc:	e7df      	b.n	80081be <sin+0x16>
 80081fe:	0022      	movs	r2, r4
 8008200:	9802      	ldr	r0, [sp, #8]
 8008202:	9903      	ldr	r1, [sp, #12]
 8008204:	002b      	movs	r3, r5
 8008206:	f000 fa05 	bl	8008614 <__kernel_cos>
 800820a:	e7e2      	b.n	80081d2 <sin+0x2a>
 800820c:	2301      	movs	r3, #1
 800820e:	0022      	movs	r2, r4
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	002b      	movs	r3, r5
 8008214:	f000 fe28 	bl	8008e68 <__kernel_sin>
 8008218:	2380      	movs	r3, #128	; 0x80
 800821a:	061b      	lsls	r3, r3, #24
 800821c:	18c9      	adds	r1, r1, r3
 800821e:	e7d8      	b.n	80081d2 <sin+0x2a>
 8008220:	0022      	movs	r2, r4
 8008222:	002b      	movs	r3, r5
 8008224:	f000 f9f6 	bl	8008614 <__kernel_cos>
 8008228:	e7f6      	b.n	8008218 <sin+0x70>
 800822a:	46c0      	nop			; (mov r8, r8)
 800822c:	3fe921fb 	.word	0x3fe921fb
 8008230:	7fefffff 	.word	0x7fefffff

08008234 <__ieee754_rem_pio2>:
 8008234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008236:	004b      	lsls	r3, r1, #1
 8008238:	b091      	sub	sp, #68	; 0x44
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	9302      	str	r3, [sp, #8]
 800823e:	0017      	movs	r7, r2
 8008240:	4bb6      	ldr	r3, [pc, #728]	; (800851c <__ieee754_rem_pio2+0x2e8>)
 8008242:	9a02      	ldr	r2, [sp, #8]
 8008244:	0004      	movs	r4, r0
 8008246:	000d      	movs	r5, r1
 8008248:	9109      	str	r1, [sp, #36]	; 0x24
 800824a:	429a      	cmp	r2, r3
 800824c:	dc09      	bgt.n	8008262 <__ieee754_rem_pio2+0x2e>
 800824e:	0002      	movs	r2, r0
 8008250:	000b      	movs	r3, r1
 8008252:	603a      	str	r2, [r7, #0]
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	2300      	movs	r3, #0
 800825a:	60ba      	str	r2, [r7, #8]
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	2600      	movs	r6, #0
 8008260:	e025      	b.n	80082ae <__ieee754_rem_pio2+0x7a>
 8008262:	4baf      	ldr	r3, [pc, #700]	; (8008520 <__ieee754_rem_pio2+0x2ec>)
 8008264:	9a02      	ldr	r2, [sp, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	dd00      	ble.n	800826c <__ieee754_rem_pio2+0x38>
 800826a:	e06e      	b.n	800834a <__ieee754_rem_pio2+0x116>
 800826c:	4ead      	ldr	r6, [pc, #692]	; (8008524 <__ieee754_rem_pio2+0x2f0>)
 800826e:	4aae      	ldr	r2, [pc, #696]	; (8008528 <__ieee754_rem_pio2+0x2f4>)
 8008270:	2d00      	cmp	r5, #0
 8008272:	dd35      	ble.n	80082e0 <__ieee754_rem_pio2+0xac>
 8008274:	0020      	movs	r0, r4
 8008276:	0029      	movs	r1, r5
 8008278:	4baa      	ldr	r3, [pc, #680]	; (8008524 <__ieee754_rem_pio2+0x2f0>)
 800827a:	f7f9 fba7 	bl	80019cc <__aeabi_dsub>
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	0004      	movs	r4, r0
 8008282:	000d      	movs	r5, r1
 8008284:	42b3      	cmp	r3, r6
 8008286:	d015      	beq.n	80082b4 <__ieee754_rem_pio2+0x80>
 8008288:	4aa8      	ldr	r2, [pc, #672]	; (800852c <__ieee754_rem_pio2+0x2f8>)
 800828a:	4ba9      	ldr	r3, [pc, #676]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 800828c:	f7f9 fb9e 	bl	80019cc <__aeabi_dsub>
 8008290:	0002      	movs	r2, r0
 8008292:	000b      	movs	r3, r1
 8008294:	0020      	movs	r0, r4
 8008296:	603a      	str	r2, [r7, #0]
 8008298:	607b      	str	r3, [r7, #4]
 800829a:	0029      	movs	r1, r5
 800829c:	f7f9 fb96 	bl	80019cc <__aeabi_dsub>
 80082a0:	4aa2      	ldr	r2, [pc, #648]	; (800852c <__ieee754_rem_pio2+0x2f8>)
 80082a2:	4ba3      	ldr	r3, [pc, #652]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 80082a4:	f7f9 fb92 	bl	80019cc <__aeabi_dsub>
 80082a8:	2601      	movs	r6, #1
 80082aa:	60b8      	str	r0, [r7, #8]
 80082ac:	60f9      	str	r1, [r7, #12]
 80082ae:	0030      	movs	r0, r6
 80082b0:	b011      	add	sp, #68	; 0x44
 80082b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b4:	22d3      	movs	r2, #211	; 0xd3
 80082b6:	4b9e      	ldr	r3, [pc, #632]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 80082b8:	0552      	lsls	r2, r2, #21
 80082ba:	f7f9 fb87 	bl	80019cc <__aeabi_dsub>
 80082be:	4a9d      	ldr	r2, [pc, #628]	; (8008534 <__ieee754_rem_pio2+0x300>)
 80082c0:	4b9d      	ldr	r3, [pc, #628]	; (8008538 <__ieee754_rem_pio2+0x304>)
 80082c2:	0004      	movs	r4, r0
 80082c4:	000d      	movs	r5, r1
 80082c6:	f7f9 fb81 	bl	80019cc <__aeabi_dsub>
 80082ca:	0002      	movs	r2, r0
 80082cc:	000b      	movs	r3, r1
 80082ce:	0020      	movs	r0, r4
 80082d0:	603a      	str	r2, [r7, #0]
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	0029      	movs	r1, r5
 80082d6:	f7f9 fb79 	bl	80019cc <__aeabi_dsub>
 80082da:	4a96      	ldr	r2, [pc, #600]	; (8008534 <__ieee754_rem_pio2+0x300>)
 80082dc:	4b96      	ldr	r3, [pc, #600]	; (8008538 <__ieee754_rem_pio2+0x304>)
 80082de:	e7e1      	b.n	80082a4 <__ieee754_rem_pio2+0x70>
 80082e0:	0020      	movs	r0, r4
 80082e2:	0029      	movs	r1, r5
 80082e4:	4b8f      	ldr	r3, [pc, #572]	; (8008524 <__ieee754_rem_pio2+0x2f0>)
 80082e6:	f7f8 f9c7 	bl	8000678 <__aeabi_dadd>
 80082ea:	9b02      	ldr	r3, [sp, #8]
 80082ec:	0004      	movs	r4, r0
 80082ee:	000d      	movs	r5, r1
 80082f0:	42b3      	cmp	r3, r6
 80082f2:	d014      	beq.n	800831e <__ieee754_rem_pio2+0xea>
 80082f4:	4a8d      	ldr	r2, [pc, #564]	; (800852c <__ieee754_rem_pio2+0x2f8>)
 80082f6:	4b8e      	ldr	r3, [pc, #568]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 80082f8:	f7f8 f9be 	bl	8000678 <__aeabi_dadd>
 80082fc:	0002      	movs	r2, r0
 80082fe:	000b      	movs	r3, r1
 8008300:	0020      	movs	r0, r4
 8008302:	603a      	str	r2, [r7, #0]
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	0029      	movs	r1, r5
 8008308:	f7f9 fb60 	bl	80019cc <__aeabi_dsub>
 800830c:	4a87      	ldr	r2, [pc, #540]	; (800852c <__ieee754_rem_pio2+0x2f8>)
 800830e:	4b88      	ldr	r3, [pc, #544]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 8008310:	f7f8 f9b2 	bl	8000678 <__aeabi_dadd>
 8008314:	2601      	movs	r6, #1
 8008316:	60b8      	str	r0, [r7, #8]
 8008318:	60f9      	str	r1, [r7, #12]
 800831a:	4276      	negs	r6, r6
 800831c:	e7c7      	b.n	80082ae <__ieee754_rem_pio2+0x7a>
 800831e:	22d3      	movs	r2, #211	; 0xd3
 8008320:	4b83      	ldr	r3, [pc, #524]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 8008322:	0552      	lsls	r2, r2, #21
 8008324:	f7f8 f9a8 	bl	8000678 <__aeabi_dadd>
 8008328:	4a82      	ldr	r2, [pc, #520]	; (8008534 <__ieee754_rem_pio2+0x300>)
 800832a:	4b83      	ldr	r3, [pc, #524]	; (8008538 <__ieee754_rem_pio2+0x304>)
 800832c:	0004      	movs	r4, r0
 800832e:	000d      	movs	r5, r1
 8008330:	f7f8 f9a2 	bl	8000678 <__aeabi_dadd>
 8008334:	0002      	movs	r2, r0
 8008336:	000b      	movs	r3, r1
 8008338:	0020      	movs	r0, r4
 800833a:	603a      	str	r2, [r7, #0]
 800833c:	607b      	str	r3, [r7, #4]
 800833e:	0029      	movs	r1, r5
 8008340:	f7f9 fb44 	bl	80019cc <__aeabi_dsub>
 8008344:	4a7b      	ldr	r2, [pc, #492]	; (8008534 <__ieee754_rem_pio2+0x300>)
 8008346:	4b7c      	ldr	r3, [pc, #496]	; (8008538 <__ieee754_rem_pio2+0x304>)
 8008348:	e7e2      	b.n	8008310 <__ieee754_rem_pio2+0xdc>
 800834a:	4b7c      	ldr	r3, [pc, #496]	; (800853c <__ieee754_rem_pio2+0x308>)
 800834c:	9a02      	ldr	r2, [sp, #8]
 800834e:	429a      	cmp	r2, r3
 8008350:	dd00      	ble.n	8008354 <__ieee754_rem_pio2+0x120>
 8008352:	e0d3      	b.n	80084fc <__ieee754_rem_pio2+0x2c8>
 8008354:	0020      	movs	r0, r4
 8008356:	0029      	movs	r1, r5
 8008358:	f000 fe32 	bl	8008fc0 <fabs>
 800835c:	4a78      	ldr	r2, [pc, #480]	; (8008540 <__ieee754_rem_pio2+0x30c>)
 800835e:	4b79      	ldr	r3, [pc, #484]	; (8008544 <__ieee754_rem_pio2+0x310>)
 8008360:	0004      	movs	r4, r0
 8008362:	000d      	movs	r5, r1
 8008364:	f7f9 f8c6 	bl	80014f4 <__aeabi_dmul>
 8008368:	2200      	movs	r2, #0
 800836a:	4b77      	ldr	r3, [pc, #476]	; (8008548 <__ieee754_rem_pio2+0x314>)
 800836c:	f7f8 f984 	bl	8000678 <__aeabi_dadd>
 8008370:	f7f9 febe 	bl	80020f0 <__aeabi_d2iz>
 8008374:	0006      	movs	r6, r0
 8008376:	f7f9 fef1 	bl	800215c <__aeabi_i2d>
 800837a:	4a6b      	ldr	r2, [pc, #428]	; (8008528 <__ieee754_rem_pio2+0x2f4>)
 800837c:	4b69      	ldr	r3, [pc, #420]	; (8008524 <__ieee754_rem_pio2+0x2f0>)
 800837e:	9006      	str	r0, [sp, #24]
 8008380:	9107      	str	r1, [sp, #28]
 8008382:	f7f9 f8b7 	bl	80014f4 <__aeabi_dmul>
 8008386:	0002      	movs	r2, r0
 8008388:	000b      	movs	r3, r1
 800838a:	0020      	movs	r0, r4
 800838c:	0029      	movs	r1, r5
 800838e:	f7f9 fb1d 	bl	80019cc <__aeabi_dsub>
 8008392:	4a66      	ldr	r2, [pc, #408]	; (800852c <__ieee754_rem_pio2+0x2f8>)
 8008394:	9004      	str	r0, [sp, #16]
 8008396:	9105      	str	r1, [sp, #20]
 8008398:	9806      	ldr	r0, [sp, #24]
 800839a:	9907      	ldr	r1, [sp, #28]
 800839c:	4b64      	ldr	r3, [pc, #400]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 800839e:	f7f9 f8a9 	bl	80014f4 <__aeabi_dmul>
 80083a2:	0004      	movs	r4, r0
 80083a4:	000d      	movs	r5, r1
 80083a6:	2e1f      	cmp	r6, #31
 80083a8:	dc0f      	bgt.n	80083ca <__ieee754_rem_pio2+0x196>
 80083aa:	4a68      	ldr	r2, [pc, #416]	; (800854c <__ieee754_rem_pio2+0x318>)
 80083ac:	1e73      	subs	r3, r6, #1
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	589b      	ldr	r3, [r3, r2]
 80083b2:	9a02      	ldr	r2, [sp, #8]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d008      	beq.n	80083ca <__ieee754_rem_pio2+0x196>
 80083b8:	9804      	ldr	r0, [sp, #16]
 80083ba:	9905      	ldr	r1, [sp, #20]
 80083bc:	0022      	movs	r2, r4
 80083be:	002b      	movs	r3, r5
 80083c0:	f7f9 fb04 	bl	80019cc <__aeabi_dsub>
 80083c4:	6038      	str	r0, [r7, #0]
 80083c6:	6079      	str	r1, [r7, #4]
 80083c8:	e012      	b.n	80083f0 <__ieee754_rem_pio2+0x1bc>
 80083ca:	0022      	movs	r2, r4
 80083cc:	9804      	ldr	r0, [sp, #16]
 80083ce:	9905      	ldr	r1, [sp, #20]
 80083d0:	002b      	movs	r3, r5
 80083d2:	f7f9 fafb 	bl	80019cc <__aeabi_dsub>
 80083d6:	9b02      	ldr	r3, [sp, #8]
 80083d8:	151b      	asrs	r3, r3, #20
 80083da:	9308      	str	r3, [sp, #32]
 80083dc:	9a08      	ldr	r2, [sp, #32]
 80083de:	004b      	lsls	r3, r1, #1
 80083e0:	0d5b      	lsrs	r3, r3, #21
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	dc21      	bgt.n	800842c <__ieee754_rem_pio2+0x1f8>
 80083e8:	0002      	movs	r2, r0
 80083ea:	000b      	movs	r3, r1
 80083ec:	603a      	str	r2, [r7, #0]
 80083ee:	607b      	str	r3, [r7, #4]
 80083f0:	9804      	ldr	r0, [sp, #16]
 80083f2:	9905      	ldr	r1, [sp, #20]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	9302      	str	r3, [sp, #8]
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	f7f9 fae6 	bl	80019cc <__aeabi_dsub>
 8008400:	0022      	movs	r2, r4
 8008402:	002b      	movs	r3, r5
 8008404:	f7f9 fae2 	bl	80019cc <__aeabi_dsub>
 8008408:	000b      	movs	r3, r1
 800840a:	0002      	movs	r2, r0
 800840c:	60ba      	str	r2, [r7, #8]
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	db00      	blt.n	8008418 <__ieee754_rem_pio2+0x1e4>
 8008416:	e74a      	b.n	80082ae <__ieee754_rem_pio2+0x7a>
 8008418:	2380      	movs	r3, #128	; 0x80
 800841a:	061b      	lsls	r3, r3, #24
 800841c:	469c      	mov	ip, r3
 800841e:	9c02      	ldr	r4, [sp, #8]
 8008420:	18c9      	adds	r1, r1, r3
 8008422:	4464      	add	r4, ip
 8008424:	607c      	str	r4, [r7, #4]
 8008426:	60b8      	str	r0, [r7, #8]
 8008428:	60f9      	str	r1, [r7, #12]
 800842a:	e776      	b.n	800831a <__ieee754_rem_pio2+0xe6>
 800842c:	22d3      	movs	r2, #211	; 0xd3
 800842e:	9806      	ldr	r0, [sp, #24]
 8008430:	9907      	ldr	r1, [sp, #28]
 8008432:	4b3f      	ldr	r3, [pc, #252]	; (8008530 <__ieee754_rem_pio2+0x2fc>)
 8008434:	0552      	lsls	r2, r2, #21
 8008436:	f7f9 f85d 	bl	80014f4 <__aeabi_dmul>
 800843a:	0004      	movs	r4, r0
 800843c:	000d      	movs	r5, r1
 800843e:	0002      	movs	r2, r0
 8008440:	000b      	movs	r3, r1
 8008442:	9804      	ldr	r0, [sp, #16]
 8008444:	9905      	ldr	r1, [sp, #20]
 8008446:	f7f9 fac1 	bl	80019cc <__aeabi_dsub>
 800844a:	0002      	movs	r2, r0
 800844c:	000b      	movs	r3, r1
 800844e:	9002      	str	r0, [sp, #8]
 8008450:	9103      	str	r1, [sp, #12]
 8008452:	9804      	ldr	r0, [sp, #16]
 8008454:	9905      	ldr	r1, [sp, #20]
 8008456:	f7f9 fab9 	bl	80019cc <__aeabi_dsub>
 800845a:	0022      	movs	r2, r4
 800845c:	002b      	movs	r3, r5
 800845e:	f7f9 fab5 	bl	80019cc <__aeabi_dsub>
 8008462:	0004      	movs	r4, r0
 8008464:	000d      	movs	r5, r1
 8008466:	9806      	ldr	r0, [sp, #24]
 8008468:	9907      	ldr	r1, [sp, #28]
 800846a:	4a32      	ldr	r2, [pc, #200]	; (8008534 <__ieee754_rem_pio2+0x300>)
 800846c:	4b32      	ldr	r3, [pc, #200]	; (8008538 <__ieee754_rem_pio2+0x304>)
 800846e:	f7f9 f841 	bl	80014f4 <__aeabi_dmul>
 8008472:	0022      	movs	r2, r4
 8008474:	002b      	movs	r3, r5
 8008476:	f7f9 faa9 	bl	80019cc <__aeabi_dsub>
 800847a:	0002      	movs	r2, r0
 800847c:	000b      	movs	r3, r1
 800847e:	0004      	movs	r4, r0
 8008480:	000d      	movs	r5, r1
 8008482:	9802      	ldr	r0, [sp, #8]
 8008484:	9903      	ldr	r1, [sp, #12]
 8008486:	f7f9 faa1 	bl	80019cc <__aeabi_dsub>
 800848a:	9a08      	ldr	r2, [sp, #32]
 800848c:	004b      	lsls	r3, r1, #1
 800848e:	0d5b      	lsrs	r3, r3, #21
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b31      	cmp	r3, #49	; 0x31
 8008494:	dc08      	bgt.n	80084a8 <__ieee754_rem_pio2+0x274>
 8008496:	0002      	movs	r2, r0
 8008498:	000b      	movs	r3, r1
 800849a:	603a      	str	r2, [r7, #0]
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	9a02      	ldr	r2, [sp, #8]
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	9204      	str	r2, [sp, #16]
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	e7a3      	b.n	80083f0 <__ieee754_rem_pio2+0x1bc>
 80084a8:	22b8      	movs	r2, #184	; 0xb8
 80084aa:	9806      	ldr	r0, [sp, #24]
 80084ac:	9907      	ldr	r1, [sp, #28]
 80084ae:	4b22      	ldr	r3, [pc, #136]	; (8008538 <__ieee754_rem_pio2+0x304>)
 80084b0:	0592      	lsls	r2, r2, #22
 80084b2:	f7f9 f81f 	bl	80014f4 <__aeabi_dmul>
 80084b6:	0004      	movs	r4, r0
 80084b8:	000d      	movs	r5, r1
 80084ba:	0002      	movs	r2, r0
 80084bc:	000b      	movs	r3, r1
 80084be:	9802      	ldr	r0, [sp, #8]
 80084c0:	9903      	ldr	r1, [sp, #12]
 80084c2:	f7f9 fa83 	bl	80019cc <__aeabi_dsub>
 80084c6:	0002      	movs	r2, r0
 80084c8:	000b      	movs	r3, r1
 80084ca:	9004      	str	r0, [sp, #16]
 80084cc:	9105      	str	r1, [sp, #20]
 80084ce:	9802      	ldr	r0, [sp, #8]
 80084d0:	9903      	ldr	r1, [sp, #12]
 80084d2:	f7f9 fa7b 	bl	80019cc <__aeabi_dsub>
 80084d6:	0022      	movs	r2, r4
 80084d8:	002b      	movs	r3, r5
 80084da:	f7f9 fa77 	bl	80019cc <__aeabi_dsub>
 80084de:	0004      	movs	r4, r0
 80084e0:	000d      	movs	r5, r1
 80084e2:	9806      	ldr	r0, [sp, #24]
 80084e4:	9907      	ldr	r1, [sp, #28]
 80084e6:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <__ieee754_rem_pio2+0x31c>)
 80084e8:	4b1a      	ldr	r3, [pc, #104]	; (8008554 <__ieee754_rem_pio2+0x320>)
 80084ea:	f7f9 f803 	bl	80014f4 <__aeabi_dmul>
 80084ee:	0022      	movs	r2, r4
 80084f0:	002b      	movs	r3, r5
 80084f2:	f7f9 fa6b 	bl	80019cc <__aeabi_dsub>
 80084f6:	0004      	movs	r4, r0
 80084f8:	000d      	movs	r5, r1
 80084fa:	e75d      	b.n	80083b8 <__ieee754_rem_pio2+0x184>
 80084fc:	4b16      	ldr	r3, [pc, #88]	; (8008558 <__ieee754_rem_pio2+0x324>)
 80084fe:	9a02      	ldr	r2, [sp, #8]
 8008500:	429a      	cmp	r2, r3
 8008502:	dd2b      	ble.n	800855c <__ieee754_rem_pio2+0x328>
 8008504:	0022      	movs	r2, r4
 8008506:	002b      	movs	r3, r5
 8008508:	0020      	movs	r0, r4
 800850a:	0029      	movs	r1, r5
 800850c:	f7f9 fa5e 	bl	80019cc <__aeabi_dsub>
 8008510:	60b8      	str	r0, [r7, #8]
 8008512:	60f9      	str	r1, [r7, #12]
 8008514:	6038      	str	r0, [r7, #0]
 8008516:	6079      	str	r1, [r7, #4]
 8008518:	e6a1      	b.n	800825e <__ieee754_rem_pio2+0x2a>
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	3fe921fb 	.word	0x3fe921fb
 8008520:	4002d97b 	.word	0x4002d97b
 8008524:	3ff921fb 	.word	0x3ff921fb
 8008528:	54400000 	.word	0x54400000
 800852c:	1a626331 	.word	0x1a626331
 8008530:	3dd0b461 	.word	0x3dd0b461
 8008534:	2e037073 	.word	0x2e037073
 8008538:	3ba3198a 	.word	0x3ba3198a
 800853c:	413921fb 	.word	0x413921fb
 8008540:	6dc9c883 	.word	0x6dc9c883
 8008544:	3fe45f30 	.word	0x3fe45f30
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	080093e4 	.word	0x080093e4
 8008550:	252049c1 	.word	0x252049c1
 8008554:	397b839a 	.word	0x397b839a
 8008558:	7fefffff 	.word	0x7fefffff
 800855c:	9a02      	ldr	r2, [sp, #8]
 800855e:	0020      	movs	r0, r4
 8008560:	1516      	asrs	r6, r2, #20
 8008562:	4a29      	ldr	r2, [pc, #164]	; (8008608 <__ieee754_rem_pio2+0x3d4>)
 8008564:	18b6      	adds	r6, r6, r2
 8008566:	9a02      	ldr	r2, [sp, #8]
 8008568:	0533      	lsls	r3, r6, #20
 800856a:	1ad5      	subs	r5, r2, r3
 800856c:	0029      	movs	r1, r5
 800856e:	f7f9 fdbf 	bl	80020f0 <__aeabi_d2iz>
 8008572:	f7f9 fdf3 	bl	800215c <__aeabi_i2d>
 8008576:	0002      	movs	r2, r0
 8008578:	000b      	movs	r3, r1
 800857a:	0020      	movs	r0, r4
 800857c:	0029      	movs	r1, r5
 800857e:	920a      	str	r2, [sp, #40]	; 0x28
 8008580:	930b      	str	r3, [sp, #44]	; 0x2c
 8008582:	f7f9 fa23 	bl	80019cc <__aeabi_dsub>
 8008586:	2200      	movs	r2, #0
 8008588:	4b20      	ldr	r3, [pc, #128]	; (800860c <__ieee754_rem_pio2+0x3d8>)
 800858a:	f7f8 ffb3 	bl	80014f4 <__aeabi_dmul>
 800858e:	000d      	movs	r5, r1
 8008590:	0004      	movs	r4, r0
 8008592:	f7f9 fdad 	bl	80020f0 <__aeabi_d2iz>
 8008596:	f7f9 fde1 	bl	800215c <__aeabi_i2d>
 800859a:	0002      	movs	r2, r0
 800859c:	000b      	movs	r3, r1
 800859e:	0020      	movs	r0, r4
 80085a0:	0029      	movs	r1, r5
 80085a2:	920c      	str	r2, [sp, #48]	; 0x30
 80085a4:	930d      	str	r3, [sp, #52]	; 0x34
 80085a6:	f7f9 fa11 	bl	80019cc <__aeabi_dsub>
 80085aa:	2200      	movs	r2, #0
 80085ac:	4b17      	ldr	r3, [pc, #92]	; (800860c <__ieee754_rem_pio2+0x3d8>)
 80085ae:	f7f8 ffa1 	bl	80014f4 <__aeabi_dmul>
 80085b2:	2503      	movs	r5, #3
 80085b4:	900e      	str	r0, [sp, #56]	; 0x38
 80085b6:	910f      	str	r1, [sp, #60]	; 0x3c
 80085b8:	ac0a      	add	r4, sp, #40	; 0x28
 80085ba:	2200      	movs	r2, #0
 80085bc:	6920      	ldr	r0, [r4, #16]
 80085be:	6961      	ldr	r1, [r4, #20]
 80085c0:	2300      	movs	r3, #0
 80085c2:	9502      	str	r5, [sp, #8]
 80085c4:	3c08      	subs	r4, #8
 80085c6:	3d01      	subs	r5, #1
 80085c8:	f7f7 ff20 	bl	800040c <__aeabi_dcmpeq>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d1f4      	bne.n	80085ba <__ieee754_rem_pio2+0x386>
 80085d0:	4b0f      	ldr	r3, [pc, #60]	; (8008610 <__ieee754_rem_pio2+0x3dc>)
 80085d2:	0032      	movs	r2, r6
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	2302      	movs	r3, #2
 80085d8:	0039      	movs	r1, r7
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	a80a      	add	r0, sp, #40	; 0x28
 80085de:	9b02      	ldr	r3, [sp, #8]
 80085e0:	f000 f8d8 	bl	8008794 <__kernel_rem_pio2>
 80085e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e6:	0006      	movs	r6, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	db00      	blt.n	80085ee <__ieee754_rem_pio2+0x3ba>
 80085ec:	e65f      	b.n	80082ae <__ieee754_rem_pio2+0x7a>
 80085ee:	2180      	movs	r1, #128	; 0x80
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	0609      	lsls	r1, r1, #24
 80085f6:	1843      	adds	r3, r0, r1
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	603a      	str	r2, [r7, #0]
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	1843      	adds	r3, r0, r1
 8008602:	60ba      	str	r2, [r7, #8]
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	e688      	b.n	800831a <__ieee754_rem_pio2+0xe6>
 8008608:	fffffbea 	.word	0xfffffbea
 800860c:	41700000 	.word	0x41700000
 8008610:	08009464 	.word	0x08009464

08008614 <__kernel_cos>:
 8008614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008616:	b087      	sub	sp, #28
 8008618:	9204      	str	r2, [sp, #16]
 800861a:	9305      	str	r3, [sp, #20]
 800861c:	004b      	lsls	r3, r1, #1
 800861e:	085b      	lsrs	r3, r3, #1
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	23f9      	movs	r3, #249	; 0xf9
 8008624:	9a00      	ldr	r2, [sp, #0]
 8008626:	0007      	movs	r7, r0
 8008628:	000e      	movs	r6, r1
 800862a:	059b      	lsls	r3, r3, #22
 800862c:	429a      	cmp	r2, r3
 800862e:	da04      	bge.n	800863a <__kernel_cos+0x26>
 8008630:	f7f9 fd5e 	bl	80020f0 <__aeabi_d2iz>
 8008634:	2800      	cmp	r0, #0
 8008636:	d100      	bne.n	800863a <__kernel_cos+0x26>
 8008638:	e084      	b.n	8008744 <__kernel_cos+0x130>
 800863a:	003a      	movs	r2, r7
 800863c:	0033      	movs	r3, r6
 800863e:	0038      	movs	r0, r7
 8008640:	0031      	movs	r1, r6
 8008642:	f7f8 ff57 	bl	80014f4 <__aeabi_dmul>
 8008646:	2200      	movs	r2, #0
 8008648:	4b40      	ldr	r3, [pc, #256]	; (800874c <__kernel_cos+0x138>)
 800864a:	0004      	movs	r4, r0
 800864c:	000d      	movs	r5, r1
 800864e:	f7f8 ff51 	bl	80014f4 <__aeabi_dmul>
 8008652:	4a3f      	ldr	r2, [pc, #252]	; (8008750 <__kernel_cos+0x13c>)
 8008654:	9002      	str	r0, [sp, #8]
 8008656:	9103      	str	r1, [sp, #12]
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <__kernel_cos+0x140>)
 800865a:	0020      	movs	r0, r4
 800865c:	0029      	movs	r1, r5
 800865e:	f7f8 ff49 	bl	80014f4 <__aeabi_dmul>
 8008662:	4a3d      	ldr	r2, [pc, #244]	; (8008758 <__kernel_cos+0x144>)
 8008664:	4b3d      	ldr	r3, [pc, #244]	; (800875c <__kernel_cos+0x148>)
 8008666:	f7f8 f807 	bl	8000678 <__aeabi_dadd>
 800866a:	0022      	movs	r2, r4
 800866c:	002b      	movs	r3, r5
 800866e:	f7f8 ff41 	bl	80014f4 <__aeabi_dmul>
 8008672:	4a3b      	ldr	r2, [pc, #236]	; (8008760 <__kernel_cos+0x14c>)
 8008674:	4b3b      	ldr	r3, [pc, #236]	; (8008764 <__kernel_cos+0x150>)
 8008676:	f7f9 f9a9 	bl	80019cc <__aeabi_dsub>
 800867a:	0022      	movs	r2, r4
 800867c:	002b      	movs	r3, r5
 800867e:	f7f8 ff39 	bl	80014f4 <__aeabi_dmul>
 8008682:	4a39      	ldr	r2, [pc, #228]	; (8008768 <__kernel_cos+0x154>)
 8008684:	4b39      	ldr	r3, [pc, #228]	; (800876c <__kernel_cos+0x158>)
 8008686:	f7f7 fff7 	bl	8000678 <__aeabi_dadd>
 800868a:	0022      	movs	r2, r4
 800868c:	002b      	movs	r3, r5
 800868e:	f7f8 ff31 	bl	80014f4 <__aeabi_dmul>
 8008692:	4a37      	ldr	r2, [pc, #220]	; (8008770 <__kernel_cos+0x15c>)
 8008694:	4b37      	ldr	r3, [pc, #220]	; (8008774 <__kernel_cos+0x160>)
 8008696:	f7f9 f999 	bl	80019cc <__aeabi_dsub>
 800869a:	0022      	movs	r2, r4
 800869c:	002b      	movs	r3, r5
 800869e:	f7f8 ff29 	bl	80014f4 <__aeabi_dmul>
 80086a2:	4a35      	ldr	r2, [pc, #212]	; (8008778 <__kernel_cos+0x164>)
 80086a4:	4b35      	ldr	r3, [pc, #212]	; (800877c <__kernel_cos+0x168>)
 80086a6:	f7f7 ffe7 	bl	8000678 <__aeabi_dadd>
 80086aa:	0022      	movs	r2, r4
 80086ac:	002b      	movs	r3, r5
 80086ae:	f7f8 ff21 	bl	80014f4 <__aeabi_dmul>
 80086b2:	0022      	movs	r2, r4
 80086b4:	002b      	movs	r3, r5
 80086b6:	f7f8 ff1d 	bl	80014f4 <__aeabi_dmul>
 80086ba:	9a04      	ldr	r2, [sp, #16]
 80086bc:	9b05      	ldr	r3, [sp, #20]
 80086be:	0004      	movs	r4, r0
 80086c0:	000d      	movs	r5, r1
 80086c2:	0038      	movs	r0, r7
 80086c4:	0031      	movs	r1, r6
 80086c6:	f7f8 ff15 	bl	80014f4 <__aeabi_dmul>
 80086ca:	0002      	movs	r2, r0
 80086cc:	000b      	movs	r3, r1
 80086ce:	0020      	movs	r0, r4
 80086d0:	0029      	movs	r1, r5
 80086d2:	f7f9 f97b 	bl	80019cc <__aeabi_dsub>
 80086d6:	4b2a      	ldr	r3, [pc, #168]	; (8008780 <__kernel_cos+0x16c>)
 80086d8:	9a00      	ldr	r2, [sp, #0]
 80086da:	0004      	movs	r4, r0
 80086dc:	000d      	movs	r5, r1
 80086de:	429a      	cmp	r2, r3
 80086e0:	dc0d      	bgt.n	80086fe <__kernel_cos+0xea>
 80086e2:	0002      	movs	r2, r0
 80086e4:	000b      	movs	r3, r1
 80086e6:	9802      	ldr	r0, [sp, #8]
 80086e8:	9903      	ldr	r1, [sp, #12]
 80086ea:	f7f9 f96f 	bl	80019cc <__aeabi_dsub>
 80086ee:	0002      	movs	r2, r0
 80086f0:	2000      	movs	r0, #0
 80086f2:	000b      	movs	r3, r1
 80086f4:	4923      	ldr	r1, [pc, #140]	; (8008784 <__kernel_cos+0x170>)
 80086f6:	f7f9 f969 	bl	80019cc <__aeabi_dsub>
 80086fa:	b007      	add	sp, #28
 80086fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fe:	4b22      	ldr	r3, [pc, #136]	; (8008788 <__kernel_cos+0x174>)
 8008700:	9a00      	ldr	r2, [sp, #0]
 8008702:	2600      	movs	r6, #0
 8008704:	429a      	cmp	r2, r3
 8008706:	dc1b      	bgt.n	8008740 <__kernel_cos+0x12c>
 8008708:	0013      	movs	r3, r2
 800870a:	4a20      	ldr	r2, [pc, #128]	; (800878c <__kernel_cos+0x178>)
 800870c:	4694      	mov	ip, r2
 800870e:	4463      	add	r3, ip
 8008710:	001f      	movs	r7, r3
 8008712:	0032      	movs	r2, r6
 8008714:	003b      	movs	r3, r7
 8008716:	2000      	movs	r0, #0
 8008718:	491a      	ldr	r1, [pc, #104]	; (8008784 <__kernel_cos+0x170>)
 800871a:	f7f9 f957 	bl	80019cc <__aeabi_dsub>
 800871e:	0032      	movs	r2, r6
 8008720:	003b      	movs	r3, r7
 8008722:	9000      	str	r0, [sp, #0]
 8008724:	9101      	str	r1, [sp, #4]
 8008726:	9802      	ldr	r0, [sp, #8]
 8008728:	9903      	ldr	r1, [sp, #12]
 800872a:	f7f9 f94f 	bl	80019cc <__aeabi_dsub>
 800872e:	0022      	movs	r2, r4
 8008730:	002b      	movs	r3, r5
 8008732:	f7f9 f94b 	bl	80019cc <__aeabi_dsub>
 8008736:	0002      	movs	r2, r0
 8008738:	000b      	movs	r3, r1
 800873a:	9800      	ldr	r0, [sp, #0]
 800873c:	9901      	ldr	r1, [sp, #4]
 800873e:	e7da      	b.n	80086f6 <__kernel_cos+0xe2>
 8008740:	4f13      	ldr	r7, [pc, #76]	; (8008790 <__kernel_cos+0x17c>)
 8008742:	e7e6      	b.n	8008712 <__kernel_cos+0xfe>
 8008744:	2000      	movs	r0, #0
 8008746:	490f      	ldr	r1, [pc, #60]	; (8008784 <__kernel_cos+0x170>)
 8008748:	e7d7      	b.n	80086fa <__kernel_cos+0xe6>
 800874a:	46c0      	nop			; (mov r8, r8)
 800874c:	3fe00000 	.word	0x3fe00000
 8008750:	be8838d4 	.word	0xbe8838d4
 8008754:	bda8fae9 	.word	0xbda8fae9
 8008758:	bdb4b1c4 	.word	0xbdb4b1c4
 800875c:	3e21ee9e 	.word	0x3e21ee9e
 8008760:	809c52ad 	.word	0x809c52ad
 8008764:	3e927e4f 	.word	0x3e927e4f
 8008768:	19cb1590 	.word	0x19cb1590
 800876c:	3efa01a0 	.word	0x3efa01a0
 8008770:	16c15177 	.word	0x16c15177
 8008774:	3f56c16c 	.word	0x3f56c16c
 8008778:	5555554c 	.word	0x5555554c
 800877c:	3fa55555 	.word	0x3fa55555
 8008780:	3fd33332 	.word	0x3fd33332
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	3fe90000 	.word	0x3fe90000
 800878c:	ffe00000 	.word	0xffe00000
 8008790:	3fd20000 	.word	0x3fd20000

08008794 <__kernel_rem_pio2>:
 8008794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008796:	4ccb      	ldr	r4, [pc, #812]	; (8008ac4 <__kernel_rem_pio2+0x330>)
 8008798:	44a5      	add	sp, r4
 800879a:	930d      	str	r3, [sp, #52]	; 0x34
 800879c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800879e:	0014      	movs	r4, r2
 80087a0:	009a      	lsls	r2, r3, #2
 80087a2:	4bc9      	ldr	r3, [pc, #804]	; (8008ac8 <__kernel_rem_pio2+0x334>)
 80087a4:	900e      	str	r0, [sp, #56]	; 0x38
 80087a6:	58d3      	ldr	r3, [r2, r3]
 80087a8:	9107      	str	r1, [sp, #28]
 80087aa:	930a      	str	r3, [sp, #40]	; 0x28
 80087ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ae:	3b01      	subs	r3, #1
 80087b0:	930c      	str	r3, [sp, #48]	; 0x30
 80087b2:	2300      	movs	r3, #0
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	0023      	movs	r3, r4
 80087b8:	3314      	adds	r3, #20
 80087ba:	db04      	blt.n	80087c6 <__kernel_rem_pio2+0x32>
 80087bc:	2118      	movs	r1, #24
 80087be:	1ee0      	subs	r0, r4, #3
 80087c0:	f7f7 fd28 	bl	8000214 <__divsi3>
 80087c4:	9000      	str	r0, [sp, #0]
 80087c6:	2218      	movs	r2, #24
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	4252      	negs	r2, r2
 80087cc:	3301      	adds	r3, #1
 80087ce:	435a      	muls	r2, r3
 80087d0:	1913      	adds	r3, r2, r4
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d6:	9b00      	ldr	r3, [sp, #0]
 80087d8:	ae26      	add	r6, sp, #152	; 0x98
 80087da:	1a9d      	subs	r5, r3, r2
 80087dc:	002c      	movs	r4, r5
 80087de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e0:	189f      	adds	r7, r3, r2
 80087e2:	1b63      	subs	r3, r4, r5
 80087e4:	429f      	cmp	r7, r3
 80087e6:	da0f      	bge.n	8008808 <__kernel_rem_pio2+0x74>
 80087e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80087ea:	af76      	add	r7, sp, #472	; 0x1d8
 80087ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f0:	1af3      	subs	r3, r6, r3
 80087f2:	429a      	cmp	r2, r3
 80087f4:	db30      	blt.n	8008858 <__kernel_rem_pio2+0xc4>
 80087f6:	ab26      	add	r3, sp, #152	; 0x98
 80087f8:	00f4      	lsls	r4, r6, #3
 80087fa:	2200      	movs	r2, #0
 80087fc:	18e4      	adds	r4, r4, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	2500      	movs	r5, #0
 8008802:	9204      	str	r2, [sp, #16]
 8008804:	9305      	str	r3, [sp, #20]
 8008806:	e01e      	b.n	8008846 <__kernel_rem_pio2+0xb2>
 8008808:	2c00      	cmp	r4, #0
 800880a:	db07      	blt.n	800881c <__kernel_rem_pio2+0x88>
 800880c:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800880e:	00a3      	lsls	r3, r4, #2
 8008810:	58d0      	ldr	r0, [r2, r3]
 8008812:	f7f9 fca3 	bl	800215c <__aeabi_i2d>
 8008816:	c603      	stmia	r6!, {r0, r1}
 8008818:	3401      	adds	r4, #1
 800881a:	e7e2      	b.n	80087e2 <__kernel_rem_pio2+0x4e>
 800881c:	2000      	movs	r0, #0
 800881e:	2100      	movs	r1, #0
 8008820:	e7f9      	b.n	8008816 <__kernel_rem_pio2+0x82>
 8008822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008824:	00e9      	lsls	r1, r5, #3
 8008826:	1859      	adds	r1, r3, r1
 8008828:	6808      	ldr	r0, [r1, #0]
 800882a:	6849      	ldr	r1, [r1, #4]
 800882c:	6822      	ldr	r2, [r4, #0]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	f7f8 fe60 	bl	80014f4 <__aeabi_dmul>
 8008834:	0002      	movs	r2, r0
 8008836:	000b      	movs	r3, r1
 8008838:	9804      	ldr	r0, [sp, #16]
 800883a:	9905      	ldr	r1, [sp, #20]
 800883c:	f7f7 ff1c 	bl	8000678 <__aeabi_dadd>
 8008840:	9004      	str	r0, [sp, #16]
 8008842:	9105      	str	r1, [sp, #20]
 8008844:	3501      	adds	r5, #1
 8008846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008848:	3c08      	subs	r4, #8
 800884a:	429d      	cmp	r5, r3
 800884c:	dde9      	ble.n	8008822 <__kernel_rem_pio2+0x8e>
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	9c05      	ldr	r4, [sp, #20]
 8008852:	3601      	adds	r6, #1
 8008854:	c718      	stmia	r7!, {r3, r4}
 8008856:	e7c9      	b.n	80087ec <__kernel_rem_pio2+0x58>
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	aa12      	add	r2, sp, #72	; 0x48
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	189b      	adds	r3, r3, r2
 8008860:	9310      	str	r3, [sp, #64]	; 0x40
 8008862:	9b00      	ldr	r3, [sp, #0]
 8008864:	0098      	lsls	r0, r3, #2
 8008866:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008868:	181b      	adds	r3, r3, r0
 800886a:	930f      	str	r3, [sp, #60]	; 0x3c
 800886c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	9b04      	ldr	r3, [sp, #16]
 8008872:	aa76      	add	r2, sp, #472	; 0x1d8
 8008874:	00db      	lsls	r3, r3, #3
 8008876:	18d3      	adds	r3, r2, r3
 8008878:	681c      	ldr	r4, [r3, #0]
 800887a:	685d      	ldr	r5, [r3, #4]
 800887c:	ab12      	add	r3, sp, #72	; 0x48
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	9309      	str	r3, [sp, #36]	; 0x24
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	9211      	str	r2, [sp, #68]	; 0x44
 8008886:	9308      	str	r3, [sp, #32]
 8008888:	9b08      	ldr	r3, [sp, #32]
 800888a:	2b00      	cmp	r3, #0
 800888c:	dc74      	bgt.n	8008978 <__kernel_rem_pio2+0x1e4>
 800888e:	0020      	movs	r0, r4
 8008890:	0029      	movs	r1, r5
 8008892:	9a02      	ldr	r2, [sp, #8]
 8008894:	f000 fc22 	bl	80090dc <scalbn>
 8008898:	23ff      	movs	r3, #255	; 0xff
 800889a:	2200      	movs	r2, #0
 800889c:	059b      	lsls	r3, r3, #22
 800889e:	0004      	movs	r4, r0
 80088a0:	000d      	movs	r5, r1
 80088a2:	f7f8 fe27 	bl	80014f4 <__aeabi_dmul>
 80088a6:	f000 fb8f 	bl	8008fc8 <floor>
 80088aa:	2200      	movs	r2, #0
 80088ac:	4b87      	ldr	r3, [pc, #540]	; (8008acc <__kernel_rem_pio2+0x338>)
 80088ae:	f7f8 fe21 	bl	80014f4 <__aeabi_dmul>
 80088b2:	0002      	movs	r2, r0
 80088b4:	000b      	movs	r3, r1
 80088b6:	0020      	movs	r0, r4
 80088b8:	0029      	movs	r1, r5
 80088ba:	f7f9 f887 	bl	80019cc <__aeabi_dsub>
 80088be:	000d      	movs	r5, r1
 80088c0:	0004      	movs	r4, r0
 80088c2:	f7f9 fc15 	bl	80020f0 <__aeabi_d2iz>
 80088c6:	9009      	str	r0, [sp, #36]	; 0x24
 80088c8:	f7f9 fc48 	bl	800215c <__aeabi_i2d>
 80088cc:	000b      	movs	r3, r1
 80088ce:	0002      	movs	r2, r0
 80088d0:	0029      	movs	r1, r5
 80088d2:	0020      	movs	r0, r4
 80088d4:	f7f9 f87a 	bl	80019cc <__aeabi_dsub>
 80088d8:	9b02      	ldr	r3, [sp, #8]
 80088da:	0006      	movs	r6, r0
 80088dc:	000f      	movs	r7, r1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dd74      	ble.n	80089cc <__kernel_rem_pio2+0x238>
 80088e2:	2118      	movs	r1, #24
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	aa12      	add	r2, sp, #72	; 0x48
 80088e8:	3b01      	subs	r3, #1
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	589a      	ldr	r2, [r3, r2]
 80088ee:	9802      	ldr	r0, [sp, #8]
 80088f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80088f2:	1a09      	subs	r1, r1, r0
 80088f4:	0010      	movs	r0, r2
 80088f6:	4108      	asrs	r0, r1
 80088f8:	1824      	adds	r4, r4, r0
 80088fa:	4088      	lsls	r0, r1
 80088fc:	a912      	add	r1, sp, #72	; 0x48
 80088fe:	1a12      	subs	r2, r2, r0
 8008900:	505a      	str	r2, [r3, r1]
 8008902:	2317      	movs	r3, #23
 8008904:	9902      	ldr	r1, [sp, #8]
 8008906:	9409      	str	r4, [sp, #36]	; 0x24
 8008908:	1a5b      	subs	r3, r3, r1
 800890a:	411a      	asrs	r2, r3
 800890c:	9208      	str	r2, [sp, #32]
 800890e:	9b08      	ldr	r3, [sp, #32]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dd6d      	ble.n	80089f0 <__kernel_rem_pio2+0x25c>
 8008914:	2200      	movs	r2, #0
 8008916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008918:	2080      	movs	r0, #128	; 0x80
 800891a:	3301      	adds	r3, #1
 800891c:	9309      	str	r3, [sp, #36]	; 0x24
 800891e:	4b6c      	ldr	r3, [pc, #432]	; (8008ad0 <__kernel_rem_pio2+0x33c>)
 8008920:	0014      	movs	r4, r2
 8008922:	469c      	mov	ip, r3
 8008924:	2501      	movs	r5, #1
 8008926:	0440      	lsls	r0, r0, #17
 8008928:	9b04      	ldr	r3, [sp, #16]
 800892a:	4293      	cmp	r3, r2
 800892c:	dd00      	ble.n	8008930 <__kernel_rem_pio2+0x19c>
 800892e:	e099      	b.n	8008a64 <__kernel_rem_pio2+0x2d0>
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	dd05      	ble.n	8008942 <__kernel_rem_pio2+0x1ae>
 8008936:	2b01      	cmp	r3, #1
 8008938:	d100      	bne.n	800893c <__kernel_rem_pio2+0x1a8>
 800893a:	e0a9      	b.n	8008a90 <__kernel_rem_pio2+0x2fc>
 800893c:	2b02      	cmp	r3, #2
 800893e:	d100      	bne.n	8008942 <__kernel_rem_pio2+0x1ae>
 8008940:	e0b1      	b.n	8008aa6 <__kernel_rem_pio2+0x312>
 8008942:	9b08      	ldr	r3, [sp, #32]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d153      	bne.n	80089f0 <__kernel_rem_pio2+0x25c>
 8008948:	0032      	movs	r2, r6
 800894a:	003b      	movs	r3, r7
 800894c:	2000      	movs	r0, #0
 800894e:	4961      	ldr	r1, [pc, #388]	; (8008ad4 <__kernel_rem_pio2+0x340>)
 8008950:	f7f9 f83c 	bl	80019cc <__aeabi_dsub>
 8008954:	0006      	movs	r6, r0
 8008956:	000f      	movs	r7, r1
 8008958:	2c00      	cmp	r4, #0
 800895a:	d049      	beq.n	80089f0 <__kernel_rem_pio2+0x25c>
 800895c:	9a02      	ldr	r2, [sp, #8]
 800895e:	2000      	movs	r0, #0
 8008960:	495c      	ldr	r1, [pc, #368]	; (8008ad4 <__kernel_rem_pio2+0x340>)
 8008962:	f000 fbbb 	bl	80090dc <scalbn>
 8008966:	0002      	movs	r2, r0
 8008968:	000b      	movs	r3, r1
 800896a:	0030      	movs	r0, r6
 800896c:	0039      	movs	r1, r7
 800896e:	f7f9 f82d 	bl	80019cc <__aeabi_dsub>
 8008972:	0006      	movs	r6, r0
 8008974:	000f      	movs	r7, r1
 8008976:	e03b      	b.n	80089f0 <__kernel_rem_pio2+0x25c>
 8008978:	2200      	movs	r2, #0
 800897a:	4b57      	ldr	r3, [pc, #348]	; (8008ad8 <__kernel_rem_pio2+0x344>)
 800897c:	0020      	movs	r0, r4
 800897e:	0029      	movs	r1, r5
 8008980:	f7f8 fdb8 	bl	80014f4 <__aeabi_dmul>
 8008984:	f7f9 fbb4 	bl	80020f0 <__aeabi_d2iz>
 8008988:	f7f9 fbe8 	bl	800215c <__aeabi_i2d>
 800898c:	2200      	movs	r2, #0
 800898e:	4b53      	ldr	r3, [pc, #332]	; (8008adc <__kernel_rem_pio2+0x348>)
 8008990:	0006      	movs	r6, r0
 8008992:	000f      	movs	r7, r1
 8008994:	f7f8 fdae 	bl	80014f4 <__aeabi_dmul>
 8008998:	0002      	movs	r2, r0
 800899a:	000b      	movs	r3, r1
 800899c:	0020      	movs	r0, r4
 800899e:	0029      	movs	r1, r5
 80089a0:	f7f9 f814 	bl	80019cc <__aeabi_dsub>
 80089a4:	f7f9 fba4 	bl	80020f0 <__aeabi_d2iz>
 80089a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089ac:	c301      	stmia	r3!, {r0}
 80089ae:	9309      	str	r3, [sp, #36]	; 0x24
 80089b0:	9b08      	ldr	r3, [sp, #32]
 80089b2:	0030      	movs	r0, r6
 80089b4:	3b01      	subs	r3, #1
 80089b6:	9308      	str	r3, [sp, #32]
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	18d3      	adds	r3, r2, r3
 80089bc:	0039      	movs	r1, r7
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f7f7 fe59 	bl	8000678 <__aeabi_dadd>
 80089c6:	0004      	movs	r4, r0
 80089c8:	000d      	movs	r5, r1
 80089ca:	e75d      	b.n	8008888 <__kernel_rem_pio2+0xf4>
 80089cc:	9b02      	ldr	r3, [sp, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d107      	bne.n	80089e2 <__kernel_rem_pio2+0x24e>
 80089d2:	9b04      	ldr	r3, [sp, #16]
 80089d4:	aa12      	add	r2, sp, #72	; 0x48
 80089d6:	3b01      	subs	r3, #1
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	5898      	ldr	r0, [r3, r2]
 80089dc:	15c3      	asrs	r3, r0, #23
 80089de:	9308      	str	r3, [sp, #32]
 80089e0:	e795      	b.n	800890e <__kernel_rem_pio2+0x17a>
 80089e2:	2200      	movs	r2, #0
 80089e4:	4b3e      	ldr	r3, [pc, #248]	; (8008ae0 <__kernel_rem_pio2+0x34c>)
 80089e6:	f7f7 fd35 	bl	8000454 <__aeabi_dcmpge>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d137      	bne.n	8008a5e <__kernel_rem_pio2+0x2ca>
 80089ee:	9008      	str	r0, [sp, #32]
 80089f0:	2200      	movs	r2, #0
 80089f2:	2300      	movs	r3, #0
 80089f4:	0030      	movs	r0, r6
 80089f6:	0039      	movs	r1, r7
 80089f8:	f7f7 fd08 	bl	800040c <__aeabi_dcmpeq>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d100      	bne.n	8008a02 <__kernel_rem_pio2+0x26e>
 8008a00:	e0b9      	b.n	8008b76 <__kernel_rem_pio2+0x3e2>
 8008a02:	2200      	movs	r2, #0
 8008a04:	9b04      	ldr	r3, [sp, #16]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	da53      	bge.n	8008ab8 <__kernel_rem_pio2+0x324>
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	d100      	bne.n	8008a16 <__kernel_rem_pio2+0x282>
 8008a14:	e095      	b.n	8008b42 <__kernel_rem_pio2+0x3ae>
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	aa12      	add	r2, sp, #72	; 0x48
 8008a1a:	3b18      	subs	r3, #24
 8008a1c:	9302      	str	r3, [sp, #8]
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	589b      	ldr	r3, [r3, r2]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d100      	bne.n	8008a2a <__kernel_rem_pio2+0x296>
 8008a28:	e0a1      	b.n	8008b6e <__kernel_rem_pio2+0x3da>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	9a02      	ldr	r2, [sp, #8]
 8008a2e:	4929      	ldr	r1, [pc, #164]	; (8008ad4 <__kernel_rem_pio2+0x340>)
 8008a30:	f000 fb54 	bl	80090dc <scalbn>
 8008a34:	0006      	movs	r6, r0
 8008a36:	000f      	movs	r7, r1
 8008a38:	9c00      	ldr	r4, [sp, #0]
 8008a3a:	2c00      	cmp	r4, #0
 8008a3c:	db00      	blt.n	8008a40 <__kernel_rem_pio2+0x2ac>
 8008a3e:	e0d9      	b.n	8008bf4 <__kernel_rem_pio2+0x460>
 8008a40:	9c00      	ldr	r4, [sp, #0]
 8008a42:	2c00      	cmp	r4, #0
 8008a44:	da00      	bge.n	8008a48 <__kernel_rem_pio2+0x2b4>
 8008a46:	e10c      	b.n	8008c62 <__kernel_rem_pio2+0x4ce>
 8008a48:	ab76      	add	r3, sp, #472	; 0x1d8
 8008a4a:	00e6      	lsls	r6, r4, #3
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	18f6      	adds	r6, r6, r3
 8008a50:	2300      	movs	r3, #0
 8008a52:	9202      	str	r2, [sp, #8]
 8008a54:	9303      	str	r3, [sp, #12]
 8008a56:	9b00      	ldr	r3, [sp, #0]
 8008a58:	2500      	movs	r5, #0
 8008a5a:	1b1f      	subs	r7, r3, r4
 8008a5c:	e0f3      	b.n	8008c46 <__kernel_rem_pio2+0x4b2>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	e757      	b.n	8008914 <__kernel_rem_pio2+0x180>
 8008a64:	9b00      	ldr	r3, [sp, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	d10b      	bne.n	8008a84 <__kernel_rem_pio2+0x2f0>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <__kernel_rem_pio2+0x2e4>
 8008a70:	9c00      	ldr	r4, [sp, #0]
 8008a72:	1ac3      	subs	r3, r0, r3
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	002b      	movs	r3, r5
 8008a78:	9c00      	ldr	r4, [sp, #0]
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	3404      	adds	r4, #4
 8008a7e:	9400      	str	r4, [sp, #0]
 8008a80:	001c      	movs	r4, r3
 8008a82:	e751      	b.n	8008928 <__kernel_rem_pio2+0x194>
 8008a84:	4661      	mov	r1, ip
 8008a86:	1acb      	subs	r3, r1, r3
 8008a88:	9900      	ldr	r1, [sp, #0]
 8008a8a:	600b      	str	r3, [r1, #0]
 8008a8c:	0023      	movs	r3, r4
 8008a8e:	e7f3      	b.n	8008a78 <__kernel_rem_pio2+0x2e4>
 8008a90:	9b04      	ldr	r3, [sp, #16]
 8008a92:	aa12      	add	r2, sp, #72	; 0x48
 8008a94:	3b01      	subs	r3, #1
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	589a      	ldr	r2, [r3, r2]
 8008a9a:	9200      	str	r2, [sp, #0]
 8008a9c:	0252      	lsls	r2, r2, #9
 8008a9e:	0a52      	lsrs	r2, r2, #9
 8008aa0:	a912      	add	r1, sp, #72	; 0x48
 8008aa2:	505a      	str	r2, [r3, r1]
 8008aa4:	e74d      	b.n	8008942 <__kernel_rem_pio2+0x1ae>
 8008aa6:	9b04      	ldr	r3, [sp, #16]
 8008aa8:	aa12      	add	r2, sp, #72	; 0x48
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	589a      	ldr	r2, [r3, r2]
 8008ab0:	9200      	str	r2, [sp, #0]
 8008ab2:	0292      	lsls	r2, r2, #10
 8008ab4:	0a92      	lsrs	r2, r2, #10
 8008ab6:	e7f3      	b.n	8008aa0 <__kernel_rem_pio2+0x30c>
 8008ab8:	0099      	lsls	r1, r3, #2
 8008aba:	a812      	add	r0, sp, #72	; 0x48
 8008abc:	5809      	ldr	r1, [r1, r0]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	e7a2      	b.n	8008a0a <__kernel_rem_pio2+0x276>
 8008ac4:	fffffd84 	.word	0xfffffd84
 8008ac8:	080095b0 	.word	0x080095b0
 8008acc:	40200000 	.word	0x40200000
 8008ad0:	00ffffff 	.word	0x00ffffff
 8008ad4:	3ff00000 	.word	0x3ff00000
 8008ad8:	3e700000 	.word	0x3e700000
 8008adc:	41700000 	.word	0x41700000
 8008ae0:	3fe00000 	.word	0x3fe00000
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ae8:	009a      	lsls	r2, r3, #2
 8008aea:	4252      	negs	r2, r2
 8008aec:	588a      	ldr	r2, [r1, r2]
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d0f8      	beq.n	8008ae4 <__kernel_rem_pio2+0x350>
 8008af2:	9a04      	ldr	r2, [sp, #16]
 8008af4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008af6:	1c57      	adds	r7, r2, #1
 8008af8:	1854      	adds	r4, r2, r1
 8008afa:	00e4      	lsls	r4, r4, #3
 8008afc:	aa26      	add	r2, sp, #152	; 0x98
 8008afe:	1914      	adds	r4, r2, r4
 8008b00:	9a04      	ldr	r2, [sp, #16]
 8008b02:	18d3      	adds	r3, r2, r3
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	42bb      	cmp	r3, r7
 8008b0a:	da00      	bge.n	8008b0e <__kernel_rem_pio2+0x37a>
 8008b0c:	e6b0      	b.n	8008870 <__kernel_rem_pio2+0xdc>
 8008b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b10:	00bb      	lsls	r3, r7, #2
 8008b12:	58d0      	ldr	r0, [r2, r3]
 8008b14:	f7f9 fb22 	bl	800215c <__aeabi_i2d>
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	0026      	movs	r6, r4
 8008b1e:	2500      	movs	r5, #0
 8008b20:	6020      	str	r0, [r4, #0]
 8008b22:	6061      	str	r1, [r4, #4]
 8008b24:	9200      	str	r2, [sp, #0]
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b2a:	429d      	cmp	r5, r3
 8008b2c:	dd0b      	ble.n	8008b46 <__kernel_rem_pio2+0x3b2>
 8008b2e:	00fb      	lsls	r3, r7, #3
 8008b30:	aa76      	add	r2, sp, #472	; 0x1d8
 8008b32:	18d3      	adds	r3, r2, r3
 8008b34:	3701      	adds	r7, #1
 8008b36:	9900      	ldr	r1, [sp, #0]
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	3408      	adds	r4, #8
 8008b3c:	6019      	str	r1, [r3, #0]
 8008b3e:	605a      	str	r2, [r3, #4]
 8008b40:	e7e1      	b.n	8008b06 <__kernel_rem_pio2+0x372>
 8008b42:	2301      	movs	r3, #1
 8008b44:	e7cf      	b.n	8008ae6 <__kernel_rem_pio2+0x352>
 8008b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b48:	00e9      	lsls	r1, r5, #3
 8008b4a:	1859      	adds	r1, r3, r1
 8008b4c:	6808      	ldr	r0, [r1, #0]
 8008b4e:	6849      	ldr	r1, [r1, #4]
 8008b50:	6832      	ldr	r2, [r6, #0]
 8008b52:	6873      	ldr	r3, [r6, #4]
 8008b54:	f7f8 fcce 	bl	80014f4 <__aeabi_dmul>
 8008b58:	0002      	movs	r2, r0
 8008b5a:	000b      	movs	r3, r1
 8008b5c:	9800      	ldr	r0, [sp, #0]
 8008b5e:	9901      	ldr	r1, [sp, #4]
 8008b60:	f7f7 fd8a 	bl	8000678 <__aeabi_dadd>
 8008b64:	3501      	adds	r5, #1
 8008b66:	9000      	str	r0, [sp, #0]
 8008b68:	9101      	str	r1, [sp, #4]
 8008b6a:	3e08      	subs	r6, #8
 8008b6c:	e7dc      	b.n	8008b28 <__kernel_rem_pio2+0x394>
 8008b6e:	9b00      	ldr	r3, [sp, #0]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	e74f      	b.n	8008a16 <__kernel_rem_pio2+0x282>
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	0030      	movs	r0, r6
 8008b7a:	425a      	negs	r2, r3
 8008b7c:	0039      	movs	r1, r7
 8008b7e:	f000 faad 	bl	80090dc <scalbn>
 8008b82:	2200      	movs	r2, #0
 8008b84:	4bb5      	ldr	r3, [pc, #724]	; (8008e5c <__kernel_rem_pio2+0x6c8>)
 8008b86:	0004      	movs	r4, r0
 8008b88:	000d      	movs	r5, r1
 8008b8a:	f7f7 fc63 	bl	8000454 <__aeabi_dcmpge>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d025      	beq.n	8008bde <__kernel_rem_pio2+0x44a>
 8008b92:	2200      	movs	r2, #0
 8008b94:	4bb2      	ldr	r3, [pc, #712]	; (8008e60 <__kernel_rem_pio2+0x6cc>)
 8008b96:	0020      	movs	r0, r4
 8008b98:	0029      	movs	r1, r5
 8008b9a:	f7f8 fcab 	bl	80014f4 <__aeabi_dmul>
 8008b9e:	f7f9 faa7 	bl	80020f0 <__aeabi_d2iz>
 8008ba2:	9b04      	ldr	r3, [sp, #16]
 8008ba4:	0006      	movs	r6, r0
 8008ba6:	009f      	lsls	r7, r3, #2
 8008ba8:	f7f9 fad8 	bl	800215c <__aeabi_i2d>
 8008bac:	2200      	movs	r2, #0
 8008bae:	4bab      	ldr	r3, [pc, #684]	; (8008e5c <__kernel_rem_pio2+0x6c8>)
 8008bb0:	f7f8 fca0 	bl	80014f4 <__aeabi_dmul>
 8008bb4:	0002      	movs	r2, r0
 8008bb6:	000b      	movs	r3, r1
 8008bb8:	0020      	movs	r0, r4
 8008bba:	0029      	movs	r1, r5
 8008bbc:	f7f8 ff06 	bl	80019cc <__aeabi_dsub>
 8008bc0:	f7f9 fa96 	bl	80020f0 <__aeabi_d2iz>
 8008bc4:	ab12      	add	r3, sp, #72	; 0x48
 8008bc6:	51d8      	str	r0, [r3, r7]
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	aa12      	add	r2, sp, #72	; 0x48
 8008bcc:	3301      	adds	r3, #1
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	9b02      	ldr	r3, [sp, #8]
 8008bd2:	3318      	adds	r3, #24
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	9b00      	ldr	r3, [sp, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	509e      	str	r6, [r3, r2]
 8008bdc:	e725      	b.n	8008a2a <__kernel_rem_pio2+0x296>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	0020      	movs	r0, r4
 8008be2:	0029      	movs	r1, r5
 8008be4:	009e      	lsls	r6, r3, #2
 8008be6:	f7f9 fa83 	bl	80020f0 <__aeabi_d2iz>
 8008bea:	ab12      	add	r3, sp, #72	; 0x48
 8008bec:	5198      	str	r0, [r3, r6]
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	e71a      	b.n	8008a2a <__kernel_rem_pio2+0x296>
 8008bf4:	00e5      	lsls	r5, r4, #3
 8008bf6:	ab76      	add	r3, sp, #472	; 0x1d8
 8008bf8:	aa12      	add	r2, sp, #72	; 0x48
 8008bfa:	195d      	adds	r5, r3, r5
 8008bfc:	00a3      	lsls	r3, r4, #2
 8008bfe:	5898      	ldr	r0, [r3, r2]
 8008c00:	f7f9 faac 	bl	800215c <__aeabi_i2d>
 8008c04:	0032      	movs	r2, r6
 8008c06:	003b      	movs	r3, r7
 8008c08:	f7f8 fc74 	bl	80014f4 <__aeabi_dmul>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	6028      	str	r0, [r5, #0]
 8008c10:	6069      	str	r1, [r5, #4]
 8008c12:	4b93      	ldr	r3, [pc, #588]	; (8008e60 <__kernel_rem_pio2+0x6cc>)
 8008c14:	0030      	movs	r0, r6
 8008c16:	0039      	movs	r1, r7
 8008c18:	f7f8 fc6c 	bl	80014f4 <__aeabi_dmul>
 8008c1c:	3c01      	subs	r4, #1
 8008c1e:	0006      	movs	r6, r0
 8008c20:	000f      	movs	r7, r1
 8008c22:	e70a      	b.n	8008a3a <__kernel_rem_pio2+0x2a6>
 8008c24:	4b8f      	ldr	r3, [pc, #572]	; (8008e64 <__kernel_rem_pio2+0x6d0>)
 8008c26:	00e9      	lsls	r1, r5, #3
 8008c28:	1859      	adds	r1, r3, r1
 8008c2a:	6808      	ldr	r0, [r1, #0]
 8008c2c:	6849      	ldr	r1, [r1, #4]
 8008c2e:	ce0c      	ldmia	r6!, {r2, r3}
 8008c30:	f7f8 fc60 	bl	80014f4 <__aeabi_dmul>
 8008c34:	0002      	movs	r2, r0
 8008c36:	000b      	movs	r3, r1
 8008c38:	9802      	ldr	r0, [sp, #8]
 8008c3a:	9903      	ldr	r1, [sp, #12]
 8008c3c:	f7f7 fd1c 	bl	8000678 <__aeabi_dadd>
 8008c40:	9002      	str	r0, [sp, #8]
 8008c42:	9103      	str	r1, [sp, #12]
 8008c44:	3501      	adds	r5, #1
 8008c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c48:	429d      	cmp	r5, r3
 8008c4a:	dc01      	bgt.n	8008c50 <__kernel_rem_pio2+0x4bc>
 8008c4c:	42bd      	cmp	r5, r7
 8008c4e:	dde9      	ble.n	8008c24 <__kernel_rem_pio2+0x490>
 8008c50:	ab4e      	add	r3, sp, #312	; 0x138
 8008c52:	00ff      	lsls	r7, r7, #3
 8008c54:	19df      	adds	r7, r3, r7
 8008c56:	3c01      	subs	r4, #1
 8008c58:	9a02      	ldr	r2, [sp, #8]
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	603a      	str	r2, [r7, #0]
 8008c5e:	607b      	str	r3, [r7, #4]
 8008c60:	e6ef      	b.n	8008a42 <__kernel_rem_pio2+0x2ae>
 8008c62:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	dc0e      	bgt.n	8008c86 <__kernel_rem_pio2+0x4f2>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dd00      	ble.n	8008c6e <__kernel_rem_pio2+0x4da>
 8008c6c:	e08c      	b.n	8008d88 <__kernel_rem_pio2+0x5f4>
 8008c6e:	2500      	movs	r5, #0
 8008c70:	002c      	movs	r4, r5
 8008c72:	42ab      	cmp	r3, r5
 8008c74:	d046      	beq.n	8008d04 <__kernel_rem_pio2+0x570>
 8008c76:	2007      	movs	r0, #7
 8008c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7a:	4003      	ands	r3, r0
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	239f      	movs	r3, #159	; 0x9f
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	449d      	add	sp, r3
 8008c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c86:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008c88:	2b03      	cmp	r3, #3
 8008c8a:	d1f4      	bne.n	8008c76 <__kernel_rem_pio2+0x4e2>
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	00dc      	lsls	r4, r3, #3
 8008c90:	ab4e      	add	r3, sp, #312	; 0x138
 8008c92:	191c      	adds	r4, r3, r4
 8008c94:	0025      	movs	r5, r4
 8008c96:	9b00      	ldr	r3, [sp, #0]
 8008c98:	9302      	str	r3, [sp, #8]
 8008c9a:	9b02      	ldr	r3, [sp, #8]
 8008c9c:	3d08      	subs	r5, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd00      	ble.n	8008ca4 <__kernel_rem_pio2+0x510>
 8008ca2:	e07f      	b.n	8008da4 <__kernel_rem_pio2+0x610>
 8008ca4:	9d00      	ldr	r5, [sp, #0]
 8008ca6:	3c08      	subs	r4, #8
 8008ca8:	2d01      	cmp	r5, #1
 8008caa:	dd00      	ble.n	8008cae <__kernel_rem_pio2+0x51a>
 8008cac:	e09c      	b.n	8008de8 <__kernel_rem_pio2+0x654>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	0021      	movs	r1, r4
 8008cb2:	9b00      	ldr	r3, [sp, #0]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	dd00      	ble.n	8008cba <__kernel_rem_pio2+0x526>
 8008cb8:	e0b4      	b.n	8008e24 <__kernel_rem_pio2+0x690>
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8008cbe:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8008cc0:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8008cc2:	9851      	ldr	r0, [sp, #324]	; 0x144
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d000      	beq.n	8008cca <__kernel_rem_pio2+0x536>
 8008cc8:	e0ba      	b.n	8008e40 <__kernel_rem_pio2+0x6ac>
 8008cca:	0033      	movs	r3, r6
 8008ccc:	003a      	movs	r2, r7
 8008cce:	9e07      	ldr	r6, [sp, #28]
 8008cd0:	6032      	str	r2, [r6, #0]
 8008cd2:	6073      	str	r3, [r6, #4]
 8008cd4:	002a      	movs	r2, r5
 8008cd6:	0003      	movs	r3, r0
 8008cd8:	60b2      	str	r2, [r6, #8]
 8008cda:	60f3      	str	r3, [r6, #12]
 8008cdc:	0022      	movs	r2, r4
 8008cde:	000b      	movs	r3, r1
 8008ce0:	6132      	str	r2, [r6, #16]
 8008ce2:	6173      	str	r3, [r6, #20]
 8008ce4:	e7c7      	b.n	8008c76 <__kernel_rem_pio2+0x4e2>
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	aa4e      	add	r2, sp, #312	; 0x138
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	18d3      	adds	r3, r2, r3
 8008cee:	0028      	movs	r0, r5
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	0021      	movs	r1, r4
 8008cf6:	f7f7 fcbf 	bl	8000678 <__aeabi_dadd>
 8008cfa:	0005      	movs	r5, r0
 8008cfc:	000c      	movs	r4, r1
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	9b00      	ldr	r3, [sp, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	daed      	bge.n	8008ce6 <__kernel_rem_pio2+0x552>
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <__kernel_rem_pio2+0x582>
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	061b      	lsls	r3, r3, #24
 8008d14:	18e4      	adds	r4, r4, r3
 8008d16:	002a      	movs	r2, r5
 8008d18:	0023      	movs	r3, r4
 8008d1a:	9907      	ldr	r1, [sp, #28]
 8008d1c:	600a      	str	r2, [r1, #0]
 8008d1e:	604b      	str	r3, [r1, #4]
 8008d20:	e7a9      	b.n	8008c76 <__kernel_rem_pio2+0x4e2>
 8008d22:	00e3      	lsls	r3, r4, #3
 8008d24:	aa4e      	add	r2, sp, #312	; 0x138
 8008d26:	18d3      	adds	r3, r2, r3
 8008d28:	0030      	movs	r0, r6
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	0029      	movs	r1, r5
 8008d30:	f7f7 fca2 	bl	8000678 <__aeabi_dadd>
 8008d34:	0006      	movs	r6, r0
 8008d36:	000d      	movs	r5, r1
 8008d38:	3c01      	subs	r4, #1
 8008d3a:	2c00      	cmp	r4, #0
 8008d3c:	daf1      	bge.n	8008d22 <__kernel_rem_pio2+0x58e>
 8008d3e:	9b08      	ldr	r3, [sp, #32]
 8008d40:	0029      	movs	r1, r5
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <__kernel_rem_pio2+0x5b8>
 8008d46:	2380      	movs	r3, #128	; 0x80
 8008d48:	061b      	lsls	r3, r3, #24
 8008d4a:	18e9      	adds	r1, r5, r3
 8008d4c:	0032      	movs	r2, r6
 8008d4e:	000b      	movs	r3, r1
 8008d50:	9907      	ldr	r1, [sp, #28]
 8008d52:	2401      	movs	r4, #1
 8008d54:	600a      	str	r2, [r1, #0]
 8008d56:	604b      	str	r3, [r1, #4]
 8008d58:	984e      	ldr	r0, [sp, #312]	; 0x138
 8008d5a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8008d5c:	002b      	movs	r3, r5
 8008d5e:	f7f8 fe35 	bl	80019cc <__aeabi_dsub>
 8008d62:	0007      	movs	r7, r0
 8008d64:	000e      	movs	r6, r1
 8008d66:	ad4e      	add	r5, sp, #312	; 0x138
 8008d68:	9b00      	ldr	r3, [sp, #0]
 8008d6a:	3508      	adds	r5, #8
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	da0f      	bge.n	8008d90 <__kernel_rem_pio2+0x5fc>
 8008d70:	9b08      	ldr	r3, [sp, #32]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <__kernel_rem_pio2+0x5e8>
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	061b      	lsls	r3, r3, #24
 8008d7a:	18f6      	adds	r6, r6, r3
 8008d7c:	003a      	movs	r2, r7
 8008d7e:	0033      	movs	r3, r6
 8008d80:	9907      	ldr	r1, [sp, #28]
 8008d82:	608a      	str	r2, [r1, #8]
 8008d84:	60cb      	str	r3, [r1, #12]
 8008d86:	e776      	b.n	8008c76 <__kernel_rem_pio2+0x4e2>
 8008d88:	2600      	movs	r6, #0
 8008d8a:	9c00      	ldr	r4, [sp, #0]
 8008d8c:	0035      	movs	r5, r6
 8008d8e:	e7d4      	b.n	8008d3a <__kernel_rem_pio2+0x5a6>
 8008d90:	0038      	movs	r0, r7
 8008d92:	682a      	ldr	r2, [r5, #0]
 8008d94:	686b      	ldr	r3, [r5, #4]
 8008d96:	0031      	movs	r1, r6
 8008d98:	f7f7 fc6e 	bl	8000678 <__aeabi_dadd>
 8008d9c:	3401      	adds	r4, #1
 8008d9e:	0007      	movs	r7, r0
 8008da0:	000e      	movs	r6, r1
 8008da2:	e7e1      	b.n	8008d68 <__kernel_rem_pio2+0x5d4>
 8008da4:	9b02      	ldr	r3, [sp, #8]
 8008da6:	68ae      	ldr	r6, [r5, #8]
 8008da8:	68ef      	ldr	r7, [r5, #12]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	682a      	ldr	r2, [r5, #0]
 8008db0:	686b      	ldr	r3, [r5, #4]
 8008db2:	9204      	str	r2, [sp, #16]
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	9804      	ldr	r0, [sp, #16]
 8008db8:	9905      	ldr	r1, [sp, #20]
 8008dba:	0032      	movs	r2, r6
 8008dbc:	003b      	movs	r3, r7
 8008dbe:	f7f7 fc5b 	bl	8000678 <__aeabi_dadd>
 8008dc2:	0002      	movs	r2, r0
 8008dc4:	000b      	movs	r3, r1
 8008dc6:	900a      	str	r0, [sp, #40]	; 0x28
 8008dc8:	910b      	str	r1, [sp, #44]	; 0x2c
 8008dca:	9804      	ldr	r0, [sp, #16]
 8008dcc:	9905      	ldr	r1, [sp, #20]
 8008dce:	f7f8 fdfd 	bl	80019cc <__aeabi_dsub>
 8008dd2:	0032      	movs	r2, r6
 8008dd4:	003b      	movs	r3, r7
 8008dd6:	f7f7 fc4f 	bl	8000678 <__aeabi_dadd>
 8008dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ddc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dde:	60a8      	str	r0, [r5, #8]
 8008de0:	60e9      	str	r1, [r5, #12]
 8008de2:	602a      	str	r2, [r5, #0]
 8008de4:	606b      	str	r3, [r5, #4]
 8008de6:	e758      	b.n	8008c9a <__kernel_rem_pio2+0x506>
 8008de8:	6826      	ldr	r6, [r4, #0]
 8008dea:	6867      	ldr	r7, [r4, #4]
 8008dec:	68a2      	ldr	r2, [r4, #8]
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	0030      	movs	r0, r6
 8008df2:	0039      	movs	r1, r7
 8008df4:	9202      	str	r2, [sp, #8]
 8008df6:	9303      	str	r3, [sp, #12]
 8008df8:	f7f7 fc3e 	bl	8000678 <__aeabi_dadd>
 8008dfc:	0002      	movs	r2, r0
 8008dfe:	000b      	movs	r3, r1
 8008e00:	9004      	str	r0, [sp, #16]
 8008e02:	9105      	str	r1, [sp, #20]
 8008e04:	0030      	movs	r0, r6
 8008e06:	0039      	movs	r1, r7
 8008e08:	f7f8 fde0 	bl	80019cc <__aeabi_dsub>
 8008e0c:	9a02      	ldr	r2, [sp, #8]
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	f7f7 fc32 	bl	8000678 <__aeabi_dadd>
 8008e14:	9a04      	ldr	r2, [sp, #16]
 8008e16:	9b05      	ldr	r3, [sp, #20]
 8008e18:	60a0      	str	r0, [r4, #8]
 8008e1a:	60e1      	str	r1, [r4, #12]
 8008e1c:	6022      	str	r2, [r4, #0]
 8008e1e:	6063      	str	r3, [r4, #4]
 8008e20:	3d01      	subs	r5, #1
 8008e22:	e740      	b.n	8008ca6 <__kernel_rem_pio2+0x512>
 8008e24:	9b00      	ldr	r3, [sp, #0]
 8008e26:	aa4e      	add	r2, sp, #312	; 0x138
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	18d3      	adds	r3, r2, r3
 8008e2c:	0020      	movs	r0, r4
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f7f7 fc21 	bl	8000678 <__aeabi_dadd>
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	0004      	movs	r4, r0
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	e738      	b.n	8008cb2 <__kernel_rem_pio2+0x51e>
 8008e40:	9b07      	ldr	r3, [sp, #28]
 8008e42:	9a07      	ldr	r2, [sp, #28]
 8008e44:	601f      	str	r7, [r3, #0]
 8008e46:	2380      	movs	r3, #128	; 0x80
 8008e48:	061b      	lsls	r3, r3, #24
 8008e4a:	18f6      	adds	r6, r6, r3
 8008e4c:	18c0      	adds	r0, r0, r3
 8008e4e:	18c9      	adds	r1, r1, r3
 8008e50:	6056      	str	r6, [r2, #4]
 8008e52:	6095      	str	r5, [r2, #8]
 8008e54:	60d0      	str	r0, [r2, #12]
 8008e56:	6114      	str	r4, [r2, #16]
 8008e58:	6151      	str	r1, [r2, #20]
 8008e5a:	e70c      	b.n	8008c76 <__kernel_rem_pio2+0x4e2>
 8008e5c:	41700000 	.word	0x41700000
 8008e60:	3e700000 	.word	0x3e700000
 8008e64:	08009570 	.word	0x08009570

08008e68 <__kernel_sin>:
 8008e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6a:	b089      	sub	sp, #36	; 0x24
 8008e6c:	9202      	str	r2, [sp, #8]
 8008e6e:	9303      	str	r3, [sp, #12]
 8008e70:	22f9      	movs	r2, #249	; 0xf9
 8008e72:	004b      	lsls	r3, r1, #1
 8008e74:	0007      	movs	r7, r0
 8008e76:	000e      	movs	r6, r1
 8008e78:	085b      	lsrs	r3, r3, #1
 8008e7a:	0592      	lsls	r2, r2, #22
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	da03      	bge.n	8008e88 <__kernel_sin+0x20>
 8008e80:	f7f9 f936 	bl	80020f0 <__aeabi_d2iz>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d04c      	beq.n	8008f22 <__kernel_sin+0xba>
 8008e88:	003a      	movs	r2, r7
 8008e8a:	0033      	movs	r3, r6
 8008e8c:	0038      	movs	r0, r7
 8008e8e:	0031      	movs	r1, r6
 8008e90:	f7f8 fb30 	bl	80014f4 <__aeabi_dmul>
 8008e94:	0004      	movs	r4, r0
 8008e96:	000d      	movs	r5, r1
 8008e98:	0002      	movs	r2, r0
 8008e9a:	000b      	movs	r3, r1
 8008e9c:	0038      	movs	r0, r7
 8008e9e:	0031      	movs	r1, r6
 8008ea0:	f7f8 fb28 	bl	80014f4 <__aeabi_dmul>
 8008ea4:	4a39      	ldr	r2, [pc, #228]	; (8008f8c <__kernel_sin+0x124>)
 8008ea6:	9000      	str	r0, [sp, #0]
 8008ea8:	9101      	str	r1, [sp, #4]
 8008eaa:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <__kernel_sin+0x128>)
 8008eac:	0020      	movs	r0, r4
 8008eae:	0029      	movs	r1, r5
 8008eb0:	f7f8 fb20 	bl	80014f4 <__aeabi_dmul>
 8008eb4:	4a37      	ldr	r2, [pc, #220]	; (8008f94 <__kernel_sin+0x12c>)
 8008eb6:	4b38      	ldr	r3, [pc, #224]	; (8008f98 <__kernel_sin+0x130>)
 8008eb8:	f7f8 fd88 	bl	80019cc <__aeabi_dsub>
 8008ebc:	0022      	movs	r2, r4
 8008ebe:	002b      	movs	r3, r5
 8008ec0:	f7f8 fb18 	bl	80014f4 <__aeabi_dmul>
 8008ec4:	4a35      	ldr	r2, [pc, #212]	; (8008f9c <__kernel_sin+0x134>)
 8008ec6:	4b36      	ldr	r3, [pc, #216]	; (8008fa0 <__kernel_sin+0x138>)
 8008ec8:	f7f7 fbd6 	bl	8000678 <__aeabi_dadd>
 8008ecc:	0022      	movs	r2, r4
 8008ece:	002b      	movs	r3, r5
 8008ed0:	f7f8 fb10 	bl	80014f4 <__aeabi_dmul>
 8008ed4:	4a33      	ldr	r2, [pc, #204]	; (8008fa4 <__kernel_sin+0x13c>)
 8008ed6:	4b34      	ldr	r3, [pc, #208]	; (8008fa8 <__kernel_sin+0x140>)
 8008ed8:	f7f8 fd78 	bl	80019cc <__aeabi_dsub>
 8008edc:	0022      	movs	r2, r4
 8008ede:	002b      	movs	r3, r5
 8008ee0:	f7f8 fb08 	bl	80014f4 <__aeabi_dmul>
 8008ee4:	4b31      	ldr	r3, [pc, #196]	; (8008fac <__kernel_sin+0x144>)
 8008ee6:	4a32      	ldr	r2, [pc, #200]	; (8008fb0 <__kernel_sin+0x148>)
 8008ee8:	f7f7 fbc6 	bl	8000678 <__aeabi_dadd>
 8008eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eee:	9004      	str	r0, [sp, #16]
 8008ef0:	9105      	str	r1, [sp, #20]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d119      	bne.n	8008f2a <__kernel_sin+0xc2>
 8008ef6:	0002      	movs	r2, r0
 8008ef8:	000b      	movs	r3, r1
 8008efa:	0020      	movs	r0, r4
 8008efc:	0029      	movs	r1, r5
 8008efe:	f7f8 faf9 	bl	80014f4 <__aeabi_dmul>
 8008f02:	4a2c      	ldr	r2, [pc, #176]	; (8008fb4 <__kernel_sin+0x14c>)
 8008f04:	4b2c      	ldr	r3, [pc, #176]	; (8008fb8 <__kernel_sin+0x150>)
 8008f06:	f7f8 fd61 	bl	80019cc <__aeabi_dsub>
 8008f0a:	9a00      	ldr	r2, [sp, #0]
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	f7f8 faf1 	bl	80014f4 <__aeabi_dmul>
 8008f12:	0002      	movs	r2, r0
 8008f14:	000b      	movs	r3, r1
 8008f16:	0038      	movs	r0, r7
 8008f18:	0031      	movs	r1, r6
 8008f1a:	f7f7 fbad 	bl	8000678 <__aeabi_dadd>
 8008f1e:	0007      	movs	r7, r0
 8008f20:	000e      	movs	r6, r1
 8008f22:	0038      	movs	r0, r7
 8008f24:	0031      	movs	r1, r6
 8008f26:	b009      	add	sp, #36	; 0x24
 8008f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	9802      	ldr	r0, [sp, #8]
 8008f2e:	9903      	ldr	r1, [sp, #12]
 8008f30:	4b22      	ldr	r3, [pc, #136]	; (8008fbc <__kernel_sin+0x154>)
 8008f32:	f7f8 fadf 	bl	80014f4 <__aeabi_dmul>
 8008f36:	9a04      	ldr	r2, [sp, #16]
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	9006      	str	r0, [sp, #24]
 8008f3c:	9107      	str	r1, [sp, #28]
 8008f3e:	9800      	ldr	r0, [sp, #0]
 8008f40:	9901      	ldr	r1, [sp, #4]
 8008f42:	f7f8 fad7 	bl	80014f4 <__aeabi_dmul>
 8008f46:	0002      	movs	r2, r0
 8008f48:	000b      	movs	r3, r1
 8008f4a:	9806      	ldr	r0, [sp, #24]
 8008f4c:	9907      	ldr	r1, [sp, #28]
 8008f4e:	f7f8 fd3d 	bl	80019cc <__aeabi_dsub>
 8008f52:	0022      	movs	r2, r4
 8008f54:	002b      	movs	r3, r5
 8008f56:	f7f8 facd 	bl	80014f4 <__aeabi_dmul>
 8008f5a:	9a02      	ldr	r2, [sp, #8]
 8008f5c:	9b03      	ldr	r3, [sp, #12]
 8008f5e:	f7f8 fd35 	bl	80019cc <__aeabi_dsub>
 8008f62:	4a14      	ldr	r2, [pc, #80]	; (8008fb4 <__kernel_sin+0x14c>)
 8008f64:	0004      	movs	r4, r0
 8008f66:	000d      	movs	r5, r1
 8008f68:	9800      	ldr	r0, [sp, #0]
 8008f6a:	9901      	ldr	r1, [sp, #4]
 8008f6c:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <__kernel_sin+0x150>)
 8008f6e:	f7f8 fac1 	bl	80014f4 <__aeabi_dmul>
 8008f72:	0002      	movs	r2, r0
 8008f74:	000b      	movs	r3, r1
 8008f76:	0020      	movs	r0, r4
 8008f78:	0029      	movs	r1, r5
 8008f7a:	f7f7 fb7d 	bl	8000678 <__aeabi_dadd>
 8008f7e:	0002      	movs	r2, r0
 8008f80:	000b      	movs	r3, r1
 8008f82:	0038      	movs	r0, r7
 8008f84:	0031      	movs	r1, r6
 8008f86:	f7f8 fd21 	bl	80019cc <__aeabi_dsub>
 8008f8a:	e7c8      	b.n	8008f1e <__kernel_sin+0xb6>
 8008f8c:	5acfd57c 	.word	0x5acfd57c
 8008f90:	3de5d93a 	.word	0x3de5d93a
 8008f94:	8a2b9ceb 	.word	0x8a2b9ceb
 8008f98:	3e5ae5e6 	.word	0x3e5ae5e6
 8008f9c:	57b1fe7d 	.word	0x57b1fe7d
 8008fa0:	3ec71de3 	.word	0x3ec71de3
 8008fa4:	19c161d5 	.word	0x19c161d5
 8008fa8:	3f2a01a0 	.word	0x3f2a01a0
 8008fac:	3f811111 	.word	0x3f811111
 8008fb0:	1110f8a6 	.word	0x1110f8a6
 8008fb4:	55555549 	.word	0x55555549
 8008fb8:	3fc55555 	.word	0x3fc55555
 8008fbc:	3fe00000 	.word	0x3fe00000

08008fc0 <fabs>:
 8008fc0:	004b      	lsls	r3, r1, #1
 8008fc2:	0859      	lsrs	r1, r3, #1
 8008fc4:	4770      	bx	lr
	...

08008fc8 <floor>:
 8008fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fca:	004b      	lsls	r3, r1, #1
 8008fcc:	4a3d      	ldr	r2, [pc, #244]	; (80090c4 <floor+0xfc>)
 8008fce:	0d5b      	lsrs	r3, r3, #21
 8008fd0:	189f      	adds	r7, r3, r2
 8008fd2:	4684      	mov	ip, r0
 8008fd4:	000e      	movs	r6, r1
 8008fd6:	000d      	movs	r5, r1
 8008fd8:	0004      	movs	r4, r0
 8008fda:	9001      	str	r0, [sp, #4]
 8008fdc:	2f13      	cmp	r7, #19
 8008fde:	dc34      	bgt.n	800904a <floor+0x82>
 8008fe0:	2f00      	cmp	r7, #0
 8008fe2:	da16      	bge.n	8009012 <floor+0x4a>
 8008fe4:	4a38      	ldr	r2, [pc, #224]	; (80090c8 <floor+0x100>)
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <floor+0x104>)
 8008fe8:	4660      	mov	r0, ip
 8008fea:	0031      	movs	r1, r6
 8008fec:	f7f7 fb44 	bl	8000678 <__aeabi_dadd>
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f7f7 fa24 	bl	8000440 <__aeabi_dcmpgt>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d007      	beq.n	800900c <floor+0x44>
 8008ffc:	2e00      	cmp	r6, #0
 8008ffe:	da5d      	bge.n	80090bc <floor+0xf4>
 8009000:	0073      	lsls	r3, r6, #1
 8009002:	085b      	lsrs	r3, r3, #1
 8009004:	431c      	orrs	r4, r3
 8009006:	d001      	beq.n	800900c <floor+0x44>
 8009008:	2400      	movs	r4, #0
 800900a:	4d31      	ldr	r5, [pc, #196]	; (80090d0 <floor+0x108>)
 800900c:	46a4      	mov	ip, r4
 800900e:	002e      	movs	r6, r5
 8009010:	e029      	b.n	8009066 <floor+0x9e>
 8009012:	4b30      	ldr	r3, [pc, #192]	; (80090d4 <floor+0x10c>)
 8009014:	413b      	asrs	r3, r7
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	400b      	ands	r3, r1
 800901a:	4303      	orrs	r3, r0
 800901c:	d023      	beq.n	8009066 <floor+0x9e>
 800901e:	4a2a      	ldr	r2, [pc, #168]	; (80090c8 <floor+0x100>)
 8009020:	4b2a      	ldr	r3, [pc, #168]	; (80090cc <floor+0x104>)
 8009022:	4660      	mov	r0, ip
 8009024:	0031      	movs	r1, r6
 8009026:	f7f7 fb27 	bl	8000678 <__aeabi_dadd>
 800902a:	2200      	movs	r2, #0
 800902c:	2300      	movs	r3, #0
 800902e:	f7f7 fa07 	bl	8000440 <__aeabi_dcmpgt>
 8009032:	2800      	cmp	r0, #0
 8009034:	d0ea      	beq.n	800900c <floor+0x44>
 8009036:	2e00      	cmp	r6, #0
 8009038:	da03      	bge.n	8009042 <floor+0x7a>
 800903a:	2380      	movs	r3, #128	; 0x80
 800903c:	035b      	lsls	r3, r3, #13
 800903e:	413b      	asrs	r3, r7
 8009040:	18f5      	adds	r5, r6, r3
 8009042:	9b00      	ldr	r3, [sp, #0]
 8009044:	2400      	movs	r4, #0
 8009046:	439d      	bics	r5, r3
 8009048:	e7e0      	b.n	800900c <floor+0x44>
 800904a:	2f33      	cmp	r7, #51	; 0x33
 800904c:	dd0f      	ble.n	800906e <floor+0xa6>
 800904e:	2380      	movs	r3, #128	; 0x80
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	429f      	cmp	r7, r3
 8009054:	d107      	bne.n	8009066 <floor+0x9e>
 8009056:	0002      	movs	r2, r0
 8009058:	000b      	movs	r3, r1
 800905a:	4660      	mov	r0, ip
 800905c:	0031      	movs	r1, r6
 800905e:	f7f7 fb0b 	bl	8000678 <__aeabi_dadd>
 8009062:	4684      	mov	ip, r0
 8009064:	000e      	movs	r6, r1
 8009066:	4660      	mov	r0, ip
 8009068:	0031      	movs	r1, r6
 800906a:	b003      	add	sp, #12
 800906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906e:	4a1a      	ldr	r2, [pc, #104]	; (80090d8 <floor+0x110>)
 8009070:	189b      	adds	r3, r3, r2
 8009072:	2201      	movs	r2, #1
 8009074:	4252      	negs	r2, r2
 8009076:	40da      	lsrs	r2, r3
 8009078:	9200      	str	r2, [sp, #0]
 800907a:	4210      	tst	r0, r2
 800907c:	d0f3      	beq.n	8009066 <floor+0x9e>
 800907e:	4a12      	ldr	r2, [pc, #72]	; (80090c8 <floor+0x100>)
 8009080:	4b12      	ldr	r3, [pc, #72]	; (80090cc <floor+0x104>)
 8009082:	4660      	mov	r0, ip
 8009084:	0031      	movs	r1, r6
 8009086:	f7f7 faf7 	bl	8000678 <__aeabi_dadd>
 800908a:	2200      	movs	r2, #0
 800908c:	2300      	movs	r3, #0
 800908e:	f7f7 f9d7 	bl	8000440 <__aeabi_dcmpgt>
 8009092:	2800      	cmp	r0, #0
 8009094:	d0ba      	beq.n	800900c <floor+0x44>
 8009096:	2e00      	cmp	r6, #0
 8009098:	da02      	bge.n	80090a0 <floor+0xd8>
 800909a:	2f14      	cmp	r7, #20
 800909c:	d103      	bne.n	80090a6 <floor+0xde>
 800909e:	3501      	adds	r5, #1
 80090a0:	9b00      	ldr	r3, [sp, #0]
 80090a2:	439c      	bics	r4, r3
 80090a4:	e7b2      	b.n	800900c <floor+0x44>
 80090a6:	2334      	movs	r3, #52	; 0x34
 80090a8:	1bdf      	subs	r7, r3, r7
 80090aa:	3b33      	subs	r3, #51	; 0x33
 80090ac:	40bb      	lsls	r3, r7
 80090ae:	18e4      	adds	r4, r4, r3
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	429c      	cmp	r4, r3
 80090b4:	419b      	sbcs	r3, r3
 80090b6:	425b      	negs	r3, r3
 80090b8:	18f5      	adds	r5, r6, r3
 80090ba:	e7f1      	b.n	80090a0 <floor+0xd8>
 80090bc:	2400      	movs	r4, #0
 80090be:	0025      	movs	r5, r4
 80090c0:	e7a4      	b.n	800900c <floor+0x44>
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	fffffc01 	.word	0xfffffc01
 80090c8:	8800759c 	.word	0x8800759c
 80090cc:	7e37e43c 	.word	0x7e37e43c
 80090d0:	bff00000 	.word	0xbff00000
 80090d4:	000fffff 	.word	0x000fffff
 80090d8:	fffffbed 	.word	0xfffffbed

080090dc <scalbn>:
 80090dc:	004b      	lsls	r3, r1, #1
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	0d5b      	lsrs	r3, r3, #21
 80090e2:	0014      	movs	r4, r2
 80090e4:	000a      	movs	r2, r1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <scalbn+0x2a>
 80090ea:	004b      	lsls	r3, r1, #1
 80090ec:	085b      	lsrs	r3, r3, #1
 80090ee:	4303      	orrs	r3, r0
 80090f0:	d010      	beq.n	8009114 <scalbn+0x38>
 80090f2:	4b27      	ldr	r3, [pc, #156]	; (8009190 <scalbn+0xb4>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	f7f8 f9fd 	bl	80014f4 <__aeabi_dmul>
 80090fa:	4b26      	ldr	r3, [pc, #152]	; (8009194 <scalbn+0xb8>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	da0a      	bge.n	8009116 <scalbn+0x3a>
 8009100:	4a25      	ldr	r2, [pc, #148]	; (8009198 <scalbn+0xbc>)
 8009102:	4b26      	ldr	r3, [pc, #152]	; (800919c <scalbn+0xc0>)
 8009104:	e019      	b.n	800913a <scalbn+0x5e>
 8009106:	4d26      	ldr	r5, [pc, #152]	; (80091a0 <scalbn+0xc4>)
 8009108:	42ab      	cmp	r3, r5
 800910a:	d108      	bne.n	800911e <scalbn+0x42>
 800910c:	0002      	movs	r2, r0
 800910e:	000b      	movs	r3, r1
 8009110:	f7f7 fab2 	bl	8000678 <__aeabi_dadd>
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	000a      	movs	r2, r1
 8009118:	004b      	lsls	r3, r1, #1
 800911a:	0d5b      	lsrs	r3, r3, #21
 800911c:	3b36      	subs	r3, #54	; 0x36
 800911e:	4d21      	ldr	r5, [pc, #132]	; (80091a4 <scalbn+0xc8>)
 8009120:	18e3      	adds	r3, r4, r3
 8009122:	42ab      	cmp	r3, r5
 8009124:	dd0c      	ble.n	8009140 <scalbn+0x64>
 8009126:	4c20      	ldr	r4, [pc, #128]	; (80091a8 <scalbn+0xcc>)
 8009128:	4d20      	ldr	r5, [pc, #128]	; (80091ac <scalbn+0xd0>)
 800912a:	2900      	cmp	r1, #0
 800912c:	da01      	bge.n	8009132 <scalbn+0x56>
 800912e:	4c1e      	ldr	r4, [pc, #120]	; (80091a8 <scalbn+0xcc>)
 8009130:	4d1f      	ldr	r5, [pc, #124]	; (80091b0 <scalbn+0xd4>)
 8009132:	0020      	movs	r0, r4
 8009134:	0029      	movs	r1, r5
 8009136:	4a1c      	ldr	r2, [pc, #112]	; (80091a8 <scalbn+0xcc>)
 8009138:	4b1c      	ldr	r3, [pc, #112]	; (80091ac <scalbn+0xd0>)
 800913a:	f7f8 f9db 	bl	80014f4 <__aeabi_dmul>
 800913e:	e7e9      	b.n	8009114 <scalbn+0x38>
 8009140:	2b00      	cmp	r3, #0
 8009142:	dd05      	ble.n	8009150 <scalbn+0x74>
 8009144:	4c1b      	ldr	r4, [pc, #108]	; (80091b4 <scalbn+0xd8>)
 8009146:	051b      	lsls	r3, r3, #20
 8009148:	4022      	ands	r2, r4
 800914a:	431a      	orrs	r2, r3
 800914c:	0011      	movs	r1, r2
 800914e:	e7e1      	b.n	8009114 <scalbn+0x38>
 8009150:	001d      	movs	r5, r3
 8009152:	3535      	adds	r5, #53	; 0x35
 8009154:	da13      	bge.n	800917e <scalbn+0xa2>
 8009156:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <scalbn+0xdc>)
 8009158:	0fcb      	lsrs	r3, r1, #31
 800915a:	4294      	cmp	r4, r2
 800915c:	dd08      	ble.n	8009170 <scalbn+0x94>
 800915e:	4812      	ldr	r0, [pc, #72]	; (80091a8 <scalbn+0xcc>)
 8009160:	4912      	ldr	r1, [pc, #72]	; (80091ac <scalbn+0xd0>)
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <scalbn+0x8e>
 8009166:	4810      	ldr	r0, [pc, #64]	; (80091a8 <scalbn+0xcc>)
 8009168:	4911      	ldr	r1, [pc, #68]	; (80091b0 <scalbn+0xd4>)
 800916a:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <scalbn+0xcc>)
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <scalbn+0xd0>)
 800916e:	e7e4      	b.n	800913a <scalbn+0x5e>
 8009170:	4809      	ldr	r0, [pc, #36]	; (8009198 <scalbn+0xbc>)
 8009172:	490a      	ldr	r1, [pc, #40]	; (800919c <scalbn+0xc0>)
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0c3      	beq.n	8009100 <scalbn+0x24>
 8009178:	4807      	ldr	r0, [pc, #28]	; (8009198 <scalbn+0xbc>)
 800917a:	4910      	ldr	r1, [pc, #64]	; (80091bc <scalbn+0xe0>)
 800917c:	e7c0      	b.n	8009100 <scalbn+0x24>
 800917e:	4c0d      	ldr	r4, [pc, #52]	; (80091b4 <scalbn+0xd8>)
 8009180:	3336      	adds	r3, #54	; 0x36
 8009182:	4022      	ands	r2, r4
 8009184:	051b      	lsls	r3, r3, #20
 8009186:	4313      	orrs	r3, r2
 8009188:	0019      	movs	r1, r3
 800918a:	2200      	movs	r2, #0
 800918c:	4b0c      	ldr	r3, [pc, #48]	; (80091c0 <scalbn+0xe4>)
 800918e:	e7d4      	b.n	800913a <scalbn+0x5e>
 8009190:	43500000 	.word	0x43500000
 8009194:	ffff3cb0 	.word	0xffff3cb0
 8009198:	c2f8f359 	.word	0xc2f8f359
 800919c:	01a56e1f 	.word	0x01a56e1f
 80091a0:	000007ff 	.word	0x000007ff
 80091a4:	000007fe 	.word	0x000007fe
 80091a8:	8800759c 	.word	0x8800759c
 80091ac:	7e37e43c 	.word	0x7e37e43c
 80091b0:	fe37e43c 	.word	0xfe37e43c
 80091b4:	800fffff 	.word	0x800fffff
 80091b8:	0000c350 	.word	0x0000c350
 80091bc:	81a56e1f 	.word	0x81a56e1f
 80091c0:	3c900000 	.word	0x3c900000

080091c4 <_init>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr

080091d0 <_fini>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr
