
dtADCEx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003308  08003308  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003308  08003308  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003308  08003308  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003308  08003308  00013308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000010  08003320  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003320  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c51  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c99  00000000  00000000  00027c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00029928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014eee  00000000  00000000  0002a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000978f  00000000  00000000  0003f5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083225  00000000  00000000  00048d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbfa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000181c  00000000  00000000  000cbff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003270 	.word	0x08003270

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08003270 	.word	0x08003270

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	0018      	movs	r0, r3
 8000222:	230c      	movs	r3, #12
 8000224:	001a      	movs	r2, r3
 8000226:	2100      	movs	r1, #0
 8000228:	f003 f81a 	bl	8003260 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800022c:	4b36      	ldr	r3, [pc, #216]	; (8000308 <MX_ADC1_Init+0xf0>)
 800022e:	4a37      	ldr	r2, [pc, #220]	; (800030c <MX_ADC1_Init+0xf4>)
 8000230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000232:	4b35      	ldr	r3, [pc, #212]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000234:	2280      	movs	r2, #128	; 0x80
 8000236:	05d2      	lsls	r2, r2, #23
 8000238:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800023a:	4b33      	ldr	r3, [pc, #204]	; (8000308 <MX_ADC1_Init+0xf0>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000240:	4b31      	ldr	r3, [pc, #196]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000246:	4b30      	ldr	r3, [pc, #192]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000248:	2280      	movs	r2, #128	; 0x80
 800024a:	0392      	lsls	r2, r2, #14
 800024c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800024e:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000250:	2204      	movs	r2, #4
 8000252:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000254:	4b2c      	ldr	r3, [pc, #176]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000256:	2200      	movs	r2, #0
 8000258:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800025a:	4b2b      	ldr	r3, [pc, #172]	; (8000308 <MX_ADC1_Init+0xf0>)
 800025c:	2200      	movs	r2, #0
 800025e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000260:	4b29      	ldr	r3, [pc, #164]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000262:	2200      	movs	r2, #0
 8000264:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000268:	2202      	movs	r2, #2
 800026a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800026c:	4b26      	ldr	r3, [pc, #152]	; (8000308 <MX_ADC1_Init+0xf0>)
 800026e:	2220      	movs	r2, #32
 8000270:	2101      	movs	r1, #1
 8000272:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000274:	4b24      	ldr	r3, [pc, #144]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <MX_ADC1_Init+0xf0>)
 800027c:	2200      	movs	r2, #0
 800027e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000280:	4b21      	ldr	r3, [pc, #132]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000282:	222c      	movs	r2, #44	; 0x2c
 8000284:	2100      	movs	r1, #0
 8000286:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000288:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <MX_ADC1_Init+0xf0>)
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	0152      	lsls	r2, r2, #5
 800028e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8000290:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000292:	2203      	movs	r2, #3
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <MX_ADC1_Init+0xf0>)
 8000298:	2200      	movs	r2, #0
 800029a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800029c:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <MX_ADC1_Init+0xf0>)
 800029e:	223c      	movs	r2, #60	; 0x3c
 80002a0:	2100      	movs	r1, #0
 80002a2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_ADC1_Init+0xf0>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002aa:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_ADC1_Init+0xf0>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 f833 	bl	8001318 <HAL_ADC_Init>
 80002b2:	1e03      	subs	r3, r0, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80002b6:	f000 fdbd 	bl	8000e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3a      	adds	r2, r7, #4
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_ADC1_Init+0xf0>)
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fbaa 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80002dc:	f000 fdaa 	bl	8000e34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <MX_ADC1_Init+0xf8>)
 80002e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2204      	movs	r2, #4
 80002ea:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ec:	1d3a      	adds	r2, r7, #4
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_ADC1_Init+0xf0>)
 80002f0:	0011      	movs	r1, r2
 80002f2:	0018      	movs	r0, r3
 80002f4:	f001 fb9a 	bl	8001a2c <HAL_ADC_ConfigChannel>
 80002f8:	1e03      	subs	r3, r0, #0
 80002fa:	d001      	beq.n	8000300 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80002fc:	f000 fd9a 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	b004      	add	sp, #16
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000002c 	.word	0x2000002c
 800030c:	40012400 	.word	0x40012400
 8000310:	04000002 	.word	0x04000002

08000314 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b091      	sub	sp, #68	; 0x44
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031c:	232c      	movs	r3, #44	; 0x2c
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	0018      	movs	r0, r3
 8000322:	2314      	movs	r3, #20
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 ff9a 	bl	8003260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	2410      	movs	r4, #16
 800032e:	193b      	adds	r3, r7, r4
 8000330:	0018      	movs	r0, r3
 8000332:	231c      	movs	r3, #28
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f002 ff92 	bl	8003260 <memset>
  if(adcHandle->Instance==ADC1)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a24      	ldr	r2, [pc, #144]	; (80003d4 <HAL_ADC_MspInit+0xc0>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d141      	bne.n	80003ca <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000346:	193b      	adds	r3, r7, r4
 8000348:	2280      	movs	r2, #128	; 0x80
 800034a:	01d2      	lsls	r2, r2, #7
 800034c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800034e:	193b      	adds	r3, r7, r4
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000354:	193b      	adds	r3, r7, r4
 8000356:	0018      	movs	r0, r3
 8000358:	f002 fe2a 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 800035c:	1e03      	subs	r3, r0, #0
 800035e:	d001      	beq.n	8000364 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000360:	f000 fd68 	bl	8000e34 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000364:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <HAL_ADC_MspInit+0xc4>)
 8000366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <HAL_ADC_MspInit+0xc4>)
 800036a:	2180      	movs	r1, #128	; 0x80
 800036c:	0349      	lsls	r1, r1, #13
 800036e:	430a      	orrs	r2, r1
 8000370:	641a      	str	r2, [r3, #64]	; 0x40
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <HAL_ADC_MspInit+0xc4>)
 8000374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	035b      	lsls	r3, r3, #13
 800037a:	4013      	ands	r3, r2
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_ADC_MspInit+0xc4>)
 8000382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <HAL_ADC_MspInit+0xc4>)
 8000386:	2101      	movs	r1, #1
 8000388:	430a      	orrs	r2, r1
 800038a:	635a      	str	r2, [r3, #52]	; 0x34
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_ADC_MspInit+0xc4>)
 800038e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000390:	2201      	movs	r2, #1
 8000392:	4013      	ands	r3, r2
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000398:	212c      	movs	r1, #44	; 0x2c
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2203      	movs	r2, #3
 800039e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2203      	movs	r2, #3
 80003a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	187a      	adds	r2, r7, r1
 80003ae:	23a0      	movs	r3, #160	; 0xa0
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 ff99 	bl	80022ec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	200c      	movs	r0, #12
 80003c0:	f001 ff62 	bl	8002288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80003c4:	200c      	movs	r0, #12
 80003c6:	f001 ff74 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b011      	add	sp, #68	; 0x44
 80003d0:	bd90      	pop	{r4, r7, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	40012400 	.word	0x40012400
 80003d8:	40021000 	.word	0x40021000

080003dc <D_UpdateDisp>:
 *      Author: Daniel
 */

#include "display_driver.h"

void D_UpdateDisp(uint8_t dispNum, uint8_t dispSelect) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	0002      	movs	r2, r0
 80003e4:	1dfb      	adds	r3, r7, #7
 80003e6:	701a      	strb	r2, [r3, #0]
 80003e8:	1dbb      	adds	r3, r7, #6
 80003ea:	1c0a      	adds	r2, r1, #0
 80003ec:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	0099      	lsls	r1, r3, #2
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	2200      	movs	r2, #0
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 f8db 	bl	80025b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80003fe:	4be0      	ldr	r3, [pc, #896]	; (8000780 <D_UpdateDisp+0x3a4>)
 8000400:	2200      	movs	r2, #0
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	0018      	movs	r0, r3
 8000406:	f002 f8d5 	bl	80025b4 <HAL_GPIO_WritePin>

	switch (dispNum) {
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b0f      	cmp	r3, #15
 8000410:	d900      	bls.n	8000414 <D_UpdateDisp+0x38>
 8000412:	e36b      	b.n	8000aec <D_UpdateDisp+0x710>
 8000414:	009a      	lsls	r2, r3, #2
 8000416:	4bdb      	ldr	r3, [pc, #876]	; (8000784 <D_UpdateDisp+0x3a8>)
 8000418:	18d3      	adds	r3, r2, r3
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	469f      	mov	pc, r3

	case 0:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	01db      	lsls	r3, r3, #7
 8000422:	48d9      	ldr	r0, [pc, #868]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000424:	2201      	movs	r2, #1
 8000426:	0019      	movs	r1, r3
 8000428:	f002 f8c4 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	0059      	lsls	r1, r3, #1
 8000430:	23a0      	movs	r3, #160	; 0xa0
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	2201      	movs	r2, #1
 8000436:	0018      	movs	r0, r3
 8000438:	f002 f8bc 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	00d9      	lsls	r1, r3, #3
 8000440:	23a0      	movs	r3, #160	; 0xa0
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	2201      	movs	r2, #1
 8000446:	0018      	movs	r0, r3
 8000448:	f002 f8b4 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 800044c:	4bcc      	ldr	r3, [pc, #816]	; (8000780 <D_UpdateDisp+0x3a4>)
 800044e:	2201      	movs	r2, #1
 8000450:	2110      	movs	r1, #16
 8000452:	0018      	movs	r0, r3
 8000454:	f002 f8ae 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 8000458:	4bc9      	ldr	r3, [pc, #804]	; (8000780 <D_UpdateDisp+0x3a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	2120      	movs	r1, #32
 800045e:	0018      	movs	r0, r3
 8000460:	f002 f8a8 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000464:	4bc8      	ldr	r3, [pc, #800]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000466:	2201      	movs	r2, #1
 8000468:	2110      	movs	r1, #16
 800046a:	0018      	movs	r0, r3
 800046c:	f002 f8a2 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000470:	4bc5      	ldr	r3, [pc, #788]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000472:	2200      	movs	r2, #0
 8000474:	2120      	movs	r1, #32
 8000476:	0018      	movs	r0, r3
 8000478:	f002 f89c 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 800047c:	4bc2      	ldr	r3, [pc, #776]	; (8000788 <D_UpdateDisp+0x3ac>)
 800047e:	2200      	movs	r2, #0
 8000480:	2108      	movs	r1, #8
 8000482:	0018      	movs	r0, r3
 8000484:	f002 f896 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000488:	e366      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 1:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	01db      	lsls	r3, r3, #7
 800048e:	48be      	ldr	r0, [pc, #760]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000490:	2200      	movs	r2, #0
 8000492:	0019      	movs	r1, r3
 8000494:	f002 f88e 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	0059      	lsls	r1, r3, #1
 800049c:	23a0      	movs	r3, #160	; 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2201      	movs	r2, #1
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 f886 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	00d9      	lsls	r1, r3, #3
 80004ac:	23a0      	movs	r3, #160	; 0xa0
 80004ae:	05db      	lsls	r3, r3, #23
 80004b0:	2201      	movs	r2, #1
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 f87e 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 80004b8:	4bb1      	ldr	r3, [pc, #708]	; (8000780 <D_UpdateDisp+0x3a4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	2110      	movs	r1, #16
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 f878 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 80004c4:	4bae      	ldr	r3, [pc, #696]	; (8000780 <D_UpdateDisp+0x3a4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	2120      	movs	r1, #32
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 f872 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 80004d0:	4bad      	ldr	r3, [pc, #692]	; (8000788 <D_UpdateDisp+0x3ac>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	2110      	movs	r1, #16
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 f86c 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
 80004dc:	4baa      	ldr	r3, [pc, #680]	; (8000788 <D_UpdateDisp+0x3ac>)
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	0018      	movs	r0, r3
 80004e4:	f002 f866 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 80004e8:	4ba7      	ldr	r3, [pc, #668]	; (8000788 <D_UpdateDisp+0x3ac>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f860 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 80004f4:	e330      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 2:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	01db      	lsls	r3, r3, #7
 80004fa:	48a3      	ldr	r0, [pc, #652]	; (8000788 <D_UpdateDisp+0x3ac>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	0019      	movs	r1, r3
 8000500:	f002 f858 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	0059      	lsls	r1, r3, #1
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2201      	movs	r2, #1
 800050e:	0018      	movs	r0, r3
 8000510:	f002 f850 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	00d9      	lsls	r1, r3, #3
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	2200      	movs	r2, #0
 800051e:	0018      	movs	r0, r3
 8000520:	f002 f848 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 8000524:	4b96      	ldr	r3, [pc, #600]	; (8000780 <D_UpdateDisp+0x3a4>)
 8000526:	2201      	movs	r2, #1
 8000528:	2110      	movs	r1, #16
 800052a:	0018      	movs	r0, r3
 800052c:	f002 f842 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 8000530:	4b93      	ldr	r3, [pc, #588]	; (8000780 <D_UpdateDisp+0x3a4>)
 8000532:	2201      	movs	r2, #1
 8000534:	2120      	movs	r1, #32
 8000536:	0018      	movs	r0, r3
 8000538:	f002 f83c 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 800053c:	4b92      	ldr	r3, [pc, #584]	; (8000788 <D_UpdateDisp+0x3ac>)
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	0018      	movs	r0, r3
 8000544:	f002 f836 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 8000548:	4b8f      	ldr	r3, [pc, #572]	; (8000788 <D_UpdateDisp+0x3ac>)
 800054a:	2201      	movs	r2, #1
 800054c:	2120      	movs	r1, #32
 800054e:	0018      	movs	r0, r3
 8000550:	f002 f830 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000554:	4b8c      	ldr	r3, [pc, #560]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	0018      	movs	r0, r3
 800055c:	f002 f82a 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000560:	e2fa      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 3:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	01db      	lsls	r3, r3, #7
 8000566:	4888      	ldr	r0, [pc, #544]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000568:	2201      	movs	r2, #1
 800056a:	0019      	movs	r1, r3
 800056c:	f002 f822 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	0059      	lsls	r1, r3, #1
 8000574:	23a0      	movs	r3, #160	; 0xa0
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	2201      	movs	r2, #1
 800057a:	0018      	movs	r0, r3
 800057c:	f002 f81a 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	00d9      	lsls	r1, r3, #3
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	2201      	movs	r2, #1
 800058a:	0018      	movs	r0, r3
 800058c:	f002 f812 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 8000590:	4b7b      	ldr	r3, [pc, #492]	; (8000780 <D_UpdateDisp+0x3a4>)
 8000592:	2201      	movs	r2, #1
 8000594:	2110      	movs	r1, #16
 8000596:	0018      	movs	r0, r3
 8000598:	f002 f80c 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 800059c:	4b78      	ldr	r3, [pc, #480]	; (8000780 <D_UpdateDisp+0x3a4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	2120      	movs	r1, #32
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 f806 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 80005a8:	4b77      	ldr	r3, [pc, #476]	; (8000788 <D_UpdateDisp+0x3ac>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	0018      	movs	r0, r3
 80005b0:	f002 f800 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 80005b4:	4b74      	ldr	r3, [pc, #464]	; (8000788 <D_UpdateDisp+0x3ac>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	2120      	movs	r1, #32
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 fffa 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 80005c0:	4b71      	ldr	r3, [pc, #452]	; (8000788 <D_UpdateDisp+0x3ac>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	2108      	movs	r1, #8
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fff4 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 80005cc:	e2c4      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 4:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	01db      	lsls	r3, r3, #7
 80005d2:	486d      	ldr	r0, [pc, #436]	; (8000788 <D_UpdateDisp+0x3ac>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	0019      	movs	r1, r3
 80005d8:	f001 ffec 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	0059      	lsls	r1, r3, #1
 80005e0:	23a0      	movs	r3, #160	; 0xa0
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2201      	movs	r2, #1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 ffe4 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	00d9      	lsls	r1, r3, #3
 80005f0:	23a0      	movs	r3, #160	; 0xa0
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	2201      	movs	r2, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 ffdc 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 80005fc:	4b60      	ldr	r3, [pc, #384]	; (8000780 <D_UpdateDisp+0x3a4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	0018      	movs	r0, r3
 8000604:	f001 ffd6 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000608:	4b5d      	ldr	r3, [pc, #372]	; (8000780 <D_UpdateDisp+0x3a4>)
 800060a:	2200      	movs	r2, #0
 800060c:	2120      	movs	r1, #32
 800060e:	0018      	movs	r0, r3
 8000610:	f001 ffd0 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000614:	4b5c      	ldr	r3, [pc, #368]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000616:	2201      	movs	r2, #1
 8000618:	2110      	movs	r1, #16
 800061a:	0018      	movs	r0, r3
 800061c:	f001 ffca 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 8000620:	4b59      	ldr	r3, [pc, #356]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	0018      	movs	r0, r3
 8000628:	f001 ffc4 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 800062c:	4b56      	ldr	r3, [pc, #344]	; (8000788 <D_UpdateDisp+0x3ac>)
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	0018      	movs	r0, r3
 8000634:	f001 ffbe 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000638:	e28e      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 5:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	01db      	lsls	r3, r3, #7
 800063e:	4852      	ldr	r0, [pc, #328]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000640:	2201      	movs	r2, #1
 8000642:	0019      	movs	r1, r3
 8000644:	f001 ffb6 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_RESET);
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	0059      	lsls	r1, r3, #1
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	2200      	movs	r2, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f001 ffae 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	00d9      	lsls	r1, r3, #3
 800065c:	23a0      	movs	r3, #160	; 0xa0
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	2201      	movs	r2, #1
 8000662:	0018      	movs	r0, r3
 8000664:	f001 ffa6 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <D_UpdateDisp+0x3a4>)
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	0018      	movs	r0, r3
 8000670:	f001 ffa0 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000674:	4b42      	ldr	r3, [pc, #264]	; (8000780 <D_UpdateDisp+0x3a4>)
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	0018      	movs	r0, r3
 800067c:	f001 ff9a 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000680:	4b41      	ldr	r3, [pc, #260]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000682:	2201      	movs	r2, #1
 8000684:	2110      	movs	r1, #16
 8000686:	0018      	movs	r0, r3
 8000688:	f001 ff94 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 800068c:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <D_UpdateDisp+0x3ac>)
 800068e:	2201      	movs	r2, #1
 8000690:	2120      	movs	r1, #32
 8000692:	0018      	movs	r0, r3
 8000694:	f001 ff8e 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <D_UpdateDisp+0x3ac>)
 800069a:	2200      	movs	r2, #0
 800069c:	2108      	movs	r1, #8
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 ff88 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 80006a4:	e258      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 6:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	01db      	lsls	r3, r3, #7
 80006aa:	4837      	ldr	r0, [pc, #220]	; (8000788 <D_UpdateDisp+0x3ac>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	0019      	movs	r1, r3
 80006b0:	f001 ff80 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_RESET);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	0059      	lsls	r1, r3, #1
 80006b8:	23a0      	movs	r3, #160	; 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2200      	movs	r2, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 ff78 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	00d9      	lsls	r1, r3, #3
 80006c8:	23a0      	movs	r3, #160	; 0xa0
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	2201      	movs	r2, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 ff70 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <D_UpdateDisp+0x3a4>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	2110      	movs	r1, #16
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 ff6a 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <D_UpdateDisp+0x3a4>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 ff64 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <D_UpdateDisp+0x3ac>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	2110      	movs	r1, #16
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 ff5e 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <D_UpdateDisp+0x3ac>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	2120      	movs	r1, #32
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 ff58 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	0018      	movs	r0, r3
 800070c:	f001 ff52 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000710:	e222      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 7:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	01db      	lsls	r3, r3, #7
 8000716:	481c      	ldr	r0, [pc, #112]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000718:	2201      	movs	r2, #1
 800071a:	0019      	movs	r1, r3
 800071c:	f001 ff4a 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	0059      	lsls	r1, r3, #1
 8000724:	23a0      	movs	r3, #160	; 0xa0
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	2201      	movs	r2, #1
 800072a:	0018      	movs	r0, r3
 800072c:	f001 ff42 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	00d9      	lsls	r1, r3, #3
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	2201      	movs	r2, #1
 800073a:	0018      	movs	r0, r3
 800073c:	f001 ff3a 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <D_UpdateDisp+0x3a4>)
 8000742:	2200      	movs	r2, #0
 8000744:	2110      	movs	r1, #16
 8000746:	0018      	movs	r0, r3
 8000748:	f001 ff34 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <D_UpdateDisp+0x3a4>)
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	0018      	movs	r0, r3
 8000754:	f001 ff2e 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <D_UpdateDisp+0x3ac>)
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	0018      	movs	r0, r3
 8000760:	f001 ff28 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	0018      	movs	r0, r3
 800076c:	f001 ff22 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <D_UpdateDisp+0x3ac>)
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	0018      	movs	r0, r3
 8000778:	f001 ff1c 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 800077c:	e1ec      	b.n	8000b58 <D_UpdateDisp+0x77c>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	50000800 	.word	0x50000800
 8000784:	08003288 	.word	0x08003288
 8000788:	50000400 	.word	0x50000400

	case 8:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	01db      	lsls	r3, r3, #7
 8000790:	48f7      	ldr	r0, [pc, #988]	; (8000b70 <D_UpdateDisp+0x794>)
 8000792:	2201      	movs	r2, #1
 8000794:	0019      	movs	r1, r3
 8000796:	f001 ff0d 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	0059      	lsls	r1, r3, #1
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	2201      	movs	r2, #1
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 ff05 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	00d9      	lsls	r1, r3, #3
 80007ae:	23a0      	movs	r3, #160	; 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	2201      	movs	r2, #1
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 fefd 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 80007ba:	4bee      	ldr	r3, [pc, #952]	; (8000b74 <D_UpdateDisp+0x798>)
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fef7 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 80007c6:	4beb      	ldr	r3, [pc, #940]	; (8000b74 <D_UpdateDisp+0x798>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	2120      	movs	r1, #32
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fef1 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 80007d2:	4be7      	ldr	r3, [pc, #924]	; (8000b70 <D_UpdateDisp+0x794>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	2110      	movs	r1, #16
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 feeb 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 80007de:	4be4      	ldr	r3, [pc, #912]	; (8000b70 <D_UpdateDisp+0x794>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	2120      	movs	r1, #32
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fee5 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 80007ea:	4be1      	ldr	r3, [pc, #900]	; (8000b70 <D_UpdateDisp+0x794>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	2108      	movs	r1, #8
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fedf 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 80007f6:	e1af      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 9:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	01db      	lsls	r3, r3, #7
 80007fc:	48dc      	ldr	r0, [pc, #880]	; (8000b70 <D_UpdateDisp+0x794>)
 80007fe:	2201      	movs	r2, #1
 8000800:	0019      	movs	r1, r3
 8000802:	f001 fed7 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	0059      	lsls	r1, r3, #1
 800080a:	23a0      	movs	r3, #160	; 0xa0
 800080c:	05db      	lsls	r3, r3, #23
 800080e:	2201      	movs	r2, #1
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fecf 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	00d9      	lsls	r1, r3, #3
 800081a:	23a0      	movs	r3, #160	; 0xa0
 800081c:	05db      	lsls	r3, r3, #23
 800081e:	2201      	movs	r2, #1
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fec7 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 8000826:	4bd3      	ldr	r3, [pc, #844]	; (8000b74 <D_UpdateDisp+0x798>)
 8000828:	2201      	movs	r2, #1
 800082a:	2110      	movs	r1, #16
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fec1 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000832:	4bd0      	ldr	r3, [pc, #832]	; (8000b74 <D_UpdateDisp+0x798>)
 8000834:	2200      	movs	r2, #0
 8000836:	2120      	movs	r1, #32
 8000838:	0018      	movs	r0, r3
 800083a:	f001 febb 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 800083e:	4bcc      	ldr	r3, [pc, #816]	; (8000b70 <D_UpdateDisp+0x794>)
 8000840:	2201      	movs	r2, #1
 8000842:	2110      	movs	r1, #16
 8000844:	0018      	movs	r0, r3
 8000846:	f001 feb5 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 800084a:	4bc9      	ldr	r3, [pc, #804]	; (8000b70 <D_UpdateDisp+0x794>)
 800084c:	2201      	movs	r2, #1
 800084e:	2120      	movs	r1, #32
 8000850:	0018      	movs	r0, r3
 8000852:	f001 feaf 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000856:	4bc6      	ldr	r3, [pc, #792]	; (8000b70 <D_UpdateDisp+0x794>)
 8000858:	2200      	movs	r2, #0
 800085a:	2108      	movs	r1, #8
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fea9 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000862:	e179      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 10:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	01db      	lsls	r3, r3, #7
 8000868:	48c1      	ldr	r0, [pc, #772]	; (8000b70 <D_UpdateDisp+0x794>)
 800086a:	2201      	movs	r2, #1
 800086c:	0019      	movs	r1, r3
 800086e:	f001 fea1 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	0059      	lsls	r1, r3, #1
 8000876:	23a0      	movs	r3, #160	; 0xa0
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	2201      	movs	r2, #1
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fe99 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	00d9      	lsls	r1, r3, #3
 8000886:	23a0      	movs	r3, #160	; 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2201      	movs	r2, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fe91 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000892:	4bb8      	ldr	r3, [pc, #736]	; (8000b74 <D_UpdateDisp+0x798>)
 8000894:	2200      	movs	r2, #0
 8000896:	2110      	movs	r1, #16
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fe8b 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 800089e:	4bb5      	ldr	r3, [pc, #724]	; (8000b74 <D_UpdateDisp+0x798>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fe85 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 80008aa:	4bb1      	ldr	r3, [pc, #708]	; (8000b70 <D_UpdateDisp+0x794>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fe7f 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 80008b6:	4bae      	ldr	r3, [pc, #696]	; (8000b70 <D_UpdateDisp+0x794>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	2120      	movs	r1, #32
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fe79 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 80008c2:	4bab      	ldr	r3, [pc, #684]	; (8000b70 <D_UpdateDisp+0x794>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fe73 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 80008ce:	e143      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 11:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	01db      	lsls	r3, r3, #7
 80008d4:	48a6      	ldr	r0, [pc, #664]	; (8000b70 <D_UpdateDisp+0x794>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	0019      	movs	r1, r3
 80008da:	f001 fe6b 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_RESET);
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	0059      	lsls	r1, r3, #1
 80008e2:	23a0      	movs	r3, #160	; 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2200      	movs	r2, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fe63 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	00d9      	lsls	r1, r3, #3
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2201      	movs	r2, #1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fe5b 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 80008fe:	4b9d      	ldr	r3, [pc, #628]	; (8000b74 <D_UpdateDisp+0x798>)
 8000900:	2201      	movs	r2, #1
 8000902:	2110      	movs	r1, #16
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fe55 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 800090a:	4b9a      	ldr	r3, [pc, #616]	; (8000b74 <D_UpdateDisp+0x798>)
 800090c:	2201      	movs	r2, #1
 800090e:	2120      	movs	r1, #32
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fe4f 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000916:	4b96      	ldr	r3, [pc, #600]	; (8000b70 <D_UpdateDisp+0x794>)
 8000918:	2201      	movs	r2, #1
 800091a:	2110      	movs	r1, #16
 800091c:	0018      	movs	r0, r3
 800091e:	f001 fe49 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 8000922:	4b93      	ldr	r3, [pc, #588]	; (8000b70 <D_UpdateDisp+0x794>)
 8000924:	2201      	movs	r2, #1
 8000926:	2120      	movs	r1, #32
 8000928:	0018      	movs	r0, r3
 800092a:	f001 fe43 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 800092e:	4b90      	ldr	r3, [pc, #576]	; (8000b70 <D_UpdateDisp+0x794>)
 8000930:	2200      	movs	r2, #0
 8000932:	2108      	movs	r1, #8
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fe3d 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 800093a:	e10d      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 12:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	01db      	lsls	r3, r3, #7
 8000940:	488b      	ldr	r0, [pc, #556]	; (8000b70 <D_UpdateDisp+0x794>)
 8000942:	2201      	movs	r2, #1
 8000944:	0019      	movs	r1, r3
 8000946:	f001 fe35 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_RESET);
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	0059      	lsls	r1, r3, #1
 800094e:	23a0      	movs	r3, #160	; 0xa0
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fe2d 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	00d9      	lsls	r1, r3, #3
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2200      	movs	r2, #0
 8000964:	0018      	movs	r0, r3
 8000966:	f001 fe25 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 800096a:	4b82      	ldr	r3, [pc, #520]	; (8000b74 <D_UpdateDisp+0x798>)
 800096c:	2201      	movs	r2, #1
 800096e:	2110      	movs	r1, #16
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fe1f 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 8000976:	4b7f      	ldr	r3, [pc, #508]	; (8000b74 <D_UpdateDisp+0x798>)
 8000978:	2201      	movs	r2, #1
 800097a:	2120      	movs	r1, #32
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fe19 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000982:	4b7b      	ldr	r3, [pc, #492]	; (8000b70 <D_UpdateDisp+0x794>)
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fe13 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
 800098e:	4b78      	ldr	r3, [pc, #480]	; (8000b70 <D_UpdateDisp+0x794>)
 8000990:	2200      	movs	r2, #0
 8000992:	2120      	movs	r1, #32
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fe0d 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 800099a:	4b75      	ldr	r3, [pc, #468]	; (8000b70 <D_UpdateDisp+0x794>)
 800099c:	2200      	movs	r2, #0
 800099e:	2108      	movs	r1, #8
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fe07 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 80009a6:	e0d7      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 13:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	01db      	lsls	r3, r3, #7
 80009ac:	4870      	ldr	r0, [pc, #448]	; (8000b70 <D_UpdateDisp+0x794>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	0019      	movs	r1, r3
 80009b2:	f001 fdff 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_SET);
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	0059      	lsls	r1, r3, #1
 80009ba:	23a0      	movs	r3, #160	; 0xa0
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2201      	movs	r2, #1
 80009c0:	0018      	movs	r0, r3
 80009c2:	f001 fdf7 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	00d9      	lsls	r1, r3, #3
 80009ca:	23a0      	movs	r3, #160	; 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2201      	movs	r2, #1
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 fdef 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 80009d6:	4b67      	ldr	r3, [pc, #412]	; (8000b74 <D_UpdateDisp+0x798>)
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 fde9 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 80009e2:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <D_UpdateDisp+0x798>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	2120      	movs	r1, #32
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fde3 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 80009ee:	4b60      	ldr	r3, [pc, #384]	; (8000b70 <D_UpdateDisp+0x794>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	2110      	movs	r1, #16
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fddd 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 80009fa:	4b5d      	ldr	r3, [pc, #372]	; (8000b70 <D_UpdateDisp+0x794>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	2120      	movs	r1, #32
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 fdd7 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000a06:	4b5a      	ldr	r3, [pc, #360]	; (8000b70 <D_UpdateDisp+0x794>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 fdd1 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000a12:	e0a1      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 14:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	01db      	lsls	r3, r3, #7
 8000a18:	4855      	ldr	r0, [pc, #340]	; (8000b70 <D_UpdateDisp+0x794>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	f001 fdc9 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_RESET);
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	0059      	lsls	r1, r3, #1
 8000a26:	23a0      	movs	r3, #160	; 0xa0
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fdc1 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	00d9      	lsls	r1, r3, #3
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 fdb9 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <D_UpdateDisp+0x798>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 fdb3 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <D_UpdateDisp+0x798>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	2120      	movs	r1, #32
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fdad 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000a5a:	4b45      	ldr	r3, [pc, #276]	; (8000b70 <D_UpdateDisp+0x794>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 fda7 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 8000a66:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <D_UpdateDisp+0x794>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f001 fda1 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000a72:	4b3f      	ldr	r3, [pc, #252]	; (8000b70 <D_UpdateDisp+0x794>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	2108      	movs	r1, #8
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 fd9b 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000a7e:	e06b      	b.n	8000b58 <D_UpdateDisp+0x77c>

	case 15:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	01db      	lsls	r3, r3, #7
 8000a84:	483a      	ldr	r0, [pc, #232]	; (8000b70 <D_UpdateDisp+0x794>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	0019      	movs	r1, r3
 8000a8a:	f001 fd93 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_RESET);
 8000a8e:	2380      	movs	r3, #128	; 0x80
 8000a90:	0059      	lsls	r1, r3, #1
 8000a92:	23a0      	movs	r3, #160	; 0xa0
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	2200      	movs	r2, #0
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 fd8b 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	00d9      	lsls	r1, r3, #3
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 fd83 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000aae:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <D_UpdateDisp+0x798>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fd7d 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <D_UpdateDisp+0x798>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	2120      	movs	r1, #32
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f001 fd77 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <D_UpdateDisp+0x794>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 fd71 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <D_UpdateDisp+0x794>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 fd6b 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
 8000ade:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <D_UpdateDisp+0x794>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fd65 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000aea:	e035      	b.n	8000b58 <D_UpdateDisp+0x77c>

	default:

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	01db      	lsls	r3, r3, #7
 8000af0:	481f      	ldr	r0, [pc, #124]	; (8000b70 <D_UpdateDisp+0x794>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	0019      	movs	r1, r3
 8000af6:	f001 fd5d 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  GPIO_PIN_RESET);
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	0059      	lsls	r1, r3, #1
 8000afe:	23a0      	movs	r3, #160	; 0xa0
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	2200      	movs	r2, #0
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 fd55 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	00d9      	lsls	r1, r3, #3
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	2200      	movs	r2, #0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fd4d 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <D_UpdateDisp+0x798>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2110      	movs	r1, #16
 8000b20:	0018      	movs	r0, r3
 8000b22:	f001 fd47 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <D_UpdateDisp+0x798>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fd41 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <D_UpdateDisp+0x794>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 fd3b 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <D_UpdateDisp+0x794>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	2120      	movs	r1, #32
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 fd35 	bl	80025b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_SET);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <D_UpdateDisp+0x794>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2108      	movs	r1, #8
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 fd2f 	bl	80025b4 <HAL_GPIO_WritePin>

		break;
 8000b56:	46c0      	nop			; (mov r8, r8)

	}

	if (dispSelect) {
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00b      	beq.n	8000b78 <D_UpdateDisp+0x79c>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <D_UpdateDisp+0x798>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	0018      	movs	r0, r3
 8000b68:	f001 fd24 	bl	80025b4 <HAL_GPIO_WritePin>
	} else {

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);

	}
}
 8000b6c:	e00c      	b.n	8000b88 <D_UpdateDisp+0x7ac>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	50000400 	.word	0x50000400
 8000b74:	50000800 	.word	0x50000800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	0099      	lsls	r1, r3, #2
 8000b7c:	23a0      	movs	r3, #160	; 0xa0
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	2201      	movs	r2, #1
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 fd16 	bl	80025b4 <HAL_GPIO_WritePin>
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b96:	240c      	movs	r4, #12
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2314      	movs	r3, #20
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f002 fb5d 	bl	8003260 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000baa:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000bdc:	2102      	movs	r1, #2
 8000bde:	430a      	orrs	r2, r1
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <MX_GPIO_Init+0x124>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2202      	movs	r2, #2
 8000be8:	4013      	ands	r3, r2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	21b0      	movs	r1, #176	; 0xb0
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f001 fcdd 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bfa:	4930      	ldr	r1, [pc, #192]	; (8000cbc <MX_GPIO_Init+0x12c>)
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <MX_GPIO_Init+0x130>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fcd7 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000c06:	23e0      	movs	r3, #224	; 0xe0
 8000c08:	00d9      	lsls	r1, r3, #3
 8000c0a:	23a0      	movs	r3, #160	; 0xa0
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2200      	movs	r2, #0
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fccf 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2210      	movs	r2, #16
 8000c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	2284      	movs	r2, #132	; 0x84
 8000c20:	0392      	lsls	r2, r2, #14
 8000c22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2201      	movs	r2, #1
 8000c28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	193a      	adds	r2, r7, r4
 8000c2c:	23a0      	movs	r3, #160	; 0xa0
 8000c2e:	05db      	lsls	r3, r3, #23
 8000c30:	0011      	movs	r1, r2
 8000c32:	0018      	movs	r0, r3
 8000c34:	f001 fb5a 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	22b0      	movs	r2, #176	; 0xb0
 8000c3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	2201      	movs	r2, #1
 8000c42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	4a19      	ldr	r2, [pc, #100]	; (8000cb8 <MX_GPIO_Init+0x128>)
 8000c54:	0019      	movs	r1, r3
 8000c56:	0010      	movs	r0, r2
 8000c58:	f001 fb48 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <MX_GPIO_Init+0x12c>)
 8000c60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2201      	movs	r2, #1
 8000c66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_GPIO_Init+0x130>)
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	f001 fb36 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c80:	0021      	movs	r1, r4
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	22e0      	movs	r2, #224	; 0xe0
 8000c86:	00d2      	lsls	r2, r2, #3
 8000c88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	187a      	adds	r2, r7, r1
 8000c9e:	23a0      	movs	r3, #160	; 0xa0
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f001 fb21 	bl	80022ec <HAL_GPIO_Init>

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b009      	add	sp, #36	; 0x24
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	50000800 	.word	0x50000800
 8000cbc:	00004038 	.word	0x00004038
 8000cc0:	50000400 	.word	0x50000400

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 f93d 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f83b 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f7ff ff5d 	bl	8000b90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cd6:	f7ff fa9f 	bl	8000218 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK){
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <main+0x78>)
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f001 f985 	bl	8001fec <HAL_ADCEx_Calibration_Start>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <main+0x26>
	  Error_Handler();
 8000ce6:	f000 f8a5 	bl	8000e34 <Error_Handler>
  }

  ADCstatus = RESET;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <main+0x7c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

  HAL_ADC_Start_IT(&hadc1);
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <main+0x78>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 fcee 	bl	80016d4 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int i = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]

	while (1) {

		while(i < 1000){
 8000cfc:	e012      	b.n	8000d24 <main+0x60>
			D_UpdateDisp(ADCdata[0], 0);
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <main+0x80>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff fb67 	bl	80003dc <D_UpdateDisp>
			D_UpdateDisp(ADCdata[1], 1);
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <main+0x80>)
 8000d10:	885b      	ldrh	r3, [r3, #2]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2101      	movs	r1, #1
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff fb5f 	bl	80003dc <D_UpdateDisp>
			i++;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3301      	adds	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
		while(i < 1000){
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	23fa      	movs	r3, #250	; 0xfa
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbe7      	blt.n	8000cfe <main+0x3a>
		}

		HAL_ADC_Start_IT(&hadc1);
 8000d2e:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <main+0x78>)
 8000d30:	0018      	movs	r0, r3
 8000d32:	f000 fccf 	bl	80016d4 <HAL_ADC_Start_IT>

		i = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
		while(i < 1000){
 8000d3a:	e7f3      	b.n	8000d24 <main+0x60>
 8000d3c:	2000002c 	.word	0x2000002c
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000090 	.word	0x20000090

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b093      	sub	sp, #76	; 0x4c
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	2414      	movs	r4, #20
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	2334      	movs	r3, #52	; 0x34
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f002 fa81 	bl	8003260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	0018      	movs	r0, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	001a      	movs	r2, r3
 8000d66:	2100      	movs	r1, #0
 8000d68:	f002 fa7a 	bl	8003260 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f001 fc3d 	bl	80025f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2202      	movs	r2, #2
 8000d7a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	0052      	lsls	r2, r2, #1
 8000d82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f001 fc69 	bl	8002670 <HAL_RCC_OscConfig>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000da2:	f000 f847 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 ff6a 	bl	8002c9c <HAL_RCC_ClockConfig>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000dcc:	f000 f832 	bl	8000e34 <Error_Handler>
  }
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b013      	add	sp, #76	; 0x4c
 8000dd6:	bd90      	pop	{r4, r7, pc}

08000dd8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	if(!ADchannel){
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x50>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10d      	bne.n	8000e06 <HAL_ADC_ConvCpltCallback+0x2e>
		ADCdata[0] = (16*HAL_ADC_GetValue(&hadc1)/4096);
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x54>)
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 fce9 	bl	80017c4 <HAL_ADC_GetValue>
 8000df2:	0003      	movs	r3, r0
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	0b1b      	lsrs	r3, r3, #12
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x58>)
 8000dfc:	801a      	strh	r2, [r3, #0]
		ADchannel = 1;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x50>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
	}else{
		ADCdata[1] = (16*HAL_ADC_GetValue(&hadc1)/4096);
		ADchannel = 0;
	}

}
 8000e04:	e00c      	b.n	8000e20 <HAL_ADC_ConvCpltCallback+0x48>
		ADCdata[1] = (16*HAL_ADC_GetValue(&hadc1)/4096);
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_ADC_ConvCpltCallback+0x54>)
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 fcdb 	bl	80017c4 <HAL_ADC_GetValue>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	0b1b      	lsrs	r3, r3, #12
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_ADC_ConvCpltCallback+0x58>)
 8000e18:	805a      	strh	r2, [r3, #2]
		ADchannel = 0;
 8000e1a:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_ADC_ConvCpltCallback+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000094 	.word	0x20000094
 8000e2c:	2000002c 	.word	0x2000002c
 8000e30:	20000090 	.word	0x20000090

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	01d9      	lsls	r1, r3, #7
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	2201      	movs	r2, #1
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 fbb4 	bl	80025b4 <HAL_GPIO_WritePin>

	while (1) {
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x18>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2201      	movs	r2, #1
 8000e68:	4013      	ands	r3, r2
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0549      	lsls	r1, r1, #21
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_MspInit+0x4c>)
 8000e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	055b      	lsls	r3, r3, #21
 8000e84:	4013      	ands	r3, r2
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e8a:	23c0      	movs	r3, #192	; 0xc0
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 f8e0 	bl	8001054 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f8aa 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <ADC1_IRQHandler+0x14>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 fc80 	bl	80017dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	2000002c 	.word	0x2000002c

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef8:	f7ff fff6 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f22:	f002 f979 	bl	8003218 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f26:	f7ff fecd 	bl	8000cc4 <main>

08000f2a <LoopForever>:

LoopForever:
  b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   r0, =_estack
 8000f2c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f38:	08003310 	.word	0x08003310
  ldr r2, =_sbss
 8000f3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f40:	2000009c 	.word	0x2000009c

08000f44 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x3c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_Init+0x3c>)
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	0049      	lsls	r1, r1, #1
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 f810 	bl	8000f88 <HAL_InitTick>
 8000f68:	1e03      	subs	r3, r0, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e001      	b.n	8000f78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff ff6c 	bl	8000e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_InitTick+0x88>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d02b      	beq.n	8000ff8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_InitTick+0x8c>)
 8000fa2:	681c      	ldr	r4, [r3, #0]
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_InitTick+0x88>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	0019      	movs	r1, r3
 8000faa:	23fa      	movs	r3, #250	; 0xfa
 8000fac:	0098      	lsls	r0, r3, #2
 8000fae:	f7ff f8a7 	bl	8000100 <__udivsi3>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	0020      	movs	r0, r4
 8000fb8:	f7ff f8a2 	bl	8000100 <__udivsi3>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f001 f987 	bl	80022d2 <HAL_SYSTICK_Config>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d112      	bne.n	8000fee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d80a      	bhi.n	8000fe4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 f956 	bl	8002288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_InitTick+0x90>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e00d      	b.n	8001000 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e008      	b.n	8001000 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e003      	b.n	8001000 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	781b      	ldrb	r3, [r3, #0]
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b005      	add	sp, #20
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000004 	.word	0x20000004
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_IncTick+0x1c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_IncTick+0x20>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	18d2      	adds	r2, r2, r3
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_IncTick+0x20>)
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000098 	.word	0x20000098

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <HAL_GetTick+0x10>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000098 	.word	0x20000098

08001054 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001062:	4013      	ands	r3, r2
 8001064:	0019      	movs	r1, r3
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40010000 	.word	0x40010000
 800107c:	fffff9ff 	.word	0xfffff9ff

08001080 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001090:	401a      	ands	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	fe3fffff 	.word	0xfe3fffff

080010a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	23e0      	movs	r3, #224	; 0xe0
 80010b6:	045b      	lsls	r3, r3, #17
 80010b8:	4013      	ands	r3, r2
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	2104      	movs	r1, #4
 80010d6:	400a      	ands	r2, r1
 80010d8:	2107      	movs	r1, #7
 80010da:	4091      	lsls	r1, r2
 80010dc:	000a      	movs	r2, r1
 80010de:	43d2      	mvns	r2, r2
 80010e0:	401a      	ands	r2, r3
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2104      	movs	r1, #4
 80010e6:	400b      	ands	r3, r1
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4099      	lsls	r1, r3
 80010ec:	000b      	movs	r3, r1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b004      	add	sp, #16
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	23c0      	movs	r3, #192	; 0xc0
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	4013      	ands	r3, r2
 800110e:	d101      	bne.n	8001114 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001114:	2300      	movs	r3, #0
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}

0800111e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	211f      	movs	r1, #31
 8001132:	400a      	ands	r2, r1
 8001134:	210f      	movs	r1, #15
 8001136:	4091      	lsls	r1, r2
 8001138:	000a      	movs	r2, r1
 800113a:	43d2      	mvns	r2, r2
 800113c:	401a      	ands	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0e9b      	lsrs	r3, r3, #26
 8001142:	210f      	movs	r1, #15
 8001144:	4019      	ands	r1, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	201f      	movs	r0, #31
 800114a:	4003      	ands	r3, r0
 800114c:	4099      	lsls	r1, r3
 800114e:	000b      	movs	r3, r1
 8001150:	431a      	orrs	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}

0800115e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	035b      	lsls	r3, r3, #13
 8001170:	0b5b      	lsrs	r3, r3, #13
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}

08001180 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	0352      	lsls	r2, r2, #13
 8001192:	0b52      	lsrs	r2, r2, #13
 8001194:	43d2      	mvns	r2, r2
 8001196:	401a      	ands	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4013      	ands	r3, r2
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	0212      	lsls	r2, r2, #8
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	400b      	ands	r3, r1
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80011de:	400b      	ands	r3, r1
 80011e0:	431a      	orrs	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	07ffff00 	.word	0x07ffff00

080011f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <LL_ADC_EnableInternalRegulator+0x24>)
 8001202:	4013      	ands	r3, r2
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	0552      	lsls	r2, r2, #21
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	6fffffe8 	.word	0x6fffffe8

0800121c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	055b      	lsls	r3, r3, #21
 800122c:	401a      	ands	r2, r3
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	055b      	lsls	r3, r3, #21
 8001232:	429a      	cmp	r2, r3
 8001234:	d101      	bne.n	800123a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800123a:	2300      	movs	r3, #0
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}

08001244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <LL_ADC_Enable+0x20>)
 8001252:	4013      	ands	r3, r2
 8001254:	2201      	movs	r2, #1
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b002      	add	sp, #8
 8001262:	bd80      	pop	{r7, pc}
 8001264:	7fffffe8 	.word	0x7fffffe8

08001268 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <LL_ADC_Disable+0x20>)
 8001276:	4013      	ands	r3, r2
 8001278:	2202      	movs	r2, #2
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b002      	add	sp, #8
 8001286:	bd80      	pop	{r7, pc}
 8001288:	7fffffe8 	.word	0x7fffffe8

0800128c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <LL_ADC_IsEnabled+0x18>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_ADC_IsEnabled+0x1a>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}

080012ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d101      	bne.n	80012c6 <LL_ADC_IsDisableOngoing+0x18>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <LL_ADC_IsDisableOngoing+0x1a>
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	0018      	movs	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b002      	add	sp, #8
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <LL_ADC_REG_StartConversion+0x20>)
 80012de:	4013      	ands	r3, r2
 80012e0:	2204      	movs	r2, #4
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	7fffffe8 	.word	0x7fffffe8

080012f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2204      	movs	r2, #4
 8001302:	4013      	ands	r3, r2
 8001304:	2b04      	cmp	r3, #4
 8001306:	d101      	bne.n	800130c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800130c:	2300      	movs	r3, #0
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001320:	231f      	movs	r3, #31
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e1b1      	b.n	80016a2 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0018      	movs	r0, r3
 800134a:	f7fe ffe3 	bl	8000314 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2254      	movs	r2, #84	; 0x54
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff ff5b 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d115      	bne.n	8001396 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	0018      	movs	r0, r3
 8001370:	f7ff ff40 	bl	80011f4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001374:	4bcd      	ldr	r3, [pc, #820]	; (80016ac <HAL_ADC_Init+0x394>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	49cd      	ldr	r1, [pc, #820]	; (80016b0 <HAL_ADC_Init+0x398>)
 800137a:	0018      	movs	r0, r3
 800137c:	f7fe fec0 	bl	8000100 <__udivsi3>
 8001380:	0003      	movs	r3, r0
 8001382:	3301      	adds	r3, #1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001388:	e002      	b.n	8001390 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b01      	subs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff ff3e 	bl	800121c <LL_ADC_IsInternalRegulatorEnabled>
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	d10f      	bne.n	80013c4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	2210      	movs	r2, #16
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2201      	movs	r2, #1
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013bc:	231f      	movs	r3, #31
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ff93 	bl	80012f4 <LL_ADC_REG_IsConversionOngoing>
 80013ce:	0003      	movs	r3, r0
 80013d0:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	2210      	movs	r2, #16
 80013d8:	4013      	ands	r3, r2
 80013da:	d000      	beq.n	80013de <HAL_ADC_Init+0xc6>
 80013dc:	e154      	b.n	8001688 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d000      	beq.n	80013e6 <HAL_ADC_Init+0xce>
 80013e4:	e150      	b.n	8001688 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	4ab2      	ldr	r2, [pc, #712]	; (80016b4 <HAL_ADC_Init+0x39c>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	2202      	movs	r2, #2
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7ff ff46 	bl	800128c <LL_ADC_IsEnabled>
 8001400:	1e03      	subs	r3, r0, #0
 8001402:	d156      	bne.n	80014b2 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2218      	movs	r2, #24
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	0f9b      	lsrs	r3, r3, #30
 8001422:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	223c      	movs	r2, #60	; 0x3c
 8001434:	5c9b      	ldrb	r3, [r3, r2]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d111      	bne.n	800145e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0f9b      	lsrs	r3, r3, #30
 8001440:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001446:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800144c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001452:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	2201      	movs	r2, #1
 800145a:	4313      	orrs	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4a94      	ldr	r2, [pc, #592]	; (80016b8 <HAL_ADC_Init+0x3a0>)
 8001466:	4013      	ands	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	430a      	orrs	r2, r1
 8001472:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	23c0      	movs	r3, #192	; 0xc0
 800147a:	061b      	lsls	r3, r3, #24
 800147c:	429a      	cmp	r2, r3
 800147e:	d018      	beq.n	80014b2 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	429a      	cmp	r2, r3
 800148a:	d012      	beq.n	80014b2 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	061b      	lsls	r3, r3, #24
 8001494:	429a      	cmp	r2, r3
 8001496:	d00c      	beq.n	80014b2 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_ADC_Init+0x3a4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a88      	ldr	r2, [pc, #544]	; (80016c0 <HAL_ADC_Init+0x3a8>)
 800149e:	4013      	ands	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	23f0      	movs	r3, #240	; 0xf0
 80014a8:	039b      	lsls	r3, r3, #14
 80014aa:	401a      	ands	r2, r3
 80014ac:	4b83      	ldr	r3, [pc, #524]	; (80016bc <HAL_ADC_Init+0x3a4>)
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7e1b      	ldrb	r3, [r3, #24]
 80014b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e5b      	ldrb	r3, [r3, #25]
 80014bc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80014be:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7e9b      	ldrb	r3, [r3, #26]
 80014c4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80014c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_ADC_Init+0x1be>
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	015b      	lsls	r3, r3, #5
 80014d4:	e000      	b.n	80014d8 <HAL_ADC_Init+0x1c0>
 80014d6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014d8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014de:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da04      	bge.n	80014f2 <HAL_ADC_Init+0x1da>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	e001      	b.n	80014f6 <HAL_ADC_Init+0x1de>
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80014f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	5c5b      	ldrb	r3, [r3, r1]
 80014fe:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001500:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2220      	movs	r2, #32
 800150c:	5c9b      	ldrb	r3, [r3, r2]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d115      	bne.n	800153e <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7e9b      	ldrb	r3, [r3, #26]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	0252      	lsls	r2, r2, #9
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	e00b      	b.n	800153e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	2220      	movs	r2, #32
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	2201      	movs	r2, #1
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154a:	23e0      	movs	r3, #224	; 0xe0
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001554:	4313      	orrs	r3, r2
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <HAL_ADC_Init+0x3ac>)
 8001564:	4013      	ands	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	430a      	orrs	r2, r1
 8001570:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	4a53      	ldr	r2, [pc, #332]	; (80016c8 <HAL_ADC_Init+0x3b0>)
 800157a:	4013      	ands	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	430a      	orrs	r2, r1
 8001586:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f7ff fd95 	bl	80010c2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a0:	494a      	ldr	r1, [pc, #296]	; (80016cc <HAL_ADC_Init+0x3b4>)
 80015a2:	001a      	movs	r2, r3
 80015a4:	f7ff fd8d 	bl	80010c2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2110      	movs	r1, #16
 80015bc:	4249      	negs	r1, r1
 80015be:	430a      	orrs	r2, r1
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
 80015c2:	e03a      	b.n	800163a <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	039b      	lsls	r3, r3, #14
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d134      	bne.n	800163a <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	e00c      	b.n	80015f0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	40da      	lsrs	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	220f      	movs	r2, #15
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	d006      	beq.n	80015f8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	3301      	adds	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	d9ef      	bls.n	80015d6 <HAL_ADC_Init+0x2be>
 80015f6:	e000      	b.n	80015fa <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 80015f8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d109      	bne.n	8001614 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2110      	movs	r1, #16
 800160c:	4249      	negs	r1, r1
 800160e:	430a      	orrs	r2, r1
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
 8001612:	e012      	b.n	800163a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	3b01      	subs	r3, #1
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	221c      	movs	r2, #28
 8001624:	4013      	ands	r3, r2
 8001626:	2210      	movs	r2, #16
 8001628:	4252      	negs	r2, r2
 800162a:	409a      	lsls	r2, r3
 800162c:	0011      	movs	r1, r2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <HAL_ADC_Init+0x3b8>)
 8001642:	4013      	ands	r3, r2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	429a      	cmp	r2, r3
 8001648:	d10b      	bne.n	8001662 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	2203      	movs	r2, #3
 8001656:	4393      	bics	r3, r2
 8001658:	2201      	movs	r2, #1
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001660:	e01c      	b.n	800169c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	2212      	movs	r2, #18
 8001668:	4393      	bics	r3, r2
 800166a:	2210      	movs	r2, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2201      	movs	r2, #1
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800167e:	231f      	movs	r3, #31
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001686:	e009      	b.n	800169c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	2210      	movs	r2, #16
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001694:	231f      	movs	r3, #31
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800169c:	231f      	movs	r3, #31
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b008      	add	sp, #32
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	20000004 	.word	0x20000004
 80016b0:	00030d40 	.word	0x00030d40
 80016b4:	fffffefd 	.word	0xfffffefd
 80016b8:	1ffffc02 	.word	0x1ffffc02
 80016bc:	40012708 	.word	0x40012708
 80016c0:	ffc3ffff 	.word	0xffc3ffff
 80016c4:	fffe0219 	.word	0xfffe0219
 80016c8:	dffffc02 	.word	0xdffffc02
 80016cc:	07ffff04 	.word	0x07ffff04
 80016d0:	833fffe7 	.word	0x833fffe7

080016d4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff fe07 	bl	80012f4 <LL_ADC_REG_IsConversionOngoing>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d15f      	bne.n	80017aa <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2254      	movs	r2, #84	; 0x54
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_Start_IT+0x24>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e05f      	b.n	80017b8 <HAL_ADC_Start_IT+0xe4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2254      	movs	r2, #84	; 0x54
 80016fc:	2101      	movs	r1, #1
 80016fe:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001700:	250f      	movs	r5, #15
 8001702:	197c      	adds	r4, r7, r5
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	0018      	movs	r0, r3
 8001708:	f000 fb68 	bl	8001ddc <ADC_Enable>
 800170c:	0003      	movs	r3, r0
 800170e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001710:	197b      	adds	r3, r7, r5
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d143      	bne.n	80017a0 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_ADC_Start_IT+0xec>)
 800171e:	4013      	ands	r3, r2
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	0052      	lsls	r2, r2, #1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	221c      	movs	r2, #28
 8001736:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2254      	movs	r2, #84	; 0x54
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	211c      	movs	r1, #28
 800174c:	438a      	bics	r2, r1
 800174e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d108      	bne.n	800176a <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2108      	movs	r1, #8
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]
          break;
 8001768:	e008      	b.n	800177c <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2104      	movs	r1, #4
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
          break;
 800177a:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	2b00      	cmp	r3, #0
 8001782:	d107      	bne.n	8001794 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2110      	movs	r1, #16
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff fd99 	bl	80012d0 <LL_ADC_REG_StartConversion>
 800179e:	e008      	b.n	80017b2 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2254      	movs	r2, #84	; 0x54
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]
 80017a8:	e003      	b.n	80017b2 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017aa:	230f      	movs	r3, #15
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2202      	movs	r2, #2
 80017b0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017b2:	230f      	movs	r3, #15
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	781b      	ldrb	r3, [r3, #0]
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b004      	add	sp, #16
 80017be:	bdb0      	pop	{r4, r5, r7, pc}
 80017c0:	fffff0fe 	.word	0xfffff0fe

080017c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d017      	beq.n	8001830 <HAL_ADC_IRQHandler+0x54>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2202      	movs	r2, #2
 8001804:	4013      	ands	r3, r2
 8001806:	d013      	beq.n	8001830 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	2210      	movs	r2, #16
 800180e:	4013      	ands	r3, r2
 8001810:	d106      	bne.n	8001820 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fc74 	bl	8002110 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2202      	movs	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2204      	movs	r2, #4
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_ADC_IRQHandler+0x64>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2204      	movs	r2, #4
 800183c:	4013      	ands	r3, r2
 800183e:	d107      	bne.n	8001850 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2208      	movs	r2, #8
 8001844:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001846:	d04d      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2208      	movs	r2, #8
 800184c:	4013      	ands	r3, r2
 800184e:	d049      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	2210      	movs	r2, #16
 8001856:	4013      	ands	r3, r2
 8001858:	d106      	bne.n	8001868 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	0018      	movs	r0, r3
 800186e:	f7ff fc45 	bl	80010fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001872:	1e03      	subs	r3, r0, #0
 8001874:	d02e      	beq.n	80018d4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7e9b      	ldrb	r3, [r3, #26]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d12a      	bne.n	80018d4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2208      	movs	r2, #8
 8001886:	4013      	ands	r3, r2
 8001888:	2b08      	cmp	r3, #8
 800188a:	d123      	bne.n	80018d4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff fd2f 	bl	80012f4 <LL_ADC_REG_IsConversionOngoing>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d110      	bne.n	80018bc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	210c      	movs	r1, #12
 80018a6:	438a      	bics	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_ADC_IRQHandler+0x22c>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	2201      	movs	r2, #1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	659a      	str	r2, [r3, #88]	; 0x58
 80018ba:	e00b      	b.n	80018d4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	2220      	movs	r2, #32
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2201      	movs	r2, #1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff fa7e 	bl	8000dd8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	220c      	movs	r2, #12
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	4013      	ands	r3, r2
 80018ea:	d012      	beq.n	8001912 <HAL_ADC_IRQHandler+0x136>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	4013      	ands	r3, r2
 80018f2:	d00e      	beq.n	8001912 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0252      	lsls	r2, r2, #9
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f881 	bl	8001a0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4013      	ands	r3, r2
 800191a:	d014      	beq.n	8001946 <HAL_ADC_IRQHandler+0x16a>
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4013      	ands	r3, r2
 8001924:	d00f      	beq.n	8001946 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	0292      	lsls	r2, r2, #10
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 fbda 	bl	80020f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	0052      	lsls	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4013      	ands	r3, r2
 800194e:	d014      	beq.n	800197a <HAL_ADC_IRQHandler+0x19e>
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d00f      	beq.n	800197a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	02d2      	lsls	r2, r2, #11
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0018      	movs	r0, r3
 800196c:	f000 fbc8 	bl	8002100 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2210      	movs	r2, #16
 800197e:	4013      	ands	r3, r2
 8001980:	d02b      	beq.n	80019da <HAL_ADC_IRQHandler+0x1fe>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2210      	movs	r2, #16
 8001986:	4013      	ands	r3, r2
 8001988:	d027      	beq.n	80019da <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e008      	b.n	80019aa <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fc01 	bl	80011a4 <LL_ADC_REG_GetDMATransfer>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80019a6:	2301      	movs	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d110      	bne.n	80019d2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	00d2      	lsls	r2, r2, #3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c2:	2202      	movs	r2, #2
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f000 f825 	bl	8001a1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2210      	movs	r2, #16
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	019b      	lsls	r3, r3, #6
 80019e0:	4013      	ands	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x224>
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	019b      	lsls	r3, r3, #6
 80019ea:	4013      	ands	r3, r2
 80019ec:	d008      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 fb95 	bl	8002120 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	0192      	lsls	r2, r2, #6
 80019fe:	601a      	str	r2, [r3, #0]
  }
}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b006      	add	sp, #24
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	fffffefe 	.word	0xfffffefe

08001a0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a36:	2317      	movs	r3, #23
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2254      	movs	r2, #84	; 0x54
 8001a46:	5c9b      	ldrb	r3, [r3, r2]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x24>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e1c0      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x3a6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2254      	movs	r2, #84	; 0x54
 8001a54:	2101      	movs	r1, #1
 8001a56:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fc49 	bl	80012f4 <LL_ADC_REG_IsConversionOngoing>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d000      	beq.n	8001a68 <HAL_ADC_ConfigChannel+0x3c>
 8001a66:	e1a3      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d100      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x46>
 8001a70:	e143      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d004      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a82:	4ac1      	ldr	r2, [pc, #772]	; (8001d88 <HAL_ADC_ConfigChannel+0x35c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d108      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0019      	movs	r1, r3
 8001a92:	0010      	movs	r0, r2
 8001a94:	f7ff fb63 	bl	800115e <LL_ADC_REG_SetSequencerChAdd>
 8001a98:	e0c9      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	211f      	movs	r1, #31
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	4099      	lsls	r1, r3
 8001aaa:	000b      	movs	r3, r1
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	035b      	lsls	r3, r3, #13
 8001ab8:	0b5b      	lsrs	r3, r3, #13
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x9c>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	e098      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d000      	beq.n	8001ad4 <HAL_ADC_ConfigChannel+0xa8>
 8001ad2:	e091      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4013      	ands	r3, r2
 8001adc:	d000      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0xb4>
 8001ade:	e089      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x1c8>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d000      	beq.n	8001aec <HAL_ADC_ConfigChannel+0xc0>
 8001aea:	e081      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x1c4>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2208      	movs	r2, #8
 8001af2:	4013      	ands	r3, r2
 8001af4:	d000      	beq.n	8001af8 <HAL_ADC_ConfigChannel+0xcc>
 8001af6:	e079      	b.n	8001bec <HAL_ADC_ConfigChannel+0x1c0>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2210      	movs	r2, #16
 8001afe:	4013      	ands	r3, r2
 8001b00:	d000      	beq.n	8001b04 <HAL_ADC_ConfigChannel+0xd8>
 8001b02:	e071      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1bc>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d000      	beq.n	8001b10 <HAL_ADC_ConfigChannel+0xe4>
 8001b0e:	e069      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x1b8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	4013      	ands	r3, r2
 8001b18:	d000      	beq.n	8001b1c <HAL_ADC_ConfigChannel+0xf0>
 8001b1a:	e061      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1b4>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	4013      	ands	r3, r2
 8001b24:	d000      	beq.n	8001b28 <HAL_ADC_ConfigChannel+0xfc>
 8001b26:	e059      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x1b0>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d151      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1ac>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d149      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x1a8>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d141      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x1a4>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	4013      	ands	r3, r2
 8001b56:	d139      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x1a0>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	015b      	lsls	r3, r3, #5
 8001b60:	4013      	ands	r3, r2
 8001b62:	d131      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x19c>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	019b      	lsls	r3, r3, #6
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d129      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x198>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	01db      	lsls	r3, r3, #7
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d121      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x194>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	4013      	ands	r3, r2
 8001b86:	d119      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x190>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	025b      	lsls	r3, r3, #9
 8001b90:	4013      	ands	r3, r2
 8001b92:	d111      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x18c>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d109      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x188>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	02db      	lsls	r3, r3, #11
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d001      	beq.n	8001bb0 <HAL_ADC_ConfigChannel+0x184>
 8001bac:	2312      	movs	r3, #18
 8001bae:	e024      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e022      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	2311      	movs	r3, #17
 8001bb6:	e020      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	2310      	movs	r3, #16
 8001bba:	e01e      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	e01c      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	230e      	movs	r3, #14
 8001bc2:	e01a      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	230d      	movs	r3, #13
 8001bc6:	e018      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	230c      	movs	r3, #12
 8001bca:	e016      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	230b      	movs	r3, #11
 8001bce:	e014      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	e012      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bd4:	2309      	movs	r3, #9
 8001bd6:	e010      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bd8:	2308      	movs	r3, #8
 8001bda:	e00e      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bdc:	2307      	movs	r3, #7
 8001bde:	e00c      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001be0:	2306      	movs	r3, #6
 8001be2:	e00a      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001be4:	2305      	movs	r3, #5
 8001be6:	e008      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	2304      	movs	r3, #4
 8001bea:	e006      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bec:	2303      	movs	r3, #3
 8001bee:	e004      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e002      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x1ce>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	6852      	ldr	r2, [r2, #4]
 8001bfe:	201f      	movs	r0, #31
 8001c00:	4002      	ands	r2, r0
 8001c02:	4093      	lsls	r3, r2
 8001c04:	000a      	movs	r2, r1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d808      	bhi.n	8001c2e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	001a      	movs	r2, r3
 8001c2a:	f7ff fa78 	bl	800111e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	001a      	movs	r2, r3
 8001c3c:	f7ff fabe 	bl	80011bc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db00      	blt.n	8001c4a <HAL_ADC_ConfigChannel+0x21e>
 8001c48:	e0bc      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c4a:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fa2b 	bl	80010a8 <LL_ADC_GetCommonPathInternalCh>
 8001c52:	0003      	movs	r3, r0
 8001c54:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4d      	ldr	r2, [pc, #308]	; (8001d90 <HAL_ADC_ConfigChannel+0x364>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d122      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c68:	d11d      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	0412      	lsls	r2, r2, #16
 8001c70:	4313      	orrs	r3, r2
 8001c72:	4a46      	ldr	r2, [pc, #280]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001c74:	0019      	movs	r1, r3
 8001c76:	0010      	movs	r0, r2
 8001c78:	f7ff fa02 	bl	8001080 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c7c:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <HAL_ADC_ConfigChannel+0x368>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4945      	ldr	r1, [pc, #276]	; (8001d98 <HAL_ADC_ConfigChannel+0x36c>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7fe fa3c 	bl	8000100 <__udivsi3>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	189b      	adds	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c96:	e002      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f9      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ca4:	e08e      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a3c      	ldr	r2, [pc, #240]	; (8001d9c <HAL_ADC_ConfigChannel+0x370>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d10e      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x2a2>
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	045b      	lsls	r3, r3, #17
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d109      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	0452      	lsls	r2, r2, #17
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	4a32      	ldr	r2, [pc, #200]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	0010      	movs	r0, r2
 8001cc8:	f7ff f9da 	bl	8001080 <LL_ADC_SetCommonPathInternalCh>
 8001ccc:	e07a      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <HAL_ADC_ConfigChannel+0x374>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d000      	beq.n	8001cda <HAL_ADC_ConfigChannel+0x2ae>
 8001cd8:	e074      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	03db      	lsls	r3, r3, #15
 8001ce0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ce2:	d000      	beq.n	8001ce6 <HAL_ADC_ConfigChannel+0x2ba>
 8001ce4:	e06e      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	03d2      	lsls	r2, r2, #15
 8001cec:	4313      	orrs	r3, r2
 8001cee:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	f7ff f9c4 	bl	8001080 <LL_ADC_SetCommonPathInternalCh>
 8001cf8:	e064      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_ADC_ConfigChannel+0x35c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d107      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0019      	movs	r1, r3
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	f7ff fa30 	bl	8001180 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da4d      	bge.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7ff f9bc 	bl	80010a8 <LL_ADC_GetCommonPathInternalCh>
 8001d30:	0003      	movs	r3, r0
 8001d32:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <HAL_ADC_ConfigChannel+0x364>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d108      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <HAL_ADC_ConfigChannel+0x378>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001d46:	0019      	movs	r1, r3
 8001d48:	0010      	movs	r0, r2
 8001d4a:	f7ff f999 	bl	8001080 <LL_ADC_SetCommonPathInternalCh>
 8001d4e:	e039      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_ADC_ConfigChannel+0x370>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d108      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <HAL_ADC_ConfigChannel+0x37c>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001d62:	0019      	movs	r1, r3
 8001d64:	0010      	movs	r0, r2
 8001d66:	f7ff f98b 	bl	8001080 <LL_ADC_SetCommonPathInternalCh>
 8001d6a:	e02b      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_ADC_ConfigChannel+0x374>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d126      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_ADC_ConfigChannel+0x380>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_ADC_ConfigChannel+0x360>)
 8001d7e:	0019      	movs	r1, r3
 8001d80:	0010      	movs	r0, r2
 8001d82:	f7ff f97d 	bl	8001080 <LL_ADC_SetCommonPathInternalCh>
 8001d86:	e01d      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x398>
 8001d88:	80000004 	.word	0x80000004
 8001d8c:	40012708 	.word	0x40012708
 8001d90:	b0001000 	.word	0xb0001000
 8001d94:	20000004 	.word	0x20000004
 8001d98:	00030d40 	.word	0x00030d40
 8001d9c:	b8004000 	.word	0xb8004000
 8001da0:	b4002000 	.word	0xb4002000
 8001da4:	ff7fffff 	.word	0xff7fffff
 8001da8:	feffffff 	.word	0xfeffffff
 8001dac:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	2220      	movs	r2, #32
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dbc:	2317      	movs	r3, #23
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2254      	movs	r2, #84	; 0x54
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001dcc:	2317      	movs	r3, #23
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b006      	add	sp, #24
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)

08001ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff fa4d 	bl	800128c <LL_ADC_IsEnabled>
 8001df2:	1e03      	subs	r3, r0, #0
 8001df4:	d000      	beq.n	8001df8 <ADC_Enable+0x1c>
 8001df6:	e069      	b.n	8001ecc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4a36      	ldr	r2, [pc, #216]	; (8001ed8 <ADC_Enable+0xfc>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	d00d      	beq.n	8001e20 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	2210      	movs	r2, #16
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2201      	movs	r2, #1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e056      	b.n	8001ece <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fa0d 	bl	8001244 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <ADC_Enable+0x100>)
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff f93b 	bl	80010a8 <LL_ADC_GetCommonPathInternalCh>
 8001e32:	0002      	movs	r2, r0
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	041b      	lsls	r3, r3, #16
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d00f      	beq.n	8001e5c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <ADC_Enable+0x104>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4928      	ldr	r1, [pc, #160]	; (8001ee4 <ADC_Enable+0x108>)
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7fe f95c 	bl	8000100 <__udivsi3>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e4e:	e002      	b.n	8001e56 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f9      	bne.n	8001e50 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e5b      	ldrb	r3, [r3, #25]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d033      	beq.n	8001ecc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001e64:	f7ff f8ec 	bl	8001040 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e6c:	e027      	b.n	8001ebe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f7ff fa0a 	bl	800128c <LL_ADC_IsEnabled>
 8001e78:	1e03      	subs	r3, r0, #0
 8001e7a:	d104      	bne.n	8001e86 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff f9df 	bl	8001244 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e86:	f7ff f8db 	bl	8001040 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d914      	bls.n	8001ebe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d00d      	beq.n	8001ebe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e007      	b.n	8001ece <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d1d0      	bne.n	8001e6e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b004      	add	sp, #16
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	80000017 	.word	0x80000017
 8001edc:	40012708 	.word	0x40012708
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	00030d40 	.word	0x00030d40

08001ee8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff f9da 	bl	80012ae <LL_ADC_IsDisableOngoing>
 8001efa:	0003      	movs	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff f9c2 	bl	800128c <LL_ADC_IsEnabled>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d046      	beq.n	8001f9a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d143      	bne.n	8001f9a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10d      	bne.n	8001f3c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff f99f 	bl	8001268 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f32:	f7ff f885 	bl	8001040 <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f3a:	e028      	b.n	8001f8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	2210      	movs	r2, #16
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e021      	b.n	8001f9c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f58:	f7ff f872 	bl	8001040 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d913      	bls.n	8001f8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d00d      	beq.n	8001f8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	2210      	movs	r2, #16
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2201      	movs	r2, #1
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e006      	b.n	8001f9c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	d1de      	bne.n	8001f58 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <LL_ADC_IsEnabled>:
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <LL_ADC_IsEnabled+0x18>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <LL_ADC_IsEnabled+0x1a>
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <LL_ADC_IsCalibrationOnGoing>:
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0fdb      	lsrs	r3, r3, #31
 8001fd4:	07da      	lsls	r2, r3, #31
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2254      	movs	r2, #84	; 0x54
 8001ffc:	5c9b      	ldrb	r3, [r3, r2]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_ADCEx_Calibration_Start+0x1a>
 8002002:	2302      	movs	r3, #2
 8002004:	e06c      	b.n	80020e0 <HAL_ADCEx_Calibration_Start+0xf4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2254      	movs	r2, #84	; 0x54
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800200e:	2317      	movs	r3, #23
 8002010:	18fc      	adds	r4, r7, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0018      	movs	r0, r3
 8002016:	f7ff ff67 	bl	8001ee8 <ADC_Disable>
 800201a:	0003      	movs	r3, r0
 800201c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0018      	movs	r0, r3
 8002024:	f7ff ffbe 	bl	8001fa4 <LL_ADC_IsEnabled>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d14c      	bne.n	80020c6 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <HAL_ADCEx_Calibration_Start+0xfc>)
 8002032:	4013      	ands	r3, r2
 8002034:	2202      	movs	r2, #2
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2203      	movs	r2, #3
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2103      	movs	r1, #3
 8002054:	438a      	bics	r2, r1
 8002056:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0609      	lsls	r1, r1, #24
 8002066:	430a      	orrs	r2, r1
 8002068:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800206a:	e014      	b.n	8002096 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_ADCEx_Calibration_Start+0x100>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d90d      	bls.n	8002096 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	2212      	movs	r2, #18
 8002080:	4393      	bics	r3, r2
 8002082:	2210      	movs	r2, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2254      	movs	r2, #84	; 0x54
 800208e:	2100      	movs	r1, #0
 8002090:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e024      	b.n	80020e0 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0018      	movs	r0, r3
 800209c:	f7ff ff93 	bl	8001fc6 <LL_ADC_IsCalibrationOnGoing>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d1e3      	bne.n	800206c <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	2203      	movs	r2, #3
 80020ba:	4393      	bics	r3, r2
 80020bc:	2201      	movs	r2, #1
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58
 80020c4:	e005      	b.n	80020d2 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	2210      	movs	r2, #16
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2254      	movs	r2, #84	; 0x54
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80020da:	2317      	movs	r3, #23
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	781b      	ldrb	r3, [r3, #0]
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b007      	add	sp, #28
 80020e6:	bd90      	pop	{r4, r7, pc}
 80020e8:	fffffefd 	.word	0xfffffefd
 80020ec:	0002f1ff 	.word	0x0002f1ff

080020f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	0002      	movs	r2, r0
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800213c:	1dfb      	adds	r3, r7, #7
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b7f      	cmp	r3, #127	; 0x7f
 8002142:	d809      	bhi.n	8002158 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	001a      	movs	r2, r3
 800214a:	231f      	movs	r3, #31
 800214c:	401a      	ands	r2, r3
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <__NVIC_EnableIRQ+0x30>)
 8002150:	2101      	movs	r1, #1
 8002152:	4091      	lsls	r1, r2
 8002154:	000a      	movs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	0002      	movs	r2, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b7f      	cmp	r3, #127	; 0x7f
 8002178:	d828      	bhi.n	80021cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800217a:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <__NVIC_SetPriority+0xd4>)
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	33c0      	adds	r3, #192	; 0xc0
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	589b      	ldr	r3, [r3, r2]
 800218a:	1dfa      	adds	r2, r7, #7
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	0011      	movs	r1, r2
 8002190:	2203      	movs	r2, #3
 8002192:	400a      	ands	r2, r1
 8002194:	00d2      	lsls	r2, r2, #3
 8002196:	21ff      	movs	r1, #255	; 0xff
 8002198:	4091      	lsls	r1, r2
 800219a:	000a      	movs	r2, r1
 800219c:	43d2      	mvns	r2, r2
 800219e:	401a      	ands	r2, r3
 80021a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	019b      	lsls	r3, r3, #6
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	401a      	ands	r2, r3
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	0018      	movs	r0, r3
 80021b0:	2303      	movs	r3, #3
 80021b2:	4003      	ands	r3, r0
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021b8:	481f      	ldr	r0, [pc, #124]	; (8002238 <__NVIC_SetPriority+0xd4>)
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	430a      	orrs	r2, r1
 80021c4:	33c0      	adds	r3, #192	; 0xc0
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021ca:	e031      	b.n	8002230 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <__NVIC_SetPriority+0xd8>)
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	0019      	movs	r1, r3
 80021d4:	230f      	movs	r3, #15
 80021d6:	400b      	ands	r3, r1
 80021d8:	3b08      	subs	r3, #8
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3306      	adds	r3, #6
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	18d3      	adds	r3, r2, r3
 80021e2:	3304      	adds	r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	1dfa      	adds	r2, r7, #7
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	0011      	movs	r1, r2
 80021ec:	2203      	movs	r2, #3
 80021ee:	400a      	ands	r2, r1
 80021f0:	00d2      	lsls	r2, r2, #3
 80021f2:	21ff      	movs	r1, #255	; 0xff
 80021f4:	4091      	lsls	r1, r2
 80021f6:	000a      	movs	r2, r1
 80021f8:	43d2      	mvns	r2, r2
 80021fa:	401a      	ands	r2, r3
 80021fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	22ff      	movs	r2, #255	; 0xff
 8002204:	401a      	ands	r2, r3
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	0018      	movs	r0, r3
 800220c:	2303      	movs	r3, #3
 800220e:	4003      	ands	r3, r0
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <__NVIC_SetPriority+0xd8>)
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	001c      	movs	r4, r3
 800221c:	230f      	movs	r3, #15
 800221e:	4023      	ands	r3, r4
 8002220:	3b08      	subs	r3, #8
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	430a      	orrs	r2, r1
 8002226:	3306      	adds	r3, #6
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	18c3      	adds	r3, r0, r3
 800222c:	3304      	adds	r3, #4
 800222e:	601a      	str	r2, [r3, #0]
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b003      	add	sp, #12
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	045b      	lsls	r3, r3, #17
 8002250:	429a      	cmp	r2, r3
 8002252:	d301      	bcc.n	8002258 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002254:	2301      	movs	r3, #1
 8002256:	e010      	b.n	800227a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <SysTick_Config+0x44>)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	3a01      	subs	r2, #1
 800225e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002260:	2301      	movs	r3, #1
 8002262:	425b      	negs	r3, r3
 8002264:	2103      	movs	r1, #3
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff ff7c 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SysTick_Config+0x44>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Config+0x44>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002278:	2300      	movs	r3, #0
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	210f      	movs	r1, #15
 8002294:	187b      	adds	r3, r7, r1
 8002296:	1c02      	adds	r2, r0, #0
 8002298:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	187b      	adds	r3, r7, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	0011      	movs	r1, r2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7ff ff5d 	bl	8002164 <__NVIC_SetPriority>
}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	0002      	movs	r2, r0
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff ff33 	bl	8002130 <__NVIC_EnableIRQ>
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f7ff ffaf 	bl	8002240 <SysTick_Config>
 80022e2:	0003      	movs	r3, r0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b002      	add	sp, #8
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fa:	e147      	b.n	800258c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4091      	lsls	r1, r2
 8002306:	000a      	movs	r2, r1
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d100      	bne.n	8002314 <HAL_GPIO_Init+0x28>
 8002312:	e138      	b.n	8002586 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2203      	movs	r2, #3
 800231a:	4013      	ands	r3, r2
 800231c:	2b01      	cmp	r3, #1
 800231e:	d005      	beq.n	800232c <HAL_GPIO_Init+0x40>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	4013      	ands	r3, r2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d130      	bne.n	800238e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	409a      	lsls	r2, r3
 800233a:	0013      	movs	r3, r2
 800233c:	43da      	mvns	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	0013      	movs	r3, r2
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002362:	2201      	movs	r2, #1
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	43da      	mvns	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	2201      	movs	r2, #1
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
 8002380:	0013      	movs	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2203      	movs	r2, #3
 8002394:	4013      	ands	r3, r2
 8002396:	2b03      	cmp	r3, #3
 8002398:	d017      	beq.n	80023ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	409a      	lsls	r2, r3
 80023bc:	0013      	movs	r3, r2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2203      	movs	r2, #3
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d123      	bne.n	800241e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	58d3      	ldr	r3, [r2, r3]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2207      	movs	r2, #7
 80023e8:	4013      	ands	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	409a      	lsls	r2, r3
 80023f0:	0013      	movs	r3, r2
 80023f2:	43da      	mvns	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2107      	movs	r1, #7
 8002402:	400b      	ands	r3, r1
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	409a      	lsls	r2, r3
 8002408:	0013      	movs	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	6939      	ldr	r1, [r7, #16]
 800241c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	409a      	lsls	r2, r3
 800242c:	0013      	movs	r3, r2
 800242e:	43da      	mvns	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2203      	movs	r2, #3
 800243c:	401a      	ands	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	0013      	movs	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	4013      	ands	r3, r2
 800245c:	d100      	bne.n	8002460 <HAL_GPIO_Init+0x174>
 800245e:	e092      	b.n	8002586 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002460:	4a50      	ldr	r2, [pc, #320]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3318      	adds	r3, #24
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	589b      	ldr	r3, [r3, r2]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2203      	movs	r2, #3
 8002472:	4013      	ands	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	220f      	movs	r2, #15
 8002478:	409a      	lsls	r2, r3
 800247a:	0013      	movs	r3, r2
 800247c:	43da      	mvns	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	23a0      	movs	r3, #160	; 0xa0
 8002488:	05db      	lsls	r3, r3, #23
 800248a:	429a      	cmp	r2, r3
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0x1ca>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a45      	ldr	r2, [pc, #276]	; (80025a8 <HAL_GPIO_Init+0x2bc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x1c6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a44      	ldr	r2, [pc, #272]	; (80025ac <HAL_GPIO_Init+0x2c0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x1c2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a43      	ldr	r2, [pc, #268]	; (80025b0 <HAL_GPIO_Init+0x2c4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x1be>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x1cc>
 80024aa:	2305      	movs	r3, #5
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x1cc>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x1cc>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x1cc>
 80024b6:	2300      	movs	r3, #0
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	2103      	movs	r1, #3
 80024bc:	400a      	ands	r2, r1
 80024be:	00d2      	lsls	r2, r2, #3
 80024c0:	4093      	lsls	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80024c8:	4936      	ldr	r1, [pc, #216]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3318      	adds	r3, #24
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024d6:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	58d3      	ldr	r3, [r2, r3]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43da      	mvns	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	025b      	lsls	r3, r3, #9
 80024f0:	4013      	ands	r3, r2
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024fc:	4929      	ldr	r1, [pc, #164]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002504:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 8002506:	2384      	movs	r3, #132	; 0x84
 8002508:	58d3      	ldr	r3, [r2, r3]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43da      	mvns	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	029b      	lsls	r3, r3, #10
 800251e:	4013      	ands	r3, r2
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800252a:	491e      	ldr	r1, [pc, #120]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 800252c:	2284      	movs	r2, #132	; 0x84
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43da      	mvns	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	035b      	lsls	r3, r3, #13
 800254a:	4013      	ands	r3, r2
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43da      	mvns	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	039b      	lsls	r3, r3, #14
 8002574:	4013      	ands	r3, r2
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_GPIO_Init+0x2b8>)
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	40da      	lsrs	r2, r3
 8002594:	1e13      	subs	r3, r2, #0
 8002596:	d000      	beq.n	800259a <HAL_GPIO_Init+0x2ae>
 8002598:	e6b0      	b.n	80022fc <HAL_GPIO_Init+0x10>
  }
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b006      	add	sp, #24
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021800 	.word	0x40021800
 80025a8:	50000400 	.word	0x50000400
 80025ac:	50000800 	.word	0x50000800
 80025b0:	50000c00 	.word	0x50000c00

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	0008      	movs	r0, r1
 80025be:	0011      	movs	r1, r2
 80025c0:	1cbb      	adds	r3, r7, #2
 80025c2:	1c02      	adds	r2, r0, #0
 80025c4:	801a      	strh	r2, [r3, #0]
 80025c6:	1c7b      	adds	r3, r7, #1
 80025c8:	1c0a      	adds	r2, r1, #0
 80025ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025cc:	1c7b      	adds	r3, r7, #1
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d4:	1cbb      	adds	r3, r7, #2
 80025d6:	881a      	ldrh	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025de:	1cbb      	adds	r3, r7, #2
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b002      	add	sp, #8
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a19      	ldr	r2, [pc, #100]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	430a      	orrs	r2, r1
 8002608:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d11f      	bne.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	0013      	movs	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	189b      	adds	r3, r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4912      	ldr	r1, [pc, #72]	; (800266c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002622:	0018      	movs	r0, r3
 8002624:	f7fd fd6c 	bl	8000100 <__udivsi3>
 8002628:	0003      	movs	r3, r0
 800262a:	3301      	adds	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800262e:	e008      	b.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3b01      	subs	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e001      	b.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e009      	b.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	401a      	ands	r2, r3
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	429a      	cmp	r2, r3
 8002652:	d0ed      	beq.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	40007000 	.word	0x40007000
 8002664:	fffff9ff 	.word	0xfffff9ff
 8002668:	20000004 	.word	0x20000004
 800266c:	000f4240 	.word	0x000f4240

08002670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e2f9      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	4013      	ands	r3, r2
 800268a:	d100      	bne.n	800268e <HAL_RCC_OscConfig+0x1e>
 800268c:	e07c      	b.n	8002788 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268e:	4bc3      	ldr	r3, [pc, #780]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2238      	movs	r2, #56	; 0x38
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002698:	4bc0      	ldr	r3, [pc, #768]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2203      	movs	r2, #3
 800269e:	4013      	ands	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_OscConfig+0x3e>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d10b      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	4bb9      	ldr	r3, [pc, #740]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	029b      	lsls	r3, r3, #10
 80026bc:	4013      	ands	r3, r2
 80026be:	d062      	beq.n	8002786 <HAL_RCC_OscConfig+0x116>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d15e      	bne.n	8002786 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e2d4      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	025b      	lsls	r3, r3, #9
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x78>
 80026d8:	4bb0      	ldr	r3, [pc, #704]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4baf      	ldr	r3, [pc, #700]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	0249      	lsls	r1, r1, #9
 80026e2:	430a      	orrs	r2, r1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e020      	b.n	800272a <HAL_RCC_OscConfig+0xba>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	23a0      	movs	r3, #160	; 0xa0
 80026ee:	02db      	lsls	r3, r3, #11
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d10e      	bne.n	8002712 <HAL_RCC_OscConfig+0xa2>
 80026f4:	4ba9      	ldr	r3, [pc, #676]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4ba8      	ldr	r3, [pc, #672]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80026fa:	2180      	movs	r1, #128	; 0x80
 80026fc:	02c9      	lsls	r1, r1, #11
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	4ba6      	ldr	r3, [pc, #664]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4ba5      	ldr	r3, [pc, #660]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002708:	2180      	movs	r1, #128	; 0x80
 800270a:	0249      	lsls	r1, r1, #9
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0xba>
 8002712:	4ba2      	ldr	r3, [pc, #648]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4ba1      	ldr	r3, [pc, #644]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002718:	49a1      	ldr	r1, [pc, #644]	; (80029a0 <HAL_RCC_OscConfig+0x330>)
 800271a:	400a      	ands	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	4b9f      	ldr	r3, [pc, #636]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b9e      	ldr	r3, [pc, #632]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002724:	499f      	ldr	r1, [pc, #636]	; (80029a4 <HAL_RCC_OscConfig+0x334>)
 8002726:	400a      	ands	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d014      	beq.n	800275c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fc85 	bl	8001040 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7fe fc80 	bl	8001040 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e293      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274e:	4b93      	ldr	r3, [pc, #588]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	029b      	lsls	r3, r3, #10
 8002756:	4013      	ands	r3, r2
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xcc>
 800275a:	e015      	b.n	8002788 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fc70 	bl	8001040 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002766:	f7fe fc6b 	bl	8001040 <HAL_GetTick>
 800276a:	0002      	movs	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b64      	cmp	r3, #100	; 0x64
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e27e      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002778:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	029b      	lsls	r3, r3, #10
 8002780:	4013      	ands	r3, r2
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0xf6>
 8002784:	e000      	b.n	8002788 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002786:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d100      	bne.n	8002794 <HAL_RCC_OscConfig+0x124>
 8002792:	e099      	b.n	80028c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002794:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2238      	movs	r2, #56	; 0x38
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2203      	movs	r2, #3
 80027a4:	4013      	ands	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_OscConfig+0x144>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d002      	beq.n	80027ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d135      	bne.n	8002826 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ba:	4b78      	ldr	r3, [pc, #480]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4013      	ands	r3, r2
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x162>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e251      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b72      	ldr	r3, [pc, #456]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a74      	ldr	r2, [pc, #464]	; (80029a8 <HAL_RCC_OscConfig+0x338>)
 80027d8:	4013      	ands	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	021a      	lsls	r2, r3, #8
 80027e2:	4b6e      	ldr	r3, [pc, #440]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027ee:	4b6b      	ldr	r3, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6e      	ldr	r2, [pc, #440]	; (80029ac <HAL_RCC_OscConfig+0x33c>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002802:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0adb      	lsrs	r3, r3, #11
 8002808:	2207      	movs	r2, #7
 800280a:	4013      	ands	r3, r2
 800280c:	4a68      	ldr	r2, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x340>)
 800280e:	40da      	lsrs	r2, r3
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x344>)
 8002812:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x348>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0018      	movs	r0, r3
 800281a:	f7fe fbb5 	bl	8000f88 <HAL_InitTick>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d051      	beq.n	80028c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e227      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d030      	beq.n	8002890 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800282e:	4b5b      	ldr	r3, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5e      	ldr	r2, [pc, #376]	; (80029ac <HAL_RCC_OscConfig+0x33c>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002842:	4b56      	ldr	r3, [pc, #344]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b55      	ldr	r3, [pc, #340]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	0049      	lsls	r1, r1, #1
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fbf6 	bl	8001040 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fbf1 	bl	8001040 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e204      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4013      	ands	r3, r2
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b48      	ldr	r3, [pc, #288]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a4a      	ldr	r2, [pc, #296]	; (80029a8 <HAL_RCC_OscConfig+0x338>)
 800287e:	4013      	ands	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	021a      	lsls	r2, r3, #8
 8002888:	4b44      	ldr	r3, [pc, #272]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e01b      	b.n	80028c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002890:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002896:	4949      	ldr	r1, [pc, #292]	; (80029bc <HAL_RCC_OscConfig+0x34c>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fbd0 	bl	8001040 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7fe fbcb 	bl	8001040 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1de      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b8:	4b38      	ldr	r3, [pc, #224]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4013      	ands	r3, r2
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x236>
 80028c4:	e000      	b.n	80028c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2208      	movs	r2, #8
 80028ce:	4013      	ands	r3, r2
 80028d0:	d047      	beq.n	8002962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028d2:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2238      	movs	r2, #56	; 0x38
 80028d8:	4013      	ands	r3, r2
 80028da:	2b18      	cmp	r3, #24
 80028dc:	d10a      	bne.n	80028f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	2202      	movs	r2, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d03c      	beq.n	8002962 <HAL_RCC_OscConfig+0x2f2>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d138      	bne.n	8002962 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e1c0      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d019      	beq.n	8002930 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 80028fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002900:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002902:	2101      	movs	r1, #1
 8002904:	430a      	orrs	r2, r1
 8002906:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fb9a 	bl	8001040 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002912:	f7fe fb95 	bl	8001040 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e1a8      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002928:	2202      	movs	r2, #2
 800292a:	4013      	ands	r3, r2
 800292c:	d0f1      	beq.n	8002912 <HAL_RCC_OscConfig+0x2a2>
 800292e:	e018      	b.n	8002962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002936:	2101      	movs	r1, #1
 8002938:	438a      	bics	r2, r1
 800293a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293c:	f7fe fb80 	bl	8001040 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002946:	f7fe fb7b 	bl	8001040 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e18e      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 800295a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295c:	2202      	movs	r2, #2
 800295e:	4013      	ands	r3, r2
 8002960:	d1f1      	bne.n	8002946 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2204      	movs	r2, #4
 8002968:	4013      	ands	r3, r2
 800296a:	d100      	bne.n	800296e <HAL_RCC_OscConfig+0x2fe>
 800296c:	e0c6      	b.n	8002afc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296e:	231f      	movs	r3, #31
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2238      	movs	r2, #56	; 0x38
 800297c:	4013      	ands	r3, r2
 800297e:	2b20      	cmp	r3, #32
 8002980:	d11e      	bne.n	80029c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_RCC_OscConfig+0x32c>)
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	d100      	bne.n	800298e <HAL_RCC_OscConfig+0x31e>
 800298c:	e0b6      	b.n	8002afc <HAL_RCC_OscConfig+0x48c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d000      	beq.n	8002998 <HAL_RCC_OscConfig+0x328>
 8002996:	e0b1      	b.n	8002afc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e16c      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
 800299c:	40021000 	.word	0x40021000
 80029a0:	fffeffff 	.word	0xfffeffff
 80029a4:	fffbffff 	.word	0xfffbffff
 80029a8:	ffff80ff 	.word	0xffff80ff
 80029ac:	ffffc7ff 	.word	0xffffc7ff
 80029b0:	00f42400 	.word	0x00f42400
 80029b4:	20000004 	.word	0x20000004
 80029b8:	20000008 	.word	0x20000008
 80029bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029c0:	4baf      	ldr	r3, [pc, #700]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 80029c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	055b      	lsls	r3, r3, #21
 80029c8:	4013      	ands	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_OscConfig+0x360>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x362>
 80029d0:	2300      	movs	r3, #0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d011      	beq.n	80029fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	4baa      	ldr	r3, [pc, #680]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 80029d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029da:	4ba9      	ldr	r3, [pc, #676]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	0549      	lsls	r1, r1, #21
 80029e0:	430a      	orrs	r2, r1
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e4:	4ba6      	ldr	r3, [pc, #664]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 80029e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	055b      	lsls	r3, r3, #21
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80029f2:	231f      	movs	r3, #31
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fa:	4ba2      	ldr	r3, [pc, #648]	; (8002c84 <HAL_RCC_OscConfig+0x614>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a06:	4b9f      	ldr	r3, [pc, #636]	; (8002c84 <HAL_RCC_OscConfig+0x614>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b9e      	ldr	r3, [pc, #632]	; (8002c84 <HAL_RCC_OscConfig+0x614>)
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	0049      	lsls	r1, r1, #1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fb14 	bl	8001040 <HAL_GetTick>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7fe fb0f 	bl	8001040 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e122      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a30:	4b94      	ldr	r3, [pc, #592]	; (8002c84 <HAL_RCC_OscConfig+0x614>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3e2>
 8002a44:	4b8e      	ldr	r3, [pc, #568]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a48:	4b8d      	ldr	r3, [pc, #564]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x41c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x404>
 8002a5a:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a5e:	4b88      	ldr	r3, [pc, #544]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a60:	2104      	movs	r1, #4
 8002a62:	430a      	orrs	r2, r1
 8002a64:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a66:	4b86      	ldr	r3, [pc, #536]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a6a:	4b85      	ldr	r3, [pc, #532]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x41c>
 8002a74:	4b82      	ldr	r3, [pc, #520]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a78:	4b81      	ldr	r3, [pc, #516]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a80:	4b7f      	ldr	r3, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a84:	4b7e      	ldr	r3, [pc, #504]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002a86:	2104      	movs	r1, #4
 8002a88:	438a      	bics	r2, r1
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d014      	beq.n	8002abe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fad4 	bl	8001040 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe facf 	bl	8001040 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a77      	ldr	r2, [pc, #476]	; (8002c88 <HAL_RCC_OscConfig+0x618>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e0e1      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x42e>
 8002abc:	e013      	b.n	8002ae6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fabf 	bl	8001040 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac6:	e009      	b.n	8002adc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe faba 	bl	8001040 <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	4a6d      	ldr	r2, [pc, #436]	; (8002c88 <HAL_RCC_OscConfig+0x618>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af4:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002af6:	4965      	ldr	r1, [pc, #404]	; (8002c8c <HAL_RCC_OscConfig+0x61c>)
 8002af8:	400a      	ands	r2, r1
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d100      	bne.n	8002b06 <HAL_RCC_OscConfig+0x496>
 8002b04:	e0b6      	b.n	8002c74 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b06:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2238      	movs	r2, #56	; 0x38
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d100      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4a4>
 8002b12:	e07e      	b.n	8002c12 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d153      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b22:	495b      	ldr	r1, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x620>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe fa8a 	bl	8001040 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe fa85 	bl	8001040 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e098      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b44:	4b4e      	ldr	r3, [pc, #312]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	049b      	lsls	r3, r3, #18
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b50:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <HAL_RCC_OscConfig+0x624>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1a      	ldr	r2, [r3, #32]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	431a      	orrs	r2, r3
 8002b78:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7e:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0449      	lsls	r1, r1, #17
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	0549      	lsls	r1, r1, #21
 8002b96:	430a      	orrs	r2, r1
 8002b98:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fa51 	bl	8001040 <HAL_GetTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fa4c 	bl	8001040 <HAL_GetTick>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e05f      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	049b      	lsls	r3, r3, #18
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x534>
 8002bc2:	e057      	b.n	8002c74 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002bca:	4931      	ldr	r1, [pc, #196]	; (8002c90 <HAL_RCC_OscConfig+0x620>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	438a      	bics	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002be2:	492d      	ldr	r1, [pc, #180]	; (8002c98 <HAL_RCC_OscConfig+0x628>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fa2a 	bl	8001040 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7fe fa25 	bl	8001040 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e038      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	049b      	lsls	r3, r3, #18
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x582>
 8002c10:	e030      	b.n	8002c74 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e02b      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_RCC_OscConfig+0x610>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2203      	movs	r2, #3
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d11e      	bne.n	8002c70 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2270      	movs	r2, #112	; 0x70
 8002c36:	401a      	ands	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d117      	bne.n	8002c70 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	23fe      	movs	r3, #254	; 0xfe
 8002c44:	01db      	lsls	r3, r3, #7
 8002c46:	401a      	ands	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d10e      	bne.n	8002c70 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	23f8      	movs	r3, #248	; 0xf8
 8002c56:	039b      	lsls	r3, r3, #14
 8002c58:	401a      	ands	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	0f5b      	lsrs	r3, r3, #29
 8002c66:	075a      	lsls	r2, r3, #29
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b008      	add	sp, #32
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40007000 	.word	0x40007000
 8002c88:	00001388 	.word	0x00001388
 8002c8c:	efffffff 	.word	0xefffffff
 8002c90:	feffffff 	.word	0xfeffffff
 8002c94:	1fc1808c 	.word	0x1fc1808c
 8002c98:	effeffff 	.word	0xeffeffff

08002c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0e9      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d91e      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b73      	ldr	r3, [pc, #460]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	4b70      	ldr	r3, [pc, #448]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe f9b6 	bl	8001040 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cd8:	e009      	b.n	8002cee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cda:	f7fe f9b1 	bl	8001040 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	4a6a      	ldr	r2, [pc, #424]	; (8002e90 <HAL_RCC_ClockConfig+0x1f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0ca      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cee:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1ee      	bne.n	8002cda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d015      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d006      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d10:	4b60      	ldr	r3, [pc, #384]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	4b5f      	ldr	r3, [pc, #380]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d16:	21e0      	movs	r1, #224	; 0xe0
 8002d18:	01c9      	lsls	r1, r1, #7
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4a5d      	ldr	r2, [pc, #372]	; (8002e98 <HAL_RCC_ClockConfig+0x1fc>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	0019      	movs	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d057      	beq.n	8002dec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d44:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	029b      	lsls	r3, r3, #10
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d12b      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e097      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	049b      	lsls	r3, r3, #18
 8002d64:	4013      	ands	r3, r2
 8002d66:	d11f      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e08b      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d74:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d113      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e07f      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8c:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	2202      	movs	r2, #2
 8002d92:	4013      	ands	r3, r2
 8002d94:	d108      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e074      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	4b3e      	ldr	r3, [pc, #248]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4013      	ands	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e06d      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2207      	movs	r2, #7
 8002dae:	4393      	bics	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fe f940 	bl	8001040 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc4:	e009      	b.n	8002dda <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc6:	f7fe f93b 	bl	8001040 <HAL_GetTick>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <HAL_RCC_ClockConfig+0x1f4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e054      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2238      	movs	r2, #56	; 0x38
 8002de0:	401a      	ands	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1ec      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2207      	movs	r2, #7
 8002df2:	4013      	ands	r3, r2
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d21e      	bcs.n	8002e38 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2207      	movs	r2, #7
 8002e00:	4393      	bics	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe f918 	bl	8001040 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e14:	e009      	b.n	8002e2a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e16:	f7fe f913 	bl	8001040 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_RCC_ClockConfig+0x1f4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e02c      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2207      	movs	r2, #7
 8002e30:	4013      	ands	r3, r2
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <HAL_RCC_ClockConfig+0x200>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e56:	f000 f829 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e5a:	0001      	movs	r1, r0
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	220f      	movs	r2, #15
 8002e64:	401a      	ands	r2, r3
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x204>)
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	58d3      	ldr	r3, [r2, r3]
 8002e6c:	221f      	movs	r2, #31
 8002e6e:	4013      	ands	r3, r2
 8002e70:	000a      	movs	r2, r1
 8002e72:	40da      	lsrs	r2, r3
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x208>)
 8002e76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x20c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7fe f883 	bl	8000f88 <HAL_InitTick>
 8002e82:	0003      	movs	r3, r0
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b004      	add	sp, #16
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	00001388 	.word	0x00001388
 8002e94:	40021000 	.word	0x40021000
 8002e98:	fffff0ff 	.word	0xfffff0ff
 8002e9c:	ffff8fff 	.word	0xffff8fff
 8002ea0:	080032c8 	.word	0x080032c8
 8002ea4:	20000004 	.word	0x20000004
 8002ea8:	20000008 	.word	0x20000008

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eb2:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2238      	movs	r2, #56	; 0x38
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d10f      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ebc:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0adb      	lsrs	r3, r3, #11
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	0013      	movs	r3, r2
 8002ecc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ece:	6839      	ldr	r1, [r7, #0]
 8002ed0:	4835      	ldr	r0, [pc, #212]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ed2:	f7fd f915 	bl	8000100 <__udivsi3>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	e05d      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2238      	movs	r2, #56	; 0x38
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <HAL_RCC_GetSysClockFreq+0x100>)
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	e054      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2238      	movs	r2, #56	; 0x38
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d138      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2203      	movs	r2, #3
 8002f00:	4013      	ands	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f04:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4824      	ldr	r0, [pc, #144]	; (8002fac <HAL_RCC_GetSysClockFreq+0x100>)
 8002f1c:	f7fd f8f0 	bl	8000100 <__udivsi3>
 8002f20:	0003      	movs	r3, r0
 8002f22:	0019      	movs	r1, r3
 8002f24:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	227f      	movs	r2, #127	; 0x7f
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	434b      	muls	r3, r1
 8002f30:	617b      	str	r3, [r7, #20]
        break;
 8002f32:	e00d      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	481c      	ldr	r0, [pc, #112]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f38:	f7fd f8e2 	bl	8000100 <__udivsi3>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	0019      	movs	r1, r3
 8002f40:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	227f      	movs	r2, #127	; 0x7f
 8002f48:	4013      	ands	r3, r2
 8002f4a:	434b      	muls	r3, r1
 8002f4c:	617b      	str	r3, [r7, #20]
        break;
 8002f4e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	0f5b      	lsrs	r3, r3, #29
 8002f56:	2207      	movs	r2, #7
 8002f58:	4013      	ands	r3, r2
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	6978      	ldr	r0, [r7, #20]
 8002f62:	f7fd f8cd 	bl	8000100 <__udivsi3>
 8002f66:	0003      	movs	r3, r0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e015      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2238      	movs	r2, #56	; 0x38
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d103      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2238      	movs	r2, #56	; 0x38
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b18      	cmp	r3, #24
 8002f8a:	d103      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f8c:	23fa      	movs	r3, #250	; 0xfa
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e001      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f98:	693b      	ldr	r3, [r7, #16]
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b006      	add	sp, #24
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fb8:	2313      	movs	r3, #19
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc0:	2312      	movs	r3, #18
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	029b      	lsls	r3, r3, #10
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fd4:	e0a3      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2011      	movs	r0, #17
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b86      	ldr	r3, [pc, #536]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	055b      	lsls	r3, r3, #21
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d110      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	4b83      	ldr	r3, [pc, #524]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fee:	4b82      	ldr	r3, [pc, #520]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	0549      	lsls	r1, r1, #21
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ff8:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	055b      	lsls	r3, r3, #21
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003006:	183b      	adds	r3, r7, r0
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b7b      	ldr	r3, [pc, #492]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b7a      	ldr	r3, [pc, #488]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	0049      	lsls	r1, r1, #1
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800301a:	f7fe f811 	bl	8001040 <HAL_GetTick>
 800301e:	0003      	movs	r3, r0
 8003020:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003022:	e00b      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003024:	f7fe f80c 	bl	8001040 <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d904      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003032:	2313      	movs	r3, #19
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2203      	movs	r2, #3
 8003038:	701a      	strb	r2, [r3, #0]
        break;
 800303a:	e005      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800303c:	4b6f      	ldr	r3, [pc, #444]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d0ed      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003048:	2313      	movs	r3, #19
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d154      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003052:	4b69      	ldr	r3, [pc, #420]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4013      	ands	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d019      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	429a      	cmp	r2, r3
 800306c:	d014      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800306e:	4b62      	ldr	r3, [pc, #392]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	4a63      	ldr	r2, [pc, #396]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003074:	4013      	ands	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003078:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800307a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	0249      	lsls	r1, r1, #9
 8003082:	430a      	orrs	r2, r1
 8003084:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003086:	4b5c      	ldr	r3, [pc, #368]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800308a:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800308c:	495d      	ldr	r1, [pc, #372]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800308e:	400a      	ands	r2, r1
 8003090:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003092:	4b59      	ldr	r3, [pc, #356]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2201      	movs	r2, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d016      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fd ffce 	bl	8001040 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	e00c      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fd ffc9 	bl	8001040 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	4a54      	ldr	r2, [pc, #336]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d904      	bls.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80030ba:	2313      	movs	r3, #19
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2203      	movs	r2, #3
 80030c0:	701a      	strb	r2, [r3, #0]
            break;
 80030c2:	e004      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c4:	4b4c      	ldr	r3, [pc, #304]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	2202      	movs	r2, #2
 80030ca:	4013      	ands	r3, r2
 80030cc:	d0ed      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80030ce:	2313      	movs	r3, #19
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10a      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d8:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	4a48      	ldr	r2, [pc, #288]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	4b44      	ldr	r3, [pc, #272]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80030ec:	e00c      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ee:	2312      	movs	r3, #18
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2213      	movs	r2, #19
 80030f4:	18ba      	adds	r2, r7, r2
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e005      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	2312      	movs	r3, #18
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2213      	movs	r2, #19
 8003102:	18ba      	adds	r2, r7, r2
 8003104:	7812      	ldrb	r2, [r2, #0]
 8003106:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003108:	2311      	movs	r3, #17
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d105      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003116:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003118:	493c      	ldr	r1, [pc, #240]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800311a:	400a      	ands	r2, r1
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	4013      	ands	r3, r2
 8003126:	d009      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	2203      	movs	r2, #3
 800312e:	4393      	bics	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003138:	430a      	orrs	r2, r1
 800313a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2202      	movs	r2, #2
 8003142:	4013      	ands	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	220c      	movs	r2, #12
 800314c:	4393      	bics	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003156:	430a      	orrs	r2, r1
 8003158:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2220      	movs	r2, #32
 8003160:	4013      	ands	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	4a29      	ldr	r2, [pc, #164]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	4013      	ands	r3, r2
 800316c:	0019      	movs	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003174:	430a      	orrs	r2, r1
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	01db      	lsls	r3, r3, #7
 8003180:	4013      	ands	r3, r2
 8003182:	d015      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003184:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	0899      	lsrs	r1, r3, #2
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003192:	430a      	orrs	r2, r1
 8003194:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	05db      	lsls	r3, r3, #23
 800319e:	429a      	cmp	r2, r3
 80031a0:	d106      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	0249      	lsls	r1, r1, #9
 80031ac:	430a      	orrs	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4013      	ands	r3, r2
 80031ba:	d016      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	01db      	lsls	r3, r3, #7
 80031d8:	429a      	cmp	r2, r3
 80031da:	d106      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	0249      	lsls	r1, r1, #9
 80031e6:	430a      	orrs	r2, r1
 80031e8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031ea:	2312      	movs	r3, #18
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	781b      	ldrb	r3, [r3, #0]
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b006      	add	sp, #24
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40007000 	.word	0x40007000
 8003200:	fffffcff 	.word	0xfffffcff
 8003204:	fffeffff 	.word	0xfffeffff
 8003208:	00001388 	.word	0x00001388
 800320c:	efffffff 	.word	0xefffffff
 8003210:	ffffcfff 	.word	0xffffcfff
 8003214:	ffff3fff 	.word	0xffff3fff

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	2600      	movs	r6, #0
 800321c:	4d0c      	ldr	r5, [pc, #48]	; (8003250 <__libc_init_array+0x38>)
 800321e:	4c0d      	ldr	r4, [pc, #52]	; (8003254 <__libc_init_array+0x3c>)
 8003220:	1b64      	subs	r4, r4, r5
 8003222:	10a4      	asrs	r4, r4, #2
 8003224:	42a6      	cmp	r6, r4
 8003226:	d109      	bne.n	800323c <__libc_init_array+0x24>
 8003228:	2600      	movs	r6, #0
 800322a:	f000 f821 	bl	8003270 <_init>
 800322e:	4d0a      	ldr	r5, [pc, #40]	; (8003258 <__libc_init_array+0x40>)
 8003230:	4c0a      	ldr	r4, [pc, #40]	; (800325c <__libc_init_array+0x44>)
 8003232:	1b64      	subs	r4, r4, r5
 8003234:	10a4      	asrs	r4, r4, #2
 8003236:	42a6      	cmp	r6, r4
 8003238:	d105      	bne.n	8003246 <__libc_init_array+0x2e>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	00b3      	lsls	r3, r6, #2
 800323e:	58eb      	ldr	r3, [r5, r3]
 8003240:	4798      	blx	r3
 8003242:	3601      	adds	r6, #1
 8003244:	e7ee      	b.n	8003224 <__libc_init_array+0xc>
 8003246:	00b3      	lsls	r3, r6, #2
 8003248:	58eb      	ldr	r3, [r5, r3]
 800324a:	4798      	blx	r3
 800324c:	3601      	adds	r6, #1
 800324e:	e7f2      	b.n	8003236 <__libc_init_array+0x1e>
 8003250:	08003308 	.word	0x08003308
 8003254:	08003308 	.word	0x08003308
 8003258:	08003308 	.word	0x08003308
 800325c:	0800330c 	.word	0x0800330c

08003260 <memset>:
 8003260:	0003      	movs	r3, r0
 8003262:	1882      	adds	r2, r0, r2
 8003264:	4293      	cmp	r3, r2
 8003266:	d100      	bne.n	800326a <memset+0xa>
 8003268:	4770      	bx	lr
 800326a:	7019      	strb	r1, [r3, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	e7f9      	b.n	8003264 <memset+0x4>

08003270 <_init>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr

0800327c <_fini>:
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003282:	bc08      	pop	{r3}
 8003284:	469e      	mov	lr, r3
 8003286:	4770      	bx	lr
