
dtSerialIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f74  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b4  080040b4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080040b4  080040b4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040b4  080040b4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080040bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000020  080040dc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080040dc  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bed3  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec4  00000000  00000000  0002bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002e658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014649  00000000  00000000  0002ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bce6  00000000  00000000  00043451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f201  00000000  00000000  0004f137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce338  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c64  00000000  00000000  000ce388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000020 	.word	0x20000020
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004014 	.word	0x08004014

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000024 	.word	0x20000024
 80000fc:	08004014 	.word	0x08004014

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	240c      	movs	r4, #12
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2314      	movs	r3, #20
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f003 fe01 	bl	8004004 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b28      	ldr	r3, [pc, #160]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000406:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000408:	2104      	movs	r1, #4
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
 800040e:	4b25      	ldr	r3, [pc, #148]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000412:	2204      	movs	r2, #4
 8000414:	4013      	ands	r3, r2
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b22      	ldr	r3, [pc, #136]	; (80004a4 <MX_GPIO_Init+0xb8>)
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <MX_GPIO_Init+0xb8>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000432:	23a0      	movs	r3, #160	; 0xa0
 8000434:	05db      	lsls	r3, r3, #23
 8000436:	2200      	movs	r2, #0
 8000438:	2120      	movs	r1, #32
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fe24 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2280      	movs	r2, #128	; 0x80
 8000444:	0192      	lsls	r2, r2, #6
 8000446:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2284      	movs	r2, #132	; 0x84
 800044c:	0392      	lsls	r2, r2, #14
 800044e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000456:	193b      	adds	r3, r7, r4
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <MX_GPIO_Init+0xbc>)
 800045a:	0019      	movs	r1, r3
 800045c:	0010      	movs	r0, r2
 800045e:	f000 fcaf 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2220      	movs	r2, #32
 8000468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2201      	movs	r2, #1
 800046e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	187a      	adds	r2, r7, r1
 800047e:	23a0      	movs	r3, #160	; 0xa0
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fc9b 	bl	8000dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2007      	movs	r0, #7
 8000490:	f000 fb98 	bl	8000bc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000494:	2007      	movs	r0, #7
 8000496:	f000 fbaa 	bl	8000bee <HAL_NVIC_EnableIRQ>

}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b009      	add	sp, #36	; 0x24
 80004a0:	bd90      	pop	{r4, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000
 80004a8:	50000800 	.word	0x50000800

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa1c 	bl	80008ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f854 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f7ff ff98 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004bc:	f000 f936 	bl	800072c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!UserButtonStatus){
 80004c0:	e008      	b.n	80004d4 <main+0x28>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004c2:	23a0      	movs	r3, #160	; 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2120      	movs	r1, #32
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fdfa 	bl	80010c2 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 80004ce:	20c8      	movs	r0, #200	; 0xc8
 80004d0:	f000 fa92 	bl	80009f8 <HAL_Delay>
	  while(!UserButtonStatus){
 80004d4:	4b1d      	ldr	r3, [pc, #116]	; (800054c <main+0xa0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f2      	beq.n	80004c2 <main+0x16>
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	2200      	movs	r2, #0
 80004e2:	2120      	movs	r1, #32
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fdcf 	bl	8001088 <HAL_GPIO_WritePin>

	  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)messageb, TXBUFFERSIZE) != HAL_OK){
 80004ea:	4919      	ldr	r1, [pc, #100]	; (8000550 <main+0xa4>)
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <main+0xa8>)
 80004ee:	2212      	movs	r2, #18
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 fd87 	bl	8002004 <HAL_UART_Receive_IT>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <main+0x52>
	  		  Error_Handler();
 80004fa:	f000 f8af 	bl	800065c <Error_Handler>
	  }

	  if(HAL_UART_Transmit_IT(&huart2, (uint8_t *)message, TXBUFFERSIZE) != HAL_OK){
 80004fe:	4916      	ldr	r1, [pc, #88]	; (8000558 <main+0xac>)
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <main+0xa8>)
 8000502:	2212      	movs	r2, #18
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fcc1 	bl	8001e8c <HAL_UART_Transmit_IT>
 800050a:	1e03      	subs	r3, r0, #0
 800050c:	d001      	beq.n	8000512 <main+0x66>
		  Error_Handler();
 800050e:	f000 f8a5 	bl	800065c <Error_Handler>
	  }

	  HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f000 fa70 	bl	80009f8 <HAL_Delay>

	  while (BufferLength < TXBUFFERSIZE){
 8000518:	e010      	b.n	800053c <main+0x90>

	      if (message[BufferLength] != messageb[BufferLength]){
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <main+0xb0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <main+0xac>)
 8000520:	5cd2      	ldrb	r2, [r2, r3]
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <main+0xb0>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	490a      	ldr	r1, [pc, #40]	; (8000550 <main+0xa4>)
 8000528:	5ccb      	ldrb	r3, [r1, r3]
 800052a:	429a      	cmp	r2, r3
 800052c:	d001      	beq.n	8000532 <main+0x86>
	    	  Error_Handler();
 800052e:	f000 f895 	bl	800065c <Error_Handler>
	      }

	      BufferLength++;
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <main+0xb0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <main+0xb0>)
 800053a:	601a      	str	r2, [r3, #0]
	  while (BufferLength < TXBUFFERSIZE){
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <main+0xb0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b11      	cmp	r3, #17
 8000542:	d9ea      	bls.n	800051a <main+0x6e>
	  }
	  BufferLength = 0;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <main+0xb0>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
	  while(!UserButtonStatus){
 800054a:	e7c3      	b.n	80004d4 <main+0x28>
 800054c:	20000040 	.word	0x20000040
 8000550:	20000044 	.word	0x20000044
 8000554:	2000005c 	.word	0x2000005c
 8000558:	20000000 	.word	0x20000000
 800055c:	20000058 	.word	0x20000058

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b093      	sub	sp, #76	; 0x4c
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	2414      	movs	r4, #20
 8000568:	193b      	adds	r3, r7, r4
 800056a:	0018      	movs	r0, r3
 800056c:	2334      	movs	r3, #52	; 0x34
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f003 fd47 	bl	8004004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	0018      	movs	r0, r3
 800057a:	2310      	movs	r3, #16
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f003 fd40 	bl	8004004 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fde9 	bl	8001160 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2202      	movs	r2, #2
 8000592:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2240      	movs	r2, #64	; 0x40
 80005a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fe21 	bl	80011f8 <HAL_RCC_OscConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005ba:	f000 f84f 	bl	800065c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2207      	movs	r2, #7
 80005c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2100      	movs	r1, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 f922 	bl	8001824 <HAL_RCC_ClockConfig>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005e4:	f000 f83a 	bl	800065c <Error_Handler>
  }
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b013      	add	sp, #76	; 0x4c
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	0002      	movs	r2, r0
 80005f8:	1dbb      	adds	r3, r7, #6
 80005fa:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_13){
 80005fc:	1dbb      	adds	r3, r7, #6
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	019b      	lsls	r3, r3, #6
 8000604:	429a      	cmp	r2, r3
 8000606:	d102      	bne.n	800060e <HAL_GPIO_EXTI_Falling_Callback+0x1e>
	  UserButtonStatus = 1;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_GPIO_EXTI_Falling_Callback+0x28>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]


  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	20000040 	.word	0x20000040

0800061c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	UartReady = SET;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <HAL_UART_TxCpltCallback+0x1c>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
	UserButtonStatus = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_UART_TxCpltCallback+0x20>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000003c 	.word	0x2000003c
 800063c:	20000040 	.word	0x20000040

08000640 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  RxUartComplete = SET;
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <HAL_UART_RxCpltCallback+0x18>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	2000003d 	.word	0x2000003d

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000664:	23a0      	movs	r3, #160	; 0xa0
 8000666:	05db      	lsls	r3, r3, #23
 8000668:	2201      	movs	r2, #1
 800066a:	2120      	movs	r1, #32
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fd0b 	bl	8001088 <HAL_GPIO_WritePin>
 8000672:	e7f7      	b.n	8000664 <Error_Handler+0x8>

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_MspInit+0x4c>)
 800067c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_MspInit+0x4c>)
 8000680:	2101      	movs	r1, #1
 8000682:	430a      	orrs	r2, r1
 8000684:	641a      	str	r2, [r3, #64]	; 0x40
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_MspInit+0x4c>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	2201      	movs	r2, #1
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <HAL_MspInit+0x4c>)
 8000694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_MspInit+0x4c>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0549      	lsls	r1, r1, #21
 800069c:	430a      	orrs	r2, r1
 800069e:	63da      	str	r2, [r3, #60]	; 0x3c
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <HAL_MspInit+0x4c>)
 80006a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	055b      	lsls	r3, r3, #21
 80006a8:	4013      	ands	r3, r2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80006ae:	23c0      	movs	r3, #192	; 0xc0
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 f9c4 	bl	8000a40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 f96a 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	019b      	lsls	r3, r3, #6
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fcfc 	bl	80010f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <USART2_IRQHandler+0x14>)
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fcda 	bl	80020c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	2000005c 	.word	0x2000005c

08000720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000732:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <MX_USART2_UART_Init+0x98>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000738:	22e1      	movs	r2, #225	; 0xe1
 800073a:	0252      	lsls	r2, r2, #9
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fb32 	bl	8001de0 <HAL_UART_Init>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000780:	f7ff ff6c 	bl	800065c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000786:	2100      	movs	r1, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f003 fb37 	bl	8003dfc <HAL_UARTEx_SetTxFifoThreshold>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000792:	f7ff ff63 	bl	800065c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 8000798:	2100      	movs	r1, #0
 800079a:	0018      	movs	r0, r3
 800079c:	f003 fb6e 	bl	8003e7c <HAL_UARTEx_SetRxFifoThreshold>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f7ff ff5a 	bl	800065c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x94>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f003 faec 	bl	8003d88 <HAL_UARTEx_DisableFifoMode>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f7ff ff52 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	2000005c 	.word	0x2000005c
 80007c4:	40004400 	.word	0x40004400

080007c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b091      	sub	sp, #68	; 0x44
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	232c      	movs	r3, #44	; 0x2c
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	0018      	movs	r0, r3
 80007d6:	2314      	movs	r3, #20
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f003 fc12 	bl	8004004 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	2410      	movs	r4, #16
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	231c      	movs	r3, #28
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f003 fc0a 	bl	8004004 <memset>
  if(uartHandle->Instance==USART2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <HAL_UART_MspInit+0xc8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d146      	bne.n	8000888 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2202      	movs	r2, #2
 80007fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	f001 f9b5 	bl	8001b78 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000812:	f7ff ff23 	bl	800065c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <HAL_UART_MspInit+0xcc>)
 8000818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800081a:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <HAL_UART_MspInit+0xcc>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0289      	lsls	r1, r1, #10
 8000820:	430a      	orrs	r2, r1
 8000822:	63da      	str	r2, [r3, #60]	; 0x3c
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_UART_MspInit+0xcc>)
 8000826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	029b      	lsls	r3, r3, #10
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_UART_MspInit+0xcc>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0xcc>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_UART_MspInit+0xcc>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800084a:	212c      	movs	r1, #44	; 0x2c
 800084c:	187b      	adds	r3, r7, r1
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2202      	movs	r2, #2
 8000856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2201      	movs	r2, #1
 8000868:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	187a      	adds	r2, r7, r1
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f000 faa4 	bl	8000dc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	201c      	movs	r0, #28
 800087e:	f000 f9a1 	bl	8000bc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000882:	201c      	movs	r0, #28
 8000884:	f000 f9b3 	bl	8000bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b011      	add	sp, #68	; 0x44
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800089a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800089c:	f7ff ff40 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LoopForever+0xe>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	; (80008e4 <LoopForever+0x16>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008c6:	f003 fb79 	bl	8003fbc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008ca:	f7ff fdef 	bl	80004ac <main>

080008ce <LoopForever>:

LoopForever:
  b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   r0, =_estack
 80008d0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80008dc:	080040bc 	.word	0x080040bc
  ldr r2, =_sbss
 80008e0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80008e4:	200000f0 	.word	0x200000f0

080008e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_IRQHandler>
	...

080008ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_Init+0x3c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_Init+0x3c>)
 80008fe:	2180      	movs	r1, #128	; 0x80
 8000900:	0049      	lsls	r1, r1, #1
 8000902:	430a      	orrs	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000906:	2003      	movs	r0, #3
 8000908:	f000 f810 	bl	800092c <HAL_InitTick>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d003      	beq.n	8000918 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e001      	b.n	800091c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000918:	f7ff feac 	bl	8000674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	230f      	movs	r3, #15
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_InitTick+0x88>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d02b      	beq.n	800099c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_InitTick+0x8c>)
 8000946:	681c      	ldr	r4, [r3, #0]
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_InitTick+0x88>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	0019      	movs	r1, r3
 800094e:	23fa      	movs	r3, #250	; 0xfa
 8000950:	0098      	lsls	r0, r3, #2
 8000952:	f7ff fbd5 	bl	8000100 <__udivsi3>
 8000956:	0003      	movs	r3, r0
 8000958:	0019      	movs	r1, r3
 800095a:	0020      	movs	r0, r4
 800095c:	f7ff fbd0 	bl	8000100 <__udivsi3>
 8000960:	0003      	movs	r3, r0
 8000962:	0018      	movs	r0, r3
 8000964:	f000 f953 	bl	8000c0e <HAL_SYSTICK_Config>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d112      	bne.n	8000992 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d80a      	bhi.n	8000988 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	2200      	movs	r2, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f000 f922 	bl	8000bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_InitTick+0x90>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	e00d      	b.n	80009a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e008      	b.n	80009a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000992:	230f      	movs	r3, #15
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e003      	b.n	80009a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800099c:	230f      	movs	r3, #15
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009a4:	230f      	movs	r3, #15
 80009a6:	18fb      	adds	r3, r7, r3
 80009a8:	781b      	ldrb	r3, [r3, #0]
}
 80009aa:	0018      	movs	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b005      	add	sp, #20
 80009b0:	bd90      	pop	{r4, r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	2000001c 	.word	0x2000001c
 80009b8:	20000014 	.word	0x20000014
 80009bc:	20000018 	.word	0x20000018

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	001a      	movs	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	18d2      	adds	r2, r2, r3
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	2000001c 	.word	0x2000001c
 80009e0:	200000ec 	.word	0x200000ec

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	200000ec 	.word	0x200000ec

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	0003      	movs	r3, r0
 8000a06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	001a      	movs	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	189b      	adds	r3, r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	f7ff ffe0 	bl	80009e4 <HAL_GetTick>
 8000a24:	0002      	movs	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b004      	add	sp, #16
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	2000001c 	.word	0x2000001c

08000a40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000a4e:	4013      	ands	r3, r2
 8000a50:	0019      	movs	r1, r3
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	430a      	orrs	r2, r1
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40010000 	.word	0x40010000
 8000a68:	fffff9ff 	.word	0xfffff9ff

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	0002      	movs	r2, r0
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a7e:	d809      	bhi.n	8000a94 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	001a      	movs	r2, r3
 8000a86:	231f      	movs	r3, #31
 8000a88:	401a      	ands	r2, r3
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_EnableIRQ+0x30>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4091      	lsls	r1, r2
 8000a90:	000a      	movs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab4:	d828      	bhi.n	8000b08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab6:	4a2f      	ldr	r2, [pc, #188]	; (8000b74 <__NVIC_SetPriority+0xd4>)
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	33c0      	adds	r3, #192	; 0xc0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	589b      	ldr	r3, [r3, r2]
 8000ac6:	1dfa      	adds	r2, r7, #7
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	0011      	movs	r1, r2
 8000acc:	2203      	movs	r2, #3
 8000ace:	400a      	ands	r2, r1
 8000ad0:	00d2      	lsls	r2, r2, #3
 8000ad2:	21ff      	movs	r1, #255	; 0xff
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	43d2      	mvns	r2, r2
 8000ada:	401a      	ands	r2, r3
 8000adc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0018      	movs	r0, r3
 8000aec:	2303      	movs	r3, #3
 8000aee:	4003      	ands	r3, r0
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af4:	481f      	ldr	r0, [pc, #124]	; (8000b74 <__NVIC_SetPriority+0xd4>)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	430a      	orrs	r2, r1
 8000b00:	33c0      	adds	r3, #192	; 0xc0
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b06:	e031      	b.n	8000b6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <__NVIC_SetPriority+0xd8>)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	0019      	movs	r1, r3
 8000b10:	230f      	movs	r3, #15
 8000b12:	400b      	ands	r3, r1
 8000b14:	3b08      	subs	r3, #8
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	3306      	adds	r3, #6
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	3304      	adds	r3, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1dfa      	adds	r2, r7, #7
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	0011      	movs	r1, r2
 8000b28:	2203      	movs	r2, #3
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	00d2      	lsls	r2, r2, #3
 8000b2e:	21ff      	movs	r1, #255	; 0xff
 8000b30:	4091      	lsls	r1, r2
 8000b32:	000a      	movs	r2, r1
 8000b34:	43d2      	mvns	r2, r2
 8000b36:	401a      	ands	r2, r3
 8000b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	019b      	lsls	r3, r3, #6
 8000b3e:	22ff      	movs	r2, #255	; 0xff
 8000b40:	401a      	ands	r2, r3
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	0018      	movs	r0, r3
 8000b48:	2303      	movs	r3, #3
 8000b4a:	4003      	ands	r3, r0
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <__NVIC_SetPriority+0xd8>)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	001c      	movs	r4, r3
 8000b58:	230f      	movs	r3, #15
 8000b5a:	4023      	ands	r3, r4
 8000b5c:	3b08      	subs	r3, #8
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	430a      	orrs	r2, r1
 8000b62:	3306      	adds	r3, #6
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	18c3      	adds	r3, r0, r3
 8000b68:	3304      	adds	r3, #4
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b003      	add	sp, #12
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	1e5a      	subs	r2, r3, #1
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	045b      	lsls	r3, r3, #17
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d301      	bcc.n	8000b94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b90:	2301      	movs	r3, #1
 8000b92:	e010      	b.n	8000bb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <SysTick_Config+0x44>)
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	425b      	negs	r3, r3
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff ff7c 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x44>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x44>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	210f      	movs	r1, #15
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	1c02      	adds	r2, r0, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ff5d 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff ff33 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff ffaf 	bl	8000b7c <SysTick_Config>
 8000c1e:	0003      	movs	r3, r0
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e050      	b.n	8000cdc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2225      	movs	r2, #37	; 0x25
 8000c3e:	5c9b      	ldrb	r3, [r3, r2]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d008      	beq.n	8000c58 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2204      	movs	r2, #4
 8000c4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2224      	movs	r2, #36	; 0x24
 8000c50:	2100      	movs	r1, #0
 8000c52:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e041      	b.n	8000cdc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	210e      	movs	r1, #14
 8000c64:	438a      	bics	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	491c      	ldr	r1, [pc, #112]	; (8000ce4 <HAL_DMA_Abort+0xbc>)
 8000c74:	400a      	ands	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2101      	movs	r1, #1
 8000c84:	438a      	bics	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <HAL_DMA_Abort+0xc0>)
 8000c8a:	6859      	ldr	r1, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	221c      	movs	r2, #28
 8000c92:	4013      	ands	r3, r2
 8000c94:	2201      	movs	r2, #1
 8000c96:	409a      	lsls	r2, r3
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_DMA_Abort+0xc0>)
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ca6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00c      	beq.n	8000cca <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cba:	490a      	ldr	r1, [pc, #40]	; (8000ce4 <HAL_DMA_Abort+0xbc>)
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000cc8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2225      	movs	r2, #37	; 0x25
 8000cce:	2101      	movs	r1, #1
 8000cd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2224      	movs	r2, #36	; 0x24
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b002      	add	sp, #8
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	fffffeff 	.word	0xfffffeff
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2225      	movs	r2, #37	; 0x25
 8000d00:	5c9b      	ldrb	r3, [r3, r2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d006      	beq.n	8000d16 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	e049      	b.n	8000daa <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	210e      	movs	r1, #14
 8000d22:	438a      	bics	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	438a      	bics	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	491d      	ldr	r1, [pc, #116]	; (8000db8 <HAL_DMA_Abort_IT+0xcc>)
 8000d42:	400a      	ands	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_DMA_Abort_IT+0xd0>)
 8000d48:	6859      	ldr	r1, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	221c      	movs	r2, #28
 8000d50:	4013      	ands	r3, r2
 8000d52:	2201      	movs	r2, #1
 8000d54:	409a      	lsls	r2, r3
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_DMA_Abort_IT+0xd0>)
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d64:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00c      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d78:	490f      	ldr	r1, [pc, #60]	; (8000db8 <HAL_DMA_Abort_IT+0xcc>)
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000d86:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2225      	movs	r2, #37	; 0x25
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2224      	movs	r2, #36	; 0x24
 8000d94:	2100      	movs	r1, #0
 8000d96:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	0010      	movs	r0, r2
 8000da8:	4798      	blx	r3
    }
  }
  return status;
 8000daa:	230f      	movs	r3, #15
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b004      	add	sp, #16
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	fffffeff 	.word	0xfffffeff
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e147      	b.n	8001060 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d100      	bne.n	8000de8 <HAL_GPIO_Init+0x28>
 8000de6:	e138      	b.n	800105a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x40>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	43da      	mvns	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2203      	movs	r2, #3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d017      	beq.n	8000e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	58d3      	ldr	r3, [r2, r3]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	2207      	movs	r2, #7
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	6939      	ldr	r1, [r7, #16]
 8000ef0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2203      	movs	r2, #3
 8000f10:	401a      	ands	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	23c0      	movs	r3, #192	; 0xc0
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d100      	bne.n	8000f34 <HAL_GPIO_Init+0x174>
 8000f32:	e092      	b.n	800105a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f34:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	589b      	ldr	r3, [r3, r2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x1ca>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a45      	ldr	r2, [pc, #276]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x1c6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a44      	ldr	r2, [pc, #272]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x1c2>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a43      	ldr	r2, [pc, #268]	; (8001084 <HAL_GPIO_Init+0x2c4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x1be>
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	2103      	movs	r1, #3
 8000f90:	400a      	ands	r2, r1
 8000f92:	00d2      	lsls	r2, r2, #3
 8000f94:	4093      	lsls	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f9c:	4936      	ldr	r1, [pc, #216]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3318      	adds	r3, #24
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000faa:	4a33      	ldr	r2, [pc, #204]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	58d3      	ldr	r3, [r2, r3]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	025b      	lsls	r3, r3, #9
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fd0:	4929      	ldr	r1, [pc, #164]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000fda:	2384      	movs	r3, #132	; 0x84
 8000fdc:	58d3      	ldr	r3, [r2, r3]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	029b      	lsls	r3, r3, #10
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ffe:	491e      	ldr	r1, [pc, #120]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8001000:	2284      	movs	r2, #132	; 0x84
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	035b      	lsls	r3, r3, #13
 800101e:	4013      	ands	r3, r2
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	039b      	lsls	r3, r3, #14
 8001048:	4013      	ands	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e13      	subs	r3, r2, #0
 800106a:	d000      	beq.n	800106e <HAL_GPIO_Init+0x2ae>
 800106c:	e6b0      	b.n	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b006      	add	sp, #24
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021800 	.word	0x40021800
 800107c:	50000400 	.word	0x50000400
 8001080:	50000800 	.word	0x50000800
 8001084:	50000c00 	.word	0x50000c00

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	0008      	movs	r0, r1
 8001092:	0011      	movs	r1, r2
 8001094:	1cbb      	adds	r3, r7, #2
 8001096:	1c02      	adds	r2, r0, #0
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	1c7b      	adds	r3, r7, #1
 800109c:	1c0a      	adds	r2, r1, #0
 800109e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010a0:	1c7b      	adds	r3, r7, #1
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010a8:	1cbb      	adds	r3, r7, #2
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b2:	1cbb      	adds	r3, r7, #2
 80010b4:	881a      	ldrh	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	000a      	movs	r2, r1
 80010cc:	1cbb      	adds	r3, r7, #2
 80010ce:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d6:	1cbb      	adds	r3, r7, #2
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	041a      	lsls	r2, r3, #16
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	1cb9      	adds	r1, r7, #2
 80010e6:	8809      	ldrh	r1, [r1, #0]
 80010e8:	400b      	ands	r3, r1
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b004      	add	sp, #16
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	1dba      	adds	r2, r7, #6
 800110a:	8812      	ldrh	r2, [r2, #0]
 800110c:	4013      	ands	r3, r2
 800110e:	d008      	beq.n	8001122 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001112:	1dba      	adds	r2, r7, #6
 8001114:	8812      	ldrh	r2, [r2, #0]
 8001116:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001118:	1dbb      	adds	r3, r7, #6
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	0018      	movs	r0, r3
 800111e:	f000 f815 	bl	800114c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	1dba      	adds	r2, r7, #6
 8001128:	8812      	ldrh	r2, [r2, #0]
 800112a:	4013      	ands	r3, r2
 800112c:	d008      	beq.n	8001140 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001130:	1dba      	adds	r2, r7, #6
 8001132:	8812      	ldrh	r2, [r2, #0]
 8001134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001136:	1dbb      	adds	r3, r7, #6
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff fa58 	bl	80005f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40021800 	.word	0x40021800

0800114c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	0002      	movs	r2, r0
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800116e:	4013      	ands	r3, r2
 8001170:	0019      	movs	r1, r3
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	429a      	cmp	r2, r3
 8001182:	d11f      	bne.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	0013      	movs	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	189b      	adds	r3, r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4912      	ldr	r1, [pc, #72]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001192:	0018      	movs	r0, r3
 8001194:	f7fe ffb4 	bl	8000100 <__udivsi3>
 8001198:	0003      	movs	r3, r0
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800119e:	e008      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e001      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e009      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	401a      	ands	r2, r3
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d0ed      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	0018      	movs	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b004      	add	sp, #16
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40007000 	.word	0x40007000
 80011d4:	fffff9ff 	.word	0xfffff9ff
 80011d8:	20000014 	.word	0x20000014
 80011dc:	000f4240 	.word	0x000f4240

080011e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	23e0      	movs	r3, #224	; 0xe0
 80011ea:	01db      	lsls	r3, r3, #7
 80011ec:	4013      	ands	r3, r2
}
 80011ee:	0018      	movs	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e2f9      	b.n	80017fe <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	d100      	bne.n	8001216 <HAL_RCC_OscConfig+0x1e>
 8001214:	e07c      	b.n	8001310 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001216:	4bc3      	ldr	r3, [pc, #780]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2238      	movs	r2, #56	; 0x38
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001220:	4bc0      	ldr	r3, [pc, #768]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2203      	movs	r2, #3
 8001226:	4013      	ands	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b10      	cmp	r3, #16
 800122e:	d102      	bne.n	8001236 <HAL_RCC_OscConfig+0x3e>
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d002      	beq.n	800123c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b08      	cmp	r3, #8
 800123a:	d10b      	bne.n	8001254 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	4bb9      	ldr	r3, [pc, #740]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d062      	beq.n	800130e <HAL_RCC_OscConfig+0x116>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d15e      	bne.n	800130e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e2d4      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	429a      	cmp	r2, r3
 800125e:	d107      	bne.n	8001270 <HAL_RCC_OscConfig+0x78>
 8001260:	4bb0      	ldr	r3, [pc, #704]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4baf      	ldr	r3, [pc, #700]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0249      	lsls	r1, r1, #9
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e020      	b.n	80012b2 <HAL_RCC_OscConfig+0xba>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	02db      	lsls	r3, r3, #11
 8001278:	429a      	cmp	r2, r3
 800127a:	d10e      	bne.n	800129a <HAL_RCC_OscConfig+0xa2>
 800127c:	4ba9      	ldr	r3, [pc, #676]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4ba8      	ldr	r3, [pc, #672]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	02c9      	lsls	r1, r1, #11
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	4ba6      	ldr	r3, [pc, #664]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4ba5      	ldr	r3, [pc, #660]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0249      	lsls	r1, r1, #9
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e00b      	b.n	80012b2 <HAL_RCC_OscConfig+0xba>
 800129a:	4ba2      	ldr	r3, [pc, #648]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4ba1      	ldr	r3, [pc, #644]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012a0:	49a1      	ldr	r1, [pc, #644]	; (8001528 <HAL_RCC_OscConfig+0x330>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	4b9f      	ldr	r3, [pc, #636]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b9e      	ldr	r3, [pc, #632]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	499f      	ldr	r1, [pc, #636]	; (800152c <HAL_RCC_OscConfig+0x334>)
 80012ae:	400a      	ands	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d014      	beq.n	80012e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb93 	bl	80009e4 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb8e 	bl	80009e4 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e293      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d6:	4b93      	ldr	r3, [pc, #588]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xcc>
 80012e2:	e015      	b.n	8001310 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb7e 	bl	80009e4 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ee:	f7ff fb79 	bl	80009e4 <HAL_GetTick>
 80012f2:	0002      	movs	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	; 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e27e      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001300:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	029b      	lsls	r3, r3, #10
 8001308:	4013      	ands	r3, r2
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0xf6>
 800130c:	e000      	b.n	8001310 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2202      	movs	r2, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d100      	bne.n	800131c <HAL_RCC_OscConfig+0x124>
 800131a:	e099      	b.n	8001450 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131c:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2238      	movs	r2, #56	; 0x38
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001326:	4b7f      	ldr	r3, [pc, #508]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2203      	movs	r2, #3
 800132c:	4013      	ands	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b10      	cmp	r3, #16
 8001334:	d102      	bne.n	800133c <HAL_RCC_OscConfig+0x144>
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d002      	beq.n	8001342 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d135      	bne.n	80013ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001342:	4b78      	ldr	r3, [pc, #480]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4013      	ands	r3, r2
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x162>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e251      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b72      	ldr	r3, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a74      	ldr	r2, [pc, #464]	; (8001530 <HAL_RCC_OscConfig+0x338>)
 8001360:	4013      	ands	r3, r2
 8001362:	0019      	movs	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	4b6e      	ldr	r3, [pc, #440]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d112      	bne.n	800139c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001376:	4b6b      	ldr	r3, [pc, #428]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6e      	ldr	r2, [pc, #440]	; (8001534 <HAL_RCC_OscConfig+0x33c>)
 800137c:	4013      	ands	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	4b67      	ldr	r3, [pc, #412]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800138a:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0adb      	lsrs	r3, r3, #11
 8001390:	2207      	movs	r2, #7
 8001392:	4013      	ands	r3, r2
 8001394:	4a68      	ldr	r2, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x340>)
 8001396:	40da      	lsrs	r2, r3
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x344>)
 800139a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800139c:	4b68      	ldr	r3, [pc, #416]	; (8001540 <HAL_RCC_OscConfig+0x348>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff fac3 	bl	800092c <HAL_InitTick>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d051      	beq.n	800144e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e227      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d030      	beq.n	8001418 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013b6:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5e      	ldr	r2, [pc, #376]	; (8001534 <HAL_RCC_OscConfig+0x33c>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	4b57      	ldr	r3, [pc, #348]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80013ca:	4b56      	ldr	r3, [pc, #344]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b55      	ldr	r3, [pc, #340]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	0049      	lsls	r1, r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fb04 	bl	80009e4 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff faff 	bl	80009e4 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e204      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f4:	4b4b      	ldr	r3, [pc, #300]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b48      	ldr	r3, [pc, #288]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_RCC_OscConfig+0x338>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	021a      	lsls	r2, r3, #8
 8001410:	4b44      	ldr	r3, [pc, #272]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001412:	430a      	orrs	r2, r1
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	e01b      	b.n	8001450 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001418:	4b42      	ldr	r3, [pc, #264]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b41      	ldr	r3, [pc, #260]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800141e:	4949      	ldr	r1, [pc, #292]	; (8001544 <HAL_RCC_OscConfig+0x34c>)
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fade 	bl	80009e4 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff fad9 	bl	80009e4 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e1de      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001440:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4013      	ands	r3, r2
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x236>
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2208      	movs	r2, #8
 8001456:	4013      	ands	r3, r2
 8001458:	d047      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2238      	movs	r2, #56	; 0x38
 8001460:	4013      	ands	r3, r2
 8001462:	2b18      	cmp	r3, #24
 8001464:	d10a      	bne.n	800147c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d03c      	beq.n	80014ea <HAL_RCC_OscConfig+0x2f2>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d138      	bne.n	80014ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e1c0      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d019      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001486:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800148a:	2101      	movs	r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff faa8 	bl	80009e4 <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff faa3 	bl	80009e4 <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1a8      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b0:	2202      	movs	r2, #2
 80014b2:	4013      	ands	r3, r2
 80014b4:	d0f1      	beq.n	800149a <HAL_RCC_OscConfig+0x2a2>
 80014b6:	e018      	b.n	80014ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014be:	2101      	movs	r1, #1
 80014c0:	438a      	bics	r2, r1
 80014c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fa8e 	bl	80009e4 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fa89 	bl	80009e4 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e18e      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	2202      	movs	r2, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	d1f1      	bne.n	80014ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2204      	movs	r2, #4
 80014f0:	4013      	ands	r3, r2
 80014f2:	d100      	bne.n	80014f6 <HAL_RCC_OscConfig+0x2fe>
 80014f4:	e0c6      	b.n	8001684 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	231f      	movs	r3, #31
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2238      	movs	r2, #56	; 0x38
 8001504:	4013      	ands	r3, r2
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11e      	bne.n	8001548 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_RCC_OscConfig+0x32c>)
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d100      	bne.n	8001516 <HAL_RCC_OscConfig+0x31e>
 8001514:	e0b6      	b.n	8001684 <HAL_RCC_OscConfig+0x48c>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d000      	beq.n	8001520 <HAL_RCC_OscConfig+0x328>
 800151e:	e0b1      	b.n	8001684 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e16c      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
 8001524:	40021000 	.word	0x40021000
 8001528:	fffeffff 	.word	0xfffeffff
 800152c:	fffbffff 	.word	0xfffbffff
 8001530:	ffff80ff 	.word	0xffff80ff
 8001534:	ffffc7ff 	.word	0xffffc7ff
 8001538:	00f42400 	.word	0x00f42400
 800153c:	20000014 	.word	0x20000014
 8001540:	20000018 	.word	0x20000018
 8001544:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800154a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	055b      	lsls	r3, r3, #21
 8001550:	4013      	ands	r3, r2
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x360>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x362>
 8001558:	2300      	movs	r3, #0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d011      	beq.n	8001582 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4baa      	ldr	r3, [pc, #680]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001562:	4ba9      	ldr	r3, [pc, #676]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0549      	lsls	r1, r1, #21
 8001568:	430a      	orrs	r2, r1
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
 800156c:	4ba6      	ldr	r3, [pc, #664]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800156e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	055b      	lsls	r3, r3, #21
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800157a:	231f      	movs	r3, #31
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001582:	4ba2      	ldr	r3, [pc, #648]	; (800180c <HAL_RCC_OscConfig+0x614>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4013      	ands	r3, r2
 800158c:	d11a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800158e:	4b9f      	ldr	r3, [pc, #636]	; (800180c <HAL_RCC_OscConfig+0x614>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b9e      	ldr	r3, [pc, #632]	; (800180c <HAL_RCC_OscConfig+0x614>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0049      	lsls	r1, r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800159c:	f7ff fa22 	bl	80009e4 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff fa1d 	bl	80009e4 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e122      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <HAL_RCC_OscConfig+0x614>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x3e2>
 80015cc:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80015ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015d0:	4b8d      	ldr	r3, [pc, #564]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015d8:	e01c      	b.n	8001614 <HAL_RCC_OscConfig+0x41c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x404>
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80015e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e6:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80015e8:	2104      	movs	r1, #4
 80015ea:	430a      	orrs	r2, r1
 80015ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80015ee:	4b86      	ldr	r3, [pc, #536]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80015f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f2:	4b85      	ldr	r3, [pc, #532]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80015f4:	2101      	movs	r1, #1
 80015f6:	430a      	orrs	r2, r1
 80015f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0x41c>
 80015fc:	4b82      	ldr	r3, [pc, #520]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80015fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001602:	2101      	movs	r1, #1
 8001604:	438a      	bics	r2, r1
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
 8001608:	4b7f      	ldr	r3, [pc, #508]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800160a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800160c:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800160e:	2104      	movs	r1, #4
 8001610:	438a      	bics	r2, r1
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d014      	beq.n	8001646 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff f9e2 	bl	80009e4 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001624:	e009      	b.n	800163a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff f9dd 	bl	80009e4 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	4a77      	ldr	r2, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0e1      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2202      	movs	r2, #2
 8001640:	4013      	ands	r3, r2
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x42e>
 8001644:	e013      	b.n	800166e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff f9cd 	bl	80009e4 <HAL_GetTick>
 800164a:	0003      	movs	r3, r0
 800164c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800164e:	e009      	b.n	8001664 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff f9c8 	bl	80009e4 <HAL_GetTick>
 8001654:	0002      	movs	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4a6d      	ldr	r2, [pc, #436]	; (8001810 <HAL_RCC_OscConfig+0x618>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0cc      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2202      	movs	r2, #2
 800166a:	4013      	ands	r3, r2
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800166e:	231f      	movs	r3, #31
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001678:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800167a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800167c:	4b62      	ldr	r3, [pc, #392]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800167e:	4965      	ldr	r1, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x61c>)
 8001680:	400a      	ands	r2, r1
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x496>
 800168c:	e0b6      	b.n	80017fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168e:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2238      	movs	r2, #56	; 0x38
 8001694:	4013      	ands	r3, r2
 8001696:	2b10      	cmp	r3, #16
 8001698:	d100      	bne.n	800169c <HAL_RCC_OscConfig+0x4a4>
 800169a:	e07e      	b.n	800179a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d153      	bne.n	800174c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b57      	ldr	r3, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80016aa:	495b      	ldr	r1, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x620>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff f998 	bl	80009e4 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f993 	bl	80009e4 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e098      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	049b      	lsls	r3, r3, #18
 80016d4:	4013      	ands	r3, r2
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_RCC_OscConfig+0x624>)
 80016de:	4013      	ands	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	431a      	orrs	r2, r3
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0449      	lsls	r1, r1, #17
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001714:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	0549      	lsls	r1, r1, #21
 800171e:	430a      	orrs	r2, r1
 8001720:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff f95f 	bl	80009e4 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff f95a 	bl	80009e4 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e05f      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	049b      	lsls	r3, r3, #18
 8001746:	4013      	ands	r3, r2
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x534>
 800174a:	e057      	b.n	80017fc <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001752:	4931      	ldr	r1, [pc, #196]	; (8001818 <HAL_RCC_OscConfig+0x620>)
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800175e:	2103      	movs	r1, #3
 8001760:	438a      	bics	r2, r1
 8001762:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800176a:	492d      	ldr	r1, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x628>)
 800176c:	400a      	ands	r2, r1
 800176e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f938 	bl	80009e4 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff f933 	bl	80009e4 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e038      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	049b      	lsls	r3, r3, #18
 8001794:	4013      	ands	r3, r2
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x582>
 8001798:	e030      	b.n	80017fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e02b      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_RCC_OscConfig+0x610>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2203      	movs	r2, #3
 80017b0:	401a      	ands	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11e      	bne.n	80017f8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2270      	movs	r2, #112	; 0x70
 80017be:	401a      	ands	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d117      	bne.n	80017f8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	23fe      	movs	r3, #254	; 0xfe
 80017cc:	01db      	lsls	r3, r3, #7
 80017ce:	401a      	ands	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d10e      	bne.n	80017f8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	23f8      	movs	r3, #248	; 0xf8
 80017de:	039b      	lsls	r3, r3, #14
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d106      	bne.n	80017f8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	0f5b      	lsrs	r3, r3, #29
 80017ee:	075a      	lsls	r2, r3, #29
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b008      	add	sp, #32
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40021000 	.word	0x40021000
 800180c:	40007000 	.word	0x40007000
 8001810:	00001388 	.word	0x00001388
 8001814:	efffffff 	.word	0xefffffff
 8001818:	feffffff 	.word	0xfeffffff
 800181c:	1fc1808c 	.word	0x1fc1808c
 8001820:	effeffff 	.word	0xeffeffff

08001824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0e9      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2207      	movs	r2, #7
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d91e      	bls.n	8001884 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2207      	movs	r2, #7
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001858:	f7ff f8c4 	bl	80009e4 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	e009      	b.n	8001876 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001862:	f7ff f8bf 	bl	80009e4 <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4a6a      	ldr	r2, [pc, #424]	; (8001a18 <HAL_RCC_ClockConfig+0x1f4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0ca      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2207      	movs	r2, #7
 800187c:	4013      	ands	r3, r2
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d1ee      	bne.n	8001862 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	d015      	beq.n	80018ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2204      	movs	r2, #4
 8001894:	4013      	ands	r3, r2
 8001896:	d006      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001898:	4b60      	ldr	r3, [pc, #384]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 800189e:	21e0      	movs	r1, #224	; 0xe0
 80018a0:	01c9      	lsls	r1, r1, #7
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4a5d      	ldr	r2, [pc, #372]	; (8001a20 <HAL_RCC_ClockConfig+0x1fc>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	d057      	beq.n	8001974 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018cc:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d12b      	bne.n	8001930 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e097      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	049b      	lsls	r3, r3, #18
 80018ec:	4013      	ands	r3, r2
 80018ee:	d11f      	bne.n	8001930 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e08b      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4013      	ands	r3, r2
 8001906:	d113      	bne.n	8001930 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e07f      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d106      	bne.n	8001922 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001914:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 8001916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001918:	2202      	movs	r2, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d108      	bne.n	8001930 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e074      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2202      	movs	r2, #2
 8001928:	4013      	ands	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e06d      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2207      	movs	r2, #7
 8001936:	4393      	bics	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 8001940:	430a      	orrs	r2, r1
 8001942:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001944:	f7ff f84e 	bl	80009e4 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194c:	e009      	b.n	8001962 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194e:	f7ff f849 	bl	80009e4 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <HAL_RCC_ClockConfig+0x1f4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e054      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2238      	movs	r2, #56	; 0x38
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	429a      	cmp	r2, r3
 8001972:	d1ec      	bne.n	800194e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2207      	movs	r2, #7
 800197a:	4013      	ands	r3, r2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d21e      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2207      	movs	r2, #7
 8001988:	4393      	bics	r3, r2
 800198a:	0019      	movs	r1, r3
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001994:	f7ff f826 	bl	80009e4 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800199c:	e009      	b.n	80019b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199e:	f7ff f821 	bl	80009e4 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_RCC_ClockConfig+0x1f4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e02c      	b.n	8001a0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2207      	movs	r2, #7
 80019b8:	4013      	ands	r3, r2
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1ee      	bne.n	800199e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2204      	movs	r2, #4
 80019c6:	4013      	ands	r3, r2
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <HAL_RCC_ClockConfig+0x200>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019de:	f000 f829 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019e2:	0001      	movs	r1, r0
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_RCC_ClockConfig+0x1f8>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	220f      	movs	r2, #15
 80019ec:	401a      	ands	r2, r3
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x204>)
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	58d3      	ldr	r3, [r2, r3]
 80019f4:	221f      	movs	r2, #31
 80019f6:	4013      	ands	r3, r2
 80019f8:	000a      	movs	r2, r1
 80019fa:	40da      	lsrs	r2, r3
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x208>)
 80019fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_ClockConfig+0x20c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe ff91 	bl	800092c <HAL_InitTick>
 8001a0a:	0003      	movs	r3, r0
}
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b004      	add	sp, #16
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40022000 	.word	0x40022000
 8001a18:	00001388 	.word	0x00001388
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	fffff0ff 	.word	0xfffff0ff
 8001a24:	ffff8fff 	.word	0xffff8fff
 8001a28:	0800402c 	.word	0x0800402c
 8001a2c:	20000014 	.word	0x20000014
 8001a30:	20000018 	.word	0x20000018

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3a:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2238      	movs	r2, #56	; 0x38
 8001a40:	4013      	ands	r3, r2
 8001a42:	d10f      	bne.n	8001a64 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0adb      	lsrs	r3, r3, #11
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2201      	movs	r2, #1
 8001a50:	409a      	lsls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a56:	6839      	ldr	r1, [r7, #0]
 8001a58:	4835      	ldr	r0, [pc, #212]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a5a:	f7fe fb51 	bl	8000100 <__udivsi3>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	e05d      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2238      	movs	r2, #56	; 0x38
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a70:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	e054      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2238      	movs	r2, #56	; 0x38
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d138      	bne.n	8001af4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2203      	movs	r2, #3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	2207      	movs	r2, #7
 8001a94:	4013      	ands	r3, r2
 8001a96:	3301      	adds	r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d10d      	bne.n	8001abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	4824      	ldr	r0, [pc, #144]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x100>)
 8001aa4:	f7fe fb2c 	bl	8000100 <__udivsi3>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	0019      	movs	r1, r3
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	227f      	movs	r2, #127	; 0x7f
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	434b      	muls	r3, r1
 8001ab8:	617b      	str	r3, [r7, #20]
        break;
 8001aba:	e00d      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	481c      	ldr	r0, [pc, #112]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ac0:	f7fe fb1e 	bl	8000100 <__udivsi3>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	227f      	movs	r2, #127	; 0x7f
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	434b      	muls	r3, r1
 8001ad4:	617b      	str	r3, [r7, #20]
        break;
 8001ad6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0f5b      	lsrs	r3, r3, #29
 8001ade:	2207      	movs	r2, #7
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	6978      	ldr	r0, [r7, #20]
 8001aea:	f7fe fb09 	bl	8000100 <__udivsi3>
 8001aee:	0003      	movs	r3, r0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	e015      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2238      	movs	r2, #56	; 0x38
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d103      	bne.n	8001b08 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2238      	movs	r2, #56	; 0x38
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b18      	cmp	r3, #24
 8001b12:	d103      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b14:	23fa      	movs	r3, #250	; 0xfa
 8001b16:	01db      	lsls	r3, r3, #7
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	e001      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b20:	693b      	ldr	r3, [r7, #16]
}
 8001b22:	0018      	movs	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b006      	add	sp, #24
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	20000014 	.word	0x20000014

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b50:	f7ff fff2 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b54:	0004      	movs	r4, r0
 8001b56:	f7ff fb43 	bl	80011e0 <LL_RCC_GetAPB1Prescaler>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	0b1a      	lsrs	r2, r3, #12
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	58d3      	ldr	r3, [r2, r3]
 8001b64:	221f      	movs	r2, #31
 8001b66:	4013      	ands	r3, r2
 8001b68:	40dc      	lsrs	r4, r3
 8001b6a:	0023      	movs	r3, r4
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	0800406c 	.word	0x0800406c

08001b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b80:	2313      	movs	r3, #19
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b88:	2312      	movs	r3, #18
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b9c:	e0a3      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2011      	movs	r0, #17
 8001ba0:	183b      	adds	r3, r7, r0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba6:	4b86      	ldr	r3, [pc, #536]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	055b      	lsls	r3, r3, #21
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d110      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b83      	ldr	r3, [pc, #524]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb6:	4b82      	ldr	r3, [pc, #520]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	0549      	lsls	r1, r1, #21
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bc0:	4b7f      	ldr	r3, [pc, #508]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	055b      	lsls	r3, r3, #21
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd4:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0049      	lsls	r1, r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001be2:	f7fe feff 	bl	80009e4 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bea:	e00b      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7fe fefa 	bl	80009e4 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d904      	bls.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001bfa:	2313      	movs	r3, #19
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2203      	movs	r2, #3
 8001c00:	701a      	strb	r2, [r3, #0]
        break;
 8001c02:	e005      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c04:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d0ed      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c10:	2313      	movs	r3, #19
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d154      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c1a:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c1e:	23c0      	movs	r3, #192	; 0xc0
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d019      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d014      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c36:	4b62      	ldr	r3, [pc, #392]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	4a63      	ldr	r2, [pc, #396]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c40:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c44:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	0249      	lsls	r1, r1, #9
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c52:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c54:	495d      	ldr	r1, [pc, #372]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c56:	400a      	ands	r2, r1
 8001c58:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c5a:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d016      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7fe febc 	bl	80009e4 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c70:	e00c      	b.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7fe feb7 	bl	80009e4 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	4a54      	ldr	r2, [pc, #336]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d904      	bls.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c82:	2313      	movs	r3, #19
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	2203      	movs	r2, #3
 8001c88:	701a      	strb	r2, [r3, #0]
            break;
 8001c8a:	e004      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0ed      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c96:	2313      	movs	r3, #19
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	4a48      	ldr	r2, [pc, #288]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb4:	e00c      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cb6:	2312      	movs	r3, #18
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	2213      	movs	r2, #19
 8001cbc:	18ba      	adds	r2, r7, r2
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2213      	movs	r2, #19
 8001cca:	18ba      	adds	r2, r7, r2
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cd0:	2311      	movs	r3, #17
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce0:	493c      	ldr	r1, [pc, #240]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2201      	movs	r2, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d12:	220c      	movs	r2, #12
 8001d14:	4393      	bics	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2220      	movs	r2, #32
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	01db      	lsls	r3, r3, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d015      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	0899      	lsrs	r1, r3, #2
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	05db      	lsls	r3, r3, #23
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d106      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0249      	lsls	r1, r1, #9
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d016      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d94:	430a      	orrs	r2, r1
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	01db      	lsls	r3, r3, #7
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d106      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	0249      	lsls	r1, r1, #9
 8001dae:	430a      	orrs	r2, r1
 8001db0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001db2:	2312      	movs	r3, #18
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b006      	add	sp, #24
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	fffffcff 	.word	0xfffffcff
 8001dcc:	fffeffff 	.word	0xfffeffff
 8001dd0:	00001388 	.word	0x00001388
 8001dd4:	efffffff 	.word	0xefffffff
 8001dd8:	ffffcfff 	.word	0xffffcfff
 8001ddc:	ffff3fff 	.word	0xffff3fff

08001de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e046      	b.n	8001e80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2284      	movs	r2, #132	; 0x84
 8001df6:	589b      	ldr	r3, [r3, r2]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	2100      	movs	r1, #0
 8001e02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	0018      	movs	r0, r3
 8001e08:	f7fe fcde 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2284      	movs	r2, #132	; 0x84
 8001e10:	2124      	movs	r1, #36	; 0x24
 8001e12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 fc7c 	bl	8002724 <UART_SetConfig>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e024      	b.n	8001e80 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 fe15 	bl	8002a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	490d      	ldr	r1, [pc, #52]	; (8001e88 <HAL_UART_Init+0xa8>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	212a      	movs	r1, #42	; 0x2a
 8001e62:	438a      	bics	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 fead 	bl	8002bd8 <UART_CheckIdleState>
 8001e7e:	0003      	movs	r3, r0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	ffffb7ff 	.word	0xffffb7ff

08001e8c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2284      	movs	r2, #132	; 0x84
 8001e9e:	589b      	ldr	r3, [r3, r2]
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d000      	beq.n	8001ea6 <HAL_UART_Transmit_IT+0x1a>
 8001ea4:	e0a0      	b.n	8001fe8 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_UART_Transmit_IT+0x28>
 8001eac:	1dbb      	adds	r3, r7, #6
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e098      	b.n	8001fea <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	015b      	lsls	r3, r3, #5
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d109      	bne.n	8001ed8 <HAL_UART_Transmit_IT+0x4c>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e088      	b.n	8001fea <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	5c9b      	ldrb	r3, [r3, r2]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Transmit_IT+0x5a>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e081      	b.n	8001fea <HAL_UART_Transmit_IT+0x15e>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2280      	movs	r2, #128	; 0x80
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1dba      	adds	r2, r7, #6
 8001ef8:	2154      	movs	r1, #84	; 0x54
 8001efa:	8812      	ldrh	r2, [r2, #0]
 8001efc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1dba      	adds	r2, r7, #6
 8001f02:	2156      	movs	r1, #86	; 0x56
 8001f04:	8812      	ldrh	r2, [r2, #0]
 8001f06:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	228c      	movs	r2, #140	; 0x8c
 8001f12:	2100      	movs	r1, #0
 8001f14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2284      	movs	r2, #132	; 0x84
 8001f1a:	2121      	movs	r1, #33	; 0x21
 8001f1c:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	059b      	lsls	r3, r3, #22
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d12e      	bne.n	8001f88 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	015b      	lsls	r3, r3, #5
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d107      	bne.n	8001f46 <HAL_UART_Transmit_IT+0xba>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <HAL_UART_Transmit_IT+0x168>)
 8001f42:	675a      	str	r2, [r3, #116]	; 0x74
 8001f44:	e002      	b.n	8001f4c <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <HAL_UART_Transmit_IT+0x16c>)
 8001f4a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f54:	f3ef 8310 	mrs	r3, PRIMASK
 8001f58:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f5a:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f5e:	2301      	movs	r3, #1
 8001f60:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f383 8810 	msr	PRIMASK, r3
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0409      	lsls	r1, r1, #16
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f383 8810 	msr	PRIMASK, r3
}
 8001f86:	e02d      	b.n	8001fe4 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_UART_Transmit_IT+0x118>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_UART_Transmit_IT+0x170>)
 8001fa0:	675a      	str	r2, [r3, #116]	; 0x74
 8001fa2:	e002      	b.n	8001faa <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a16      	ldr	r2, [pc, #88]	; (8002000 <HAL_UART_Transmit_IT+0x174>)
 8001fa8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	2100      	movs	r1, #0
 8001fb0:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb6:	613b      	str	r3, [r7, #16]
  return(result);
 8001fb8:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f383 8810 	msr	PRIMASK, r3
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f383 8810 	msr	PRIMASK, r3
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b00c      	add	sp, #48	; 0x30
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	0800336d 	.word	0x0800336d
 8001ff8:	08003281 	.word	0x08003281
 8001ffc:	080031c3 	.word	0x080031c3
 8002000:	0800310f 	.word	0x0800310f

08002004 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	1dbb      	adds	r3, r7, #6
 8002010:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2288      	movs	r2, #136	; 0x88
 8002016:	589b      	ldr	r3, [r3, r2]
 8002018:	2b20      	cmp	r3, #32
 800201a:	d150      	bne.n	80020be <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_UART_Receive_IT+0x26>
 8002022:	1dbb      	adds	r3, r7, #6
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e048      	b.n	80020c0 <HAL_UART_Receive_IT+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	015b      	lsls	r3, r3, #5
 8002036:	429a      	cmp	r2, r3
 8002038:	d109      	bne.n	800204e <HAL_UART_Receive_IT+0x4a>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2201      	movs	r2, #1
 8002046:	4013      	ands	r3, r2
 8002048:	d001      	beq.n	800204e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e038      	b.n	80020c0 <HAL_UART_Receive_IT+0xbc>
      }
    }

    __HAL_LOCK(huart);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_UART_Receive_IT+0x58>
 8002058:	2302      	movs	r3, #2
 800205a:	e031      	b.n	80020c0 <HAL_UART_Receive_IT+0xbc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	2101      	movs	r1, #1
 8002062:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	4013      	ands	r3, r2
 8002076:	d019      	beq.n	80020ac <HAL_UART_Receive_IT+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002078:	f3ef 8310 	mrs	r3, PRIMASK
 800207c:	613b      	str	r3, [r7, #16]
  return(result);
 800207e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	2301      	movs	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f383 8810 	msr	PRIMASK, r3
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	04c9      	lsls	r1, r1, #19
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	f383 8810 	msr	PRIMASK, r3
}
 80020aa:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020ac:	1dbb      	adds	r3, r7, #6
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fea1 	bl	8002dfc <UART_Start_Receive_IT>
 80020ba:	0003      	movs	r3, r0
 80020bc:	e000      	b.n	80020c0 <HAL_UART_Receive_IT+0xbc>
  }
  else
  {
    return HAL_BUSY;
 80020be:	2302      	movs	r3, #2
  }
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b008      	add	sp, #32
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b0aa      	sub	sp, #168	; 0xa8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	22a4      	movs	r2, #164	; 0xa4
 80020d8:	18b9      	adds	r1, r7, r2
 80020da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	20a0      	movs	r0, #160	; 0xa0
 80020e4:	1839      	adds	r1, r7, r0
 80020e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	249c      	movs	r4, #156	; 0x9c
 80020f0:	1939      	adds	r1, r7, r4
 80020f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80020f4:	0011      	movs	r1, r2
 80020f6:	18bb      	adds	r3, r7, r2
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4aa0      	ldr	r2, [pc, #640]	; (800237c <HAL_UART_IRQHandler+0x2b4>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	2298      	movs	r2, #152	; 0x98
 8002100:	18bd      	adds	r5, r7, r2
 8002102:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002104:	18bb      	adds	r3, r7, r2
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11a      	bne.n	8002142 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800210c:	187b      	adds	r3, r7, r1
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2220      	movs	r2, #32
 8002112:	4013      	ands	r3, r2
 8002114:	d015      	beq.n	8002142 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002116:	183b      	adds	r3, r7, r0
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2220      	movs	r2, #32
 800211c:	4013      	ands	r3, r2
 800211e:	d105      	bne.n	800212c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002120:	193b      	adds	r3, r7, r4
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	4013      	ands	r3, r2
 800212a:	d00a      	beq.n	8002142 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <HAL_UART_IRQHandler+0x6e>
 8002134:	e2cf      	b.n	80026d6 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	0010      	movs	r0, r2
 800213e:	4798      	blx	r3
      }
      return;
 8002140:	e2c9      	b.n	80026d6 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002142:	2398      	movs	r3, #152	; 0x98
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d100      	bne.n	800214e <HAL_UART_IRQHandler+0x86>
 800214c:	e11e      	b.n	800238c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800214e:	239c      	movs	r3, #156	; 0x9c
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a8a      	ldr	r2, [pc, #552]	; (8002380 <HAL_UART_IRQHandler+0x2b8>)
 8002156:	4013      	ands	r3, r2
 8002158:	d106      	bne.n	8002168 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800215a:	23a0      	movs	r3, #160	; 0xa0
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a88      	ldr	r2, [pc, #544]	; (8002384 <HAL_UART_IRQHandler+0x2bc>)
 8002162:	4013      	ands	r3, r2
 8002164:	d100      	bne.n	8002168 <HAL_UART_IRQHandler+0xa0>
 8002166:	e111      	b.n	800238c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002168:	23a4      	movs	r3, #164	; 0xa4
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d012      	beq.n	800219a <HAL_UART_IRQHandler+0xd2>
 8002174:	23a0      	movs	r3, #160	; 0xa0
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4013      	ands	r3, r2
 8002180:	d00b      	beq.n	800219a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2201      	movs	r2, #1
 8002188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	228c      	movs	r2, #140	; 0x8c
 800218e:	589b      	ldr	r3, [r3, r2]
 8002190:	2201      	movs	r2, #1
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	218c      	movs	r1, #140	; 0x8c
 8002198:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800219a:	23a4      	movs	r3, #164	; 0xa4
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2202      	movs	r2, #2
 80021a2:	4013      	ands	r3, r2
 80021a4:	d011      	beq.n	80021ca <HAL_UART_IRQHandler+0x102>
 80021a6:	239c      	movs	r3, #156	; 0x9c
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	d00b      	beq.n	80021ca <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2202      	movs	r2, #2
 80021b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	228c      	movs	r2, #140	; 0x8c
 80021be:	589b      	ldr	r3, [r3, r2]
 80021c0:	2204      	movs	r2, #4
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	218c      	movs	r1, #140	; 0x8c
 80021c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021ca:	23a4      	movs	r3, #164	; 0xa4
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2204      	movs	r2, #4
 80021d2:	4013      	ands	r3, r2
 80021d4:	d011      	beq.n	80021fa <HAL_UART_IRQHandler+0x132>
 80021d6:	239c      	movs	r3, #156	; 0x9c
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	d00b      	beq.n	80021fa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2204      	movs	r2, #4
 80021e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	228c      	movs	r2, #140	; 0x8c
 80021ee:	589b      	ldr	r3, [r3, r2]
 80021f0:	2202      	movs	r2, #2
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	218c      	movs	r1, #140	; 0x8c
 80021f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80021fa:	23a4      	movs	r3, #164	; 0xa4
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2208      	movs	r2, #8
 8002202:	4013      	ands	r3, r2
 8002204:	d017      	beq.n	8002236 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002206:	23a0      	movs	r3, #160	; 0xa0
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2220      	movs	r2, #32
 800220e:	4013      	ands	r3, r2
 8002210:	d105      	bne.n	800221e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002212:	239c      	movs	r3, #156	; 0x9c
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a59      	ldr	r2, [pc, #356]	; (8002380 <HAL_UART_IRQHandler+0x2b8>)
 800221a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800221c:	d00b      	beq.n	8002236 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2208      	movs	r2, #8
 8002224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	228c      	movs	r2, #140	; 0x8c
 800222a:	589b      	ldr	r3, [r3, r2]
 800222c:	2208      	movs	r2, #8
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	218c      	movs	r1, #140	; 0x8c
 8002234:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002236:	23a4      	movs	r3, #164	; 0xa4
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	4013      	ands	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_UART_IRQHandler+0x1a4>
 8002244:	23a0      	movs	r3, #160	; 0xa0
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	04db      	lsls	r3, r3, #19
 800224e:	4013      	ands	r3, r2
 8002250:	d00c      	beq.n	800226c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	228c      	movs	r2, #140	; 0x8c
 8002260:	589b      	ldr	r3, [r3, r2]
 8002262:	2220      	movs	r2, #32
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	218c      	movs	r1, #140	; 0x8c
 800226a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	228c      	movs	r2, #140	; 0x8c
 8002270:	589b      	ldr	r3, [r3, r2]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d100      	bne.n	8002278 <HAL_UART_IRQHandler+0x1b0>
 8002276:	e230      	b.n	80026da <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002278:	23a4      	movs	r3, #164	; 0xa4
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2220      	movs	r2, #32
 8002280:	4013      	ands	r3, r2
 8002282:	d015      	beq.n	80022b0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002284:	23a0      	movs	r3, #160	; 0xa0
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2220      	movs	r2, #32
 800228c:	4013      	ands	r3, r2
 800228e:	d106      	bne.n	800229e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002290:	239c      	movs	r3, #156	; 0x9c
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	055b      	lsls	r3, r3, #21
 800229a:	4013      	ands	r3, r2
 800229c:	d008      	beq.n	80022b0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	0010      	movs	r0, r2
 80022ae:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	228c      	movs	r2, #140	; 0x8c
 80022b4:	589b      	ldr	r3, [r3, r2]
 80022b6:	2194      	movs	r1, #148	; 0x94
 80022b8:	187a      	adds	r2, r7, r1
 80022ba:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d004      	beq.n	80022d4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2228      	movs	r2, #40	; 0x28
 80022d0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022d2:	d047      	beq.n	8002364 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fe9c 	bl	8003014 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2240      	movs	r2, #64	; 0x40
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d137      	bne.n	800235a <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ea:	f3ef 8310 	mrs	r3, PRIMASK
 80022ee:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80022f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022f2:	2090      	movs	r0, #144	; 0x90
 80022f4:	183a      	adds	r2, r7, r0
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	2301      	movs	r3, #1
 80022fa:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022fe:	f383 8810 	msr	PRIMASK, r3
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2140      	movs	r1, #64	; 0x40
 8002310:	438a      	bics	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	183b      	adds	r3, r7, r0
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800231c:	f383 8810 	msr	PRIMASK, r3
}
 8002320:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d012      	beq.n	8002350 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <HAL_UART_IRQHandler+0x2c0>)
 8002330:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002336:	0018      	movs	r0, r3
 8002338:	f7fe fcd8 	bl	8000cec <HAL_DMA_Abort_IT>
 800233c:	1e03      	subs	r3, r0, #0
 800233e:	d01a      	beq.n	8002376 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800234a:	0018      	movs	r0, r3
 800234c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800234e:	e012      	b.n	8002376 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f9d2 	bl	80026fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	e00d      	b.n	8002376 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f000 f9cd 	bl	80026fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002362:	e008      	b.n	8002376 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 f9c8 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	228c      	movs	r2, #140	; 0x8c
 8002370:	2100      	movs	r1, #0
 8002372:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002374:	e1b1      	b.n	80026da <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002376:	46c0      	nop			; (mov r8, r8)
    return;
 8002378:	e1af      	b.n	80026da <HAL_UART_IRQHandler+0x612>
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	0000080f 	.word	0x0000080f
 8002380:	10000001 	.word	0x10000001
 8002384:	04000120 	.word	0x04000120
 8002388:	080030e1 	.word	0x080030e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d000      	beq.n	8002396 <HAL_UART_IRQHandler+0x2ce>
 8002394:	e135      	b.n	8002602 <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002396:	23a4      	movs	r3, #164	; 0xa4
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	4013      	ands	r3, r2
 80023a0:	d100      	bne.n	80023a4 <HAL_UART_IRQHandler+0x2dc>
 80023a2:	e12e      	b.n	8002602 <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80023a4:	23a0      	movs	r3, #160	; 0xa0
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2210      	movs	r2, #16
 80023ac:	4013      	ands	r3, r2
 80023ae:	d100      	bne.n	80023b2 <HAL_UART_IRQHandler+0x2ea>
 80023b0:	e127      	b.n	8002602 <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2210      	movs	r2, #16
 80023b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2240      	movs	r2, #64	; 0x40
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d000      	beq.n	80023ca <HAL_UART_IRQHandler+0x302>
 80023c8:	e09e      	b.n	8002508 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	217e      	movs	r1, #126	; 0x7e
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d100      	bne.n	80023e2 <HAL_UART_IRQHandler+0x31a>
 80023e0:	e17d      	b.n	80026de <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	225c      	movs	r2, #92	; 0x5c
 80023e6:	5a9b      	ldrh	r3, [r3, r2]
 80023e8:	187a      	adds	r2, r7, r1
 80023ea:	8812      	ldrh	r2, [r2, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d300      	bcc.n	80023f2 <HAL_UART_IRQHandler+0x32a>
 80023f0:	e175      	b.n	80026de <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	187a      	adds	r2, r7, r1
 80023f6:	215e      	movs	r1, #94	; 0x5e
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	d16f      	bne.n	80024ea <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800240a:	f3ef 8310 	mrs	r3, PRIMASK
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002412:	67bb      	str	r3, [r7, #120]	; 0x78
 8002414:	2301      	movs	r3, #1
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	f383 8810 	msr	PRIMASK, r3
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	49b1      	ldr	r1, [pc, #708]	; (80026f0 <HAL_UART_IRQHandler+0x628>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002436:	f383 8810 	msr	PRIMASK, r3
}
 800243a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243c:	f3ef 8310 	mrs	r3, PRIMASK
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
 8002446:	2301      	movs	r3, #1
 8002448:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244c:	f383 8810 	msr	PRIMASK, r3
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	438a      	bics	r2, r1
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	f383 8810 	msr	PRIMASK, r3
}
 800246c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800246e:	f3ef 8310 	mrs	r3, PRIMASK
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002474:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002476:	673b      	str	r3, [r7, #112]	; 0x70
 8002478:	2301      	movs	r3, #1
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247e:	f383 8810 	msr	PRIMASK, r3
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2140      	movs	r1, #64	; 0x40
 8002490:	438a      	bics	r2, r1
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002496:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249a:	f383 8810 	msr	PRIMASK, r3
}
 800249e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2288      	movs	r2, #136	; 0x88
 80024a4:	2120      	movs	r1, #32
 80024a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ae:	f3ef 8310 	mrs	r3, PRIMASK
 80024b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80024b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024b8:	2301      	movs	r3, #1
 80024ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024be:	f383 8810 	msr	PRIMASK, r3
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2110      	movs	r1, #16
 80024d0:	438a      	bics	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024da:	f383 8810 	msr	PRIMASK, r3
}
 80024de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe fb9f 	bl	8000c28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	225c      	movs	r2, #92	; 0x5c
 80024ee:	5a9a      	ldrh	r2, [r3, r2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	215e      	movs	r1, #94	; 0x5e
 80024f4:	5a5b      	ldrh	r3, [r3, r1]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	0011      	movs	r1, r2
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f903 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002506:	e0ea      	b.n	80026de <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	225c      	movs	r2, #92	; 0x5c
 800250c:	5a99      	ldrh	r1, [r3, r2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	225e      	movs	r2, #94	; 0x5e
 8002512:	5a9b      	ldrh	r3, [r3, r2]
 8002514:	b29a      	uxth	r2, r3
 8002516:	208e      	movs	r0, #142	; 0x8e
 8002518:	183b      	adds	r3, r7, r0
 800251a:	1a8a      	subs	r2, r1, r2
 800251c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	225e      	movs	r2, #94	; 0x5e
 8002522:	5a9b      	ldrh	r3, [r3, r2]
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d100      	bne.n	800252c <HAL_UART_IRQHandler+0x464>
 800252a:	e0da      	b.n	80026e2 <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 800252c:	183b      	adds	r3, r7, r0
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d100      	bne.n	8002536 <HAL_UART_IRQHandler+0x46e>
 8002534:	e0d5      	b.n	80026e2 <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002536:	f3ef 8310 	mrs	r3, PRIMASK
 800253a:	60fb      	str	r3, [r7, #12]
  return(result);
 800253c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800253e:	2488      	movs	r4, #136	; 0x88
 8002540:	193a      	adds	r2, r7, r4
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f383 8810 	msr	PRIMASK, r3
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4966      	ldr	r1, [pc, #408]	; (80026f4 <HAL_UART_IRQHandler+0x62c>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	193b      	adds	r3, r7, r4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f383 8810 	msr	PRIMASK, r3
}
 800256c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800256e:	f3ef 8310 	mrs	r3, PRIMASK
 8002572:	61bb      	str	r3, [r7, #24]
  return(result);
 8002574:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002576:	2484      	movs	r4, #132	; 0x84
 8002578:	193a      	adds	r2, r7, r4
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	2301      	movs	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f383 8810 	msr	PRIMASK, r3
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4959      	ldr	r1, [pc, #356]	; (80026f8 <HAL_UART_IRQHandler+0x630>)
 8002594:	400a      	ands	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	193b      	adds	r3, r7, r4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f383 8810 	msr	PRIMASK, r3
}
 80025a4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2288      	movs	r2, #136	; 0x88
 80025aa:	2120      	movs	r1, #32
 80025ac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ba:	f3ef 8310 	mrs	r3, PRIMASK
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025c2:	2480      	movs	r4, #128	; 0x80
 80025c4:	193a      	adds	r2, r7, r4
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	2301      	movs	r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2110      	movs	r1, #16
 80025e0:	438a      	bics	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	f383 8810 	msr	PRIMASK, r3
}
 80025f0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025f2:	183b      	adds	r3, r7, r0
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f886 	bl	800270c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002600:	e06f      	b.n	80026e2 <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002602:	23a4      	movs	r3, #164	; 0xa4
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	035b      	lsls	r3, r3, #13
 800260c:	4013      	ands	r3, r2
 800260e:	d010      	beq.n	8002632 <HAL_UART_IRQHandler+0x56a>
 8002610:	239c      	movs	r3, #156	; 0x9c
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	03db      	lsls	r3, r3, #15
 800261a:	4013      	ands	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	0352      	lsls	r2, r2, #13
 8002626:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f001 fb94 	bl	8003d58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002630:	e05a      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002632:	23a4      	movs	r3, #164	; 0xa4
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	4013      	ands	r3, r2
 800263c:	d016      	beq.n	800266c <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800263e:	23a0      	movs	r3, #160	; 0xa0
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	4013      	ands	r3, r2
 8002648:	d106      	bne.n	8002658 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800264a:	239c      	movs	r3, #156	; 0x9c
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	4013      	ands	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265c:	2b00      	cmp	r3, #0
 800265e:	d042      	beq.n	80026e6 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	0010      	movs	r0, r2
 8002668:	4798      	blx	r3
    }
    return;
 800266a:	e03c      	b.n	80026e6 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800266c:	23a4      	movs	r3, #164	; 0xa4
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	4013      	ands	r3, r2
 8002676:	d00a      	beq.n	800268e <HAL_UART_IRQHandler+0x5c6>
 8002678:	23a0      	movs	r3, #160	; 0xa0
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	4013      	ands	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0018      	movs	r0, r3
 8002688:	f000 feea 	bl	8003460 <UART_EndTransmit_IT>
    return;
 800268c:	e02c      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800268e:	23a4      	movs	r3, #164	; 0xa4
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	041b      	lsls	r3, r3, #16
 8002698:	4013      	ands	r3, r2
 800269a:	d00b      	beq.n	80026b4 <HAL_UART_IRQHandler+0x5ec>
 800269c:	23a0      	movs	r3, #160	; 0xa0
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	05db      	lsls	r3, r3, #23
 80026a6:	4013      	ands	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f001 fb63 	bl	8003d78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80026b2:	e019      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80026b4:	23a4      	movs	r3, #164	; 0xa4
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	045b      	lsls	r3, r3, #17
 80026be:	4013      	ands	r3, r2
 80026c0:	d012      	beq.n	80026e8 <HAL_UART_IRQHandler+0x620>
 80026c2:	23a0      	movs	r3, #160	; 0xa0
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da0d      	bge.n	80026e8 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f001 fb4a 	bl	8003d68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80026d4:	e008      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
      return;
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	e006      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
    return;
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	e004      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
      return;
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	e002      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
      return;
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	e000      	b.n	80026e8 <HAL_UART_IRQHandler+0x620>
    return;
 80026e6:	46c0      	nop			; (mov r8, r8)
  }
}
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b02a      	add	sp, #168	; 0xa8
 80026ec:	bdb0      	pop	{r4, r5, r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	fffffeff 	.word	0xfffffeff
 80026f4:	fffffedf 	.word	0xfffffedf
 80026f8:	effffffe 	.word	0xeffffffe

080026fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	000a      	movs	r2, r1
 8002716:	1cbb      	adds	r3, r7, #2
 8002718:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800272c:	231a      	movs	r3, #26
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	4313      	orrs	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4abd      	ldr	r2, [pc, #756]	; (8002a48 <UART_SetConfig+0x324>)
 8002754:	4013      	ands	r3, r2
 8002756:	0019      	movs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4ab8      	ldr	r2, [pc, #736]	; (8002a4c <UART_SetConfig+0x328>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	4313      	orrs	r3, r2
 8002788:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4aaf      	ldr	r2, [pc, #700]	; (8002a50 <UART_SetConfig+0x32c>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	430a      	orrs	r2, r1
 800279e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	220f      	movs	r2, #15
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4aa5      	ldr	r2, [pc, #660]	; (8002a54 <UART_SetConfig+0x330>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d127      	bne.n	8002812 <UART_SetConfig+0xee>
 80027c2:	4ba5      	ldr	r3, [pc, #660]	; (8002a58 <UART_SetConfig+0x334>)
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	2203      	movs	r2, #3
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d017      	beq.n	80027fe <UART_SetConfig+0xda>
 80027ce:	d81b      	bhi.n	8002808 <UART_SetConfig+0xe4>
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d00a      	beq.n	80027ea <UART_SetConfig+0xc6>
 80027d4:	d818      	bhi.n	8002808 <UART_SetConfig+0xe4>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <UART_SetConfig+0xbc>
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d00a      	beq.n	80027f4 <UART_SetConfig+0xd0>
 80027de:	e013      	b.n	8002808 <UART_SetConfig+0xe4>
 80027e0:	231b      	movs	r3, #27
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e058      	b.n	800289c <UART_SetConfig+0x178>
 80027ea:	231b      	movs	r3, #27
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e053      	b.n	800289c <UART_SetConfig+0x178>
 80027f4:	231b      	movs	r3, #27
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2204      	movs	r2, #4
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e04e      	b.n	800289c <UART_SetConfig+0x178>
 80027fe:	231b      	movs	r3, #27
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2208      	movs	r2, #8
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e049      	b.n	800289c <UART_SetConfig+0x178>
 8002808:	231b      	movs	r3, #27
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2210      	movs	r2, #16
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e044      	b.n	800289c <UART_SetConfig+0x178>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a91      	ldr	r2, [pc, #580]	; (8002a5c <UART_SetConfig+0x338>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d127      	bne.n	800286c <UART_SetConfig+0x148>
 800281c:	4b8e      	ldr	r3, [pc, #568]	; (8002a58 <UART_SetConfig+0x334>)
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	220c      	movs	r2, #12
 8002822:	4013      	ands	r3, r2
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d017      	beq.n	8002858 <UART_SetConfig+0x134>
 8002828:	d81b      	bhi.n	8002862 <UART_SetConfig+0x13e>
 800282a:	2b08      	cmp	r3, #8
 800282c:	d00a      	beq.n	8002844 <UART_SetConfig+0x120>
 800282e:	d818      	bhi.n	8002862 <UART_SetConfig+0x13e>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <UART_SetConfig+0x116>
 8002834:	2b04      	cmp	r3, #4
 8002836:	d00a      	beq.n	800284e <UART_SetConfig+0x12a>
 8002838:	e013      	b.n	8002862 <UART_SetConfig+0x13e>
 800283a:	231b      	movs	r3, #27
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e02b      	b.n	800289c <UART_SetConfig+0x178>
 8002844:	231b      	movs	r3, #27
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2202      	movs	r2, #2
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e026      	b.n	800289c <UART_SetConfig+0x178>
 800284e:	231b      	movs	r3, #27
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2204      	movs	r2, #4
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e021      	b.n	800289c <UART_SetConfig+0x178>
 8002858:	231b      	movs	r3, #27
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	2208      	movs	r2, #8
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e01c      	b.n	800289c <UART_SetConfig+0x178>
 8002862:	231b      	movs	r3, #27
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	2210      	movs	r2, #16
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	e017      	b.n	800289c <UART_SetConfig+0x178>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a7b      	ldr	r2, [pc, #492]	; (8002a60 <UART_SetConfig+0x33c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d104      	bne.n	8002880 <UART_SetConfig+0x15c>
 8002876:	231b      	movs	r3, #27
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e00d      	b.n	800289c <UART_SetConfig+0x178>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a77      	ldr	r2, [pc, #476]	; (8002a64 <UART_SetConfig+0x340>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d104      	bne.n	8002894 <UART_SetConfig+0x170>
 800288a:	231b      	movs	r3, #27
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e003      	b.n	800289c <UART_SetConfig+0x178>
 8002894:	231b      	movs	r3, #27
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2210      	movs	r2, #16
 800289a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d000      	beq.n	80028aa <UART_SetConfig+0x186>
 80028a8:	e066      	b.n	8002978 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 80028aa:	231b      	movs	r3, #27
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d015      	beq.n	80028e0 <UART_SetConfig+0x1bc>
 80028b4:	dc18      	bgt.n	80028e8 <UART_SetConfig+0x1c4>
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d00d      	beq.n	80028d6 <UART_SetConfig+0x1b2>
 80028ba:	dc15      	bgt.n	80028e8 <UART_SetConfig+0x1c4>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <UART_SetConfig+0x1a2>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d005      	beq.n	80028d0 <UART_SetConfig+0x1ac>
 80028c4:	e010      	b.n	80028e8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c6:	f7ff f941 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 80028ca:	0003      	movs	r3, r0
 80028cc:	617b      	str	r3, [r7, #20]
        break;
 80028ce:	e012      	b.n	80028f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d0:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <UART_SetConfig+0x344>)
 80028d2:	617b      	str	r3, [r7, #20]
        break;
 80028d4:	e00f      	b.n	80028f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028d6:	f7ff f8ad 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80028da:	0003      	movs	r3, r0
 80028dc:	617b      	str	r3, [r7, #20]
        break;
 80028de:	e00a      	b.n	80028f6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	617b      	str	r3, [r7, #20]
        break;
 80028e6:	e006      	b.n	80028f6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80028ec:	231a      	movs	r3, #26
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2201      	movs	r2, #1
 80028f2:	701a      	strb	r2, [r3, #0]
        break;
 80028f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d100      	bne.n	80028fe <UART_SetConfig+0x1da>
 80028fc:	e08e      	b.n	8002a1c <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002902:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <UART_SetConfig+0x348>)
 8002904:	0052      	lsls	r2, r2, #1
 8002906:	5ad3      	ldrh	r3, [r2, r3]
 8002908:	0019      	movs	r1, r3
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7fd fbf8 	bl	8000100 <__udivsi3>
 8002910:	0003      	movs	r3, r0
 8002912:	005a      	lsls	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	18d2      	adds	r2, r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	0019      	movs	r1, r3
 8002922:	0010      	movs	r0, r2
 8002924:	f7fd fbec 	bl	8000100 <__udivsi3>
 8002928:	0003      	movs	r3, r0
 800292a:	b29b      	uxth	r3, r3
 800292c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d91c      	bls.n	800296e <UART_SetConfig+0x24a>
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	025b      	lsls	r3, r3, #9
 800293a:	429a      	cmp	r2, r3
 800293c:	d217      	bcs.n	800296e <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	b29a      	uxth	r2, r3
 8002942:	200e      	movs	r0, #14
 8002944:	183b      	adds	r3, r7, r0
 8002946:	210f      	movs	r1, #15
 8002948:	438a      	bics	r2, r1
 800294a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	b29b      	uxth	r3, r3
 8002952:	2207      	movs	r2, #7
 8002954:	4013      	ands	r3, r2
 8002956:	b299      	uxth	r1, r3
 8002958:	183b      	adds	r3, r7, r0
 800295a:	183a      	adds	r2, r7, r0
 800295c:	8812      	ldrh	r2, [r2, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	183a      	adds	r2, r7, r0
 8002968:	8812      	ldrh	r2, [r2, #0]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	e056      	b.n	8002a1c <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 800296e:	231a      	movs	r3, #26
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e051      	b.n	8002a1c <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002978:	231b      	movs	r3, #27
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b08      	cmp	r3, #8
 8002980:	d015      	beq.n	80029ae <UART_SetConfig+0x28a>
 8002982:	dc18      	bgt.n	80029b6 <UART_SetConfig+0x292>
 8002984:	2b04      	cmp	r3, #4
 8002986:	d00d      	beq.n	80029a4 <UART_SetConfig+0x280>
 8002988:	dc15      	bgt.n	80029b6 <UART_SetConfig+0x292>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <UART_SetConfig+0x270>
 800298e:	2b02      	cmp	r3, #2
 8002990:	d005      	beq.n	800299e <UART_SetConfig+0x27a>
 8002992:	e010      	b.n	80029b6 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002994:	f7ff f8da 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8002998:	0003      	movs	r3, r0
 800299a:	617b      	str	r3, [r7, #20]
        break;
 800299c:	e012      	b.n	80029c4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800299e:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <UART_SetConfig+0x344>)
 80029a0:	617b      	str	r3, [r7, #20]
        break;
 80029a2:	e00f      	b.n	80029c4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a4:	f7ff f846 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80029a8:	0003      	movs	r3, r0
 80029aa:	617b      	str	r3, [r7, #20]
        break;
 80029ac:	e00a      	b.n	80029c4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	617b      	str	r3, [r7, #20]
        break;
 80029b4:	e006      	b.n	80029c4 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80029ba:	231a      	movs	r3, #26
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
        break;
 80029c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d028      	beq.n	8002a1c <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <UART_SetConfig+0x348>)
 80029d0:	0052      	lsls	r2, r2, #1
 80029d2:	5ad3      	ldrh	r3, [r2, r3]
 80029d4:	0019      	movs	r1, r3
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7fd fb92 	bl	8000100 <__udivsi3>
 80029dc:	0003      	movs	r3, r0
 80029de:	001a      	movs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	18d2      	adds	r2, r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	0019      	movs	r1, r3
 80029ee:	0010      	movs	r0, r2
 80029f0:	f7fd fb86 	bl	8000100 <__udivsi3>
 80029f4:	0003      	movs	r3, r0
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d909      	bls.n	8002a14 <UART_SetConfig+0x2f0>
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	025b      	lsls	r3, r3, #9
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d204      	bcs.n	8002a14 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	e003      	b.n	8002a1c <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002a14:	231a      	movs	r3, #26
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	226a      	movs	r2, #106	; 0x6a
 8002a20:	2101      	movs	r1, #1
 8002a22:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2268      	movs	r2, #104	; 0x68
 8002a28:	2101      	movs	r1, #1
 8002a2a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002a38:	231a      	movs	r3, #26
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b008      	add	sp, #32
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	cfff69f3 	.word	0xcfff69f3
 8002a4c:	ffffcfff 	.word	0xffffcfff
 8002a50:	11fff4ff 	.word	0x11fff4ff
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40004400 	.word	0x40004400
 8002a60:	40004800 	.word	0x40004800
 8002a64:	40004c00 	.word	0x40004c00
 8002a68:	00f42400 	.word	0x00f42400
 8002a6c:	0800408c 	.word	0x0800408c

08002a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d00b      	beq.n	8002a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <UART_AdvFeatureConfig+0x144>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a43      	ldr	r2, [pc, #268]	; (8002bb8 <UART_AdvFeatureConfig+0x148>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	0019      	movs	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d00b      	beq.n	8002ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <UART_AdvFeatureConfig+0x14c>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00b      	beq.n	8002b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a34      	ldr	r2, [pc, #208]	; (8002bc0 <UART_AdvFeatureConfig+0x150>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	2210      	movs	r2, #16
 8002b06:	4013      	ands	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <UART_AdvFeatureConfig+0x154>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	2220      	movs	r2, #32
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d00b      	beq.n	8002b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4a25      	ldr	r2, [pc, #148]	; (8002bc8 <UART_AdvFeatureConfig+0x158>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	0019      	movs	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	2240      	movs	r2, #64	; 0x40
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d01d      	beq.n	8002b8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <UART_AdvFeatureConfig+0x15c>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	035b      	lsls	r3, r3, #13
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d10b      	bne.n	8002b8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <UART_AdvFeatureConfig+0x160>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	4013      	ands	r3, r2
 8002b92:	d00b      	beq.n	8002bac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <UART_AdvFeatureConfig+0x164>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	fffdffff 	.word	0xfffdffff
 8002bb8:	fffeffff 	.word	0xfffeffff
 8002bbc:	fffbffff 	.word	0xfffbffff
 8002bc0:	ffff7fff 	.word	0xffff7fff
 8002bc4:	ffffefff 	.word	0xffffefff
 8002bc8:	ffffdfff 	.word	0xffffdfff
 8002bcc:	ffefffff 	.word	0xffefffff
 8002bd0:	ff9fffff 	.word	0xff9fffff
 8002bd4:	fff7ffff 	.word	0xfff7ffff

08002bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	228c      	movs	r2, #140	; 0x8c
 8002be4:	2100      	movs	r1, #0
 8002be6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002be8:	f7fd fefc 	bl	80009e4 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d10c      	bne.n	8002c18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0391      	lsls	r1, r2, #14
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <UART_CheckIdleState+0x90>)
 8002c08:	9200      	str	r2, [sp, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f000 f82e 	bl	8002c6c <UART_WaitOnFlagUntilTimeout>
 8002c10:	1e03      	subs	r3, r0, #0
 8002c12:	d001      	beq.n	8002c18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e023      	b.n	8002c60 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2204      	movs	r2, #4
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d10c      	bne.n	8002c40 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	03d1      	lsls	r1, r2, #15
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <UART_CheckIdleState+0x90>)
 8002c30:	9200      	str	r2, [sp, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f000 f81a 	bl	8002c6c <UART_WaitOnFlagUntilTimeout>
 8002c38:	1e03      	subs	r3, r0, #0
 8002c3a:	d001      	beq.n	8002c40 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e00f      	b.n	8002c60 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2284      	movs	r2, #132	; 0x84
 8002c44:	2120      	movs	r1, #32
 8002c46:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2288      	movs	r2, #136	; 0x88
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b004      	add	sp, #16
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	01ffffff 	.word	0x01ffffff

08002c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b094      	sub	sp, #80	; 0x50
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7c:	e0a7      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c80:	3301      	adds	r3, #1
 8002c82:	d100      	bne.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002c84:	e0a3      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fd fead 	bl	80009e4 <HAL_GetTick>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d13f      	bne.n	8002d1c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cac:	f383 8810 	msr	PRIMASK, r3
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	494e      	ldr	r1, [pc, #312]	; (8002df8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	f383 8810 	msr	PRIMASK, r3
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cce:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cd8:	2301      	movs	r3, #1
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	f383 8810 	msr	PRIMASK, r3
}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfa:	f383 8810 	msr	PRIMASK, r3
}
 8002cfe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2284      	movs	r2, #132	; 0x84
 8002d04:	2120      	movs	r1, #32
 8002d06:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2288      	movs	r2, #136	; 0x88
 8002d0c:	2120      	movs	r1, #32
 8002d0e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	2100      	movs	r1, #0
 8002d16:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e069      	b.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	d052      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	401a      	ands	r2, r3
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d148      	bne.n	8002dce <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d46:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d4c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d50:	2301      	movs	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f383 8810 	msr	PRIMASK, r3
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4924      	ldr	r1, [pc, #144]	; (8002df8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002d68:	400a      	ands	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f383 8810 	msr	PRIMASK, r3
}
 8002d76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d78:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d82:	2301      	movs	r3, #1
 8002d84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f383 8810 	msr	PRIMASK, r3
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	438a      	bics	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f383 8810 	msr	PRIMASK, r3
}
 8002da8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2284      	movs	r2, #132	; 0x84
 8002dae:	2120      	movs	r1, #32
 8002db0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2288      	movs	r2, #136	; 0x88
 8002db6:	2120      	movs	r1, #32
 8002db8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	228c      	movs	r2, #140	; 0x8c
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e010      	b.n	8002df0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	425a      	negs	r2, r3
 8002dde:	4153      	adcs	r3, r2
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	001a      	movs	r2, r3
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d100      	bne.n	8002dee <UART_WaitOnFlagUntilTimeout+0x182>
 8002dec:	e747      	b.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b014      	add	sp, #80	; 0x50
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	fffffe5f 	.word	0xfffffe5f

08002dfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b094      	sub	sp, #80	; 0x50
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	1dbb      	adds	r3, r7, #6
 8002e08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1dba      	adds	r2, r7, #6
 8002e14:	215c      	movs	r1, #92	; 0x5c
 8002e16:	8812      	ldrh	r2, [r2, #0]
 8002e18:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1dba      	adds	r2, r7, #6
 8002e1e:	215e      	movs	r1, #94	; 0x5e
 8002e20:	8812      	ldrh	r2, [r2, #0]
 8002e22:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	015b      	lsls	r3, r3, #5
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d10d      	bne.n	8002e52 <UART_Start_Receive_IT+0x56>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <UART_Start_Receive_IT+0x4c>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2260      	movs	r2, #96	; 0x60
 8002e42:	496f      	ldr	r1, [pc, #444]	; (8003000 <UART_Start_Receive_IT+0x204>)
 8002e44:	5299      	strh	r1, [r3, r2]
 8002e46:	e02e      	b.n	8002ea6 <UART_Start_Receive_IT+0xaa>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2260      	movs	r2, #96	; 0x60
 8002e4c:	21ff      	movs	r1, #255	; 0xff
 8002e4e:	5299      	strh	r1, [r3, r2]
 8002e50:	e029      	b.n	8002ea6 <UART_Start_Receive_IT+0xaa>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <UART_Start_Receive_IT+0x7a>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d104      	bne.n	8002e6c <UART_Start_Receive_IT+0x70>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2260      	movs	r2, #96	; 0x60
 8002e66:	21ff      	movs	r1, #255	; 0xff
 8002e68:	5299      	strh	r1, [r3, r2]
 8002e6a:	e01c      	b.n	8002ea6 <UART_Start_Receive_IT+0xaa>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2260      	movs	r2, #96	; 0x60
 8002e70:	217f      	movs	r1, #127	; 0x7f
 8002e72:	5299      	strh	r1, [r3, r2]
 8002e74:	e017      	b.n	8002ea6 <UART_Start_Receive_IT+0xaa>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	055b      	lsls	r3, r3, #21
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10d      	bne.n	8002e9e <UART_Start_Receive_IT+0xa2>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <UART_Start_Receive_IT+0x98>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2260      	movs	r2, #96	; 0x60
 8002e8e:	217f      	movs	r1, #127	; 0x7f
 8002e90:	5299      	strh	r1, [r3, r2]
 8002e92:	e008      	b.n	8002ea6 <UART_Start_Receive_IT+0xaa>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2260      	movs	r2, #96	; 0x60
 8002e98:	213f      	movs	r1, #63	; 0x3f
 8002e9a:	5299      	strh	r1, [r3, r2]
 8002e9c:	e003      	b.n	8002ea6 <UART_Start_Receive_IT+0xaa>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2260      	movs	r2, #96	; 0x60
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	228c      	movs	r2, #140	; 0x8c
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2288      	movs	r2, #136	; 0x88
 8002eb2:	2122      	movs	r1, #34	; 0x22
 8002eb4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	f383 8810 	msr	PRIMASK, r3
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	059b      	lsls	r3, r3, #22
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d150      	bne.n	8002f96 <UART_Start_Receive_IT+0x19a>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2268      	movs	r2, #104	; 0x68
 8002ef8:	5a9b      	ldrh	r3, [r3, r2]
 8002efa:	1dba      	adds	r2, r7, #6
 8002efc:	8812      	ldrh	r2, [r2, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d349      	bcc.n	8002f96 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	015b      	lsls	r3, r3, #5
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d107      	bne.n	8002f1e <UART_Start_Receive_IT+0x122>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <UART_Start_Receive_IT+0x208>)
 8002f1a:	671a      	str	r2, [r3, #112]	; 0x70
 8002f1c:	e002      	b.n	8002f24 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a39      	ldr	r2, [pc, #228]	; (8003008 <UART_Start_Receive_IT+0x20c>)
 8002f22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	2100      	movs	r1, #0
 8002f2a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f30:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f32:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f36:	2301      	movs	r3, #1
 8002f38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	0049      	lsls	r1, r1, #1
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f60:	f3ef 8310 	mrs	r3, PRIMASK
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2180      	movs	r1, #128	; 0x80
 8002f82:	0549      	lsls	r1, r1, #21
 8002f84:	430a      	orrs	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	e02e      	b.n	8002ff4 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	015b      	lsls	r3, r3, #5
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d107      	bne.n	8002fb2 <UART_Start_Receive_IT+0x1b6>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <UART_Start_Receive_IT+0x210>)
 8002fae:	671a      	str	r2, [r3, #112]	; 0x70
 8002fb0:	e002      	b.n	8002fb8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a16      	ldr	r2, [pc, #88]	; (8003010 <UART_Start_Receive_IT+0x214>)
 8002fb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8002fc6:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fca:	2301      	movs	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f383 8810 	msr	PRIMASK, r3
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2190      	movs	r1, #144	; 0x90
 8002fe2:	0049      	lsls	r1, r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f383 8810 	msr	PRIMASK, r3
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b014      	add	sp, #80	; 0x50
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	000001ff 	.word	0x000001ff
 8003004:	08003a75 	.word	0x08003a75
 8003008:	08003791 	.word	0x08003791
 800300c:	08003625 	.word	0x08003625
 8003010:	080034b9 	.word	0x080034b9

08003014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08e      	sub	sp, #56	; 0x38
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301c:	f3ef 8310 	mrs	r3, PRIMASK
 8003020:	617b      	str	r3, [r7, #20]
  return(result);
 8003022:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
 8003026:	2301      	movs	r3, #1
 8003028:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4926      	ldr	r1, [pc, #152]	; (80030d8 <UART_EndRxTransfer+0xc4>)
 800303e:	400a      	ands	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f383 8810 	msr	PRIMASK, r3
}
 800304c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304e:	f3ef 8310 	mrs	r3, PRIMASK
 8003052:	623b      	str	r3, [r7, #32]
  return(result);
 8003054:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
 8003058:	2301      	movs	r3, #1
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	491b      	ldr	r1, [pc, #108]	; (80030dc <UART_EndRxTransfer+0xc8>)
 8003070:	400a      	ands	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	f383 8810 	msr	PRIMASK, r3
}
 800307e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d118      	bne.n	80030ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003088:	f3ef 8310 	mrs	r3, PRIMASK
 800308c:	60bb      	str	r3, [r7, #8]
  return(result);
 800308e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003092:	2301      	movs	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2110      	movs	r1, #16
 80030aa:	438a      	bics	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2288      	movs	r2, #136	; 0x88
 80030be:	2120      	movs	r1, #32
 80030c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b00e      	add	sp, #56	; 0x38
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	fffffedf 	.word	0xfffffedf
 80030dc:	effffffe 	.word	0xeffffffe

080030e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	225e      	movs	r2, #94	; 0x5e
 80030f2:	2100      	movs	r1, #0
 80030f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2256      	movs	r2, #86	; 0x56
 80030fa:	2100      	movs	r1, #0
 80030fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0018      	movs	r0, r3
 8003102:	f7ff fafb 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}

0800310e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b08a      	sub	sp, #40	; 0x28
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2284      	movs	r2, #132	; 0x84
 800311a:	589b      	ldr	r3, [r3, r2]
 800311c:	2b21      	cmp	r3, #33	; 0x21
 800311e:	d14c      	bne.n	80031ba <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2256      	movs	r2, #86	; 0x56
 8003124:	5a9b      	ldrh	r3, [r3, r2]
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d132      	bne.n	8003192 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312c:	f3ef 8310 	mrs	r3, PRIMASK
 8003130:	60bb      	str	r3, [r7, #8]
  return(result);
 8003132:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	2301      	movs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2180      	movs	r1, #128	; 0x80
 800314e:	438a      	bics	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f383 8810 	msr	PRIMASK, r3
}
 800315c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315e:	f3ef 8310 	mrs	r3, PRIMASK
 8003162:	617b      	str	r3, [r7, #20]
  return(result);
 8003164:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	2301      	movs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f383 8810 	msr	PRIMASK, r3
}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2140      	movs	r1, #64	; 0x40
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003190:	e013      	b.n	80031ba <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	781a      	ldrb	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2256      	movs	r2, #86	; 0x56
 80031ac:	5a9b      	ldrh	r3, [r3, r2]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b299      	uxth	r1, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2256      	movs	r2, #86	; 0x56
 80031b8:	5299      	strh	r1, [r3, r2]
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b00a      	add	sp, #40	; 0x28
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08c      	sub	sp, #48	; 0x30
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2284      	movs	r2, #132	; 0x84
 80031ce:	589b      	ldr	r3, [r3, r2]
 80031d0:	2b21      	cmp	r3, #33	; 0x21
 80031d2:	d151      	bne.n	8003278 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2256      	movs	r2, #86	; 0x56
 80031d8:	5a9b      	ldrh	r3, [r3, r2]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d132      	bne.n	8003246 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e0:	f3ef 8310 	mrs	r3, PRIMASK
 80031e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80031e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ea:	2301      	movs	r3, #1
 80031ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f383 8810 	msr	PRIMASK, r3
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	438a      	bics	r2, r1
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f383 8810 	msr	PRIMASK, r3
}
 8003210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003212:	f3ef 8310 	mrs	r3, PRIMASK
 8003216:	61bb      	str	r3, [r7, #24]
  return(result);
 8003218:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
 800321c:	2301      	movs	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2140      	movs	r1, #64	; 0x40
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f383 8810 	msr	PRIMASK, r3
}
 8003242:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003244:	e018      	b.n	8003278 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	001a      	movs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	05d2      	lsls	r2, r2, #23
 8003258:	0dd2      	lsrs	r2, r2, #23
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2256      	movs	r2, #86	; 0x56
 800326a:	5a9b      	ldrh	r3, [r3, r2]
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b299      	uxth	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2256      	movs	r2, #86	; 0x56
 8003276:	5299      	strh	r1, [r3, r2]
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b00c      	add	sp, #48	; 0x30
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2284      	movs	r2, #132	; 0x84
 800328c:	589b      	ldr	r3, [r3, r2]
 800328e:	2b21      	cmp	r3, #33	; 0x21
 8003290:	d165      	bne.n	800335e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003292:	232e      	movs	r3, #46	; 0x2e
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	216a      	movs	r1, #106	; 0x6a
 800329a:	5a52      	ldrh	r2, [r2, r1]
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	e059      	b.n	8003354 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2256      	movs	r2, #86	; 0x56
 80032a4:	5a9b      	ldrh	r3, [r3, r2]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d133      	bne.n	8003314 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ac:	f3ef 8310 	mrs	r3, PRIMASK
 80032b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032b2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b6:	2301      	movs	r3, #1
 80032b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4926      	ldr	r1, [pc, #152]	; (8003368 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f383 8810 	msr	PRIMASK, r3
}
 80032dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032de:	f3ef 8310 	mrs	r3, PRIMASK
 80032e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80032e4:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	2301      	movs	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f383 8810 	msr	PRIMASK, r3
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003310:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003312:	e024      	b.n	800335e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	2280      	movs	r2, #128	; 0x80
 800331c:	4013      	ands	r3, r2
 800331e:	d013      	beq.n	8003348 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2256      	movs	r2, #86	; 0x56
 800333a:	5a9b      	ldrh	r3, [r3, r2]
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b299      	uxth	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2256      	movs	r2, #86	; 0x56
 8003346:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003348:	212e      	movs	r1, #46	; 0x2e
 800334a:	187b      	adds	r3, r7, r1
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	187b      	adds	r3, r7, r1
 8003350:	3a01      	subs	r2, #1
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	232e      	movs	r3, #46	; 0x2e
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1a0      	bne.n	80032a0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b00c      	add	sp, #48	; 0x30
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	ff7fffff 	.word	0xff7fffff

0800336c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	; 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2284      	movs	r2, #132	; 0x84
 8003378:	589b      	ldr	r3, [r3, r2]
 800337a:	2b21      	cmp	r3, #33	; 0x21
 800337c:	d16a      	bne.n	8003454 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800337e:	232e      	movs	r3, #46	; 0x2e
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	216a      	movs	r1, #106	; 0x6a
 8003386:	5a52      	ldrh	r2, [r2, r1]
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	e05e      	b.n	800344a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2256      	movs	r2, #86	; 0x56
 8003390:	5a9b      	ldrh	r3, [r3, r2]
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d133      	bne.n	8003400 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003398:	f3ef 8310 	mrs	r3, PRIMASK
 800339c:	60bb      	str	r3, [r7, #8]
  return(result);
 800339e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	2301      	movs	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f383 8810 	msr	PRIMASK, r3
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4928      	ldr	r1, [pc, #160]	; (800345c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80033ba:	400a      	ands	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f383 8810 	msr	PRIMASK, r3
}
 80033c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ca:	f3ef 8310 	mrs	r3, PRIMASK
 80033ce:	617b      	str	r3, [r7, #20]
  return(result);
 80033d0:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	2301      	movs	r3, #1
 80033d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	430a      	orrs	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80033fc:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80033fe:	e029      	b.n	8003454 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	4013      	ands	r3, r2
 800340a:	d018      	beq.n	800343e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	001a      	movs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	05d2      	lsls	r2, r2, #23
 800341e:	0dd2      	lsrs	r2, r2, #23
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2256      	movs	r2, #86	; 0x56
 8003430:	5a9b      	ldrh	r3, [r3, r2]
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b299      	uxth	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2256      	movs	r2, #86	; 0x56
 800343c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800343e:	212e      	movs	r1, #46	; 0x2e
 8003440:	187b      	adds	r3, r7, r1
 8003442:	881a      	ldrh	r2, [r3, #0]
 8003444:	187b      	adds	r3, r7, r1
 8003446:	3a01      	subs	r2, #1
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	232e      	movs	r3, #46	; 0x2e
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d19b      	bne.n	800338c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b00c      	add	sp, #48	; 0x30
 800345a:	bd80      	pop	{r7, pc}
 800345c:	ff7fffff 	.word	0xff7fffff

08003460 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003468:	f3ef 8310 	mrs	r3, PRIMASK
 800346c:	60bb      	str	r3, [r7, #8]
  return(result);
 800346e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	2301      	movs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2140      	movs	r1, #64	; 0x40
 800348a:	438a      	bics	r2, r1
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2284      	movs	r2, #132	; 0x84
 800349e:	2120      	movs	r1, #32
 80034a0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fd f8b6 	bl	800061c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b006      	add	sp, #24
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b090      	sub	sp, #64	; 0x40
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80034c0:	203e      	movs	r0, #62	; 0x3e
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	2160      	movs	r1, #96	; 0x60
 80034c8:	5a52      	ldrh	r2, [r2, r1]
 80034ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2288      	movs	r2, #136	; 0x88
 80034d0:	589b      	ldr	r3, [r3, r2]
 80034d2:	2b22      	cmp	r3, #34	; 0x22
 80034d4:	d000      	beq.n	80034d8 <UART_RxISR_8BIT+0x20>
 80034d6:	e097      	b.n	8003608 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034de:	213c      	movs	r1, #60	; 0x3c
 80034e0:	187b      	adds	r3, r7, r1
 80034e2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	183b      	adds	r3, r7, r0
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b2d9      	uxtb	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	400a      	ands	r2, r1
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	1c5a      	adds	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	225e      	movs	r2, #94	; 0x5e
 8003508:	5a9b      	ldrh	r3, [r3, r2]
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b299      	uxth	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	225e      	movs	r2, #94	; 0x5e
 8003514:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	225e      	movs	r2, #94	; 0x5e
 800351a:	5a9b      	ldrh	r3, [r3, r2]
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d000      	beq.n	8003524 <UART_RxISR_8BIT+0x6c>
 8003522:	e079      	b.n	8003618 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003524:	f3ef 8310 	mrs	r3, PRIMASK
 8003528:	61bb      	str	r3, [r7, #24]
  return(result);
 800352a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800352c:	63bb      	str	r3, [r7, #56]	; 0x38
 800352e:	2301      	movs	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4936      	ldr	r1, [pc, #216]	; (8003620 <UART_RxISR_8BIT+0x168>)
 8003546:	400a      	ands	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003556:	f3ef 8310 	mrs	r3, PRIMASK
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
 8003560:	2301      	movs	r3, #1
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	438a      	bics	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	f383 8810 	msr	PRIMASK, r3
}
 8003586:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2288      	movs	r2, #136	; 0x88
 800358c:	2120      	movs	r1, #32
 800358e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d12f      	bne.n	80035fe <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a4:	f3ef 8310 	mrs	r3, PRIMASK
 80035a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80035aa:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
 80035ae:	2301      	movs	r3, #1
 80035b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f383 8810 	msr	PRIMASK, r3
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2110      	movs	r1, #16
 80035c6:	438a      	bics	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f383 8810 	msr	PRIMASK, r3
}
 80035d4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	2210      	movs	r2, #16
 80035de:	4013      	ands	r3, r2
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d103      	bne.n	80035ec <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2210      	movs	r2, #16
 80035ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	225c      	movs	r2, #92	; 0x5c
 80035f0:	5a9a      	ldrh	r2, [r3, r2]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff f888 	bl	800270c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80035fc:	e00c      	b.n	8003618 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0018      	movs	r0, r3
 8003602:	f7fd f81d 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8003606:	e007      	b.n	8003618 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2108      	movs	r1, #8
 8003614:	430a      	orrs	r2, r1
 8003616:	619a      	str	r2, [r3, #24]
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b010      	add	sp, #64	; 0x40
 800361e:	bd80      	pop	{r7, pc}
 8003620:	fffffedf 	.word	0xfffffedf

08003624 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b090      	sub	sp, #64	; 0x40
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800362c:	203e      	movs	r0, #62	; 0x3e
 800362e:	183b      	adds	r3, r7, r0
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	2160      	movs	r1, #96	; 0x60
 8003634:	5a52      	ldrh	r2, [r2, r1]
 8003636:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2288      	movs	r2, #136	; 0x88
 800363c:	589b      	ldr	r3, [r3, r2]
 800363e:	2b22      	cmp	r3, #34	; 0x22
 8003640:	d000      	beq.n	8003644 <UART_RxISR_16BIT+0x20>
 8003642:	e097      	b.n	8003774 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	213c      	movs	r1, #60	; 0x3c
 800364c:	187b      	adds	r3, r7, r1
 800364e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003656:	187b      	adds	r3, r7, r1
 8003658:	183a      	adds	r2, r7, r0
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	8812      	ldrh	r2, [r2, #0]
 800365e:	4013      	ands	r3, r2
 8003660:	b29a      	uxth	r2, r3
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	225e      	movs	r2, #94	; 0x5e
 8003674:	5a9b      	ldrh	r3, [r3, r2]
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	225e      	movs	r2, #94	; 0x5e
 8003680:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	225e      	movs	r2, #94	; 0x5e
 8003686:	5a9b      	ldrh	r3, [r3, r2]
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d000      	beq.n	8003690 <UART_RxISR_16BIT+0x6c>
 800368e:	e079      	b.n	8003784 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003690:	f3ef 8310 	mrs	r3, PRIMASK
 8003694:	617b      	str	r3, [r7, #20]
  return(result);
 8003696:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
 800369a:	2301      	movs	r3, #1
 800369c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4936      	ldr	r1, [pc, #216]	; (800378c <UART_RxISR_16BIT+0x168>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c2:	f3ef 8310 	mrs	r3, PRIMASK
 80036c6:	623b      	str	r3, [r7, #32]
  return(result);
 80036c8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
 80036cc:	2301      	movs	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2101      	movs	r1, #1
 80036e4:	438a      	bics	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2288      	movs	r2, #136	; 0x88
 80036f8:	2120      	movs	r1, #32
 80036fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d12f      	bne.n	800376a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003710:	f3ef 8310 	mrs	r3, PRIMASK
 8003714:	60bb      	str	r3, [r7, #8]
  return(result);
 8003716:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371a:	2301      	movs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2110      	movs	r1, #16
 8003732:	438a      	bics	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f383 8810 	msr	PRIMASK, r3
}
 8003740:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2210      	movs	r2, #16
 800374a:	4013      	ands	r3, r2
 800374c:	2b10      	cmp	r3, #16
 800374e:	d103      	bne.n	8003758 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2210      	movs	r2, #16
 8003756:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	225c      	movs	r2, #92	; 0x5c
 800375c:	5a9a      	ldrh	r2, [r3, r2]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0011      	movs	r1, r2
 8003762:	0018      	movs	r0, r3
 8003764:	f7fe ffd2 	bl	800270c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003768:	e00c      	b.n	8003784 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f7fc ff67 	bl	8000640 <HAL_UART_RxCpltCallback>
}
 8003772:	e007      	b.n	8003784 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2108      	movs	r1, #8
 8003780:	430a      	orrs	r2, r1
 8003782:	619a      	str	r2, [r3, #24]
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b010      	add	sp, #64	; 0x40
 800378a:	bd80      	pop	{r7, pc}
 800378c:	fffffedf 	.word	0xfffffedf

08003790 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b09c      	sub	sp, #112	; 0x70
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003798:	236a      	movs	r3, #106	; 0x6a
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	2160      	movs	r1, #96	; 0x60
 80037a0:	5a52      	ldrh	r2, [r2, r1]
 80037a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2288      	movs	r2, #136	; 0x88
 80037c0:	589b      	ldr	r3, [r3, r2]
 80037c2:	2b22      	cmp	r3, #34	; 0x22
 80037c4:	d000      	beq.n	80037c8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80037c6:	e141      	b.n	8003a4c <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80037c8:	235e      	movs	r3, #94	; 0x5e
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	2168      	movs	r1, #104	; 0x68
 80037d0:	5a52      	ldrh	r2, [r2, r1]
 80037d2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80037d4:	e0e8      	b.n	80039a8 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037dc:	215c      	movs	r1, #92	; 0x5c
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037e2:	187b      	adds	r3, r7, r1
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	236a      	movs	r3, #106	; 0x6a
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b2d9      	uxtb	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	400a      	ands	r2, r1
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	225e      	movs	r2, #94	; 0x5e
 8003808:	5a9b      	ldrh	r3, [r3, r2]
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b299      	uxth	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	225e      	movs	r2, #94	; 0x5e
 8003814:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800381e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003820:	2207      	movs	r2, #7
 8003822:	4013      	ands	r3, r2
 8003824:	d049      	beq.n	80038ba <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003828:	2201      	movs	r2, #1
 800382a:	4013      	ands	r3, r2
 800382c:	d010      	beq.n	8003850 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800382e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4013      	ands	r3, r2
 8003836:	d00b      	beq.n	8003850 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2201      	movs	r2, #1
 800383e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	228c      	movs	r2, #140	; 0x8c
 8003844:	589b      	ldr	r3, [r3, r2]
 8003846:	2201      	movs	r2, #1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	218c      	movs	r1, #140	; 0x8c
 800384e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d00f      	beq.n	8003878 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800385a:	2201      	movs	r2, #1
 800385c:	4013      	ands	r3, r2
 800385e:	d00b      	beq.n	8003878 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2202      	movs	r2, #2
 8003866:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	228c      	movs	r2, #140	; 0x8c
 800386c:	589b      	ldr	r3, [r3, r2]
 800386e:	2204      	movs	r2, #4
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	218c      	movs	r1, #140	; 0x8c
 8003876:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387a:	2204      	movs	r2, #4
 800387c:	4013      	ands	r3, r2
 800387e:	d00f      	beq.n	80038a0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003882:	2201      	movs	r2, #1
 8003884:	4013      	ands	r3, r2
 8003886:	d00b      	beq.n	80038a0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2204      	movs	r2, #4
 800388e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	228c      	movs	r2, #140	; 0x8c
 8003894:	589b      	ldr	r3, [r3, r2]
 8003896:	2202      	movs	r2, #2
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	218c      	movs	r1, #140	; 0x8c
 800389e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	228c      	movs	r2, #140	; 0x8c
 80038a4:	589b      	ldr	r3, [r3, r2]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7fe ff25 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	228c      	movs	r2, #140	; 0x8c
 80038b6:	2100      	movs	r1, #0
 80038b8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	225e      	movs	r2, #94	; 0x5e
 80038be:	5a9b      	ldrh	r3, [r3, r2]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d170      	bne.n	80039a8 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80038d0:	2301      	movs	r3, #1
 80038d2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	f383 8810 	msr	PRIMASK, r3
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	495f      	ldr	r1, [pc, #380]	; (8003a64 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80038e8:	400a      	ands	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	f383 8810 	msr	PRIMASK, r3
}
 80038f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f8:	f3ef 8310 	mrs	r3, PRIMASK
 80038fc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003900:	657b      	str	r3, [r7, #84]	; 0x54
 8003902:	2301      	movs	r3, #1
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003908:	f383 8810 	msr	PRIMASK, r3
}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4953      	ldr	r1, [pc, #332]	; (8003a68 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 800391a:	400a      	ands	r2, r1
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003924:	f383 8810 	msr	PRIMASK, r3
}
 8003928:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2288      	movs	r2, #136	; 0x88
 800392e:	2120      	movs	r1, #32
 8003930:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d12f      	bne.n	80039a0 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	623b      	str	r3, [r7, #32]
  return(result);
 800394c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800394e:	653b      	str	r3, [r7, #80]	; 0x50
 8003950:	2301      	movs	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2110      	movs	r1, #16
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	f383 8810 	msr	PRIMASK, r3
}
 8003976:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2210      	movs	r2, #16
 8003980:	4013      	ands	r3, r2
 8003982:	2b10      	cmp	r3, #16
 8003984:	d103      	bne.n	800398e <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2210      	movs	r2, #16
 800398c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	225c      	movs	r2, #92	; 0x5c
 8003992:	5a9a      	ldrh	r2, [r3, r2]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f7fe feb7 	bl	800270c <HAL_UARTEx_RxEventCallback>
 800399e:	e003      	b.n	80039a8 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7fc fe4c 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80039a8:	235e      	movs	r3, #94	; 0x5e
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <UART_RxISR_8BIT_FIFOEN+0x22c>
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	2220      	movs	r2, #32
 80039b6:	4013      	ands	r3, r2
 80039b8:	d000      	beq.n	80039bc <UART_RxISR_8BIT_FIFOEN+0x22c>
 80039ba:	e70c      	b.n	80037d6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80039bc:	204e      	movs	r0, #78	; 0x4e
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	215e      	movs	r1, #94	; 0x5e
 80039c4:	5a52      	ldrh	r2, [r2, r1]
 80039c6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80039c8:	0001      	movs	r1, r0
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d044      	beq.n	8003a5c <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2268      	movs	r2, #104	; 0x68
 80039d6:	5a9b      	ldrh	r3, [r3, r2]
 80039d8:	187a      	adds	r2, r7, r1
 80039da:	8812      	ldrh	r2, [r2, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d23d      	bcs.n	8003a5c <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e0:	f3ef 8310 	mrs	r3, PRIMASK
 80039e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80039e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039ea:	2301      	movs	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f383 8810 	msr	PRIMASK, r3
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	491a      	ldr	r1, [pc, #104]	; (8003a6c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003a02:	400a      	ands	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003a16:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8003a1e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a20:	647b      	str	r3, [r7, #68]	; 0x44
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2120      	movs	r1, #32
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a4a:	e007      	b.n	8003a5c <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2108      	movs	r1, #8
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	619a      	str	r2, [r3, #24]
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b01c      	add	sp, #112	; 0x70
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	fffffeff 	.word	0xfffffeff
 8003a68:	effffffe 	.word	0xeffffffe
 8003a6c:	efffffff 	.word	0xefffffff
 8003a70:	080034b9 	.word	0x080034b9

08003a74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b09e      	sub	sp, #120	; 0x78
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003a7c:	2372      	movs	r3, #114	; 0x72
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	2160      	movs	r1, #96	; 0x60
 8003a84:	5a52      	ldrh	r2, [r2, r1]
 8003a86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2288      	movs	r2, #136	; 0x88
 8003aa4:	589b      	ldr	r3, [r3, r2]
 8003aa6:	2b22      	cmp	r3, #34	; 0x22
 8003aa8:	d000      	beq.n	8003aac <UART_RxISR_16BIT_FIFOEN+0x38>
 8003aaa:	e141      	b.n	8003d30 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003aac:	2366      	movs	r3, #102	; 0x66
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	2168      	movs	r1, #104	; 0x68
 8003ab4:	5a52      	ldrh	r2, [r2, r1]
 8003ab6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ab8:	e0e8      	b.n	8003c8c <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac0:	2164      	movs	r1, #100	; 0x64
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	2272      	movs	r2, #114	; 0x72
 8003ad0:	18ba      	adds	r2, r7, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	8812      	ldrh	r2, [r2, #0]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003adc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	225e      	movs	r2, #94	; 0x5e
 8003aec:	5a9b      	ldrh	r3, [r3, r2]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b299      	uxth	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	225e      	movs	r2, #94	; 0x5e
 8003af8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b04:	2207      	movs	r2, #7
 8003b06:	4013      	ands	r3, r2
 8003b08:	d049      	beq.n	8003b9e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d010      	beq.n	8003b34 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003b12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	228c      	movs	r2, #140	; 0x8c
 8003b28:	589b      	ldr	r3, [r3, r2]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	218c      	movs	r1, #140	; 0x8c
 8003b32:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	2202      	movs	r2, #2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00f      	beq.n	8003b5c <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	228c      	movs	r2, #140	; 0x8c
 8003b50:	589b      	ldr	r3, [r3, r2]
 8003b52:	2204      	movs	r2, #4
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	218c      	movs	r1, #140	; 0x8c
 8003b5a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5e:	2204      	movs	r2, #4
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00f      	beq.n	8003b84 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b66:	2201      	movs	r2, #1
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2204      	movs	r2, #4
 8003b72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	228c      	movs	r2, #140	; 0x8c
 8003b78:	589b      	ldr	r3, [r3, r2]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	218c      	movs	r1, #140	; 0x8c
 8003b82:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	228c      	movs	r2, #140	; 0x8c
 8003b88:	589b      	ldr	r3, [r3, r2]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fe fdb3 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	228c      	movs	r2, #140	; 0x8c
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	225e      	movs	r2, #94	; 0x5e
 8003ba2:	5a9b      	ldrh	r3, [r3, r2]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d170      	bne.n	8003c8c <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003baa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bba:	f383 8810 	msr	PRIMASK, r3
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	495f      	ldr	r1, [pc, #380]	; (8003d48 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd6:	f383 8810 	msr	PRIMASK, r3
}
 8003bda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003be6:	2301      	movs	r3, #1
 8003be8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bec:	f383 8810 	msr	PRIMASK, r3
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4953      	ldr	r1, [pc, #332]	; (8003d4c <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8003bfe:	400a      	ands	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c04:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2288      	movs	r2, #136	; 0x88
 8003c12:	2120      	movs	r1, #32
 8003c14:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d12f      	bne.n	8003c84 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	2301      	movs	r3, #1
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	f383 8810 	msr	PRIMASK, r3
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2110      	movs	r1, #16
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	f383 8810 	msr	PRIMASK, r3
}
 8003c5a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2210      	movs	r2, #16
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d103      	bne.n	8003c72 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2210      	movs	r2, #16
 8003c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	225c      	movs	r2, #92	; 0x5c
 8003c76:	5a9a      	ldrh	r2, [r3, r2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7fe fd45 	bl	800270c <HAL_UARTEx_RxEventCallback>
 8003c82:	e003      	b.n	8003c8c <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fc fcda 	bl	8000640 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003c8c:	2366      	movs	r3, #102	; 0x66
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8003c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c98:	2220      	movs	r2, #32
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d000      	beq.n	8003ca0 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8003c9e:	e70c      	b.n	8003aba <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003ca0:	2052      	movs	r0, #82	; 0x52
 8003ca2:	183b      	adds	r3, r7, r0
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	215e      	movs	r1, #94	; 0x5e
 8003ca8:	5a52      	ldrh	r2, [r2, r1]
 8003caa:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003cac:	0001      	movs	r1, r0
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d044      	beq.n	8003d40 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2268      	movs	r2, #104	; 0x68
 8003cba:	5a9b      	ldrh	r3, [r3, r2]
 8003cbc:	187a      	adds	r2, r7, r1
 8003cbe:	8812      	ldrh	r2, [r2, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d23d      	bcs.n	8003d40 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cce:	2301      	movs	r3, #1
 8003cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	491a      	ldr	r1, [pc, #104]	; (8003d50 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003ce6:	400a      	ands	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f383 8810 	msr	PRIMASK, r3
}
 8003cf4:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003cfa:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d02:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d06:	2301      	movs	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2120      	movs	r1, #32
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d2e:	e007      	b.n	8003d40 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2108      	movs	r1, #8
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	619a      	str	r2, [r3, #24]
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	b01e      	add	sp, #120	; 0x78
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	fffffeff 	.word	0xfffffeff
 8003d4c:	effffffe 	.word	0xeffffffe
 8003d50:	efffffff 	.word	0xefffffff
 8003d54:	08003625 	.word	0x08003625

08003d58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	5c9b      	ldrb	r3, [r3, r2]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_UARTEx_DisableFifoMode+0x16>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e027      	b.n	8003dee <HAL_UARTEx_DisableFifoMode+0x66>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2284      	movs	r2, #132	; 0x84
 8003daa:	2124      	movs	r1, #36	; 0x24
 8003dac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	438a      	bics	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2284      	movs	r2, #132	; 0x84
 8003de0:	2120      	movs	r1, #32
 8003de2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	2100      	movs	r1, #0
 8003dea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b004      	add	sp, #16
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	dfffffff 	.word	0xdfffffff

08003dfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2280      	movs	r2, #128	; 0x80
 8003e0a:	5c9b      	ldrb	r3, [r3, r2]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e02e      	b.n	8003e72 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	2101      	movs	r1, #1
 8003e1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2284      	movs	r2, #132	; 0x84
 8003e20:	2124      	movs	r1, #36	; 0x24
 8003e22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	08d9      	lsrs	r1, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	0018      	movs	r0, r3
 8003e54:	f000 f854 	bl	8003f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2284      	movs	r2, #132	; 0x84
 8003e64:	2120      	movs	r1, #32
 8003e66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2280      	movs	r2, #128	; 0x80
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b004      	add	sp, #16
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2280      	movs	r2, #128	; 0x80
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e02f      	b.n	8003ef4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2280      	movs	r2, #128	; 0x80
 8003e98:	2101      	movs	r1, #1
 8003e9a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2284      	movs	r2, #132	; 0x84
 8003ea0:	2124      	movs	r1, #36	; 0x24
 8003ea2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	438a      	bics	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	4a0e      	ldr	r2, [pc, #56]	; (8003efc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f813 	bl	8003f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2284      	movs	r2, #132	; 0x84
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	f1ffffff 	.word	0xf1ffffff

08003f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	226a      	movs	r2, #106	; 0x6a
 8003f14:	2101      	movs	r1, #1
 8003f16:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2268      	movs	r2, #104	; 0x68
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f20:	e043      	b.n	8003faa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f22:	260f      	movs	r6, #15
 8003f24:	19bb      	adds	r3, r7, r6
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f2a:	200e      	movs	r0, #14
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	2208      	movs	r2, #8
 8003f30:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	0e5b      	lsrs	r3, r3, #25
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	240d      	movs	r4, #13
 8003f3e:	193b      	adds	r3, r7, r4
 8003f40:	2107      	movs	r1, #7
 8003f42:	400a      	ands	r2, r1
 8003f44:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	0f5b      	lsrs	r3, r3, #29
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	250c      	movs	r5, #12
 8003f52:	197b      	adds	r3, r7, r5
 8003f54:	2107      	movs	r1, #7
 8003f56:	400a      	ands	r2, r1
 8003f58:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f5a:	183b      	adds	r3, r7, r0
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	197a      	adds	r2, r7, r5
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	4914      	ldr	r1, [pc, #80]	; (8003fb4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f64:	5c8a      	ldrb	r2, [r1, r2]
 8003f66:	435a      	muls	r2, r3
 8003f68:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f6a:	197b      	adds	r3, r7, r5
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f72:	0019      	movs	r1, r3
 8003f74:	f7fc f94e 	bl	8000214 <__divsi3>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	b299      	uxth	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	226a      	movs	r2, #106	; 0x6a
 8003f80:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f82:	19bb      	adds	r3, r7, r6
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	193a      	adds	r2, r7, r4
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	490a      	ldr	r1, [pc, #40]	; (8003fb4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003f8c:	5c8a      	ldrb	r2, [r1, r2]
 8003f8e:	435a      	muls	r2, r3
 8003f90:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f92:	193b      	adds	r3, r7, r4
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	f7fc f93a 	bl	8000214 <__divsi3>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2268      	movs	r2, #104	; 0x68
 8003fa8:	5299      	strh	r1, [r3, r2]
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b005      	add	sp, #20
 8003fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	080040a4 	.word	0x080040a4
 8003fb8:	080040ac 	.word	0x080040ac

08003fbc <__libc_init_array>:
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	4d0c      	ldr	r5, [pc, #48]	; (8003ff4 <__libc_init_array+0x38>)
 8003fc2:	4c0d      	ldr	r4, [pc, #52]	; (8003ff8 <__libc_init_array+0x3c>)
 8003fc4:	1b64      	subs	r4, r4, r5
 8003fc6:	10a4      	asrs	r4, r4, #2
 8003fc8:	42a6      	cmp	r6, r4
 8003fca:	d109      	bne.n	8003fe0 <__libc_init_array+0x24>
 8003fcc:	2600      	movs	r6, #0
 8003fce:	f000 f821 	bl	8004014 <_init>
 8003fd2:	4d0a      	ldr	r5, [pc, #40]	; (8003ffc <__libc_init_array+0x40>)
 8003fd4:	4c0a      	ldr	r4, [pc, #40]	; (8004000 <__libc_init_array+0x44>)
 8003fd6:	1b64      	subs	r4, r4, r5
 8003fd8:	10a4      	asrs	r4, r4, #2
 8003fda:	42a6      	cmp	r6, r4
 8003fdc:	d105      	bne.n	8003fea <__libc_init_array+0x2e>
 8003fde:	bd70      	pop	{r4, r5, r6, pc}
 8003fe0:	00b3      	lsls	r3, r6, #2
 8003fe2:	58eb      	ldr	r3, [r5, r3]
 8003fe4:	4798      	blx	r3
 8003fe6:	3601      	adds	r6, #1
 8003fe8:	e7ee      	b.n	8003fc8 <__libc_init_array+0xc>
 8003fea:	00b3      	lsls	r3, r6, #2
 8003fec:	58eb      	ldr	r3, [r5, r3]
 8003fee:	4798      	blx	r3
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	e7f2      	b.n	8003fda <__libc_init_array+0x1e>
 8003ff4:	080040b4 	.word	0x080040b4
 8003ff8:	080040b4 	.word	0x080040b4
 8003ffc:	080040b4 	.word	0x080040b4
 8004000:	080040b8 	.word	0x080040b8

08004004 <memset>:
 8004004:	0003      	movs	r3, r0
 8004006:	1882      	adds	r2, r0, r2
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	7019      	strb	r1, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <_init>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr

08004020 <_fini>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr
