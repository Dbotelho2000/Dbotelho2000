
dtSerialPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003594  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003770  08003770  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003770  08003770  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003770  08003770  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  080037e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080037e8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae61  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bec  00000000  00000000  0002aef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0002cae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a41  00000000  00000000  0002daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b098  00000000  00000000  00043531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843c5  00000000  00000000  0004e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d298e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002444  00000000  00000000  000d29e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003634 	.word	0x08003634

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08003634 	.word	0x08003634

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f000 fa6b 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 f839 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f000 f8cd 	bl	80005ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000412:	f000 f87d 	bl	8000510 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 for(j = 0; j < 10; j++){
 8000416:	2300      	movs	r3, #0
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	e028      	b.n	800046e <main+0x6e>
		 for(i = 0; i < 11; i++){
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	e011      	b.n	8000446 <main+0x46>
			 if(i<j){
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	429a      	cmp	r2, r3
 8000428:	da05      	bge.n	8000436 <main+0x36>
				 message[i] = ' ';
 800042a:	4a13      	ldr	r2, [pc, #76]	; (8000478 <main+0x78>)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	18d3      	adds	r3, r2, r3
 8000430:	2220      	movs	r2, #32
 8000432:	701a      	strb	r2, [r3, #0]
 8000434:	e004      	b.n	8000440 <main+0x40>
			 }else{
				 message[i] = '*';
 8000436:	4a10      	ldr	r2, [pc, #64]	; (8000478 <main+0x78>)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	222a      	movs	r2, #42	; 0x2a
 800043e:	701a      	strb	r2, [r3, #0]
		 for(i = 0; i < 11; i++){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3301      	adds	r3, #1
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b0a      	cmp	r3, #10
 800044a:	ddea      	ble.n	8000422 <main+0x22>
			 }
		 }
		 message[11] = '\r';
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <main+0x78>)
 800044e:	220d      	movs	r2, #13
 8000450:	72da      	strb	r2, [r3, #11]
		 message[12] = "\n";
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <main+0x7c>)
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <main+0x78>)
 8000458:	731a      	strb	r2, [r3, #12]
		 printf(message);
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <main+0x78>)
 800045c:	0018      	movs	r0, r3
 800045e:	f002 f911 	bl	8002684 <iprintf>
		 HAL_Delay(100);
 8000462:	2064      	movs	r0, #100	; 0x64
 8000464:	f000 fac2 	bl	80009ec <HAL_Delay>
	 for(j = 0; j < 10; j++){
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	603b      	str	r3, [r7, #0]
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	2b09      	cmp	r3, #9
 8000472:	ddd3      	ble.n	800041c <main+0x1c>
 8000474:	e7cf      	b.n	8000416 <main+0x16>
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	2000011c 	.word	0x2000011c
 800047c:	0800364c 	.word	0x0800364c

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b093      	sub	sp, #76	; 0x4c
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	2414      	movs	r4, #20
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2334      	movs	r3, #52	; 0x34
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f002 f8ef 	bl	8002674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	0018      	movs	r0, r3
 800049a:	2310      	movs	r3, #16
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f002 f8e8 	bl	8002674 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fcf1 	bl	8000e90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2202      	movs	r2, #2
 80004b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	0052      	lsls	r2, r2, #1
 80004ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2240      	movs	r2, #64	; 0x40
 80004c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fd29 	bl	8000f28 <HAL_RCC_OscConfig>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004da:	f000 f891 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2100      	movs	r1, #0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 f82a 	bl	8001554 <HAL_RCC_ClockConfig>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000504:	f000 f87c 	bl	8000600 <Error_Handler>
  }
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b013      	add	sp, #76	; 0x4c
 800050e:	bd90      	pop	{r4, r7, pc}

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000516:	4a24      	ldr	r2, [pc, #144]	; (80005a8 <MX_USART2_UART_Init+0x98>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800051a:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800051c:	22e1      	movs	r2, #225	; 0xe1
 800051e:	0252      	lsls	r2, r2, #9
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 8000554:	2200      	movs	r2, #0
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fad8 	bl	8001b10 <HAL_UART_Init>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000564:	f000 f84c 	bl	8000600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f001 ff77 	bl	8002460 <HAL_UARTEx_SetTxFifoThreshold>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000576:	f000 f843 	bl	8000600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800057c:	2100      	movs	r1, #0
 800057e:	0018      	movs	r0, r3
 8000580:	f001 ffae 	bl	80024e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000588:	f000 f83a 	bl	8000600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MX_USART2_UART_Init+0x94>)
 800058e:	0018      	movs	r0, r3
 8000590:	f001 ff2c 	bl	80023ec <HAL_UARTEx_DisableFifoMode>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000598:	f000 f832 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	2000008c 	.word	0x2000008c
 80005a8:	40004400 	.word	0x40004400

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005b8:	2101      	movs	r1, #1
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	; 0x34
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <MX_GPIO_Init+0x28>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c2:	2201      	movs	r2, #1
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	0002      	movs	r2, r0
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 80005e4:	1df9      	adds	r1, r7, #7
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <__io_putchar+0x24>)
 80005e8:	2301      	movs	r3, #1
 80005ea:	2201      	movs	r2, #1
 80005ec:	f001 fae6 	bl	8001bbc <HAL_UART_Transmit>
	return ch;
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	781b      	ldrb	r3, [r3, #0]
}
 80005f4:	0018      	movs	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000008c 	.word	0x2000008c

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	e7fe      	b.n	8000608 <Error_Handler+0x8>
	...

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <HAL_MspInit+0x4c>)
 8000614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_MspInit+0x4c>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_MspInit+0x4c>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HAL_MspInit+0x4c>)
 800062c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_MspInit+0x4c>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0549      	lsls	r1, r1, #21
 8000634:	430a      	orrs	r2, r1
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_MspInit+0x4c>)
 800063a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	055b      	lsls	r3, r3, #21
 8000640:	4013      	ands	r3, r2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000646:	23c0      	movs	r3, #192	; 0xc0
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f9f2 	bl	8000a34 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b091      	sub	sp, #68	; 0x44
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	232c      	movs	r3, #44	; 0x2c
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	0018      	movs	r0, r3
 800066a:	2314      	movs	r3, #20
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f002 f800 	bl	8002674 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	2410      	movs	r4, #16
 8000676:	193b      	adds	r3, r7, r4
 8000678:	0018      	movs	r0, r3
 800067a:	231c      	movs	r3, #28
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f001 fff8 	bl	8002674 <memset>
  if(huart->Instance==USART2)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <HAL_UART_MspInit+0xb8>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d13e      	bne.n	800070c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2202      	movs	r2, #2
 8000692:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	f001 f903 	bl	80018a8 <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80006a6:	f7ff ffab 	bl	8000600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <HAL_UART_MspInit+0xbc>)
 80006ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <HAL_UART_MspInit+0xbc>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0289      	lsls	r1, r1, #10
 80006b4:	430a      	orrs	r2, r1
 80006b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <HAL_UART_MspInit+0xbc>)
 80006ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	029b      	lsls	r3, r3, #10
 80006c0:	4013      	ands	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <HAL_UART_MspInit+0xbc>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_UART_MspInit+0xbc>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <HAL_UART_MspInit+0xbc>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006de:	212c      	movs	r1, #44	; 0x2c
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	220c      	movs	r2, #12
 80006e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2202      	movs	r2, #2
 80006ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2201      	movs	r2, #1
 80006fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	187a      	adds	r2, r7, r1
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fa5e 	bl	8000bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b011      	add	sp, #68	; 0x44
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	40004400 	.word	0x40004400
 8000718:	40021000 	.word	0x40021000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f938 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	e00a      	b.n	8000772 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800075c:	e000      	b.n	8000760 <_read+0x16>
 800075e:	bf00      	nop
 8000760:	0001      	movs	r1, r0
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	60ba      	str	r2, [r7, #8]
 8000768:	b2ca      	uxtb	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	429a      	cmp	r2, r3
 8000778:	dbf0      	blt.n	800075c <_read+0x12>
	}

return len;
 800077a:	687b      	ldr	r3, [r7, #4]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b006      	add	sp, #24
 8000782:	bd80      	pop	{r7, pc}

08000784 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e009      	b.n	80007aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	60ba      	str	r2, [r7, #8]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff ff1a 	bl	80005d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	3301      	adds	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	dbf1      	blt.n	8000796 <_write+0x12>
	}
	return len;
 80007b2:	687b      	ldr	r3, [r7, #4]
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b006      	add	sp, #24
 80007ba:	bd80      	pop	{r7, pc}

080007bc <_close>:

int _close(int file)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	return -1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	425b      	negs	r3, r3
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b002      	add	sp, #8
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	605a      	str	r2, [r3, #4]
	return 0;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_isatty>:

int _isatty(int file)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bd80      	pop	{r7, pc}

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	18d3      	adds	r3, r2, r3
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f001 feec 	bl	8002620 <__errno>
 8000848:	0003      	movs	r3, r0
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	2301      	movs	r3, #1
 8000850:	425b      	negs	r3, r3
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b006      	add	sp, #24
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20009000 	.word	0x20009000
 8000874:	00000400 	.word	0x00000400
 8000878:	2000012c 	.word	0x2000012c
 800087c:	20000148 	.word	0x20000148

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000890:	f7ff fff6 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ba:	f001 feb7 	bl	800262c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008be:	f7ff fd9f 	bl	8000400 <main>

080008c2 <LoopForever>:

LoopForever:
  b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008d0:	08003778 	.word	0x08003778
  ldr r2, =_sbss
 80008d4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008d8:	20000144 	.word	0x20000144

080008dc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_IRQHandler>
	...

080008e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_Init+0x3c>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_Init+0x3c>)
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	0049      	lsls	r1, r1, #1
 80008f6:	430a      	orrs	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fa:	2003      	movs	r0, #3
 80008fc:	f000 f810 	bl	8000920 <HAL_InitTick>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d003      	beq.n	800090c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
 800090a:	e001      	b.n	8000910 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff fe7e 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_InitTick+0x88>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d02b      	beq.n	8000990 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HAL_InitTick+0x8c>)
 800093a:	681c      	ldr	r4, [r3, #0]
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_InitTick+0x88>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0019      	movs	r1, r3
 8000942:	23fa      	movs	r3, #250	; 0xfa
 8000944:	0098      	lsls	r0, r3, #2
 8000946:	f7ff fbe5 	bl	8000114 <__udivsi3>
 800094a:	0003      	movs	r3, r0
 800094c:	0019      	movs	r1, r3
 800094e:	0020      	movs	r0, r4
 8000950:	f7ff fbe0 	bl	8000114 <__udivsi3>
 8000954:	0003      	movs	r3, r0
 8000956:	0018      	movs	r0, r3
 8000958:	f000 f929 	bl	8000bae <HAL_SYSTICK_Config>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d112      	bne.n	8000986 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b03      	cmp	r3, #3
 8000964:	d80a      	bhi.n	800097c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	2301      	movs	r3, #1
 800096a:	425b      	negs	r3, r3
 800096c:	2200      	movs	r2, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f000 f908 	bl	8000b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_InitTick+0x90>)
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	e00d      	b.n	8000998 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800097c:	230f      	movs	r3, #15
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e008      	b.n	8000998 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000986:	230f      	movs	r3, #15
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	e003      	b.n	8000998 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000990:	230f      	movs	r3, #15
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000998:	230f      	movs	r3, #15
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781b      	ldrb	r3, [r3, #0]
}
 800099e:	0018      	movs	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b005      	add	sp, #20
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	18d2      	adds	r2, r2, r3
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_IncTick+0x20>)
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000130 	.word	0x20000130

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	20000130 	.word	0x20000130

080009ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f4:	f7ff fff0 	bl	80009d8 <HAL_GetTick>
 80009f8:	0003      	movs	r3, r0
 80009fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3301      	adds	r3, #1
 8000a04:	d005      	beq.n	8000a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_Delay+0x44>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	189b      	adds	r3, r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	f7ff ffe0 	bl	80009d8 <HAL_GetTick>
 8000a18:	0002      	movs	r2, r0
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d8f7      	bhi.n	8000a14 <HAL_Delay+0x28>
  {
  }
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b004      	add	sp, #16
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000a42:	4013      	ands	r3, r2
 8000a44:	0019      	movs	r1, r3
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40010000 	.word	0x40010000
 8000a5c:	fffff9ff 	.word	0xfffff9ff

08000a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0002      	movs	r2, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b7f      	cmp	r3, #127	; 0x7f
 8000a74:	d828      	bhi.n	8000ac8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a76:	4a2f      	ldr	r2, [pc, #188]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	089b      	lsrs	r3, r3, #2
 8000a80:	33c0      	adds	r3, #192	; 0xc0
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	589b      	ldr	r3, [r3, r2]
 8000a86:	1dfa      	adds	r2, r7, #7
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	400a      	ands	r2, r1
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	21ff      	movs	r1, #255	; 0xff
 8000a94:	4091      	lsls	r1, r2
 8000a96:	000a      	movs	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	22ff      	movs	r2, #255	; 0xff
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2303      	movs	r3, #3
 8000aae:	4003      	ands	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	481f      	ldr	r0, [pc, #124]	; (8000b34 <__NVIC_SetPriority+0xd4>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	33c0      	adds	r3, #192	; 0xc0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ac6:	e031      	b.n	8000b2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0019      	movs	r1, r3
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	3b08      	subs	r3, #8
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	3306      	adds	r3, #6
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	3304      	adds	r3, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1dfa      	adds	r2, r7, #7
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	2203      	movs	r2, #3
 8000aea:	400a      	ands	r2, r1
 8000aec:	00d2      	lsls	r2, r2, #3
 8000aee:	21ff      	movs	r1, #255	; 0xff
 8000af0:	4091      	lsls	r1, r2
 8000af2:	000a      	movs	r2, r1
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	401a      	ands	r2, r3
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0018      	movs	r0, r3
 8000b08:	2303      	movs	r3, #3
 8000b0a:	4003      	ands	r3, r0
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <__NVIC_SetPriority+0xd8>)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001c      	movs	r4, r3
 8000b18:	230f      	movs	r3, #15
 8000b1a:	4023      	ands	r3, r4
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	089b      	lsrs	r3, r3, #2
 8000b20:	430a      	orrs	r2, r1
 8000b22:	3306      	adds	r3, #6
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	18c3      	adds	r3, r0, r3
 8000b28:	3304      	adds	r3, #4
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	46c0      	nop			; (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	045b      	lsls	r3, r3, #17
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d301      	bcc.n	8000b54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b50:	2301      	movs	r3, #1
 8000b52:	e010      	b.n	8000b76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SysTick_Config+0x44>)
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	3a01      	subs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2103      	movs	r1, #3
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff ff7c 	bl	8000a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SysTick_Config+0x44>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Config+0x44>)
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e000e010 	.word	0xe000e010

08000b84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	210f      	movs	r1, #15
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	1c02      	adds	r2, r0, #0
 8000b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	187b      	adds	r3, r7, r1
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b25b      	sxtb	r3, r3
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff ff5d 	bl	8000a60 <__NVIC_SetPriority>
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ffbf 	bl	8000b3c <SysTick_Config>
 8000bbe:	0003      	movs	r3, r0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd6:	e147      	b.n	8000e68 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4091      	lsls	r1, r2
 8000be2:	000a      	movs	r2, r1
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d100      	bne.n	8000bf0 <HAL_GPIO_Init+0x28>
 8000bee:	e138      	b.n	8000e62 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d005      	beq.n	8000c08 <HAL_GPIO_Init+0x40>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2203      	movs	r2, #3
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d130      	bne.n	8000c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	409a      	lsls	r2, r3
 8000c16:	0013      	movs	r3, r2
 8000c18:	43da      	mvns	r2, r3
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	409a      	lsls	r2, r3
 8000c2a:	0013      	movs	r3, r2
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c3e:	2201      	movs	r2, #1
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	43da      	mvns	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	2201      	movs	r2, #1
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2203      	movs	r2, #3
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d017      	beq.n	8000ca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	43da      	mvns	r2, r3
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d123      	bne.n	8000cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	58d3      	ldr	r3, [r2, r3]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2207      	movs	r2, #7
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2107      	movs	r1, #7
 8000cde:	400b      	ands	r3, r1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	409a      	lsls	r2, r3
 8000ce4:	0013      	movs	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	0092      	lsls	r2, r2, #2
 8000cf6:	6939      	ldr	r1, [r7, #16]
 8000cf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2203      	movs	r2, #3
 8000d18:	401a      	ands	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	23c0      	movs	r3, #192	; 0xc0
 8000d34:	029b      	lsls	r3, r3, #10
 8000d36:	4013      	ands	r3, r2
 8000d38:	d100      	bne.n	8000d3c <HAL_GPIO_Init+0x174>
 8000d3a:	e092      	b.n	8000e62 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d3c:	4a50      	ldr	r2, [pc, #320]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3318      	adds	r3, #24
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	589b      	ldr	r3, [r3, r2]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4013      	ands	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	220f      	movs	r2, #15
 8000d54:	409a      	lsls	r2, r3
 8000d56:	0013      	movs	r3, r2
 8000d58:	43da      	mvns	r2, r3
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d013      	beq.n	8000d92 <HAL_GPIO_Init+0x1ca>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <HAL_GPIO_Init+0x2bc>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d00d      	beq.n	8000d8e <HAL_GPIO_Init+0x1c6>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a44      	ldr	r2, [pc, #272]	; (8000e88 <HAL_GPIO_Init+0x2c0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d007      	beq.n	8000d8a <HAL_GPIO_Init+0x1c2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a43      	ldr	r2, [pc, #268]	; (8000e8c <HAL_GPIO_Init+0x2c4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_GPIO_Init+0x1be>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x1cc>
 8000d86:	2305      	movs	r3, #5
 8000d88:	e004      	b.n	8000d94 <HAL_GPIO_Init+0x1cc>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e002      	b.n	8000d94 <HAL_GPIO_Init+0x1cc>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <HAL_GPIO_Init+0x1cc>
 8000d92:	2300      	movs	r3, #0
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	2103      	movs	r1, #3
 8000d98:	400a      	ands	r2, r1
 8000d9a:	00d2      	lsls	r2, r2, #3
 8000d9c:	4093      	lsls	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000da4:	4936      	ldr	r1, [pc, #216]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3318      	adds	r3, #24
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000db2:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	58d3      	ldr	r3, [r2, r3]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43da      	mvns	r2, r3
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	025b      	lsls	r3, r3, #9
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dd8:	4929      	ldr	r1, [pc, #164]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000de0:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000de2:	2384      	movs	r3, #132	; 0x84
 8000de4:	58d3      	ldr	r3, [r2, r3]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	029b      	lsls	r3, r3, #10
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e06:	491e      	ldr	r1, [pc, #120]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000e08:	2284      	movs	r2, #132	; 0x84
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685a      	ldr	r2, [r3, #4]
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	035b      	lsls	r3, r3, #13
 8000e26:	4013      	ands	r3, r2
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43da      	mvns	r2, r3
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	039b      	lsls	r3, r3, #14
 8000e50:	4013      	ands	r3, r2
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_GPIO_Init+0x2b8>)
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	40da      	lsrs	r2, r3
 8000e70:	1e13      	subs	r3, r2, #0
 8000e72:	d000      	beq.n	8000e76 <HAL_GPIO_Init+0x2ae>
 8000e74:	e6b0      	b.n	8000bd8 <HAL_GPIO_Init+0x10>
  }
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b006      	add	sp, #24
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021800 	.word	0x40021800
 8000e84:	50000400 	.word	0x50000400
 8000e88:	50000800 	.word	0x50000800
 8000e8c:	50000c00 	.word	0x50000c00

08000e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d11f      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	0013      	movs	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	189b      	adds	r3, r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4912      	ldr	r1, [pc, #72]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff f926 	bl	8000114 <__udivsi3>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	3301      	adds	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ece:	e008      	b.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e001      	b.n	8000ee2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e009      	b.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	401a      	ands	r2, r3
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d0ed      	beq.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	40007000 	.word	0x40007000
 8000f04:	fffff9ff 	.word	0xfffff9ff
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	000f4240 	.word	0x000f4240

08000f10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	23e0      	movs	r3, #224	; 0xe0
 8000f1a:	01db      	lsls	r3, r3, #7
 8000f1c:	4013      	ands	r3, r2
}
 8000f1e:	0018      	movs	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e2f9      	b.n	800152e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4013      	ands	r3, r2
 8000f42:	d100      	bne.n	8000f46 <HAL_RCC_OscConfig+0x1e>
 8000f44:	e07c      	b.n	8001040 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f46:	4bc3      	ldr	r3, [pc, #780]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2238      	movs	r2, #56	; 0x38
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f50:	4bc0      	ldr	r3, [pc, #768]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2203      	movs	r2, #3
 8000f56:	4013      	ands	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2b10      	cmp	r3, #16
 8000f5e:	d102      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3e>
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d002      	beq.n	8000f6c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d10b      	bne.n	8000f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	4bb9      	ldr	r3, [pc, #740]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	029b      	lsls	r3, r3, #10
 8000f74:	4013      	ands	r3, r2
 8000f76:	d062      	beq.n	800103e <HAL_RCC_OscConfig+0x116>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d15e      	bne.n	800103e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e2d4      	b.n	800152e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	025b      	lsls	r3, r3, #9
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d107      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x78>
 8000f90:	4bb0      	ldr	r3, [pc, #704]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4baf      	ldr	r3, [pc, #700]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0249      	lsls	r1, r1, #9
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e020      	b.n	8000fe2 <HAL_RCC_OscConfig+0xba>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	23a0      	movs	r3, #160	; 0xa0
 8000fa6:	02db      	lsls	r3, r3, #11
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d10e      	bne.n	8000fca <HAL_RCC_OscConfig+0xa2>
 8000fac:	4ba9      	ldr	r3, [pc, #676]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4ba8      	ldr	r3, [pc, #672]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	02c9      	lsls	r1, r1, #11
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	4ba6      	ldr	r3, [pc, #664]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4ba5      	ldr	r3, [pc, #660]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	0249      	lsls	r1, r1, #9
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	e00b      	b.n	8000fe2 <HAL_RCC_OscConfig+0xba>
 8000fca:	4ba2      	ldr	r3, [pc, #648]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4ba1      	ldr	r3, [pc, #644]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	49a1      	ldr	r1, [pc, #644]	; (8001258 <HAL_RCC_OscConfig+0x330>)
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	4b9f      	ldr	r3, [pc, #636]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b9e      	ldr	r3, [pc, #632]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	499f      	ldr	r1, [pc, #636]	; (800125c <HAL_RCC_OscConfig+0x334>)
 8000fde:	400a      	ands	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d014      	beq.n	8001014 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fcf5 	bl	80009d8 <HAL_GetTick>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fcf0 	bl	80009d8 <HAL_GetTick>
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e293      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001006:	4b93      	ldr	r3, [pc, #588]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	029b      	lsls	r3, r3, #10
 800100e:	4013      	ands	r3, r2
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xcc>
 8001012:	e015      	b.n	8001040 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001014:	f7ff fce0 	bl	80009d8 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101e:	f7ff fcdb 	bl	80009d8 <HAL_GetTick>
 8001022:	0002      	movs	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e27e      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001030:	4b88      	ldr	r3, [pc, #544]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	029b      	lsls	r3, r3, #10
 8001038:	4013      	ands	r3, r2
 800103a:	d1f0      	bne.n	800101e <HAL_RCC_OscConfig+0xf6>
 800103c:	e000      	b.n	8001040 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2202      	movs	r2, #2
 8001046:	4013      	ands	r3, r2
 8001048:	d100      	bne.n	800104c <HAL_RCC_OscConfig+0x124>
 800104a:	e099      	b.n	8001180 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800104c:	4b81      	ldr	r3, [pc, #516]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2238      	movs	r2, #56	; 0x38
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001056:	4b7f      	ldr	r3, [pc, #508]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2203      	movs	r2, #3
 800105c:	4013      	ands	r3, r2
 800105e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2b10      	cmp	r3, #16
 8001064:	d102      	bne.n	800106c <HAL_RCC_OscConfig+0x144>
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b02      	cmp	r3, #2
 800106a:	d002      	beq.n	8001072 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d135      	bne.n	80010de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001072:	4b78      	ldr	r3, [pc, #480]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4013      	ands	r3, r2
 800107c:	d005      	beq.n	800108a <HAL_RCC_OscConfig+0x162>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e251      	b.n	800152e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108a:	4b72      	ldr	r3, [pc, #456]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a74      	ldr	r2, [pc, #464]	; (8001260 <HAL_RCC_OscConfig+0x338>)
 8001090:	4013      	ands	r3, r2
 8001092:	0019      	movs	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	021a      	lsls	r2, r3, #8
 800109a:	4b6e      	ldr	r3, [pc, #440]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 800109c:	430a      	orrs	r2, r1
 800109e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d112      	bne.n	80010cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010a6:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a6e      	ldr	r2, [pc, #440]	; (8001264 <HAL_RCC_OscConfig+0x33c>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	0019      	movs	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80010ba:	4b66      	ldr	r3, [pc, #408]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0adb      	lsrs	r3, r3, #11
 80010c0:	2207      	movs	r2, #7
 80010c2:	4013      	ands	r3, r2
 80010c4:	4a68      	ldr	r2, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x340>)
 80010c6:	40da      	lsrs	r2, r3
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <HAL_RCC_OscConfig+0x344>)
 80010ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010cc:	4b68      	ldr	r3, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x348>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fc25 	bl	8000920 <HAL_InitTick>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d051      	beq.n	800117e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e227      	b.n	800152e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d030      	beq.n	8001148 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a5e      	ldr	r2, [pc, #376]	; (8001264 <HAL_RCC_OscConfig+0x33c>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	0019      	movs	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b55      	ldr	r3, [pc, #340]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0049      	lsls	r1, r1, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fc66 	bl	80009d8 <HAL_GetTick>
 800110c:	0003      	movs	r3, r0
 800110e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fc61 	bl	80009d8 <HAL_GetTick>
 8001116:	0002      	movs	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e204      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4013      	ands	r3, r2
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4b48      	ldr	r3, [pc, #288]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_RCC_OscConfig+0x338>)
 8001136:	4013      	ands	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	021a      	lsls	r2, r3, #8
 8001140:	4b44      	ldr	r3, [pc, #272]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001142:	430a      	orrs	r2, r1
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	e01b      	b.n	8001180 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001148:	4b42      	ldr	r3, [pc, #264]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 800114e:	4949      	ldr	r1, [pc, #292]	; (8001274 <HAL_RCC_OscConfig+0x34c>)
 8001150:	400a      	ands	r2, r1
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001154:	f7ff fc40 	bl	80009d8 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff fc3b 	bl	80009d8 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1de      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001170:	4b38      	ldr	r3, [pc, #224]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4013      	ands	r3, r2
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x236>
 800117c:	e000      	b.n	8001180 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800117e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2208      	movs	r2, #8
 8001186:	4013      	ands	r3, r2
 8001188:	d047      	beq.n	800121a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2238      	movs	r2, #56	; 0x38
 8001190:	4013      	ands	r3, r2
 8001192:	2b18      	cmp	r3, #24
 8001194:	d10a      	bne.n	80011ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	2202      	movs	r2, #2
 800119c:	4013      	ands	r3, r2
 800119e:	d03c      	beq.n	800121a <HAL_RCC_OscConfig+0x2f2>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d138      	bne.n	800121a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e1c0      	b.n	800152e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d019      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80011ba:	2101      	movs	r1, #1
 80011bc:	430a      	orrs	r2, r1
 80011be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc0a 	bl	80009d8 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fc05 	bl	80009d8 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e1a8      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	2202      	movs	r2, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d0f1      	beq.n	80011ca <HAL_RCC_OscConfig+0x2a2>
 80011e6:	e018      	b.n	800121a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	438a      	bics	r2, r1
 80011f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fbf0 	bl	80009d8 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fbeb 	bl	80009d8 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e18e      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d1f1      	bne.n	80011fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2204      	movs	r2, #4
 8001220:	4013      	ands	r3, r2
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x2fe>
 8001224:	e0c6      	b.n	80013b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001226:	231f      	movs	r3, #31
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2238      	movs	r2, #56	; 0x38
 8001234:	4013      	ands	r3, r2
 8001236:	2b20      	cmp	r3, #32
 8001238:	d11e      	bne.n	8001278 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_RCC_OscConfig+0x32c>)
 800123c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123e:	2202      	movs	r2, #2
 8001240:	4013      	ands	r3, r2
 8001242:	d100      	bne.n	8001246 <HAL_RCC_OscConfig+0x31e>
 8001244:	e0b6      	b.n	80013b4 <HAL_RCC_OscConfig+0x48c>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d000      	beq.n	8001250 <HAL_RCC_OscConfig+0x328>
 800124e:	e0b1      	b.n	80013b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e16c      	b.n	800152e <HAL_RCC_OscConfig+0x606>
 8001254:	40021000 	.word	0x40021000
 8001258:	fffeffff 	.word	0xfffeffff
 800125c:	fffbffff 	.word	0xfffbffff
 8001260:	ffff80ff 	.word	0xffff80ff
 8001264:	ffffc7ff 	.word	0xffffc7ff
 8001268:	00f42400 	.word	0x00f42400
 800126c:	20000000 	.word	0x20000000
 8001270:	20000004 	.word	0x20000004
 8001274:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001278:	4baf      	ldr	r3, [pc, #700]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800127a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	055b      	lsls	r3, r3, #21
 8001280:	4013      	ands	r3, r2
 8001282:	d101      	bne.n	8001288 <HAL_RCC_OscConfig+0x360>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x362>
 8001288:	2300      	movs	r3, #0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d011      	beq.n	80012b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4baa      	ldr	r3, [pc, #680]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001292:	4ba9      	ldr	r3, [pc, #676]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0549      	lsls	r1, r1, #21
 8001298:	430a      	orrs	r2, r1
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
 800129c:	4ba6      	ldr	r3, [pc, #664]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800129e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	055b      	lsls	r3, r3, #21
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80012aa:	231f      	movs	r3, #31
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b2:	4ba2      	ldr	r3, [pc, #648]	; (800153c <HAL_RCC_OscConfig+0x614>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4013      	ands	r3, r2
 80012bc:	d11a      	bne.n	80012f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012be:	4b9f      	ldr	r3, [pc, #636]	; (800153c <HAL_RCC_OscConfig+0x614>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <HAL_RCC_OscConfig+0x614>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0049      	lsls	r1, r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb84 	bl	80009d8 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d6:	f7ff fb7f 	bl	80009d8 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e122      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e8:	4b94      	ldr	r3, [pc, #592]	; (800153c <HAL_RCC_OscConfig+0x614>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x3e2>
 80012fc:	4b8e      	ldr	r3, [pc, #568]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80012fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001300:	4b8d      	ldr	r3, [pc, #564]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001302:	2101      	movs	r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	65da      	str	r2, [r3, #92]	; 0x5c
 8001308:	e01c      	b.n	8001344 <HAL_RCC_OscConfig+0x41c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x404>
 8001312:	4b89      	ldr	r3, [pc, #548]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001318:	2104      	movs	r1, #4
 800131a:	430a      	orrs	r2, r1
 800131c:	65da      	str	r2, [r3, #92]	; 0x5c
 800131e:	4b86      	ldr	r3, [pc, #536]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001320:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001322:	4b85      	ldr	r3, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001324:	2101      	movs	r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	65da      	str	r2, [r3, #92]	; 0x5c
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0x41c>
 800132c:	4b82      	ldr	r3, [pc, #520]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800132e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	65da      	str	r2, [r3, #92]	; 0x5c
 8001338:	4b7f      	ldr	r3, [pc, #508]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800133a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800133c:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800133e:	2104      	movs	r1, #4
 8001340:	438a      	bics	r2, r1
 8001342:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d014      	beq.n	8001376 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fb44 	bl	80009d8 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001354:	e009      	b.n	800136a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff fb3f 	bl	80009d8 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	4a77      	ldr	r2, [pc, #476]	; (8001540 <HAL_RCC_OscConfig+0x618>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e0e1      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800136c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x42e>
 8001374:	e013      	b.n	800139e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fb2f 	bl	80009d8 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800137e:	e009      	b.n	8001394 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001380:	f7ff fb2a 	bl	80009d8 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	4a6d      	ldr	r2, [pc, #436]	; (8001540 <HAL_RCC_OscConfig+0x618>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e0cc      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800139e:	231f      	movs	r3, #31
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80013aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ac:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80013ae:	4965      	ldr	r1, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x61c>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x496>
 80013bc:	e0b6      	b.n	800152c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013be:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2238      	movs	r2, #56	; 0x38
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b10      	cmp	r3, #16
 80013c8:	d100      	bne.n	80013cc <HAL_RCC_OscConfig+0x4a4>
 80013ca:	e07e      	b.n	80014ca <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d153      	bne.n	800147c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d4:	4b58      	ldr	r3, [pc, #352]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b57      	ldr	r3, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80013da:	495b      	ldr	r1, [pc, #364]	; (8001548 <HAL_RCC_OscConfig+0x620>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fafa 	bl	80009d8 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff faf5 	bl	80009d8 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e098      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fc:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	049b      	lsls	r3, r3, #18
 8001404:	4013      	ands	r3, r2
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a4f      	ldr	r2, [pc, #316]	; (800154c <HAL_RCC_OscConfig+0x624>)
 800140e:	4013      	ands	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	431a      	orrs	r2, r3
 8001430:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001432:	430a      	orrs	r2, r1
 8001434:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001436:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	0449      	lsls	r1, r1, #17
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001444:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	0549      	lsls	r1, r1, #21
 800144e:	430a      	orrs	r2, r1
 8001450:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001452:	f7ff fac1 	bl	80009d8 <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff fabc 	bl	80009d8 <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e05f      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	049b      	lsls	r3, r3, #18
 8001476:	4013      	ands	r3, r2
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x534>
 800147a:	e057      	b.n	800152c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001482:	4931      	ldr	r1, [pc, #196]	; (8001548 <HAL_RCC_OscConfig+0x620>)
 8001484:	400a      	ands	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800148e:	2103      	movs	r1, #3
 8001490:	438a      	bics	r2, r1
 8001492:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 800149a:	492d      	ldr	r1, [pc, #180]	; (8001550 <HAL_RCC_OscConfig+0x628>)
 800149c:	400a      	ands	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fa9a 	bl	80009d8 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fa95 	bl	80009d8 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e038      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	049b      	lsls	r3, r3, #18
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x582>
 80014c8:	e030      	b.n	800152c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e02b      	b.n	800152e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_RCC_OscConfig+0x610>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2203      	movs	r2, #3
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d11e      	bne.n	8001528 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2270      	movs	r2, #112	; 0x70
 80014ee:	401a      	ands	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d117      	bne.n	8001528 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	23fe      	movs	r3, #254	; 0xfe
 80014fc:	01db      	lsls	r3, r3, #7
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d10e      	bne.n	8001528 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	23f8      	movs	r3, #248	; 0xf8
 800150e:	039b      	lsls	r3, r3, #14
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	0f5b      	lsrs	r3, r3, #29
 800151e:	075a      	lsls	r2, r3, #29
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b008      	add	sp, #32
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	40021000 	.word	0x40021000
 800153c:	40007000 	.word	0x40007000
 8001540:	00001388 	.word	0x00001388
 8001544:	efffffff 	.word	0xefffffff
 8001548:	feffffff 	.word	0xfeffffff
 800154c:	1fc1808c 	.word	0x1fc1808c
 8001550:	effeffff 	.word	0xeffeffff

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0e9      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2207      	movs	r2, #7
 800156e:	4013      	ands	r3, r2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d91e      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2207      	movs	r2, #7
 800157c:	4393      	bics	r3, r2
 800157e:	0019      	movs	r1, r3
 8001580:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001588:	f7ff fa26 	bl	80009d8 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001590:	e009      	b.n	80015a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001592:	f7ff fa21 	bl	80009d8 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	4a6a      	ldr	r2, [pc, #424]	; (8001748 <HAL_RCC_ClockConfig+0x1f4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0ca      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2207      	movs	r2, #7
 80015ac:	4013      	ands	r3, r2
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1ee      	bne.n	8001592 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d015      	beq.n	80015ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d006      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015c8:	4b60      	ldr	r3, [pc, #384]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4b5f      	ldr	r3, [pc, #380]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 80015ce:	21e0      	movs	r1, #224	; 0xe0
 80015d0:	01c9      	lsls	r1, r1, #7
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d6:	4b5d      	ldr	r3, [pc, #372]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4a5d      	ldr	r2, [pc, #372]	; (8001750 <HAL_RCC_ClockConfig+0x1fc>)
 80015dc:	4013      	ands	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d057      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fc:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	029b      	lsls	r3, r3, #10
 8001604:	4013      	ands	r3, r2
 8001606:	d12b      	bne.n	8001660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e097      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d107      	bne.n	8001624 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001614:	4b4d      	ldr	r3, [pc, #308]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	049b      	lsls	r3, r3, #18
 800161c:	4013      	ands	r3, r2
 800161e:	d11f      	bne.n	8001660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e08b      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d107      	bne.n	800163c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4013      	ands	r3, r2
 8001636:	d113      	bne.n	8001660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e07f      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 8001646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001648:	2202      	movs	r2, #2
 800164a:	4013      	ands	r3, r2
 800164c:	d108      	bne.n	8001660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e074      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001652:	4b3e      	ldr	r3, [pc, #248]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e06d      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2207      	movs	r2, #7
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001674:	f7ff f9b0 	bl	80009d8 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167c:	e009      	b.n	8001692 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167e:	f7ff f9ab 	bl	80009d8 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <HAL_RCC_ClockConfig+0x1f4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e054      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2238      	movs	r2, #56	; 0x38
 8001698:	401a      	ands	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1ec      	bne.n	800167e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2207      	movs	r2, #7
 80016aa:	4013      	ands	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d21e      	bcs.n	80016f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2207      	movs	r2, #7
 80016b8:	4393      	bics	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016c4:	f7ff f988 	bl	80009d8 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016cc:	e009      	b.n	80016e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ce:	f7ff f983 	bl	80009d8 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <HAL_RCC_ClockConfig+0x1f4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e02c      	b.n	800173c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2207      	movs	r2, #7
 80016e8:	4013      	ands	r3, r2
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2204      	movs	r2, #4
 80016f6:	4013      	ands	r3, r2
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <HAL_RCC_ClockConfig+0x200>)
 8001700:	4013      	ands	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800170e:	f000 f829 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001712:	0001      	movs	r1, r0
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_RCC_ClockConfig+0x1f8>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	220f      	movs	r2, #15
 800171c:	401a      	ands	r2, r3
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_RCC_ClockConfig+0x204>)
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	58d3      	ldr	r3, [r2, r3]
 8001724:	221f      	movs	r2, #31
 8001726:	4013      	ands	r3, r2
 8001728:	000a      	movs	r2, r1
 800172a:	40da      	lsrs	r2, r3
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_ClockConfig+0x208>)
 800172e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_ClockConfig+0x20c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff f8f3 	bl	8000920 <HAL_InitTick>
 800173a:	0003      	movs	r3, r0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b004      	add	sp, #16
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40022000 	.word	0x40022000
 8001748:	00001388 	.word	0x00001388
 800174c:	40021000 	.word	0x40021000
 8001750:	fffff0ff 	.word	0xfffff0ff
 8001754:	ffff8fff 	.word	0xffff8fff
 8001758:	08003650 	.word	0x08003650
 800175c:	20000000 	.word	0x20000000
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176a:	4b3c      	ldr	r3, [pc, #240]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2238      	movs	r2, #56	; 0x38
 8001770:	4013      	ands	r3, r2
 8001772:	d10f      	bne.n	8001794 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0adb      	lsrs	r3, r3, #11
 800177a:	2207      	movs	r2, #7
 800177c:	4013      	ands	r3, r2
 800177e:	2201      	movs	r2, #1
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	4835      	ldr	r0, [pc, #212]	; (8001860 <HAL_RCC_GetSysClockFreq+0xfc>)
 800178a:	f7fe fcc3 	bl	8000114 <__udivsi3>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	e05d      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2238      	movs	r2, #56	; 0x38
 800179a:	4013      	ands	r3, r2
 800179c:	2b08      	cmp	r3, #8
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_RCC_GetSysClockFreq+0x100>)
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e054      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2238      	movs	r2, #56	; 0x38
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d138      	bne.n	8001824 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2203      	movs	r2, #3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	2207      	movs	r2, #7
 80017c4:	4013      	ands	r3, r2
 80017c6:	3301      	adds	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d10d      	bne.n	80017ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	4824      	ldr	r0, [pc, #144]	; (8001864 <HAL_RCC_GetSysClockFreq+0x100>)
 80017d4:	f7fe fc9e 	bl	8000114 <__udivsi3>
 80017d8:	0003      	movs	r3, r0
 80017da:	0019      	movs	r1, r3
 80017dc:	4b1f      	ldr	r3, [pc, #124]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	227f      	movs	r2, #127	; 0x7f
 80017e4:	4013      	ands	r3, r2
 80017e6:	434b      	muls	r3, r1
 80017e8:	617b      	str	r3, [r7, #20]
        break;
 80017ea:	e00d      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <HAL_RCC_GetSysClockFreq+0xfc>)
 80017f0:	f7fe fc90 	bl	8000114 <__udivsi3>
 80017f4:	0003      	movs	r3, r0
 80017f6:	0019      	movs	r1, r3
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	227f      	movs	r2, #127	; 0x7f
 8001800:	4013      	ands	r3, r2
 8001802:	434b      	muls	r3, r1
 8001804:	617b      	str	r3, [r7, #20]
        break;
 8001806:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0f5b      	lsrs	r3, r3, #29
 800180e:	2207      	movs	r2, #7
 8001810:	4013      	ands	r3, r2
 8001812:	3301      	adds	r3, #1
 8001814:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	6978      	ldr	r0, [r7, #20]
 800181a:	f7fe fc7b 	bl	8000114 <__udivsi3>
 800181e:	0003      	movs	r3, r0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	e015      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2238      	movs	r2, #56	; 0x38
 800182a:	4013      	ands	r3, r2
 800182c:	2b20      	cmp	r3, #32
 800182e:	d103      	bne.n	8001838 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_RCC_GetSysClockFreq+0xf8>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2238      	movs	r2, #56	; 0x38
 800183e:	4013      	ands	r3, r2
 8001840:	2b18      	cmp	r3, #24
 8001842:	d103      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001844:	23fa      	movs	r3, #250	; 0xfa
 8001846:	01db      	lsls	r3, r3, #7
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e001      	b.n	8001850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001850:	693b      	ldr	r3, [r7, #16]
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b006      	add	sp, #24
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000
 8001860:	00f42400 	.word	0x00f42400
 8001864:	007a1200 	.word	0x007a1200

08001868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <HAL_RCC_GetHCLKFreq+0x10>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	20000000 	.word	0x20000000

0800187c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001880:	f7ff fff2 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 8001884:	0004      	movs	r4, r0
 8001886:	f7ff fb43 	bl	8000f10 <LL_RCC_GetAPB1Prescaler>
 800188a:	0003      	movs	r3, r0
 800188c:	0b1a      	lsrs	r2, r3, #12
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	58d3      	ldr	r3, [r2, r3]
 8001894:	221f      	movs	r2, #31
 8001896:	4013      	ands	r3, r2
 8001898:	40dc      	lsrs	r4, r3
 800189a:	0023      	movs	r3, r4
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	08003690 	.word	0x08003690

080018a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80018b0:	2313      	movs	r3, #19
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80018b8:	2312      	movs	r3, #18
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	029b      	lsls	r3, r3, #10
 80018c8:	4013      	ands	r3, r2
 80018ca:	d100      	bne.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80018cc:	e0a3      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	2011      	movs	r0, #17
 80018d0:	183b      	adds	r3, r7, r0
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d6:	4b86      	ldr	r3, [pc, #536]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	055b      	lsls	r3, r3, #21
 80018de:	4013      	ands	r3, r2
 80018e0:	d110      	bne.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b83      	ldr	r3, [pc, #524]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e6:	4b82      	ldr	r3, [pc, #520]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	0549      	lsls	r1, r1, #21
 80018ec:	430a      	orrs	r2, r1
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80018f0:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80018f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	055b      	lsls	r3, r3, #21
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001904:	4b7b      	ldr	r3, [pc, #492]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b7a      	ldr	r3, [pc, #488]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	0049      	lsls	r1, r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001912:	f7ff f861 	bl	80009d8 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800191a:	e00b      	b.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191c:	f7ff f85c 	bl	80009d8 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d904      	bls.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800192a:	2313      	movs	r3, #19
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2203      	movs	r2, #3
 8001930:	701a      	strb	r2, [r3, #0]
        break;
 8001932:	e005      	b.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d0ed      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001940:	2313      	movs	r3, #19
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d154      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800194a:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800194c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800194e:	23c0      	movs	r3, #192	; 0xc0
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4013      	ands	r3, r2
 8001954:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d019      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	429a      	cmp	r2, r3
 8001964:	d014      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196a:	4a63      	ldr	r2, [pc, #396]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800196c:	4013      	ands	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001970:	4b5f      	ldr	r3, [pc, #380]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	0249      	lsls	r1, r1, #9
 800197a:	430a      	orrs	r2, r1
 800197c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001982:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001984:	495d      	ldr	r1, [pc, #372]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001986:	400a      	ands	r2, r1
 8001988:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800198a:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2201      	movs	r2, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d016      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff f81e 	bl	80009d8 <HAL_GetTick>
 800199c:	0003      	movs	r3, r0
 800199e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a0:	e00c      	b.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f819 	bl	80009d8 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d904      	bls.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80019b2:	2313      	movs	r3, #19
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	2203      	movs	r2, #3
 80019b8:	701a      	strb	r2, [r3, #0]
            break;
 80019ba:	e004      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2202      	movs	r2, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0ed      	beq.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80019c6:	2313      	movs	r3, #19
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10a      	bne.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80019e4:	e00c      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80019e6:	2312      	movs	r3, #18
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2213      	movs	r2, #19
 80019ec:	18ba      	adds	r2, r7, r2
 80019ee:	7812      	ldrb	r2, [r2, #0]
 80019f0:	701a      	strb	r2, [r3, #0]
 80019f2:	e005      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019f4:	2312      	movs	r3, #18
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	2213      	movs	r2, #19
 80019fa:	18ba      	adds	r2, r7, r2
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a00:	2311      	movs	r3, #17
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a10:	493c      	ldr	r1, [pc, #240]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d009      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	2203      	movs	r2, #3
 8001a26:	4393      	bics	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	220c      	movs	r2, #12
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2220      	movs	r2, #32
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d009      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	4a29      	ldr	r2, [pc, #164]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d015      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	0899      	lsrs	r1, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0249      	lsls	r1, r1, #9
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d016      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	01db      	lsls	r3, r3, #7
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	0249      	lsls	r1, r1, #9
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ae2:	2312      	movs	r3, #18
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781b      	ldrb	r3, [r3, #0]
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b006      	add	sp, #24
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40007000 	.word	0x40007000
 8001af8:	fffffcff 	.word	0xfffffcff
 8001afc:	fffeffff 	.word	0xfffeffff
 8001b00:	00001388 	.word	0x00001388
 8001b04:	efffffff 	.word	0xefffffff
 8001b08:	ffffcfff 	.word	0xffffcfff
 8001b0c:	ffff3fff 	.word	0xffff3fff

08001b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e046      	b.n	8001bb0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2284      	movs	r2, #132	; 0x84
 8001b26:	589b      	ldr	r3, [r3, r2]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7fe fd90 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2284      	movs	r2, #132	; 0x84
 8001b40:	2124      	movs	r1, #36	; 0x24
 8001b42:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	438a      	bics	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 f8dc 	bl	8001d14 <UART_SetConfig>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e024      	b.n	8001bb0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fa75 	bl	8002060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	490d      	ldr	r1, [pc, #52]	; (8001bb8 <HAL_UART_Init+0xa8>)
 8001b82:	400a      	ands	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	212a      	movs	r1, #42	; 0x2a
 8001b92:	438a      	bics	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 fb0d 	bl	80021c8 <UART_CheckIdleState>
 8001bae:	0003      	movs	r3, r0
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	ffffb7ff 	.word	0xffffb7ff

08001bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	1dbb      	adds	r3, r7, #6
 8001bca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2284      	movs	r2, #132	; 0x84
 8001bd0:	589b      	ldr	r3, [r3, r2]
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d000      	beq.n	8001bd8 <HAL_UART_Transmit+0x1c>
 8001bd6:	e097      	b.n	8001d08 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_UART_Transmit+0x2a>
 8001bde:	1dbb      	adds	r3, r7, #6
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e08f      	b.n	8001d0a <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	015b      	lsls	r3, r3, #5
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d109      	bne.n	8001c0a <HAL_UART_Transmit+0x4e>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e07f      	b.n	8001d0a <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_UART_Transmit+0x5c>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e078      	b.n	8001d0a <HAL_UART_Transmit+0x14e>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	228c      	movs	r2, #140	; 0x8c
 8001c24:	2100      	movs	r1, #0
 8001c26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2284      	movs	r2, #132	; 0x84
 8001c2c:	2121      	movs	r1, #33	; 0x21
 8001c2e:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c30:	f7fe fed2 	bl	80009d8 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1dba      	adds	r2, r7, #6
 8001c3c:	2154      	movs	r1, #84	; 0x54
 8001c3e:	8812      	ldrh	r2, [r2, #0]
 8001c40:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1dba      	adds	r2, r7, #6
 8001c46:	2156      	movs	r1, #86	; 0x56
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	015b      	lsls	r3, r3, #5
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d108      	bne.n	8001c6a <HAL_UART_Transmit+0xae>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d104      	bne.n	8001c6a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	e003      	b.n	8001c72 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	2100      	movs	r1, #0
 8001c78:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001c7a:	e02c      	b.n	8001cd6 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	0013      	movs	r3, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	f000 fae7 	bl	800225c <UART_WaitOnFlagUntilTimeout>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e039      	b.n	8001d0a <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	05d2      	lsls	r2, r2, #23
 8001ca8:	0dd2      	lsrs	r2, r2, #23
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e007      	b.n	8001cc4 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2256      	movs	r2, #86	; 0x56
 8001cc8:	5a9b      	ldrh	r3, [r3, r2]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b299      	uxth	r1, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2256      	movs	r2, #86	; 0x56
 8001cd4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2256      	movs	r2, #86	; 0x56
 8001cda:	5a9b      	ldrh	r3, [r3, r2]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1cc      	bne.n	8001c7c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	0013      	movs	r3, r2
 8001cec:	2200      	movs	r2, #0
 8001cee:	2140      	movs	r1, #64	; 0x40
 8001cf0:	f000 fab4 	bl	800225c <UART_WaitOnFlagUntilTimeout>
 8001cf4:	1e03      	subs	r3, r0, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e006      	b.n	8001d0a <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2284      	movs	r2, #132	; 0x84
 8001d00:	2120      	movs	r1, #32
 8001d02:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8001d08:	2302      	movs	r3, #2
  }
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b008      	add	sp, #32
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d1c:	231a      	movs	r3, #26
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4abd      	ldr	r2, [pc, #756]	; (8002038 <UART_SetConfig+0x324>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4ab8      	ldr	r2, [pc, #736]	; (800203c <UART_SetConfig+0x328>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4aaf      	ldr	r2, [pc, #700]	; (8002040 <UART_SetConfig+0x32c>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	220f      	movs	r2, #15
 8001d98:	4393      	bics	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4aa5      	ldr	r2, [pc, #660]	; (8002044 <UART_SetConfig+0x330>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d127      	bne.n	8001e02 <UART_SetConfig+0xee>
 8001db2:	4ba5      	ldr	r3, [pc, #660]	; (8002048 <UART_SetConfig+0x334>)
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	2203      	movs	r2, #3
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d017      	beq.n	8001dee <UART_SetConfig+0xda>
 8001dbe:	d81b      	bhi.n	8001df8 <UART_SetConfig+0xe4>
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d00a      	beq.n	8001dda <UART_SetConfig+0xc6>
 8001dc4:	d818      	bhi.n	8001df8 <UART_SetConfig+0xe4>
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <UART_SetConfig+0xbc>
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d00a      	beq.n	8001de4 <UART_SetConfig+0xd0>
 8001dce:	e013      	b.n	8001df8 <UART_SetConfig+0xe4>
 8001dd0:	231b      	movs	r3, #27
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e058      	b.n	8001e8c <UART_SetConfig+0x178>
 8001dda:	231b      	movs	r3, #27
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2202      	movs	r2, #2
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	e053      	b.n	8001e8c <UART_SetConfig+0x178>
 8001de4:	231b      	movs	r3, #27
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2204      	movs	r2, #4
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e04e      	b.n	8001e8c <UART_SetConfig+0x178>
 8001dee:	231b      	movs	r3, #27
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2208      	movs	r2, #8
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e049      	b.n	8001e8c <UART_SetConfig+0x178>
 8001df8:	231b      	movs	r3, #27
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e044      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a91      	ldr	r2, [pc, #580]	; (800204c <UART_SetConfig+0x338>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d127      	bne.n	8001e5c <UART_SetConfig+0x148>
 8001e0c:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <UART_SetConfig+0x334>)
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	220c      	movs	r2, #12
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d017      	beq.n	8001e48 <UART_SetConfig+0x134>
 8001e18:	d81b      	bhi.n	8001e52 <UART_SetConfig+0x13e>
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d00a      	beq.n	8001e34 <UART_SetConfig+0x120>
 8001e1e:	d818      	bhi.n	8001e52 <UART_SetConfig+0x13e>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <UART_SetConfig+0x116>
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00a      	beq.n	8001e3e <UART_SetConfig+0x12a>
 8001e28:	e013      	b.n	8001e52 <UART_SetConfig+0x13e>
 8001e2a:	231b      	movs	r3, #27
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e02b      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e34:	231b      	movs	r3, #27
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2202      	movs	r2, #2
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e026      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e3e:	231b      	movs	r3, #27
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2204      	movs	r2, #4
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	e021      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e48:	231b      	movs	r3, #27
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e01c      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e52:	231b      	movs	r3, #27
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2210      	movs	r2, #16
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e017      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7b      	ldr	r2, [pc, #492]	; (8002050 <UART_SetConfig+0x33c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d104      	bne.n	8001e70 <UART_SetConfig+0x15c>
 8001e66:	231b      	movs	r3, #27
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
 8001e6e:	e00d      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a77      	ldr	r2, [pc, #476]	; (8002054 <UART_SetConfig+0x340>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d104      	bne.n	8001e84 <UART_SetConfig+0x170>
 8001e7a:	231b      	movs	r3, #27
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e003      	b.n	8001e8c <UART_SetConfig+0x178>
 8001e84:	231b      	movs	r3, #27
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2210      	movs	r2, #16
 8001e8a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d000      	beq.n	8001e9a <UART_SetConfig+0x186>
 8001e98:	e066      	b.n	8001f68 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 8001e9a:	231b      	movs	r3, #27
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d015      	beq.n	8001ed0 <UART_SetConfig+0x1bc>
 8001ea4:	dc18      	bgt.n	8001ed8 <UART_SetConfig+0x1c4>
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00d      	beq.n	8001ec6 <UART_SetConfig+0x1b2>
 8001eaa:	dc15      	bgt.n	8001ed8 <UART_SetConfig+0x1c4>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <UART_SetConfig+0x1a2>
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d005      	beq.n	8001ec0 <UART_SetConfig+0x1ac>
 8001eb4:	e010      	b.n	8001ed8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eb6:	f7ff fce1 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	617b      	str	r3, [r7, #20]
        break;
 8001ebe:	e012      	b.n	8001ee6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ec0:	4b65      	ldr	r3, [pc, #404]	; (8002058 <UART_SetConfig+0x344>)
 8001ec2:	617b      	str	r3, [r7, #20]
        break;
 8001ec4:	e00f      	b.n	8001ee6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ec6:	f7ff fc4d 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	617b      	str	r3, [r7, #20]
        break;
 8001ece:	e00a      	b.n	8001ee6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	617b      	str	r3, [r7, #20]
        break;
 8001ed6:	e006      	b.n	8001ee6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001edc:	231a      	movs	r3, #26
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
        break;
 8001ee4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d100      	bne.n	8001eee <UART_SetConfig+0x1da>
 8001eec:	e08e      	b.n	800200c <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <UART_SetConfig+0x348>)
 8001ef4:	0052      	lsls	r2, r2, #1
 8001ef6:	5ad3      	ldrh	r3, [r2, r3]
 8001ef8:	0019      	movs	r1, r3
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7fe f90a 	bl	8000114 <__udivsi3>
 8001f00:	0003      	movs	r3, r0
 8001f02:	005a      	lsls	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	085b      	lsrs	r3, r3, #1
 8001f0a:	18d2      	adds	r2, r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0019      	movs	r1, r3
 8001f12:	0010      	movs	r0, r2
 8001f14:	f7fe f8fe 	bl	8000114 <__udivsi3>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d91c      	bls.n	8001f5e <UART_SetConfig+0x24a>
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d217      	bcs.n	8001f5e <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	200e      	movs	r0, #14
 8001f34:	183b      	adds	r3, r7, r0
 8001f36:	210f      	movs	r1, #15
 8001f38:	438a      	bics	r2, r1
 8001f3a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2207      	movs	r2, #7
 8001f44:	4013      	ands	r3, r2
 8001f46:	b299      	uxth	r1, r3
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	183a      	adds	r2, r7, r0
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	183a      	adds	r2, r7, r0
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	e056      	b.n	800200c <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8001f5e:	231a      	movs	r3, #26
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e051      	b.n	800200c <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f68:	231b      	movs	r3, #27
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d015      	beq.n	8001f9e <UART_SetConfig+0x28a>
 8001f72:	dc18      	bgt.n	8001fa6 <UART_SetConfig+0x292>
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d00d      	beq.n	8001f94 <UART_SetConfig+0x280>
 8001f78:	dc15      	bgt.n	8001fa6 <UART_SetConfig+0x292>
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <UART_SetConfig+0x270>
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d005      	beq.n	8001f8e <UART_SetConfig+0x27a>
 8001f82:	e010      	b.n	8001fa6 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f84:	f7ff fc7a 	bl	800187c <HAL_RCC_GetPCLK1Freq>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	617b      	str	r3, [r7, #20]
        break;
 8001f8c:	e012      	b.n	8001fb4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <UART_SetConfig+0x344>)
 8001f90:	617b      	str	r3, [r7, #20]
        break;
 8001f92:	e00f      	b.n	8001fb4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f94:	f7ff fbe6 	bl	8001764 <HAL_RCC_GetSysClockFreq>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	617b      	str	r3, [r7, #20]
        break;
 8001f9c:	e00a      	b.n	8001fb4 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	617b      	str	r3, [r7, #20]
        break;
 8001fa4:	e006      	b.n	8001fb4 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001faa:	231a      	movs	r3, #26
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
        break;
 8001fb2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d028      	beq.n	800200c <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fbe:	4b27      	ldr	r3, [pc, #156]	; (800205c <UART_SetConfig+0x348>)
 8001fc0:	0052      	lsls	r2, r2, #1
 8001fc2:	5ad3      	ldrh	r3, [r2, r3]
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7fe f8a4 	bl	8000114 <__udivsi3>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	001a      	movs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	18d2      	adds	r2, r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0019      	movs	r1, r3
 8001fde:	0010      	movs	r0, r2
 8001fe0:	f7fe f898 	bl	8000114 <__udivsi3>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d909      	bls.n	8002004 <UART_SetConfig+0x2f0>
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d204      	bcs.n	8002004 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	e003      	b.n	800200c <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002004:	231a      	movs	r3, #26
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	226a      	movs	r2, #106	; 0x6a
 8002010:	2101      	movs	r1, #1
 8002012:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2268      	movs	r2, #104	; 0x68
 8002018:	2101      	movs	r1, #1
 800201a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002028:	231a      	movs	r3, #26
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	781b      	ldrb	r3, [r3, #0]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b008      	add	sp, #32
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	cfff69f3 	.word	0xcfff69f3
 800203c:	ffffcfff 	.word	0xffffcfff
 8002040:	11fff4ff 	.word	0x11fff4ff
 8002044:	40013800 	.word	0x40013800
 8002048:	40021000 	.word	0x40021000
 800204c:	40004400 	.word	0x40004400
 8002050:	40004800 	.word	0x40004800
 8002054:	40004c00 	.word	0x40004c00
 8002058:	00f42400 	.word	0x00f42400
 800205c:	080036b0 	.word	0x080036b0

08002060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d00b      	beq.n	800208a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <UART_AdvFeatureConfig+0x144>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	2202      	movs	r2, #2
 8002090:	4013      	ands	r3, r2
 8002092:	d00b      	beq.n	80020ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4a43      	ldr	r2, [pc, #268]	; (80021a8 <UART_AdvFeatureConfig+0x148>)
 800209c:	4013      	ands	r3, r2
 800209e:	0019      	movs	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	2204      	movs	r2, #4
 80020b2:	4013      	ands	r3, r2
 80020b4:	d00b      	beq.n	80020ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a3b      	ldr	r2, [pc, #236]	; (80021ac <UART_AdvFeatureConfig+0x14c>)
 80020be:	4013      	ands	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	2208      	movs	r2, #8
 80020d4:	4013      	ands	r3, r2
 80020d6:	d00b      	beq.n	80020f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a34      	ldr	r2, [pc, #208]	; (80021b0 <UART_AdvFeatureConfig+0x150>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	2210      	movs	r2, #16
 80020f6:	4013      	ands	r3, r2
 80020f8:	d00b      	beq.n	8002112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <UART_AdvFeatureConfig+0x154>)
 8002102:	4013      	ands	r3, r2
 8002104:	0019      	movs	r1, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2220      	movs	r2, #32
 8002118:	4013      	ands	r3, r2
 800211a:	d00b      	beq.n	8002134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <UART_AdvFeatureConfig+0x158>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	4013      	ands	r3, r2
 800213c:	d01d      	beq.n	800217a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <UART_AdvFeatureConfig+0x15c>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	035b      	lsls	r3, r3, #13
 800215e:	429a      	cmp	r2, r3
 8002160:	d10b      	bne.n	800217a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <UART_AdvFeatureConfig+0x160>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	4013      	ands	r3, r2
 8002182:	d00b      	beq.n	800219c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <UART_AdvFeatureConfig+0x164>)
 800218c:	4013      	ands	r3, r2
 800218e:	0019      	movs	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	605a      	str	r2, [r3, #4]
  }
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	fffdffff 	.word	0xfffdffff
 80021a8:	fffeffff 	.word	0xfffeffff
 80021ac:	fffbffff 	.word	0xfffbffff
 80021b0:	ffff7fff 	.word	0xffff7fff
 80021b4:	ffffefff 	.word	0xffffefff
 80021b8:	ffffdfff 	.word	0xffffdfff
 80021bc:	ffefffff 	.word	0xffefffff
 80021c0:	ff9fffff 	.word	0xff9fffff
 80021c4:	fff7ffff 	.word	0xfff7ffff

080021c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	228c      	movs	r2, #140	; 0x8c
 80021d4:	2100      	movs	r1, #0
 80021d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80021d8:	f7fe fbfe 	bl	80009d8 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2208      	movs	r2, #8
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d10c      	bne.n	8002208 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	0391      	lsls	r1, r2, #14
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <UART_CheckIdleState+0x90>)
 80021f8:	9200      	str	r2, [sp, #0]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f000 f82e 	bl	800225c <UART_WaitOnFlagUntilTimeout>
 8002200:	1e03      	subs	r3, r0, #0
 8002202:	d001      	beq.n	8002208 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e023      	b.n	8002250 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2204      	movs	r2, #4
 8002210:	4013      	ands	r3, r2
 8002212:	2b04      	cmp	r3, #4
 8002214:	d10c      	bne.n	8002230 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2280      	movs	r2, #128	; 0x80
 800221a:	03d1      	lsls	r1, r2, #15
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <UART_CheckIdleState+0x90>)
 8002220:	9200      	str	r2, [sp, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	f000 f81a 	bl	800225c <UART_WaitOnFlagUntilTimeout>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d001      	beq.n	8002230 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e00f      	b.n	8002250 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2284      	movs	r2, #132	; 0x84
 8002234:	2120      	movs	r1, #32
 8002236:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2288      	movs	r2, #136	; 0x88
 800223c:	2120      	movs	r1, #32
 800223e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	2100      	movs	r1, #0
 800224c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}
 8002258:	01ffffff 	.word	0x01ffffff

0800225c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b094      	sub	sp, #80	; 0x50
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800226c:	e0a7      	b.n	80023be <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002270:	3301      	adds	r3, #1
 8002272:	d100      	bne.n	8002276 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002274:	e0a3      	b.n	80023be <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002276:	f7fe fbaf 	bl	80009d8 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <UART_WaitOnFlagUntilTimeout+0x30>
 8002286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002288:	2b00      	cmp	r3, #0
 800228a:	d13f      	bne.n	800230c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228c:	f3ef 8310 	mrs	r3, PRIMASK
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
 8002296:	2301      	movs	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	f383 8810 	msr	PRIMASK, r3
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	494e      	ldr	r1, [pc, #312]	; (80023e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80022ae:	400a      	ands	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	f383 8810 	msr	PRIMASK, r3
}
 80022bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022be:	f3ef 8310 	mrs	r3, PRIMASK
 80022c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80022c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
 80022c8:	2301      	movs	r3, #1
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ce:	f383 8810 	msr	PRIMASK, r3
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	438a      	bics	r2, r1
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ea:	f383 8810 	msr	PRIMASK, r3
}
 80022ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2284      	movs	r2, #132	; 0x84
 80022f4:	2120      	movs	r1, #32
 80022f6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2288      	movs	r2, #136	; 0x88
 80022fc:	2120      	movs	r1, #32
 80022fe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2280      	movs	r2, #128	; 0x80
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e069      	b.n	80023e0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2204      	movs	r2, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d052      	beq.n	80023be <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	401a      	ands	r2, r3
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	429a      	cmp	r2, r3
 800232a:	d148      	bne.n	80023be <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002336:	f3ef 8310 	mrs	r3, PRIMASK
 800233a:	613b      	str	r3, [r7, #16]
  return(result);
 800233c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800233e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002340:	2301      	movs	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f383 8810 	msr	PRIMASK, r3
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4924      	ldr	r1, [pc, #144]	; (80023e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002358:	400a      	ands	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f383 8810 	msr	PRIMASK, r3
}
 8002366:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002368:	f3ef 8310 	mrs	r3, PRIMASK
 800236c:	61fb      	str	r3, [r7, #28]
  return(result);
 800236e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
 8002372:	2301      	movs	r3, #1
 8002374:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f383 8810 	msr	PRIMASK, r3
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	438a      	bics	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2284      	movs	r2, #132	; 0x84
 800239e:	2120      	movs	r1, #32
 80023a0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2288      	movs	r2, #136	; 0x88
 80023a6:	2120      	movs	r1, #32
 80023a8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	228c      	movs	r2, #140	; 0x8c
 80023ae:	2120      	movs	r1, #32
 80023b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	2100      	movs	r1, #0
 80023b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e010      	b.n	80023e0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4013      	ands	r3, r2
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	425a      	negs	r2, r3
 80023ce:	4153      	adcs	r3, r2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	001a      	movs	r2, r3
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d100      	bne.n	80023de <UART_WaitOnFlagUntilTimeout+0x182>
 80023dc:	e747      	b.n	800226e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	0018      	movs	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b014      	add	sp, #80	; 0x50
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	fffffe5f 	.word	0xfffffe5f

080023ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	5c9b      	ldrb	r3, [r3, r2]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_UARTEx_DisableFifoMode+0x16>
 80023fe:	2302      	movs	r3, #2
 8002400:	e027      	b.n	8002452 <HAL_UARTEx_DisableFifoMode+0x66>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2284      	movs	r2, #132	; 0x84
 800240e:	2124      	movs	r1, #36	; 0x24
 8002410:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2101      	movs	r1, #1
 8002426:	438a      	bics	r2, r1
 8002428:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_UARTEx_DisableFifoMode+0x70>)
 800242e:	4013      	ands	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2284      	movs	r2, #132	; 0x84
 8002444:	2120      	movs	r1, #32
 8002446:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	dfffffff 	.word	0xdfffffff

08002460 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	5c9b      	ldrb	r3, [r3, r2]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002474:	2302      	movs	r3, #2
 8002476:	e02e      	b.n	80024d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	2101      	movs	r1, #1
 800247e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2284      	movs	r2, #132	; 0x84
 8002484:	2124      	movs	r1, #36	; 0x24
 8002486:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2101      	movs	r1, #1
 800249c:	438a      	bics	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	08d9      	lsrs	r1, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 f854 	bl	8002564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2284      	movs	r2, #132	; 0x84
 80024c8:	2120      	movs	r1, #32
 80024ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	0018      	movs	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	b004      	add	sp, #16
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	5c9b      	ldrb	r3, [r3, r2]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e02f      	b.n	8002558 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	2101      	movs	r1, #1
 80024fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2284      	movs	r2, #132	; 0x84
 8002504:	2124      	movs	r1, #36	; 0x24
 8002506:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2101      	movs	r1, #1
 800251c:	438a      	bics	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f813 	bl	8002564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2284      	movs	r2, #132	; 0x84
 800254a:	2120      	movs	r1, #32
 800254c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2280      	movs	r2, #128	; 0x80
 8002552:	2100      	movs	r1, #0
 8002554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}
 8002560:	f1ffffff 	.word	0xf1ffffff

08002564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	226a      	movs	r2, #106	; 0x6a
 8002578:	2101      	movs	r1, #1
 800257a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2268      	movs	r2, #104	; 0x68
 8002580:	2101      	movs	r1, #1
 8002582:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002584:	e043      	b.n	800260e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002586:	260f      	movs	r6, #15
 8002588:	19bb      	adds	r3, r7, r6
 800258a:	2208      	movs	r2, #8
 800258c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800258e:	200e      	movs	r0, #14
 8002590:	183b      	adds	r3, r7, r0
 8002592:	2208      	movs	r2, #8
 8002594:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	0e5b      	lsrs	r3, r3, #25
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	240d      	movs	r4, #13
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	2107      	movs	r1, #7
 80025a6:	400a      	ands	r2, r1
 80025a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	0f5b      	lsrs	r3, r3, #29
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	250c      	movs	r5, #12
 80025b6:	197b      	adds	r3, r7, r5
 80025b8:	2107      	movs	r1, #7
 80025ba:	400a      	ands	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80025be:	183b      	adds	r3, r7, r0
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	197a      	adds	r2, r7, r5
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	4914      	ldr	r1, [pc, #80]	; (8002618 <UARTEx_SetNbDataToProcess+0xb4>)
 80025c8:	5c8a      	ldrb	r2, [r1, r2]
 80025ca:	435a      	muls	r2, r3
 80025cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80025ce:	197b      	adds	r3, r7, r5
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <UARTEx_SetNbDataToProcess+0xb8>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80025d6:	0019      	movs	r1, r3
 80025d8:	f7fd fe26 	bl	8000228 <__divsi3>
 80025dc:	0003      	movs	r3, r0
 80025de:	b299      	uxth	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	226a      	movs	r2, #106	; 0x6a
 80025e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80025e6:	19bb      	adds	r3, r7, r6
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	193a      	adds	r2, r7, r4
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	490a      	ldr	r1, [pc, #40]	; (8002618 <UARTEx_SetNbDataToProcess+0xb4>)
 80025f0:	5c8a      	ldrb	r2, [r1, r2]
 80025f2:	435a      	muls	r2, r3
 80025f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <UARTEx_SetNbDataToProcess+0xb8>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80025fe:	0019      	movs	r1, r3
 8002600:	f7fd fe12 	bl	8000228 <__divsi3>
 8002604:	0003      	movs	r3, r0
 8002606:	b299      	uxth	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2268      	movs	r2, #104	; 0x68
 800260c:	5299      	strh	r1, [r3, r2]
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b005      	add	sp, #20
 8002614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	080036c8 	.word	0x080036c8
 800261c:	080036d0 	.word	0x080036d0

08002620 <__errno>:
 8002620:	4b01      	ldr	r3, [pc, #4]	; (8002628 <__errno+0x8>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	4770      	bx	lr
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	2000000c 	.word	0x2000000c

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	2600      	movs	r6, #0
 8002630:	4d0c      	ldr	r5, [pc, #48]	; (8002664 <__libc_init_array+0x38>)
 8002632:	4c0d      	ldr	r4, [pc, #52]	; (8002668 <__libc_init_array+0x3c>)
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	2600      	movs	r6, #0
 800263e:	f000 fff9 	bl	8003634 <_init>
 8002642:	4d0a      	ldr	r5, [pc, #40]	; (800266c <__libc_init_array+0x40>)
 8002644:	4c0a      	ldr	r4, [pc, #40]	; (8002670 <__libc_init_array+0x44>)
 8002646:	1b64      	subs	r4, r4, r5
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	00b3      	lsls	r3, r6, #2
 8002652:	58eb      	ldr	r3, [r5, r3]
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	00b3      	lsls	r3, r6, #2
 800265c:	58eb      	ldr	r3, [r5, r3]
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	08003770 	.word	0x08003770
 8002668:	08003770 	.word	0x08003770
 800266c:	08003770 	.word	0x08003770
 8002670:	08003774 	.word	0x08003774

08002674 <memset>:
 8002674:	0003      	movs	r3, r0
 8002676:	1882      	adds	r2, r0, r2
 8002678:	4293      	cmp	r3, r2
 800267a:	d100      	bne.n	800267e <memset+0xa>
 800267c:	4770      	bx	lr
 800267e:	7019      	strb	r1, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	e7f9      	b.n	8002678 <memset+0x4>

08002684 <iprintf>:
 8002684:	b40f      	push	{r0, r1, r2, r3}
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <iprintf+0x30>)
 8002688:	b513      	push	{r0, r1, r4, lr}
 800268a:	681c      	ldr	r4, [r3, #0]
 800268c:	2c00      	cmp	r4, #0
 800268e:	d005      	beq.n	800269c <iprintf+0x18>
 8002690:	69a3      	ldr	r3, [r4, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <iprintf+0x18>
 8002696:	0020      	movs	r0, r4
 8002698:	f000 f870 	bl	800277c <__sinit>
 800269c:	ab05      	add	r3, sp, #20
 800269e:	0020      	movs	r0, r4
 80026a0:	9a04      	ldr	r2, [sp, #16]
 80026a2:	68a1      	ldr	r1, [r4, #8]
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	f000 f9cd 	bl	8002a44 <_vfiprintf_r>
 80026aa:	bc16      	pop	{r1, r2, r4}
 80026ac:	bc08      	pop	{r3}
 80026ae:	b004      	add	sp, #16
 80026b0:	4718      	bx	r3
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	2000000c 	.word	0x2000000c

080026b8 <std>:
 80026b8:	2300      	movs	r3, #0
 80026ba:	b510      	push	{r4, lr}
 80026bc:	0004      	movs	r4, r0
 80026be:	6003      	str	r3, [r0, #0]
 80026c0:	6043      	str	r3, [r0, #4]
 80026c2:	6083      	str	r3, [r0, #8]
 80026c4:	8181      	strh	r1, [r0, #12]
 80026c6:	6643      	str	r3, [r0, #100]	; 0x64
 80026c8:	0019      	movs	r1, r3
 80026ca:	81c2      	strh	r2, [r0, #14]
 80026cc:	6103      	str	r3, [r0, #16]
 80026ce:	6143      	str	r3, [r0, #20]
 80026d0:	6183      	str	r3, [r0, #24]
 80026d2:	2208      	movs	r2, #8
 80026d4:	305c      	adds	r0, #92	; 0x5c
 80026d6:	f7ff ffcd 	bl	8002674 <memset>
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <std+0x38>)
 80026dc:	6224      	str	r4, [r4, #32]
 80026de:	6263      	str	r3, [r4, #36]	; 0x24
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <std+0x3c>)
 80026e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <std+0x40>)
 80026e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <std+0x44>)
 80026ea:	6323      	str	r3, [r4, #48]	; 0x30
 80026ec:	bd10      	pop	{r4, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	08002fe1 	.word	0x08002fe1
 80026f4:	08003009 	.word	0x08003009
 80026f8:	08003041 	.word	0x08003041
 80026fc:	0800306d 	.word	0x0800306d

08002700 <_cleanup_r>:
 8002700:	b510      	push	{r4, lr}
 8002702:	4902      	ldr	r1, [pc, #8]	; (800270c <_cleanup_r+0xc>)
 8002704:	f000 f8ba 	bl	800287c <_fwalk_reent>
 8002708:	bd10      	pop	{r4, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	08003379 	.word	0x08003379

08002710 <__sfmoreglue>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	2568      	movs	r5, #104	; 0x68
 8002714:	1e4a      	subs	r2, r1, #1
 8002716:	4355      	muls	r5, r2
 8002718:	000e      	movs	r6, r1
 800271a:	0029      	movs	r1, r5
 800271c:	3174      	adds	r1, #116	; 0x74
 800271e:	f000 f8f3 	bl	8002908 <_malloc_r>
 8002722:	1e04      	subs	r4, r0, #0
 8002724:	d008      	beq.n	8002738 <__sfmoreglue+0x28>
 8002726:	2100      	movs	r1, #0
 8002728:	002a      	movs	r2, r5
 800272a:	6001      	str	r1, [r0, #0]
 800272c:	6046      	str	r6, [r0, #4]
 800272e:	300c      	adds	r0, #12
 8002730:	60a0      	str	r0, [r4, #8]
 8002732:	3268      	adds	r2, #104	; 0x68
 8002734:	f7ff ff9e 	bl	8002674 <memset>
 8002738:	0020      	movs	r0, r4
 800273a:	bd70      	pop	{r4, r5, r6, pc}

0800273c <__sfp_lock_acquire>:
 800273c:	b510      	push	{r4, lr}
 800273e:	4802      	ldr	r0, [pc, #8]	; (8002748 <__sfp_lock_acquire+0xc>)
 8002740:	f000 f8bd 	bl	80028be <__retarget_lock_acquire_recursive>
 8002744:	bd10      	pop	{r4, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20000135 	.word	0x20000135

0800274c <__sfp_lock_release>:
 800274c:	b510      	push	{r4, lr}
 800274e:	4802      	ldr	r0, [pc, #8]	; (8002758 <__sfp_lock_release+0xc>)
 8002750:	f000 f8b6 	bl	80028c0 <__retarget_lock_release_recursive>
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	20000135 	.word	0x20000135

0800275c <__sinit_lock_acquire>:
 800275c:	b510      	push	{r4, lr}
 800275e:	4802      	ldr	r0, [pc, #8]	; (8002768 <__sinit_lock_acquire+0xc>)
 8002760:	f000 f8ad 	bl	80028be <__retarget_lock_acquire_recursive>
 8002764:	bd10      	pop	{r4, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	20000136 	.word	0x20000136

0800276c <__sinit_lock_release>:
 800276c:	b510      	push	{r4, lr}
 800276e:	4802      	ldr	r0, [pc, #8]	; (8002778 <__sinit_lock_release+0xc>)
 8002770:	f000 f8a6 	bl	80028c0 <__retarget_lock_release_recursive>
 8002774:	bd10      	pop	{r4, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000136 	.word	0x20000136

0800277c <__sinit>:
 800277c:	b513      	push	{r0, r1, r4, lr}
 800277e:	0004      	movs	r4, r0
 8002780:	f7ff ffec 	bl	800275c <__sinit_lock_acquire>
 8002784:	69a3      	ldr	r3, [r4, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <__sinit+0x14>
 800278a:	f7ff ffef 	bl	800276c <__sinit_lock_release>
 800278e:	bd13      	pop	{r0, r1, r4, pc}
 8002790:	64a3      	str	r3, [r4, #72]	; 0x48
 8002792:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002794:	6523      	str	r3, [r4, #80]	; 0x50
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <__sinit+0x68>)
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <__sinit+0x6c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	62a2      	str	r2, [r4, #40]	; 0x28
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	42a3      	cmp	r3, r4
 80027a2:	d101      	bne.n	80027a8 <__sinit+0x2c>
 80027a4:	2301      	movs	r3, #1
 80027a6:	61a3      	str	r3, [r4, #24]
 80027a8:	0020      	movs	r0, r4
 80027aa:	f000 f81f 	bl	80027ec <__sfp>
 80027ae:	6060      	str	r0, [r4, #4]
 80027b0:	0020      	movs	r0, r4
 80027b2:	f000 f81b 	bl	80027ec <__sfp>
 80027b6:	60a0      	str	r0, [r4, #8]
 80027b8:	0020      	movs	r0, r4
 80027ba:	f000 f817 	bl	80027ec <__sfp>
 80027be:	2200      	movs	r2, #0
 80027c0:	2104      	movs	r1, #4
 80027c2:	60e0      	str	r0, [r4, #12]
 80027c4:	6860      	ldr	r0, [r4, #4]
 80027c6:	f7ff ff77 	bl	80026b8 <std>
 80027ca:	2201      	movs	r2, #1
 80027cc:	2109      	movs	r1, #9
 80027ce:	68a0      	ldr	r0, [r4, #8]
 80027d0:	f7ff ff72 	bl	80026b8 <std>
 80027d4:	2202      	movs	r2, #2
 80027d6:	2112      	movs	r1, #18
 80027d8:	68e0      	ldr	r0, [r4, #12]
 80027da:	f7ff ff6d 	bl	80026b8 <std>
 80027de:	2301      	movs	r3, #1
 80027e0:	61a3      	str	r3, [r4, #24]
 80027e2:	e7d2      	b.n	800278a <__sinit+0xe>
 80027e4:	080036d8 	.word	0x080036d8
 80027e8:	08002701 	.word	0x08002701

080027ec <__sfp>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	0007      	movs	r7, r0
 80027f0:	f7ff ffa4 	bl	800273c <__sfp_lock_acquire>
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <__sfp+0x88>)
 80027f6:	681e      	ldr	r6, [r3, #0]
 80027f8:	69b3      	ldr	r3, [r6, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <__sfp+0x18>
 80027fe:	0030      	movs	r0, r6
 8002800:	f7ff ffbc 	bl	800277c <__sinit>
 8002804:	3648      	adds	r6, #72	; 0x48
 8002806:	68b4      	ldr	r4, [r6, #8]
 8002808:	6873      	ldr	r3, [r6, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	d504      	bpl.n	8002818 <__sfp+0x2c>
 800280e:	6833      	ldr	r3, [r6, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <__sfp+0x6e>
 8002814:	6836      	ldr	r6, [r6, #0]
 8002816:	e7f6      	b.n	8002806 <__sfp+0x1a>
 8002818:	220c      	movs	r2, #12
 800281a:	5ea5      	ldrsh	r5, [r4, r2]
 800281c:	2d00      	cmp	r5, #0
 800281e:	d11a      	bne.n	8002856 <__sfp+0x6a>
 8002820:	0020      	movs	r0, r4
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <__sfp+0x8c>)
 8002824:	3058      	adds	r0, #88	; 0x58
 8002826:	60e3      	str	r3, [r4, #12]
 8002828:	6665      	str	r5, [r4, #100]	; 0x64
 800282a:	f000 f847 	bl	80028bc <__retarget_lock_init_recursive>
 800282e:	f7ff ff8d 	bl	800274c <__sfp_lock_release>
 8002832:	0020      	movs	r0, r4
 8002834:	2208      	movs	r2, #8
 8002836:	0029      	movs	r1, r5
 8002838:	6025      	str	r5, [r4, #0]
 800283a:	60a5      	str	r5, [r4, #8]
 800283c:	6065      	str	r5, [r4, #4]
 800283e:	6125      	str	r5, [r4, #16]
 8002840:	6165      	str	r5, [r4, #20]
 8002842:	61a5      	str	r5, [r4, #24]
 8002844:	305c      	adds	r0, #92	; 0x5c
 8002846:	f7ff ff15 	bl	8002674 <memset>
 800284a:	6365      	str	r5, [r4, #52]	; 0x34
 800284c:	63a5      	str	r5, [r4, #56]	; 0x38
 800284e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002850:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002852:	0020      	movs	r0, r4
 8002854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002856:	3468      	adds	r4, #104	; 0x68
 8002858:	e7d7      	b.n	800280a <__sfp+0x1e>
 800285a:	2104      	movs	r1, #4
 800285c:	0038      	movs	r0, r7
 800285e:	f7ff ff57 	bl	8002710 <__sfmoreglue>
 8002862:	1e04      	subs	r4, r0, #0
 8002864:	6030      	str	r0, [r6, #0]
 8002866:	d1d5      	bne.n	8002814 <__sfp+0x28>
 8002868:	f7ff ff70 	bl	800274c <__sfp_lock_release>
 800286c:	230c      	movs	r3, #12
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	e7ef      	b.n	8002852 <__sfp+0x66>
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	080036d8 	.word	0x080036d8
 8002878:	ffff0001 	.word	0xffff0001

0800287c <_fwalk_reent>:
 800287c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800287e:	0004      	movs	r4, r0
 8002880:	0006      	movs	r6, r0
 8002882:	2700      	movs	r7, #0
 8002884:	9101      	str	r1, [sp, #4]
 8002886:	3448      	adds	r4, #72	; 0x48
 8002888:	6863      	ldr	r3, [r4, #4]
 800288a:	68a5      	ldr	r5, [r4, #8]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	9b00      	ldr	r3, [sp, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	d504      	bpl.n	80028a0 <_fwalk_reent+0x24>
 8002896:	6824      	ldr	r4, [r4, #0]
 8002898:	2c00      	cmp	r4, #0
 800289a:	d1f5      	bne.n	8002888 <_fwalk_reent+0xc>
 800289c:	0038      	movs	r0, r7
 800289e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028a0:	89ab      	ldrh	r3, [r5, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d908      	bls.n	80028b8 <_fwalk_reent+0x3c>
 80028a6:	220e      	movs	r2, #14
 80028a8:	5eab      	ldrsh	r3, [r5, r2]
 80028aa:	3301      	adds	r3, #1
 80028ac:	d004      	beq.n	80028b8 <_fwalk_reent+0x3c>
 80028ae:	0029      	movs	r1, r5
 80028b0:	0030      	movs	r0, r6
 80028b2:	9b01      	ldr	r3, [sp, #4]
 80028b4:	4798      	blx	r3
 80028b6:	4307      	orrs	r7, r0
 80028b8:	3568      	adds	r5, #104	; 0x68
 80028ba:	e7e8      	b.n	800288e <_fwalk_reent+0x12>

080028bc <__retarget_lock_init_recursive>:
 80028bc:	4770      	bx	lr

080028be <__retarget_lock_acquire_recursive>:
 80028be:	4770      	bx	lr

080028c0 <__retarget_lock_release_recursive>:
 80028c0:	4770      	bx	lr
	...

080028c4 <sbrk_aligned>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	4e0f      	ldr	r6, [pc, #60]	; (8002904 <sbrk_aligned+0x40>)
 80028c8:	000d      	movs	r5, r1
 80028ca:	6831      	ldr	r1, [r6, #0]
 80028cc:	0004      	movs	r4, r0
 80028ce:	2900      	cmp	r1, #0
 80028d0:	d102      	bne.n	80028d8 <sbrk_aligned+0x14>
 80028d2:	f000 fb73 	bl	8002fbc <_sbrk_r>
 80028d6:	6030      	str	r0, [r6, #0]
 80028d8:	0029      	movs	r1, r5
 80028da:	0020      	movs	r0, r4
 80028dc:	f000 fb6e 	bl	8002fbc <_sbrk_r>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d00a      	beq.n	80028fa <sbrk_aligned+0x36>
 80028e4:	2303      	movs	r3, #3
 80028e6:	1cc5      	adds	r5, r0, #3
 80028e8:	439d      	bics	r5, r3
 80028ea:	42a8      	cmp	r0, r5
 80028ec:	d007      	beq.n	80028fe <sbrk_aligned+0x3a>
 80028ee:	1a29      	subs	r1, r5, r0
 80028f0:	0020      	movs	r0, r4
 80028f2:	f000 fb63 	bl	8002fbc <_sbrk_r>
 80028f6:	1c43      	adds	r3, r0, #1
 80028f8:	d101      	bne.n	80028fe <sbrk_aligned+0x3a>
 80028fa:	2501      	movs	r5, #1
 80028fc:	426d      	negs	r5, r5
 80028fe:	0028      	movs	r0, r5
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	2000013c 	.word	0x2000013c

08002908 <_malloc_r>:
 8002908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800290a:	2203      	movs	r2, #3
 800290c:	1ccb      	adds	r3, r1, #3
 800290e:	4393      	bics	r3, r2
 8002910:	3308      	adds	r3, #8
 8002912:	0006      	movs	r6, r0
 8002914:	001f      	movs	r7, r3
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d232      	bcs.n	8002980 <_malloc_r+0x78>
 800291a:	270c      	movs	r7, #12
 800291c:	42b9      	cmp	r1, r7
 800291e:	d831      	bhi.n	8002984 <_malloc_r+0x7c>
 8002920:	0030      	movs	r0, r6
 8002922:	f000 fdf5 	bl	8003510 <__malloc_lock>
 8002926:	4d32      	ldr	r5, [pc, #200]	; (80029f0 <_malloc_r+0xe8>)
 8002928:	682b      	ldr	r3, [r5, #0]
 800292a:	001c      	movs	r4, r3
 800292c:	2c00      	cmp	r4, #0
 800292e:	d12e      	bne.n	800298e <_malloc_r+0x86>
 8002930:	0039      	movs	r1, r7
 8002932:	0030      	movs	r0, r6
 8002934:	f7ff ffc6 	bl	80028c4 <sbrk_aligned>
 8002938:	0004      	movs	r4, r0
 800293a:	1c43      	adds	r3, r0, #1
 800293c:	d11e      	bne.n	800297c <_malloc_r+0x74>
 800293e:	682c      	ldr	r4, [r5, #0]
 8002940:	0025      	movs	r5, r4
 8002942:	2d00      	cmp	r5, #0
 8002944:	d14a      	bne.n	80029dc <_malloc_r+0xd4>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	0029      	movs	r1, r5
 800294a:	18e3      	adds	r3, r4, r3
 800294c:	0030      	movs	r0, r6
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	f000 fb34 	bl	8002fbc <_sbrk_r>
 8002954:	9b01      	ldr	r3, [sp, #4]
 8002956:	4283      	cmp	r3, r0
 8002958:	d143      	bne.n	80029e2 <_malloc_r+0xda>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	3703      	adds	r7, #3
 800295e:	1aff      	subs	r7, r7, r3
 8002960:	2303      	movs	r3, #3
 8002962:	439f      	bics	r7, r3
 8002964:	3708      	adds	r7, #8
 8002966:	2f0c      	cmp	r7, #12
 8002968:	d200      	bcs.n	800296c <_malloc_r+0x64>
 800296a:	270c      	movs	r7, #12
 800296c:	0039      	movs	r1, r7
 800296e:	0030      	movs	r0, r6
 8002970:	f7ff ffa8 	bl	80028c4 <sbrk_aligned>
 8002974:	1c43      	adds	r3, r0, #1
 8002976:	d034      	beq.n	80029e2 <_malloc_r+0xda>
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	19df      	adds	r7, r3, r7
 800297c:	6027      	str	r7, [r4, #0]
 800297e:	e013      	b.n	80029a8 <_malloc_r+0xa0>
 8002980:	2b00      	cmp	r3, #0
 8002982:	dacb      	bge.n	800291c <_malloc_r+0x14>
 8002984:	230c      	movs	r3, #12
 8002986:	2500      	movs	r5, #0
 8002988:	6033      	str	r3, [r6, #0]
 800298a:	0028      	movs	r0, r5
 800298c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	1bd1      	subs	r1, r2, r7
 8002992:	d420      	bmi.n	80029d6 <_malloc_r+0xce>
 8002994:	290b      	cmp	r1, #11
 8002996:	d917      	bls.n	80029c8 <_malloc_r+0xc0>
 8002998:	19e2      	adds	r2, r4, r7
 800299a:	6027      	str	r7, [r4, #0]
 800299c:	42a3      	cmp	r3, r4
 800299e:	d111      	bne.n	80029c4 <_malloc_r+0xbc>
 80029a0:	602a      	str	r2, [r5, #0]
 80029a2:	6863      	ldr	r3, [r4, #4]
 80029a4:	6011      	str	r1, [r2, #0]
 80029a6:	6053      	str	r3, [r2, #4]
 80029a8:	0030      	movs	r0, r6
 80029aa:	0025      	movs	r5, r4
 80029ac:	f000 fdb8 	bl	8003520 <__malloc_unlock>
 80029b0:	2207      	movs	r2, #7
 80029b2:	350b      	adds	r5, #11
 80029b4:	1d23      	adds	r3, r4, #4
 80029b6:	4395      	bics	r5, r2
 80029b8:	1aea      	subs	r2, r5, r3
 80029ba:	429d      	cmp	r5, r3
 80029bc:	d0e5      	beq.n	800298a <_malloc_r+0x82>
 80029be:	1b5b      	subs	r3, r3, r5
 80029c0:	50a3      	str	r3, [r4, r2]
 80029c2:	e7e2      	b.n	800298a <_malloc_r+0x82>
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e7ec      	b.n	80029a2 <_malloc_r+0x9a>
 80029c8:	6862      	ldr	r2, [r4, #4]
 80029ca:	42a3      	cmp	r3, r4
 80029cc:	d101      	bne.n	80029d2 <_malloc_r+0xca>
 80029ce:	602a      	str	r2, [r5, #0]
 80029d0:	e7ea      	b.n	80029a8 <_malloc_r+0xa0>
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	e7e8      	b.n	80029a8 <_malloc_r+0xa0>
 80029d6:	0023      	movs	r3, r4
 80029d8:	6864      	ldr	r4, [r4, #4]
 80029da:	e7a7      	b.n	800292c <_malloc_r+0x24>
 80029dc:	002c      	movs	r4, r5
 80029de:	686d      	ldr	r5, [r5, #4]
 80029e0:	e7af      	b.n	8002942 <_malloc_r+0x3a>
 80029e2:	230c      	movs	r3, #12
 80029e4:	0030      	movs	r0, r6
 80029e6:	6033      	str	r3, [r6, #0]
 80029e8:	f000 fd9a 	bl	8003520 <__malloc_unlock>
 80029ec:	e7cd      	b.n	800298a <_malloc_r+0x82>
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	20000138 	.word	0x20000138

080029f4 <__sfputc_r>:
 80029f4:	6893      	ldr	r3, [r2, #8]
 80029f6:	b510      	push	{r4, lr}
 80029f8:	3b01      	subs	r3, #1
 80029fa:	6093      	str	r3, [r2, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	da04      	bge.n	8002a0a <__sfputc_r+0x16>
 8002a00:	6994      	ldr	r4, [r2, #24]
 8002a02:	42a3      	cmp	r3, r4
 8002a04:	db07      	blt.n	8002a16 <__sfputc_r+0x22>
 8002a06:	290a      	cmp	r1, #10
 8002a08:	d005      	beq.n	8002a16 <__sfputc_r+0x22>
 8002a0a:	6813      	ldr	r3, [r2, #0]
 8002a0c:	1c58      	adds	r0, r3, #1
 8002a0e:	6010      	str	r0, [r2, #0]
 8002a10:	7019      	strb	r1, [r3, #0]
 8002a12:	0008      	movs	r0, r1
 8002a14:	bd10      	pop	{r4, pc}
 8002a16:	f000 fb2f 	bl	8003078 <__swbuf_r>
 8002a1a:	0001      	movs	r1, r0
 8002a1c:	e7f9      	b.n	8002a12 <__sfputc_r+0x1e>

08002a1e <__sfputs_r>:
 8002a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a20:	0006      	movs	r6, r0
 8002a22:	000f      	movs	r7, r1
 8002a24:	0014      	movs	r4, r2
 8002a26:	18d5      	adds	r5, r2, r3
 8002a28:	42ac      	cmp	r4, r5
 8002a2a:	d101      	bne.n	8002a30 <__sfputs_r+0x12>
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	e007      	b.n	8002a40 <__sfputs_r+0x22>
 8002a30:	7821      	ldrb	r1, [r4, #0]
 8002a32:	003a      	movs	r2, r7
 8002a34:	0030      	movs	r0, r6
 8002a36:	f7ff ffdd 	bl	80029f4 <__sfputc_r>
 8002a3a:	3401      	adds	r4, #1
 8002a3c:	1c43      	adds	r3, r0, #1
 8002a3e:	d1f3      	bne.n	8002a28 <__sfputs_r+0xa>
 8002a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a44 <_vfiprintf_r>:
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	b0a1      	sub	sp, #132	; 0x84
 8002a48:	0006      	movs	r6, r0
 8002a4a:	000c      	movs	r4, r1
 8002a4c:	001f      	movs	r7, r3
 8002a4e:	9203      	str	r2, [sp, #12]
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d004      	beq.n	8002a5e <_vfiprintf_r+0x1a>
 8002a54:	6983      	ldr	r3, [r0, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <_vfiprintf_r+0x1a>
 8002a5a:	f7ff fe8f 	bl	800277c <__sinit>
 8002a5e:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <_vfiprintf_r+0x254>)
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d11c      	bne.n	8002a9e <_vfiprintf_r+0x5a>
 8002a64:	6874      	ldr	r4, [r6, #4]
 8002a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a68:	07db      	lsls	r3, r3, #31
 8002a6a:	d405      	bmi.n	8002a78 <_vfiprintf_r+0x34>
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	059b      	lsls	r3, r3, #22
 8002a70:	d402      	bmi.n	8002a78 <_vfiprintf_r+0x34>
 8002a72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a74:	f7ff ff23 	bl	80028be <__retarget_lock_acquire_recursive>
 8002a78:	89a3      	ldrh	r3, [r4, #12]
 8002a7a:	071b      	lsls	r3, r3, #28
 8002a7c:	d502      	bpl.n	8002a84 <_vfiprintf_r+0x40>
 8002a7e:	6923      	ldr	r3, [r4, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11d      	bne.n	8002ac0 <_vfiprintf_r+0x7c>
 8002a84:	0021      	movs	r1, r4
 8002a86:	0030      	movs	r0, r6
 8002a88:	f000 fb60 	bl	800314c <__swsetup_r>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d017      	beq.n	8002ac0 <_vfiprintf_r+0x7c>
 8002a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a92:	07db      	lsls	r3, r3, #31
 8002a94:	d50d      	bpl.n	8002ab2 <_vfiprintf_r+0x6e>
 8002a96:	2001      	movs	r0, #1
 8002a98:	4240      	negs	r0, r0
 8002a9a:	b021      	add	sp, #132	; 0x84
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	; (8002c9c <_vfiprintf_r+0x258>)
 8002aa0:	429c      	cmp	r4, r3
 8002aa2:	d101      	bne.n	8002aa8 <_vfiprintf_r+0x64>
 8002aa4:	68b4      	ldr	r4, [r6, #8]
 8002aa6:	e7de      	b.n	8002a66 <_vfiprintf_r+0x22>
 8002aa8:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <_vfiprintf_r+0x25c>)
 8002aaa:	429c      	cmp	r4, r3
 8002aac:	d1db      	bne.n	8002a66 <_vfiprintf_r+0x22>
 8002aae:	68f4      	ldr	r4, [r6, #12]
 8002ab0:	e7d9      	b.n	8002a66 <_vfiprintf_r+0x22>
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	059b      	lsls	r3, r3, #22
 8002ab6:	d4ee      	bmi.n	8002a96 <_vfiprintf_r+0x52>
 8002ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aba:	f7ff ff01 	bl	80028c0 <__retarget_lock_release_recursive>
 8002abe:	e7ea      	b.n	8002a96 <_vfiprintf_r+0x52>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	ad08      	add	r5, sp, #32
 8002ac4:	616b      	str	r3, [r5, #20]
 8002ac6:	3320      	adds	r3, #32
 8002ac8:	766b      	strb	r3, [r5, #25]
 8002aca:	3310      	adds	r3, #16
 8002acc:	76ab      	strb	r3, [r5, #26]
 8002ace:	9707      	str	r7, [sp, #28]
 8002ad0:	9f03      	ldr	r7, [sp, #12]
 8002ad2:	783b      	ldrb	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <_vfiprintf_r+0x98>
 8002ad8:	2b25      	cmp	r3, #37	; 0x25
 8002ada:	d14e      	bne.n	8002b7a <_vfiprintf_r+0x136>
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	1afb      	subs	r3, r7, r3
 8002ae0:	9305      	str	r3, [sp, #20]
 8002ae2:	9b03      	ldr	r3, [sp, #12]
 8002ae4:	429f      	cmp	r7, r3
 8002ae6:	d00d      	beq.n	8002b04 <_vfiprintf_r+0xc0>
 8002ae8:	9b05      	ldr	r3, [sp, #20]
 8002aea:	0021      	movs	r1, r4
 8002aec:	0030      	movs	r0, r6
 8002aee:	9a03      	ldr	r2, [sp, #12]
 8002af0:	f7ff ff95 	bl	8002a1e <__sfputs_r>
 8002af4:	1c43      	adds	r3, r0, #1
 8002af6:	d100      	bne.n	8002afa <_vfiprintf_r+0xb6>
 8002af8:	e0b5      	b.n	8002c66 <_vfiprintf_r+0x222>
 8002afa:	696a      	ldr	r2, [r5, #20]
 8002afc:	9b05      	ldr	r3, [sp, #20]
 8002afe:	4694      	mov	ip, r2
 8002b00:	4463      	add	r3, ip
 8002b02:	616b      	str	r3, [r5, #20]
 8002b04:	783b      	ldrb	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d100      	bne.n	8002b0c <_vfiprintf_r+0xc8>
 8002b0a:	e0ac      	b.n	8002c66 <_vfiprintf_r+0x222>
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	1c7b      	adds	r3, r7, #1
 8002b10:	9303      	str	r3, [sp, #12]
 8002b12:	2300      	movs	r3, #0
 8002b14:	4252      	negs	r2, r2
 8002b16:	606a      	str	r2, [r5, #4]
 8002b18:	a904      	add	r1, sp, #16
 8002b1a:	3254      	adds	r2, #84	; 0x54
 8002b1c:	1852      	adds	r2, r2, r1
 8002b1e:	602b      	str	r3, [r5, #0]
 8002b20:	60eb      	str	r3, [r5, #12]
 8002b22:	60ab      	str	r3, [r5, #8]
 8002b24:	7013      	strb	r3, [r2, #0]
 8002b26:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	2205      	movs	r2, #5
 8002b2c:	7819      	ldrb	r1, [r3, #0]
 8002b2e:	485d      	ldr	r0, [pc, #372]	; (8002ca4 <_vfiprintf_r+0x260>)
 8002b30:	f000 fce2 	bl	80034f8 <memchr>
 8002b34:	9b03      	ldr	r3, [sp, #12]
 8002b36:	1c5f      	adds	r7, r3, #1
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d120      	bne.n	8002b7e <_vfiprintf_r+0x13a>
 8002b3c:	682a      	ldr	r2, [r5, #0]
 8002b3e:	06d3      	lsls	r3, r2, #27
 8002b40:	d504      	bpl.n	8002b4c <_vfiprintf_r+0x108>
 8002b42:	2353      	movs	r3, #83	; 0x53
 8002b44:	a904      	add	r1, sp, #16
 8002b46:	185b      	adds	r3, r3, r1
 8002b48:	2120      	movs	r1, #32
 8002b4a:	7019      	strb	r1, [r3, #0]
 8002b4c:	0713      	lsls	r3, r2, #28
 8002b4e:	d504      	bpl.n	8002b5a <_vfiprintf_r+0x116>
 8002b50:	2353      	movs	r3, #83	; 0x53
 8002b52:	a904      	add	r1, sp, #16
 8002b54:	185b      	adds	r3, r3, r1
 8002b56:	212b      	movs	r1, #43	; 0x2b
 8002b58:	7019      	strb	r1, [r3, #0]
 8002b5a:	9b03      	ldr	r3, [sp, #12]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b60:	d016      	beq.n	8002b90 <_vfiprintf_r+0x14c>
 8002b62:	2100      	movs	r1, #0
 8002b64:	68eb      	ldr	r3, [r5, #12]
 8002b66:	9f03      	ldr	r7, [sp, #12]
 8002b68:	783a      	ldrb	r2, [r7, #0]
 8002b6a:	1c78      	adds	r0, r7, #1
 8002b6c:	3a30      	subs	r2, #48	; 0x30
 8002b6e:	4684      	mov	ip, r0
 8002b70:	2a09      	cmp	r2, #9
 8002b72:	d94f      	bls.n	8002c14 <_vfiprintf_r+0x1d0>
 8002b74:	2900      	cmp	r1, #0
 8002b76:	d111      	bne.n	8002b9c <_vfiprintf_r+0x158>
 8002b78:	e017      	b.n	8002baa <_vfiprintf_r+0x166>
 8002b7a:	3701      	adds	r7, #1
 8002b7c:	e7a9      	b.n	8002ad2 <_vfiprintf_r+0x8e>
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <_vfiprintf_r+0x260>)
 8002b80:	682a      	ldr	r2, [r5, #0]
 8002b82:	1ac0      	subs	r0, r0, r3
 8002b84:	2301      	movs	r3, #1
 8002b86:	4083      	lsls	r3, r0
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	602b      	str	r3, [r5, #0]
 8002b8c:	9703      	str	r7, [sp, #12]
 8002b8e:	e7cb      	b.n	8002b28 <_vfiprintf_r+0xe4>
 8002b90:	9b07      	ldr	r3, [sp, #28]
 8002b92:	1d19      	adds	r1, r3, #4
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	9107      	str	r1, [sp, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db01      	blt.n	8002ba0 <_vfiprintf_r+0x15c>
 8002b9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b9e:	e004      	b.n	8002baa <_vfiprintf_r+0x166>
 8002ba0:	425b      	negs	r3, r3
 8002ba2:	60eb      	str	r3, [r5, #12]
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	602b      	str	r3, [r5, #0]
 8002baa:	783b      	ldrb	r3, [r7, #0]
 8002bac:	2b2e      	cmp	r3, #46	; 0x2e
 8002bae:	d10a      	bne.n	8002bc6 <_vfiprintf_r+0x182>
 8002bb0:	787b      	ldrb	r3, [r7, #1]
 8002bb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb4:	d137      	bne.n	8002c26 <_vfiprintf_r+0x1e2>
 8002bb6:	9b07      	ldr	r3, [sp, #28]
 8002bb8:	3702      	adds	r7, #2
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	9207      	str	r2, [sp, #28]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db2d      	blt.n	8002c20 <_vfiprintf_r+0x1dc>
 8002bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	7839      	ldrb	r1, [r7, #0]
 8002bca:	4837      	ldr	r0, [pc, #220]	; (8002ca8 <_vfiprintf_r+0x264>)
 8002bcc:	f000 fc94 	bl	80034f8 <memchr>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	d007      	beq.n	8002be4 <_vfiprintf_r+0x1a0>
 8002bd4:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <_vfiprintf_r+0x264>)
 8002bd6:	682a      	ldr	r2, [r5, #0]
 8002bd8:	1ac0      	subs	r0, r0, r3
 8002bda:	2340      	movs	r3, #64	; 0x40
 8002bdc:	4083      	lsls	r3, r0
 8002bde:	4313      	orrs	r3, r2
 8002be0:	3701      	adds	r7, #1
 8002be2:	602b      	str	r3, [r5, #0]
 8002be4:	7839      	ldrb	r1, [r7, #0]
 8002be6:	1c7b      	adds	r3, r7, #1
 8002be8:	2206      	movs	r2, #6
 8002bea:	4830      	ldr	r0, [pc, #192]	; (8002cac <_vfiprintf_r+0x268>)
 8002bec:	9303      	str	r3, [sp, #12]
 8002bee:	7629      	strb	r1, [r5, #24]
 8002bf0:	f000 fc82 	bl	80034f8 <memchr>
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d045      	beq.n	8002c84 <_vfiprintf_r+0x240>
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <_vfiprintf_r+0x26c>)
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d127      	bne.n	8002c4e <_vfiprintf_r+0x20a>
 8002bfe:	2207      	movs	r2, #7
 8002c00:	9b07      	ldr	r3, [sp, #28]
 8002c02:	3307      	adds	r3, #7
 8002c04:	4393      	bics	r3, r2
 8002c06:	3308      	adds	r3, #8
 8002c08:	9307      	str	r3, [sp, #28]
 8002c0a:	696b      	ldr	r3, [r5, #20]
 8002c0c:	9a04      	ldr	r2, [sp, #16]
 8002c0e:	189b      	adds	r3, r3, r2
 8002c10:	616b      	str	r3, [r5, #20]
 8002c12:	e75d      	b.n	8002ad0 <_vfiprintf_r+0x8c>
 8002c14:	210a      	movs	r1, #10
 8002c16:	434b      	muls	r3, r1
 8002c18:	4667      	mov	r7, ip
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	3909      	subs	r1, #9
 8002c1e:	e7a3      	b.n	8002b68 <_vfiprintf_r+0x124>
 8002c20:	2301      	movs	r3, #1
 8002c22:	425b      	negs	r3, r3
 8002c24:	e7ce      	b.n	8002bc4 <_vfiprintf_r+0x180>
 8002c26:	2300      	movs	r3, #0
 8002c28:	001a      	movs	r2, r3
 8002c2a:	3701      	adds	r7, #1
 8002c2c:	606b      	str	r3, [r5, #4]
 8002c2e:	7839      	ldrb	r1, [r7, #0]
 8002c30:	1c78      	adds	r0, r7, #1
 8002c32:	3930      	subs	r1, #48	; 0x30
 8002c34:	4684      	mov	ip, r0
 8002c36:	2909      	cmp	r1, #9
 8002c38:	d903      	bls.n	8002c42 <_vfiprintf_r+0x1fe>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0c3      	beq.n	8002bc6 <_vfiprintf_r+0x182>
 8002c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002c40:	e7c1      	b.n	8002bc6 <_vfiprintf_r+0x182>
 8002c42:	230a      	movs	r3, #10
 8002c44:	435a      	muls	r2, r3
 8002c46:	4667      	mov	r7, ip
 8002c48:	1852      	adds	r2, r2, r1
 8002c4a:	3b09      	subs	r3, #9
 8002c4c:	e7ef      	b.n	8002c2e <_vfiprintf_r+0x1ea>
 8002c4e:	ab07      	add	r3, sp, #28
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	0022      	movs	r2, r4
 8002c54:	0029      	movs	r1, r5
 8002c56:	0030      	movs	r0, r6
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <_vfiprintf_r+0x270>)
 8002c5a:	e000      	b.n	8002c5e <_vfiprintf_r+0x21a>
 8002c5c:	bf00      	nop
 8002c5e:	9004      	str	r0, [sp, #16]
 8002c60:	9b04      	ldr	r3, [sp, #16]
 8002c62:	3301      	adds	r3, #1
 8002c64:	d1d1      	bne.n	8002c0a <_vfiprintf_r+0x1c6>
 8002c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c68:	07db      	lsls	r3, r3, #31
 8002c6a:	d405      	bmi.n	8002c78 <_vfiprintf_r+0x234>
 8002c6c:	89a3      	ldrh	r3, [r4, #12]
 8002c6e:	059b      	lsls	r3, r3, #22
 8002c70:	d402      	bmi.n	8002c78 <_vfiprintf_r+0x234>
 8002c72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c74:	f7ff fe24 	bl	80028c0 <__retarget_lock_release_recursive>
 8002c78:	89a3      	ldrh	r3, [r4, #12]
 8002c7a:	065b      	lsls	r3, r3, #25
 8002c7c:	d500      	bpl.n	8002c80 <_vfiprintf_r+0x23c>
 8002c7e:	e70a      	b.n	8002a96 <_vfiprintf_r+0x52>
 8002c80:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002c82:	e70a      	b.n	8002a9a <_vfiprintf_r+0x56>
 8002c84:	ab07      	add	r3, sp, #28
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	0022      	movs	r2, r4
 8002c8a:	0029      	movs	r1, r5
 8002c8c:	0030      	movs	r0, r6
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <_vfiprintf_r+0x270>)
 8002c90:	f000 f882 	bl	8002d98 <_printf_i>
 8002c94:	e7e3      	b.n	8002c5e <_vfiprintf_r+0x21a>
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	080036fc 	.word	0x080036fc
 8002c9c:	0800371c 	.word	0x0800371c
 8002ca0:	080036dc 	.word	0x080036dc
 8002ca4:	0800373c 	.word	0x0800373c
 8002ca8:	08003742 	.word	0x08003742
 8002cac:	08003746 	.word	0x08003746
 8002cb0:	00000000 	.word	0x00000000
 8002cb4:	08002a1f 	.word	0x08002a1f

08002cb8 <_printf_common>:
 8002cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cba:	0015      	movs	r5, r2
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	688a      	ldr	r2, [r1, #8]
 8002cc0:	690b      	ldr	r3, [r1, #16]
 8002cc2:	000c      	movs	r4, r1
 8002cc4:	9000      	str	r0, [sp, #0]
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	da00      	bge.n	8002ccc <_printf_common+0x14>
 8002cca:	0013      	movs	r3, r2
 8002ccc:	0022      	movs	r2, r4
 8002cce:	602b      	str	r3, [r5, #0]
 8002cd0:	3243      	adds	r2, #67	; 0x43
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	2a00      	cmp	r2, #0
 8002cd6:	d001      	beq.n	8002cdc <_printf_common+0x24>
 8002cd8:	3301      	adds	r3, #1
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	d502      	bpl.n	8002ce8 <_printf_common+0x30>
 8002ce2:	682b      	ldr	r3, [r5, #0]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	602b      	str	r3, [r5, #0]
 8002ce8:	6822      	ldr	r2, [r4, #0]
 8002cea:	2306      	movs	r3, #6
 8002cec:	0017      	movs	r7, r2
 8002cee:	401f      	ands	r7, r3
 8002cf0:	421a      	tst	r2, r3
 8002cf2:	d027      	beq.n	8002d44 <_printf_common+0x8c>
 8002cf4:	0023      	movs	r3, r4
 8002cf6:	3343      	adds	r3, #67	; 0x43
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	4193      	sbcs	r3, r2
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	0692      	lsls	r2, r2, #26
 8002d02:	d430      	bmi.n	8002d66 <_printf_common+0xae>
 8002d04:	0022      	movs	r2, r4
 8002d06:	9901      	ldr	r1, [sp, #4]
 8002d08:	9800      	ldr	r0, [sp, #0]
 8002d0a:	9e08      	ldr	r6, [sp, #32]
 8002d0c:	3243      	adds	r2, #67	; 0x43
 8002d0e:	47b0      	blx	r6
 8002d10:	1c43      	adds	r3, r0, #1
 8002d12:	d025      	beq.n	8002d60 <_printf_common+0xa8>
 8002d14:	2306      	movs	r3, #6
 8002d16:	6820      	ldr	r0, [r4, #0]
 8002d18:	682a      	ldr	r2, [r5, #0]
 8002d1a:	68e1      	ldr	r1, [r4, #12]
 8002d1c:	2500      	movs	r5, #0
 8002d1e:	4003      	ands	r3, r0
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d103      	bne.n	8002d2c <_printf_common+0x74>
 8002d24:	1a8d      	subs	r5, r1, r2
 8002d26:	43eb      	mvns	r3, r5
 8002d28:	17db      	asrs	r3, r3, #31
 8002d2a:	401d      	ands	r5, r3
 8002d2c:	68a3      	ldr	r3, [r4, #8]
 8002d2e:	6922      	ldr	r2, [r4, #16]
 8002d30:	4293      	cmp	r3, r2
 8002d32:	dd01      	ble.n	8002d38 <_printf_common+0x80>
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	18ed      	adds	r5, r5, r3
 8002d38:	2700      	movs	r7, #0
 8002d3a:	42bd      	cmp	r5, r7
 8002d3c:	d120      	bne.n	8002d80 <_printf_common+0xc8>
 8002d3e:	2000      	movs	r0, #0
 8002d40:	e010      	b.n	8002d64 <_printf_common+0xac>
 8002d42:	3701      	adds	r7, #1
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	682a      	ldr	r2, [r5, #0]
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	42bb      	cmp	r3, r7
 8002d4c:	ddd2      	ble.n	8002cf4 <_printf_common+0x3c>
 8002d4e:	0022      	movs	r2, r4
 8002d50:	2301      	movs	r3, #1
 8002d52:	9901      	ldr	r1, [sp, #4]
 8002d54:	9800      	ldr	r0, [sp, #0]
 8002d56:	9e08      	ldr	r6, [sp, #32]
 8002d58:	3219      	adds	r2, #25
 8002d5a:	47b0      	blx	r6
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d1f0      	bne.n	8002d42 <_printf_common+0x8a>
 8002d60:	2001      	movs	r0, #1
 8002d62:	4240      	negs	r0, r0
 8002d64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d66:	2030      	movs	r0, #48	; 0x30
 8002d68:	18e1      	adds	r1, r4, r3
 8002d6a:	3143      	adds	r1, #67	; 0x43
 8002d6c:	7008      	strb	r0, [r1, #0]
 8002d6e:	0021      	movs	r1, r4
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	3145      	adds	r1, #69	; 0x45
 8002d74:	7809      	ldrb	r1, [r1, #0]
 8002d76:	18a2      	adds	r2, r4, r2
 8002d78:	3243      	adds	r2, #67	; 0x43
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	7011      	strb	r1, [r2, #0]
 8002d7e:	e7c1      	b.n	8002d04 <_printf_common+0x4c>
 8002d80:	0022      	movs	r2, r4
 8002d82:	2301      	movs	r3, #1
 8002d84:	9901      	ldr	r1, [sp, #4]
 8002d86:	9800      	ldr	r0, [sp, #0]
 8002d88:	9e08      	ldr	r6, [sp, #32]
 8002d8a:	321a      	adds	r2, #26
 8002d8c:	47b0      	blx	r6
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	d0e6      	beq.n	8002d60 <_printf_common+0xa8>
 8002d92:	3701      	adds	r7, #1
 8002d94:	e7d1      	b.n	8002d3a <_printf_common+0x82>
	...

08002d98 <_printf_i>:
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b08b      	sub	sp, #44	; 0x2c
 8002d9c:	9206      	str	r2, [sp, #24]
 8002d9e:	000a      	movs	r2, r1
 8002da0:	3243      	adds	r2, #67	; 0x43
 8002da2:	9307      	str	r3, [sp, #28]
 8002da4:	9005      	str	r0, [sp, #20]
 8002da6:	9204      	str	r2, [sp, #16]
 8002da8:	7e0a      	ldrb	r2, [r1, #24]
 8002daa:	000c      	movs	r4, r1
 8002dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002dae:	2a78      	cmp	r2, #120	; 0x78
 8002db0:	d807      	bhi.n	8002dc2 <_printf_i+0x2a>
 8002db2:	2a62      	cmp	r2, #98	; 0x62
 8002db4:	d809      	bhi.n	8002dca <_printf_i+0x32>
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	d100      	bne.n	8002dbc <_printf_i+0x24>
 8002dba:	e0c1      	b.n	8002f40 <_printf_i+0x1a8>
 8002dbc:	2a58      	cmp	r2, #88	; 0x58
 8002dbe:	d100      	bne.n	8002dc2 <_printf_i+0x2a>
 8002dc0:	e08c      	b.n	8002edc <_printf_i+0x144>
 8002dc2:	0026      	movs	r6, r4
 8002dc4:	3642      	adds	r6, #66	; 0x42
 8002dc6:	7032      	strb	r2, [r6, #0]
 8002dc8:	e022      	b.n	8002e10 <_printf_i+0x78>
 8002dca:	0010      	movs	r0, r2
 8002dcc:	3863      	subs	r0, #99	; 0x63
 8002dce:	2815      	cmp	r0, #21
 8002dd0:	d8f7      	bhi.n	8002dc2 <_printf_i+0x2a>
 8002dd2:	f7fd f995 	bl	8000100 <__gnu_thumb1_case_shi>
 8002dd6:	0016      	.short	0x0016
 8002dd8:	fff6001f 	.word	0xfff6001f
 8002ddc:	fff6fff6 	.word	0xfff6fff6
 8002de0:	001ffff6 	.word	0x001ffff6
 8002de4:	fff6fff6 	.word	0xfff6fff6
 8002de8:	fff6fff6 	.word	0xfff6fff6
 8002dec:	003600a8 	.word	0x003600a8
 8002df0:	fff6009a 	.word	0xfff6009a
 8002df4:	00b9fff6 	.word	0x00b9fff6
 8002df8:	0036fff6 	.word	0x0036fff6
 8002dfc:	fff6fff6 	.word	0xfff6fff6
 8002e00:	009e      	.short	0x009e
 8002e02:	0026      	movs	r6, r4
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	3642      	adds	r6, #66	; 0x42
 8002e08:	1d11      	adds	r1, r2, #4
 8002e0a:	6019      	str	r1, [r3, #0]
 8002e0c:	6813      	ldr	r3, [r2, #0]
 8002e0e:	7033      	strb	r3, [r6, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0a7      	b.n	8002f64 <_printf_i+0x1cc>
 8002e14:	6808      	ldr	r0, [r1, #0]
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	1d0a      	adds	r2, r1, #4
 8002e1a:	0605      	lsls	r5, r0, #24
 8002e1c:	d50b      	bpl.n	8002e36 <_printf_i+0x9e>
 8002e1e:	680d      	ldr	r5, [r1, #0]
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	2d00      	cmp	r5, #0
 8002e24:	da03      	bge.n	8002e2e <_printf_i+0x96>
 8002e26:	232d      	movs	r3, #45	; 0x2d
 8002e28:	9a04      	ldr	r2, [sp, #16]
 8002e2a:	426d      	negs	r5, r5
 8002e2c:	7013      	strb	r3, [r2, #0]
 8002e2e:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <_printf_i+0x21c>)
 8002e30:	270a      	movs	r7, #10
 8002e32:	9303      	str	r3, [sp, #12]
 8002e34:	e01b      	b.n	8002e6e <_printf_i+0xd6>
 8002e36:	680d      	ldr	r5, [r1, #0]
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	0641      	lsls	r1, r0, #25
 8002e3c:	d5f1      	bpl.n	8002e22 <_printf_i+0x8a>
 8002e3e:	b22d      	sxth	r5, r5
 8002e40:	e7ef      	b.n	8002e22 <_printf_i+0x8a>
 8002e42:	680d      	ldr	r5, [r1, #0]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	1d08      	adds	r0, r1, #4
 8002e48:	6018      	str	r0, [r3, #0]
 8002e4a:	062e      	lsls	r6, r5, #24
 8002e4c:	d501      	bpl.n	8002e52 <_printf_i+0xba>
 8002e4e:	680d      	ldr	r5, [r1, #0]
 8002e50:	e003      	b.n	8002e5a <_printf_i+0xc2>
 8002e52:	066d      	lsls	r5, r5, #25
 8002e54:	d5fb      	bpl.n	8002e4e <_printf_i+0xb6>
 8002e56:	680d      	ldr	r5, [r1, #0]
 8002e58:	b2ad      	uxth	r5, r5
 8002e5a:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <_printf_i+0x21c>)
 8002e5c:	2708      	movs	r7, #8
 8002e5e:	9303      	str	r3, [sp, #12]
 8002e60:	2a6f      	cmp	r2, #111	; 0x6f
 8002e62:	d000      	beq.n	8002e66 <_printf_i+0xce>
 8002e64:	3702      	adds	r7, #2
 8002e66:	0023      	movs	r3, r4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	3343      	adds	r3, #67	; 0x43
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	6863      	ldr	r3, [r4, #4]
 8002e70:	60a3      	str	r3, [r4, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db03      	blt.n	8002e7e <_printf_i+0xe6>
 8002e76:	2204      	movs	r2, #4
 8002e78:	6821      	ldr	r1, [r4, #0]
 8002e7a:	4391      	bics	r1, r2
 8002e7c:	6021      	str	r1, [r4, #0]
 8002e7e:	2d00      	cmp	r5, #0
 8002e80:	d102      	bne.n	8002e88 <_printf_i+0xf0>
 8002e82:	9e04      	ldr	r6, [sp, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00c      	beq.n	8002ea2 <_printf_i+0x10a>
 8002e88:	9e04      	ldr	r6, [sp, #16]
 8002e8a:	0028      	movs	r0, r5
 8002e8c:	0039      	movs	r1, r7
 8002e8e:	f7fd f9c7 	bl	8000220 <__aeabi_uidivmod>
 8002e92:	9b03      	ldr	r3, [sp, #12]
 8002e94:	3e01      	subs	r6, #1
 8002e96:	5c5b      	ldrb	r3, [r3, r1]
 8002e98:	7033      	strb	r3, [r6, #0]
 8002e9a:	002b      	movs	r3, r5
 8002e9c:	0005      	movs	r5, r0
 8002e9e:	429f      	cmp	r7, r3
 8002ea0:	d9f3      	bls.n	8002e8a <_printf_i+0xf2>
 8002ea2:	2f08      	cmp	r7, #8
 8002ea4:	d109      	bne.n	8002eba <_printf_i+0x122>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	07db      	lsls	r3, r3, #31
 8002eaa:	d506      	bpl.n	8002eba <_printf_i+0x122>
 8002eac:	6863      	ldr	r3, [r4, #4]
 8002eae:	6922      	ldr	r2, [r4, #16]
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	dc02      	bgt.n	8002eba <_printf_i+0x122>
 8002eb4:	2330      	movs	r3, #48	; 0x30
 8002eb6:	3e01      	subs	r6, #1
 8002eb8:	7033      	strb	r3, [r6, #0]
 8002eba:	9b04      	ldr	r3, [sp, #16]
 8002ebc:	1b9b      	subs	r3, r3, r6
 8002ebe:	6123      	str	r3, [r4, #16]
 8002ec0:	9b07      	ldr	r3, [sp, #28]
 8002ec2:	0021      	movs	r1, r4
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	9805      	ldr	r0, [sp, #20]
 8002ec8:	9b06      	ldr	r3, [sp, #24]
 8002eca:	aa09      	add	r2, sp, #36	; 0x24
 8002ecc:	f7ff fef4 	bl	8002cb8 <_printf_common>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d14c      	bne.n	8002f6e <_printf_i+0x1d6>
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	4240      	negs	r0, r0
 8002ed8:	b00b      	add	sp, #44	; 0x2c
 8002eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002edc:	3145      	adds	r1, #69	; 0x45
 8002ede:	700a      	strb	r2, [r1, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <_printf_i+0x21c>)
 8002ee2:	9203      	str	r2, [sp, #12]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	6821      	ldr	r1, [r4, #0]
 8002ee8:	ca20      	ldmia	r2!, {r5}
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	0608      	lsls	r0, r1, #24
 8002eee:	d516      	bpl.n	8002f1e <_printf_i+0x186>
 8002ef0:	07cb      	lsls	r3, r1, #31
 8002ef2:	d502      	bpl.n	8002efa <_printf_i+0x162>
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	4319      	orrs	r1, r3
 8002ef8:	6021      	str	r1, [r4, #0]
 8002efa:	2710      	movs	r7, #16
 8002efc:	2d00      	cmp	r5, #0
 8002efe:	d1b2      	bne.n	8002e66 <_printf_i+0xce>
 8002f00:	2320      	movs	r3, #32
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	439a      	bics	r2, r3
 8002f06:	6022      	str	r2, [r4, #0]
 8002f08:	e7ad      	b.n	8002e66 <_printf_i+0xce>
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	6809      	ldr	r1, [r1, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	6022      	str	r2, [r4, #0]
 8002f12:	0022      	movs	r2, r4
 8002f14:	2178      	movs	r1, #120	; 0x78
 8002f16:	3245      	adds	r2, #69	; 0x45
 8002f18:	7011      	strb	r1, [r2, #0]
 8002f1a:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <_printf_i+0x220>)
 8002f1c:	e7e1      	b.n	8002ee2 <_printf_i+0x14a>
 8002f1e:	0648      	lsls	r0, r1, #25
 8002f20:	d5e6      	bpl.n	8002ef0 <_printf_i+0x158>
 8002f22:	b2ad      	uxth	r5, r5
 8002f24:	e7e4      	b.n	8002ef0 <_printf_i+0x158>
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	680d      	ldr	r5, [r1, #0]
 8002f2a:	1d10      	adds	r0, r2, #4
 8002f2c:	6949      	ldr	r1, [r1, #20]
 8002f2e:	6018      	str	r0, [r3, #0]
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	062e      	lsls	r6, r5, #24
 8002f34:	d501      	bpl.n	8002f3a <_printf_i+0x1a2>
 8002f36:	6019      	str	r1, [r3, #0]
 8002f38:	e002      	b.n	8002f40 <_printf_i+0x1a8>
 8002f3a:	066d      	lsls	r5, r5, #25
 8002f3c:	d5fb      	bpl.n	8002f36 <_printf_i+0x19e>
 8002f3e:	8019      	strh	r1, [r3, #0]
 8002f40:	2300      	movs	r3, #0
 8002f42:	9e04      	ldr	r6, [sp, #16]
 8002f44:	6123      	str	r3, [r4, #16]
 8002f46:	e7bb      	b.n	8002ec0 <_printf_i+0x128>
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	1d11      	adds	r1, r2, #4
 8002f4c:	6019      	str	r1, [r3, #0]
 8002f4e:	6816      	ldr	r6, [r2, #0]
 8002f50:	2100      	movs	r1, #0
 8002f52:	0030      	movs	r0, r6
 8002f54:	6862      	ldr	r2, [r4, #4]
 8002f56:	f000 facf 	bl	80034f8 <memchr>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d001      	beq.n	8002f62 <_printf_i+0x1ca>
 8002f5e:	1b80      	subs	r0, r0, r6
 8002f60:	6060      	str	r0, [r4, #4]
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	6123      	str	r3, [r4, #16]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9a04      	ldr	r2, [sp, #16]
 8002f6a:	7013      	strb	r3, [r2, #0]
 8002f6c:	e7a8      	b.n	8002ec0 <_printf_i+0x128>
 8002f6e:	6923      	ldr	r3, [r4, #16]
 8002f70:	0032      	movs	r2, r6
 8002f72:	9906      	ldr	r1, [sp, #24]
 8002f74:	9805      	ldr	r0, [sp, #20]
 8002f76:	9d07      	ldr	r5, [sp, #28]
 8002f78:	47a8      	blx	r5
 8002f7a:	1c43      	adds	r3, r0, #1
 8002f7c:	d0aa      	beq.n	8002ed4 <_printf_i+0x13c>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	079b      	lsls	r3, r3, #30
 8002f82:	d415      	bmi.n	8002fb0 <_printf_i+0x218>
 8002f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f86:	68e0      	ldr	r0, [r4, #12]
 8002f88:	4298      	cmp	r0, r3
 8002f8a:	daa5      	bge.n	8002ed8 <_printf_i+0x140>
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	e7a3      	b.n	8002ed8 <_printf_i+0x140>
 8002f90:	0022      	movs	r2, r4
 8002f92:	2301      	movs	r3, #1
 8002f94:	9906      	ldr	r1, [sp, #24]
 8002f96:	9805      	ldr	r0, [sp, #20]
 8002f98:	9e07      	ldr	r6, [sp, #28]
 8002f9a:	3219      	adds	r2, #25
 8002f9c:	47b0      	blx	r6
 8002f9e:	1c43      	adds	r3, r0, #1
 8002fa0:	d098      	beq.n	8002ed4 <_printf_i+0x13c>
 8002fa2:	3501      	adds	r5, #1
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	42ab      	cmp	r3, r5
 8002fac:	dcf0      	bgt.n	8002f90 <_printf_i+0x1f8>
 8002fae:	e7e9      	b.n	8002f84 <_printf_i+0x1ec>
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	e7f7      	b.n	8002fa4 <_printf_i+0x20c>
 8002fb4:	0800374d 	.word	0x0800374d
 8002fb8:	0800375e 	.word	0x0800375e

08002fbc <_sbrk_r>:
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	b570      	push	{r4, r5, r6, lr}
 8002fc0:	4d06      	ldr	r5, [pc, #24]	; (8002fdc <_sbrk_r+0x20>)
 8002fc2:	0004      	movs	r4, r0
 8002fc4:	0008      	movs	r0, r1
 8002fc6:	602b      	str	r3, [r5, #0]
 8002fc8:	f7fd fc24 	bl	8000814 <_sbrk>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d103      	bne.n	8002fd8 <_sbrk_r+0x1c>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d000      	beq.n	8002fd8 <_sbrk_r+0x1c>
 8002fd6:	6023      	str	r3, [r4, #0]
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000140 	.word	0x20000140

08002fe0 <__sread>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	000c      	movs	r4, r1
 8002fe4:	250e      	movs	r5, #14
 8002fe6:	5f49      	ldrsh	r1, [r1, r5]
 8002fe8:	f000 faec 	bl	80035c4 <_read_r>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	db03      	blt.n	8002ff8 <__sread+0x18>
 8002ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ff2:	181b      	adds	r3, r3, r0
 8002ff4:	6563      	str	r3, [r4, #84]	; 0x54
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	4a02      	ldr	r2, [pc, #8]	; (8003004 <__sread+0x24>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	81a3      	strh	r3, [r4, #12]
 8003000:	e7f9      	b.n	8002ff6 <__sread+0x16>
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	ffffefff 	.word	0xffffefff

08003008 <__swrite>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	001f      	movs	r7, r3
 800300c:	898b      	ldrh	r3, [r1, #12]
 800300e:	0005      	movs	r5, r0
 8003010:	000c      	movs	r4, r1
 8003012:	0016      	movs	r6, r2
 8003014:	05db      	lsls	r3, r3, #23
 8003016:	d505      	bpl.n	8003024 <__swrite+0x1c>
 8003018:	230e      	movs	r3, #14
 800301a:	5ec9      	ldrsh	r1, [r1, r3]
 800301c:	2200      	movs	r2, #0
 800301e:	2302      	movs	r3, #2
 8003020:	f000 f9ea 	bl	80033f8 <_lseek_r>
 8003024:	89a3      	ldrh	r3, [r4, #12]
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <__swrite+0x34>)
 8003028:	0028      	movs	r0, r5
 800302a:	4013      	ands	r3, r2
 800302c:	81a3      	strh	r3, [r4, #12]
 800302e:	0032      	movs	r2, r6
 8003030:	230e      	movs	r3, #14
 8003032:	5ee1      	ldrsh	r1, [r4, r3]
 8003034:	003b      	movs	r3, r7
 8003036:	f000 f875 	bl	8003124 <_write_r>
 800303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800303c:	ffffefff 	.word	0xffffefff

08003040 <__sseek>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	000c      	movs	r4, r1
 8003044:	250e      	movs	r5, #14
 8003046:	5f49      	ldrsh	r1, [r1, r5]
 8003048:	f000 f9d6 	bl	80033f8 <_lseek_r>
 800304c:	89a3      	ldrh	r3, [r4, #12]
 800304e:	1c42      	adds	r2, r0, #1
 8003050:	d103      	bne.n	800305a <__sseek+0x1a>
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <__sseek+0x28>)
 8003054:	4013      	ands	r3, r2
 8003056:	81a3      	strh	r3, [r4, #12]
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	2280      	movs	r2, #128	; 0x80
 800305c:	0152      	lsls	r2, r2, #5
 800305e:	4313      	orrs	r3, r2
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	6560      	str	r0, [r4, #84]	; 0x54
 8003064:	e7f8      	b.n	8003058 <__sseek+0x18>
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	ffffefff 	.word	0xffffefff

0800306c <__sclose>:
 800306c:	b510      	push	{r4, lr}
 800306e:	230e      	movs	r3, #14
 8003070:	5ec9      	ldrsh	r1, [r1, r3]
 8003072:	f000 f8e3 	bl	800323c <_close_r>
 8003076:	bd10      	pop	{r4, pc}

08003078 <__swbuf_r>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	0005      	movs	r5, r0
 800307c:	000e      	movs	r6, r1
 800307e:	0014      	movs	r4, r2
 8003080:	2800      	cmp	r0, #0
 8003082:	d004      	beq.n	800308e <__swbuf_r+0x16>
 8003084:	6983      	ldr	r3, [r0, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <__swbuf_r+0x16>
 800308a:	f7ff fb77 	bl	800277c <__sinit>
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <__swbuf_r+0xa0>)
 8003090:	429c      	cmp	r4, r3
 8003092:	d12e      	bne.n	80030f2 <__swbuf_r+0x7a>
 8003094:	686c      	ldr	r4, [r5, #4]
 8003096:	69a3      	ldr	r3, [r4, #24]
 8003098:	60a3      	str	r3, [r4, #8]
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	071b      	lsls	r3, r3, #28
 800309e:	d532      	bpl.n	8003106 <__swbuf_r+0x8e>
 80030a0:	6923      	ldr	r3, [r4, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02f      	beq.n	8003106 <__swbuf_r+0x8e>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	6922      	ldr	r2, [r4, #16]
 80030aa:	b2f7      	uxtb	r7, r6
 80030ac:	1a98      	subs	r0, r3, r2
 80030ae:	6963      	ldr	r3, [r4, #20]
 80030b0:	b2f6      	uxtb	r6, r6
 80030b2:	4283      	cmp	r3, r0
 80030b4:	dc05      	bgt.n	80030c2 <__swbuf_r+0x4a>
 80030b6:	0021      	movs	r1, r4
 80030b8:	0028      	movs	r0, r5
 80030ba:	f000 f95d 	bl	8003378 <_fflush_r>
 80030be:	2800      	cmp	r0, #0
 80030c0:	d127      	bne.n	8003112 <__swbuf_r+0x9a>
 80030c2:	68a3      	ldr	r3, [r4, #8]
 80030c4:	3001      	adds	r0, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	60a3      	str	r3, [r4, #8]
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	6022      	str	r2, [r4, #0]
 80030d0:	701f      	strb	r7, [r3, #0]
 80030d2:	6963      	ldr	r3, [r4, #20]
 80030d4:	4283      	cmp	r3, r0
 80030d6:	d004      	beq.n	80030e2 <__swbuf_r+0x6a>
 80030d8:	89a3      	ldrh	r3, [r4, #12]
 80030da:	07db      	lsls	r3, r3, #31
 80030dc:	d507      	bpl.n	80030ee <__swbuf_r+0x76>
 80030de:	2e0a      	cmp	r6, #10
 80030e0:	d105      	bne.n	80030ee <__swbuf_r+0x76>
 80030e2:	0021      	movs	r1, r4
 80030e4:	0028      	movs	r0, r5
 80030e6:	f000 f947 	bl	8003378 <_fflush_r>
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d111      	bne.n	8003112 <__swbuf_r+0x9a>
 80030ee:	0030      	movs	r0, r6
 80030f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <__swbuf_r+0xa4>)
 80030f4:	429c      	cmp	r4, r3
 80030f6:	d101      	bne.n	80030fc <__swbuf_r+0x84>
 80030f8:	68ac      	ldr	r4, [r5, #8]
 80030fa:	e7cc      	b.n	8003096 <__swbuf_r+0x1e>
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <__swbuf_r+0xa8>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d1c9      	bne.n	8003096 <__swbuf_r+0x1e>
 8003102:	68ec      	ldr	r4, [r5, #12]
 8003104:	e7c7      	b.n	8003096 <__swbuf_r+0x1e>
 8003106:	0021      	movs	r1, r4
 8003108:	0028      	movs	r0, r5
 800310a:	f000 f81f 	bl	800314c <__swsetup_r>
 800310e:	2800      	cmp	r0, #0
 8003110:	d0c9      	beq.n	80030a6 <__swbuf_r+0x2e>
 8003112:	2601      	movs	r6, #1
 8003114:	4276      	negs	r6, r6
 8003116:	e7ea      	b.n	80030ee <__swbuf_r+0x76>
 8003118:	080036fc 	.word	0x080036fc
 800311c:	0800371c 	.word	0x0800371c
 8003120:	080036dc 	.word	0x080036dc

08003124 <_write_r>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	0004      	movs	r4, r0
 8003128:	0008      	movs	r0, r1
 800312a:	0011      	movs	r1, r2
 800312c:	001a      	movs	r2, r3
 800312e:	2300      	movs	r3, #0
 8003130:	4d05      	ldr	r5, [pc, #20]	; (8003148 <_write_r+0x24>)
 8003132:	602b      	str	r3, [r5, #0]
 8003134:	f7fd fb26 	bl	8000784 <_write>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d103      	bne.n	8003144 <_write_r+0x20>
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d000      	beq.n	8003144 <_write_r+0x20>
 8003142:	6023      	str	r3, [r4, #0]
 8003144:	bd70      	pop	{r4, r5, r6, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	20000140 	.word	0x20000140

0800314c <__swsetup_r>:
 800314c:	4b37      	ldr	r3, [pc, #220]	; (800322c <__swsetup_r+0xe0>)
 800314e:	b570      	push	{r4, r5, r6, lr}
 8003150:	681d      	ldr	r5, [r3, #0]
 8003152:	0006      	movs	r6, r0
 8003154:	000c      	movs	r4, r1
 8003156:	2d00      	cmp	r5, #0
 8003158:	d005      	beq.n	8003166 <__swsetup_r+0x1a>
 800315a:	69ab      	ldr	r3, [r5, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <__swsetup_r+0x1a>
 8003160:	0028      	movs	r0, r5
 8003162:	f7ff fb0b 	bl	800277c <__sinit>
 8003166:	4b32      	ldr	r3, [pc, #200]	; (8003230 <__swsetup_r+0xe4>)
 8003168:	429c      	cmp	r4, r3
 800316a:	d10f      	bne.n	800318c <__swsetup_r+0x40>
 800316c:	686c      	ldr	r4, [r5, #4]
 800316e:	230c      	movs	r3, #12
 8003170:	5ee2      	ldrsh	r2, [r4, r3]
 8003172:	b293      	uxth	r3, r2
 8003174:	0711      	lsls	r1, r2, #28
 8003176:	d42d      	bmi.n	80031d4 <__swsetup_r+0x88>
 8003178:	06d9      	lsls	r1, r3, #27
 800317a:	d411      	bmi.n	80031a0 <__swsetup_r+0x54>
 800317c:	2309      	movs	r3, #9
 800317e:	2001      	movs	r0, #1
 8003180:	6033      	str	r3, [r6, #0]
 8003182:	3337      	adds	r3, #55	; 0x37
 8003184:	4313      	orrs	r3, r2
 8003186:	81a3      	strh	r3, [r4, #12]
 8003188:	4240      	negs	r0, r0
 800318a:	bd70      	pop	{r4, r5, r6, pc}
 800318c:	4b29      	ldr	r3, [pc, #164]	; (8003234 <__swsetup_r+0xe8>)
 800318e:	429c      	cmp	r4, r3
 8003190:	d101      	bne.n	8003196 <__swsetup_r+0x4a>
 8003192:	68ac      	ldr	r4, [r5, #8]
 8003194:	e7eb      	b.n	800316e <__swsetup_r+0x22>
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <__swsetup_r+0xec>)
 8003198:	429c      	cmp	r4, r3
 800319a:	d1e8      	bne.n	800316e <__swsetup_r+0x22>
 800319c:	68ec      	ldr	r4, [r5, #12]
 800319e:	e7e6      	b.n	800316e <__swsetup_r+0x22>
 80031a0:	075b      	lsls	r3, r3, #29
 80031a2:	d513      	bpl.n	80031cc <__swsetup_r+0x80>
 80031a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031a6:	2900      	cmp	r1, #0
 80031a8:	d008      	beq.n	80031bc <__swsetup_r+0x70>
 80031aa:	0023      	movs	r3, r4
 80031ac:	3344      	adds	r3, #68	; 0x44
 80031ae:	4299      	cmp	r1, r3
 80031b0:	d002      	beq.n	80031b8 <__swsetup_r+0x6c>
 80031b2:	0030      	movs	r0, r6
 80031b4:	f000 f9bc 	bl	8003530 <_free_r>
 80031b8:	2300      	movs	r3, #0
 80031ba:	6363      	str	r3, [r4, #52]	; 0x34
 80031bc:	2224      	movs	r2, #36	; 0x24
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	4393      	bics	r3, r2
 80031c2:	81a3      	strh	r3, [r4, #12]
 80031c4:	2300      	movs	r3, #0
 80031c6:	6063      	str	r3, [r4, #4]
 80031c8:	6923      	ldr	r3, [r4, #16]
 80031ca:	6023      	str	r3, [r4, #0]
 80031cc:	2308      	movs	r3, #8
 80031ce:	89a2      	ldrh	r2, [r4, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	81a3      	strh	r3, [r4, #12]
 80031d4:	6923      	ldr	r3, [r4, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10b      	bne.n	80031f2 <__swsetup_r+0xa6>
 80031da:	21a0      	movs	r1, #160	; 0xa0
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	0089      	lsls	r1, r1, #2
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	400b      	ands	r3, r1
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <__swsetup_r+0xa6>
 80031ea:	0021      	movs	r1, r4
 80031ec:	0030      	movs	r0, r6
 80031ee:	f000 f93f 	bl	8003470 <__smakebuf_r>
 80031f2:	220c      	movs	r2, #12
 80031f4:	5ea3      	ldrsh	r3, [r4, r2]
 80031f6:	2001      	movs	r0, #1
 80031f8:	001a      	movs	r2, r3
 80031fa:	b299      	uxth	r1, r3
 80031fc:	4002      	ands	r2, r0
 80031fe:	4203      	tst	r3, r0
 8003200:	d00f      	beq.n	8003222 <__swsetup_r+0xd6>
 8003202:	2200      	movs	r2, #0
 8003204:	60a2      	str	r2, [r4, #8]
 8003206:	6962      	ldr	r2, [r4, #20]
 8003208:	4252      	negs	r2, r2
 800320a:	61a2      	str	r2, [r4, #24]
 800320c:	2000      	movs	r0, #0
 800320e:	6922      	ldr	r2, [r4, #16]
 8003210:	4282      	cmp	r2, r0
 8003212:	d1ba      	bne.n	800318a <__swsetup_r+0x3e>
 8003214:	060a      	lsls	r2, r1, #24
 8003216:	d5b8      	bpl.n	800318a <__swsetup_r+0x3e>
 8003218:	2240      	movs	r2, #64	; 0x40
 800321a:	4313      	orrs	r3, r2
 800321c:	81a3      	strh	r3, [r4, #12]
 800321e:	3801      	subs	r0, #1
 8003220:	e7b3      	b.n	800318a <__swsetup_r+0x3e>
 8003222:	0788      	lsls	r0, r1, #30
 8003224:	d400      	bmi.n	8003228 <__swsetup_r+0xdc>
 8003226:	6962      	ldr	r2, [r4, #20]
 8003228:	60a2      	str	r2, [r4, #8]
 800322a:	e7ef      	b.n	800320c <__swsetup_r+0xc0>
 800322c:	2000000c 	.word	0x2000000c
 8003230:	080036fc 	.word	0x080036fc
 8003234:	0800371c 	.word	0x0800371c
 8003238:	080036dc 	.word	0x080036dc

0800323c <_close_r>:
 800323c:	2300      	movs	r3, #0
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	4d06      	ldr	r5, [pc, #24]	; (800325c <_close_r+0x20>)
 8003242:	0004      	movs	r4, r0
 8003244:	0008      	movs	r0, r1
 8003246:	602b      	str	r3, [r5, #0]
 8003248:	f7fd fab8 	bl	80007bc <_close>
 800324c:	1c43      	adds	r3, r0, #1
 800324e:	d103      	bne.n	8003258 <_close_r+0x1c>
 8003250:	682b      	ldr	r3, [r5, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d000      	beq.n	8003258 <_close_r+0x1c>
 8003256:	6023      	str	r3, [r4, #0]
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	20000140 	.word	0x20000140

08003260 <__sflush_r>:
 8003260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003262:	898b      	ldrh	r3, [r1, #12]
 8003264:	0005      	movs	r5, r0
 8003266:	000c      	movs	r4, r1
 8003268:	071a      	lsls	r2, r3, #28
 800326a:	d45f      	bmi.n	800332c <__sflush_r+0xcc>
 800326c:	684a      	ldr	r2, [r1, #4]
 800326e:	2a00      	cmp	r2, #0
 8003270:	dc04      	bgt.n	800327c <__sflush_r+0x1c>
 8003272:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003274:	2a00      	cmp	r2, #0
 8003276:	dc01      	bgt.n	800327c <__sflush_r+0x1c>
 8003278:	2000      	movs	r0, #0
 800327a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800327c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800327e:	2f00      	cmp	r7, #0
 8003280:	d0fa      	beq.n	8003278 <__sflush_r+0x18>
 8003282:	2200      	movs	r2, #0
 8003284:	2180      	movs	r1, #128	; 0x80
 8003286:	682e      	ldr	r6, [r5, #0]
 8003288:	602a      	str	r2, [r5, #0]
 800328a:	001a      	movs	r2, r3
 800328c:	0149      	lsls	r1, r1, #5
 800328e:	400a      	ands	r2, r1
 8003290:	420b      	tst	r3, r1
 8003292:	d034      	beq.n	80032fe <__sflush_r+0x9e>
 8003294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003296:	89a3      	ldrh	r3, [r4, #12]
 8003298:	075b      	lsls	r3, r3, #29
 800329a:	d506      	bpl.n	80032aa <__sflush_r+0x4a>
 800329c:	6863      	ldr	r3, [r4, #4]
 800329e:	1ac0      	subs	r0, r0, r3
 80032a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <__sflush_r+0x4a>
 80032a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032a8:	1ac0      	subs	r0, r0, r3
 80032aa:	0002      	movs	r2, r0
 80032ac:	6a21      	ldr	r1, [r4, #32]
 80032ae:	2300      	movs	r3, #0
 80032b0:	0028      	movs	r0, r5
 80032b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80032b4:	47b8      	blx	r7
 80032b6:	89a1      	ldrh	r1, [r4, #12]
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d106      	bne.n	80032ca <__sflush_r+0x6a>
 80032bc:	682b      	ldr	r3, [r5, #0]
 80032be:	2b1d      	cmp	r3, #29
 80032c0:	d831      	bhi.n	8003326 <__sflush_r+0xc6>
 80032c2:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <__sflush_r+0x114>)
 80032c4:	40da      	lsrs	r2, r3
 80032c6:	07d3      	lsls	r3, r2, #31
 80032c8:	d52d      	bpl.n	8003326 <__sflush_r+0xc6>
 80032ca:	2300      	movs	r3, #0
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	6923      	ldr	r3, [r4, #16]
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	04cb      	lsls	r3, r1, #19
 80032d4:	d505      	bpl.n	80032e2 <__sflush_r+0x82>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	d102      	bne.n	80032e0 <__sflush_r+0x80>
 80032da:	682b      	ldr	r3, [r5, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d100      	bne.n	80032e2 <__sflush_r+0x82>
 80032e0:	6560      	str	r0, [r4, #84]	; 0x54
 80032e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e4:	602e      	str	r6, [r5, #0]
 80032e6:	2900      	cmp	r1, #0
 80032e8:	d0c6      	beq.n	8003278 <__sflush_r+0x18>
 80032ea:	0023      	movs	r3, r4
 80032ec:	3344      	adds	r3, #68	; 0x44
 80032ee:	4299      	cmp	r1, r3
 80032f0:	d002      	beq.n	80032f8 <__sflush_r+0x98>
 80032f2:	0028      	movs	r0, r5
 80032f4:	f000 f91c 	bl	8003530 <_free_r>
 80032f8:	2000      	movs	r0, #0
 80032fa:	6360      	str	r0, [r4, #52]	; 0x34
 80032fc:	e7bd      	b.n	800327a <__sflush_r+0x1a>
 80032fe:	2301      	movs	r3, #1
 8003300:	0028      	movs	r0, r5
 8003302:	6a21      	ldr	r1, [r4, #32]
 8003304:	47b8      	blx	r7
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	d1c5      	bne.n	8003296 <__sflush_r+0x36>
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0c2      	beq.n	8003296 <__sflush_r+0x36>
 8003310:	2b1d      	cmp	r3, #29
 8003312:	d001      	beq.n	8003318 <__sflush_r+0xb8>
 8003314:	2b16      	cmp	r3, #22
 8003316:	d101      	bne.n	800331c <__sflush_r+0xbc>
 8003318:	602e      	str	r6, [r5, #0]
 800331a:	e7ad      	b.n	8003278 <__sflush_r+0x18>
 800331c:	2340      	movs	r3, #64	; 0x40
 800331e:	89a2      	ldrh	r2, [r4, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	e7a9      	b.n	800327a <__sflush_r+0x1a>
 8003326:	2340      	movs	r3, #64	; 0x40
 8003328:	430b      	orrs	r3, r1
 800332a:	e7fa      	b.n	8003322 <__sflush_r+0xc2>
 800332c:	690f      	ldr	r7, [r1, #16]
 800332e:	2f00      	cmp	r7, #0
 8003330:	d0a2      	beq.n	8003278 <__sflush_r+0x18>
 8003332:	680a      	ldr	r2, [r1, #0]
 8003334:	600f      	str	r7, [r1, #0]
 8003336:	1bd2      	subs	r2, r2, r7
 8003338:	9201      	str	r2, [sp, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	079b      	lsls	r3, r3, #30
 800333e:	d100      	bne.n	8003342 <__sflush_r+0xe2>
 8003340:	694a      	ldr	r2, [r1, #20]
 8003342:	60a2      	str	r2, [r4, #8]
 8003344:	9b01      	ldr	r3, [sp, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	dc00      	bgt.n	800334c <__sflush_r+0xec>
 800334a:	e795      	b.n	8003278 <__sflush_r+0x18>
 800334c:	003a      	movs	r2, r7
 800334e:	0028      	movs	r0, r5
 8003350:	9b01      	ldr	r3, [sp, #4]
 8003352:	6a21      	ldr	r1, [r4, #32]
 8003354:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003356:	47b0      	blx	r6
 8003358:	2800      	cmp	r0, #0
 800335a:	dc06      	bgt.n	800336a <__sflush_r+0x10a>
 800335c:	2340      	movs	r3, #64	; 0x40
 800335e:	2001      	movs	r0, #1
 8003360:	89a2      	ldrh	r2, [r4, #12]
 8003362:	4240      	negs	r0, r0
 8003364:	4313      	orrs	r3, r2
 8003366:	81a3      	strh	r3, [r4, #12]
 8003368:	e787      	b.n	800327a <__sflush_r+0x1a>
 800336a:	9b01      	ldr	r3, [sp, #4]
 800336c:	183f      	adds	r7, r7, r0
 800336e:	1a1b      	subs	r3, r3, r0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	e7e7      	b.n	8003344 <__sflush_r+0xe4>
 8003374:	20400001 	.word	0x20400001

08003378 <_fflush_r>:
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	0005      	movs	r5, r0
 800337e:	000c      	movs	r4, r1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <_fflush_r+0x12>
 8003384:	2500      	movs	r5, #0
 8003386:	0028      	movs	r0, r5
 8003388:	bd70      	pop	{r4, r5, r6, pc}
 800338a:	2800      	cmp	r0, #0
 800338c:	d004      	beq.n	8003398 <_fflush_r+0x20>
 800338e:	6983      	ldr	r3, [r0, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <_fflush_r+0x20>
 8003394:	f7ff f9f2 	bl	800277c <__sinit>
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <_fflush_r+0x74>)
 800339a:	429c      	cmp	r4, r3
 800339c:	d11b      	bne.n	80033d6 <_fflush_r+0x5e>
 800339e:	686c      	ldr	r4, [r5, #4]
 80033a0:	220c      	movs	r2, #12
 80033a2:	5ea3      	ldrsh	r3, [r4, r2]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ed      	beq.n	8003384 <_fflush_r+0xc>
 80033a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033aa:	07d2      	lsls	r2, r2, #31
 80033ac:	d404      	bmi.n	80033b8 <_fflush_r+0x40>
 80033ae:	059b      	lsls	r3, r3, #22
 80033b0:	d402      	bmi.n	80033b8 <_fflush_r+0x40>
 80033b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033b4:	f7ff fa83 	bl	80028be <__retarget_lock_acquire_recursive>
 80033b8:	0028      	movs	r0, r5
 80033ba:	0021      	movs	r1, r4
 80033bc:	f7ff ff50 	bl	8003260 <__sflush_r>
 80033c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033c2:	0005      	movs	r5, r0
 80033c4:	07db      	lsls	r3, r3, #31
 80033c6:	d4de      	bmi.n	8003386 <_fflush_r+0xe>
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	059b      	lsls	r3, r3, #22
 80033cc:	d4db      	bmi.n	8003386 <_fflush_r+0xe>
 80033ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033d0:	f7ff fa76 	bl	80028c0 <__retarget_lock_release_recursive>
 80033d4:	e7d7      	b.n	8003386 <_fflush_r+0xe>
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <_fflush_r+0x78>)
 80033d8:	429c      	cmp	r4, r3
 80033da:	d101      	bne.n	80033e0 <_fflush_r+0x68>
 80033dc:	68ac      	ldr	r4, [r5, #8]
 80033de:	e7df      	b.n	80033a0 <_fflush_r+0x28>
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <_fflush_r+0x7c>)
 80033e2:	429c      	cmp	r4, r3
 80033e4:	d1dc      	bne.n	80033a0 <_fflush_r+0x28>
 80033e6:	68ec      	ldr	r4, [r5, #12]
 80033e8:	e7da      	b.n	80033a0 <_fflush_r+0x28>
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	080036fc 	.word	0x080036fc
 80033f0:	0800371c 	.word	0x0800371c
 80033f4:	080036dc 	.word	0x080036dc

080033f8 <_lseek_r>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	0004      	movs	r4, r0
 80033fc:	0008      	movs	r0, r1
 80033fe:	0011      	movs	r1, r2
 8003400:	001a      	movs	r2, r3
 8003402:	2300      	movs	r3, #0
 8003404:	4d05      	ldr	r5, [pc, #20]	; (800341c <_lseek_r+0x24>)
 8003406:	602b      	str	r3, [r5, #0]
 8003408:	f7fd f9f9 	bl	80007fe <_lseek>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d103      	bne.n	8003418 <_lseek_r+0x20>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d000      	beq.n	8003418 <_lseek_r+0x20>
 8003416:	6023      	str	r3, [r4, #0]
 8003418:	bd70      	pop	{r4, r5, r6, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	20000140 	.word	0x20000140

08003420 <__swhatbuf_r>:
 8003420:	b570      	push	{r4, r5, r6, lr}
 8003422:	000e      	movs	r6, r1
 8003424:	001d      	movs	r5, r3
 8003426:	230e      	movs	r3, #14
 8003428:	5ec9      	ldrsh	r1, [r1, r3]
 800342a:	0014      	movs	r4, r2
 800342c:	b096      	sub	sp, #88	; 0x58
 800342e:	2900      	cmp	r1, #0
 8003430:	da08      	bge.n	8003444 <__swhatbuf_r+0x24>
 8003432:	220c      	movs	r2, #12
 8003434:	5eb3      	ldrsh	r3, [r6, r2]
 8003436:	2200      	movs	r2, #0
 8003438:	602a      	str	r2, [r5, #0]
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	d411      	bmi.n	8003462 <__swhatbuf_r+0x42>
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	e00f      	b.n	8003464 <__swhatbuf_r+0x44>
 8003444:	466a      	mov	r2, sp
 8003446:	f000 f8d1 	bl	80035ec <_fstat_r>
 800344a:	2800      	cmp	r0, #0
 800344c:	dbf1      	blt.n	8003432 <__swhatbuf_r+0x12>
 800344e:	23f0      	movs	r3, #240	; 0xf0
 8003450:	9901      	ldr	r1, [sp, #4]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	4019      	ands	r1, r3
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <__swhatbuf_r+0x4c>)
 8003458:	18c9      	adds	r1, r1, r3
 800345a:	424b      	negs	r3, r1
 800345c:	4159      	adcs	r1, r3
 800345e:	6029      	str	r1, [r5, #0]
 8003460:	e7ed      	b.n	800343e <__swhatbuf_r+0x1e>
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	2000      	movs	r0, #0
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	b016      	add	sp, #88	; 0x58
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	ffffe000 	.word	0xffffe000

08003470 <__smakebuf_r>:
 8003470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003472:	2602      	movs	r6, #2
 8003474:	898b      	ldrh	r3, [r1, #12]
 8003476:	0005      	movs	r5, r0
 8003478:	000c      	movs	r4, r1
 800347a:	4233      	tst	r3, r6
 800347c:	d006      	beq.n	800348c <__smakebuf_r+0x1c>
 800347e:	0023      	movs	r3, r4
 8003480:	3347      	adds	r3, #71	; 0x47
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	6123      	str	r3, [r4, #16]
 8003486:	2301      	movs	r3, #1
 8003488:	6163      	str	r3, [r4, #20]
 800348a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800348c:	466a      	mov	r2, sp
 800348e:	ab01      	add	r3, sp, #4
 8003490:	f7ff ffc6 	bl	8003420 <__swhatbuf_r>
 8003494:	9900      	ldr	r1, [sp, #0]
 8003496:	0007      	movs	r7, r0
 8003498:	0028      	movs	r0, r5
 800349a:	f7ff fa35 	bl	8002908 <_malloc_r>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d108      	bne.n	80034b4 <__smakebuf_r+0x44>
 80034a2:	220c      	movs	r2, #12
 80034a4:	5ea3      	ldrsh	r3, [r4, r2]
 80034a6:	059a      	lsls	r2, r3, #22
 80034a8:	d4ef      	bmi.n	800348a <__smakebuf_r+0x1a>
 80034aa:	2203      	movs	r2, #3
 80034ac:	4393      	bics	r3, r2
 80034ae:	431e      	orrs	r6, r3
 80034b0:	81a6      	strh	r6, [r4, #12]
 80034b2:	e7e4      	b.n	800347e <__smakebuf_r+0xe>
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <__smakebuf_r+0x84>)
 80034b6:	62ab      	str	r3, [r5, #40]	; 0x28
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	89a2      	ldrh	r2, [r4, #12]
 80034bc:	6020      	str	r0, [r4, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	9b00      	ldr	r3, [sp, #0]
 80034c4:	6120      	str	r0, [r4, #16]
 80034c6:	6163      	str	r3, [r4, #20]
 80034c8:	9b01      	ldr	r3, [sp, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <__smakebuf_r+0x7a>
 80034ce:	0028      	movs	r0, r5
 80034d0:	230e      	movs	r3, #14
 80034d2:	5ee1      	ldrsh	r1, [r4, r3]
 80034d4:	f000 f89c 	bl	8003610 <_isatty_r>
 80034d8:	2800      	cmp	r0, #0
 80034da:	d006      	beq.n	80034ea <__smakebuf_r+0x7a>
 80034dc:	2203      	movs	r2, #3
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	4393      	bics	r3, r2
 80034e2:	001a      	movs	r2, r3
 80034e4:	2301      	movs	r3, #1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	89a0      	ldrh	r0, [r4, #12]
 80034ec:	4307      	orrs	r7, r0
 80034ee:	81a7      	strh	r7, [r4, #12]
 80034f0:	e7cb      	b.n	800348a <__smakebuf_r+0x1a>
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	08002701 	.word	0x08002701

080034f8 <memchr>:
 80034f8:	b2c9      	uxtb	r1, r1
 80034fa:	1882      	adds	r2, r0, r2
 80034fc:	4290      	cmp	r0, r2
 80034fe:	d101      	bne.n	8003504 <memchr+0xc>
 8003500:	2000      	movs	r0, #0
 8003502:	4770      	bx	lr
 8003504:	7803      	ldrb	r3, [r0, #0]
 8003506:	428b      	cmp	r3, r1
 8003508:	d0fb      	beq.n	8003502 <memchr+0xa>
 800350a:	3001      	adds	r0, #1
 800350c:	e7f6      	b.n	80034fc <memchr+0x4>
	...

08003510 <__malloc_lock>:
 8003510:	b510      	push	{r4, lr}
 8003512:	4802      	ldr	r0, [pc, #8]	; (800351c <__malloc_lock+0xc>)
 8003514:	f7ff f9d3 	bl	80028be <__retarget_lock_acquire_recursive>
 8003518:	bd10      	pop	{r4, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	20000134 	.word	0x20000134

08003520 <__malloc_unlock>:
 8003520:	b510      	push	{r4, lr}
 8003522:	4802      	ldr	r0, [pc, #8]	; (800352c <__malloc_unlock+0xc>)
 8003524:	f7ff f9cc 	bl	80028c0 <__retarget_lock_release_recursive>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	20000134 	.word	0x20000134

08003530 <_free_r>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	0005      	movs	r5, r0
 8003534:	2900      	cmp	r1, #0
 8003536:	d010      	beq.n	800355a <_free_r+0x2a>
 8003538:	1f0c      	subs	r4, r1, #4
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	da00      	bge.n	8003542 <_free_r+0x12>
 8003540:	18e4      	adds	r4, r4, r3
 8003542:	0028      	movs	r0, r5
 8003544:	f7ff ffe4 	bl	8003510 <__malloc_lock>
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <_free_r+0x90>)
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <_free_r+0x2c>
 8003550:	6063      	str	r3, [r4, #4]
 8003552:	6014      	str	r4, [r2, #0]
 8003554:	0028      	movs	r0, r5
 8003556:	f7ff ffe3 	bl	8003520 <__malloc_unlock>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	42a3      	cmp	r3, r4
 800355e:	d908      	bls.n	8003572 <_free_r+0x42>
 8003560:	6821      	ldr	r1, [r4, #0]
 8003562:	1860      	adds	r0, r4, r1
 8003564:	4283      	cmp	r3, r0
 8003566:	d1f3      	bne.n	8003550 <_free_r+0x20>
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	1841      	adds	r1, r0, r1
 800356e:	6021      	str	r1, [r4, #0]
 8003570:	e7ee      	b.n	8003550 <_free_r+0x20>
 8003572:	001a      	movs	r2, r3
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <_free_r+0x4e>
 800357a:	42a3      	cmp	r3, r4
 800357c:	d9f9      	bls.n	8003572 <_free_r+0x42>
 800357e:	6811      	ldr	r1, [r2, #0]
 8003580:	1850      	adds	r0, r2, r1
 8003582:	42a0      	cmp	r0, r4
 8003584:	d10b      	bne.n	800359e <_free_r+0x6e>
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	1809      	adds	r1, r1, r0
 800358a:	1850      	adds	r0, r2, r1
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	4283      	cmp	r3, r0
 8003590:	d1e0      	bne.n	8003554 <_free_r+0x24>
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	1841      	adds	r1, r0, r1
 8003598:	6011      	str	r1, [r2, #0]
 800359a:	6053      	str	r3, [r2, #4]
 800359c:	e7da      	b.n	8003554 <_free_r+0x24>
 800359e:	42a0      	cmp	r0, r4
 80035a0:	d902      	bls.n	80035a8 <_free_r+0x78>
 80035a2:	230c      	movs	r3, #12
 80035a4:	602b      	str	r3, [r5, #0]
 80035a6:	e7d5      	b.n	8003554 <_free_r+0x24>
 80035a8:	6821      	ldr	r1, [r4, #0]
 80035aa:	1860      	adds	r0, r4, r1
 80035ac:	4283      	cmp	r3, r0
 80035ae:	d103      	bne.n	80035b8 <_free_r+0x88>
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	1841      	adds	r1, r0, r1
 80035b6:	6021      	str	r1, [r4, #0]
 80035b8:	6063      	str	r3, [r4, #4]
 80035ba:	6054      	str	r4, [r2, #4]
 80035bc:	e7ca      	b.n	8003554 <_free_r+0x24>
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	20000138 	.word	0x20000138

080035c4 <_read_r>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	0004      	movs	r4, r0
 80035c8:	0008      	movs	r0, r1
 80035ca:	0011      	movs	r1, r2
 80035cc:	001a      	movs	r2, r3
 80035ce:	2300      	movs	r3, #0
 80035d0:	4d05      	ldr	r5, [pc, #20]	; (80035e8 <_read_r+0x24>)
 80035d2:	602b      	str	r3, [r5, #0]
 80035d4:	f7fd f8b9 	bl	800074a <_read>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d103      	bne.n	80035e4 <_read_r+0x20>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d000      	beq.n	80035e4 <_read_r+0x20>
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	bd70      	pop	{r4, r5, r6, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	20000140 	.word	0x20000140

080035ec <_fstat_r>:
 80035ec:	2300      	movs	r3, #0
 80035ee:	b570      	push	{r4, r5, r6, lr}
 80035f0:	4d06      	ldr	r5, [pc, #24]	; (800360c <_fstat_r+0x20>)
 80035f2:	0004      	movs	r4, r0
 80035f4:	0008      	movs	r0, r1
 80035f6:	0011      	movs	r1, r2
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	f7fd f8e9 	bl	80007d0 <_fstat>
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d103      	bne.n	800360a <_fstat_r+0x1e>
 8003602:	682b      	ldr	r3, [r5, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d000      	beq.n	800360a <_fstat_r+0x1e>
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	20000140 	.word	0x20000140

08003610 <_isatty_r>:
 8003610:	2300      	movs	r3, #0
 8003612:	b570      	push	{r4, r5, r6, lr}
 8003614:	4d06      	ldr	r5, [pc, #24]	; (8003630 <_isatty_r+0x20>)
 8003616:	0004      	movs	r4, r0
 8003618:	0008      	movs	r0, r1
 800361a:	602b      	str	r3, [r5, #0]
 800361c:	f7fd f8e6 	bl	80007ec <_isatty>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d103      	bne.n	800362c <_isatty_r+0x1c>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d000      	beq.n	800362c <_isatty_r+0x1c>
 800362a:	6023      	str	r3, [r4, #0]
 800362c:	bd70      	pop	{r4, r5, r6, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	20000140 	.word	0x20000140

08003634 <_init>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr

08003640 <_fini>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr
